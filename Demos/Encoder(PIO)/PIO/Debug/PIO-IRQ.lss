
PIO-IRQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046e4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004046e4  004046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  004046ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000188  204009b8  004050a4  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400b40  0040522c  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402b40  0040722c  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000ecfa  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001ce7  00000000  00000000  0002f739  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000454c  00000000  00000000  00031420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007d8  00000000  00000000  0003596c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  00036144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001d2b2  00000000  00000000  0003685c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008cfc  00000000  00000000  00053b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008bfb9  00000000  00000000  0005c80a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002ca4  00000000  00000000  000e87c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 2b 40 20 55 11 40 00 05 12 40 00 05 12 40 00     @+@ U.@...@...@.
  400010:	05 12 40 00 05 12 40 00 05 12 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	05 12 40 00 05 12 40 00 00 00 00 00 05 12 40 00     ..@...@.......@.
  40003c:	05 12 40 00 05 12 40 00 05 12 40 00 05 12 40 00     ..@...@...@...@.
  40004c:	05 12 40 00 05 12 40 00 05 12 40 00 05 12 40 00     ..@...@...@...@.
  40005c:	05 12 40 00 05 12 40 00 00 00 00 00 0d 0d 40 00     ..@...@.......@.
  40006c:	25 0d 40 00 3d 0d 40 00 05 12 40 00 05 12 40 00     %.@.=.@...@...@.
  40007c:	05 12 40 00 55 0d 40 00 6d 0d 40 00 05 12 40 00     ..@.U.@.m.@...@.
  40008c:	05 12 40 00 05 12 40 00 05 12 40 00 05 12 40 00     ..@...@...@...@.
  40009c:	05 12 40 00 05 12 40 00 05 12 40 00 05 12 40 00     ..@...@...@...@.
  4000ac:	05 12 40 00 05 12 40 00 49 07 40 00 05 12 40 00     ..@...@.I.@...@.
  4000bc:	05 12 40 00 05 12 40 00 05 12 40 00 05 12 40 00     ..@...@...@...@.
  4000cc:	05 12 40 00 00 00 00 00 05 12 40 00 00 00 00 00     ..@.......@.....
  4000dc:	05 12 40 00 61 07 40 00 05 12 40 00 05 12 40 00     ..@.a.@...@...@.
  4000ec:	05 12 40 00 05 12 40 00 05 12 40 00 05 12 40 00     ..@...@...@...@.
  4000fc:	05 12 40 00 05 12 40 00 05 12 40 00 05 12 40 00     ..@...@...@...@.
  40010c:	05 12 40 00 05 12 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 05 12 40 00 05 12 40 00 05 12 40 00     ......@...@...@.
  40012c:	05 12 40 00 05 12 40 00 00 00 00 00 05 12 40 00     ..@...@.......@.
  40013c:	05 12 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	004046ec 	.word	0x004046ec

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004046ec 	.word	0x004046ec
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	004046ec 	.word	0x004046ec
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400e85 	.word	0x00400e85
  40022c:	00400ef1 	.word	0x00400ef1
  400230:	00400f61 	.word	0x00400f61

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400ebd 	.word	0x00400ebd
  4002a0:	00400fd9 	.word	0x00400fd9

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400ff5 	.word	0x00400ff5
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00401011 	.word	0x00401011
  400418:	0040102d 	.word	0x0040102d

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00401375 	.word	0x00401375
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400d85 	.word	0x00400d85
  40051c:	00400e01 	.word	0x00400e01
  400520:	0040120d 	.word	0x0040120d
  400524:	00400499 	.word	0x00400499

00400528 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400528:	b580      	push	{r7, lr}
  40052a:	b086      	sub	sp, #24
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400534:	2300      	movs	r3, #0
  400536:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400538:	68fb      	ldr	r3, [r7, #12]
  40053a:	2b00      	cmp	r3, #0
  40053c:	d012      	beq.n	400564 <_read+0x3c>
		return -1;
  40053e:	f04f 33ff 	mov.w	r3, #4294967295
  400542:	e013      	b.n	40056c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400544:	4b0b      	ldr	r3, [pc, #44]	; (400574 <_read+0x4c>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	4a0b      	ldr	r2, [pc, #44]	; (400578 <_read+0x50>)
  40054a:	6812      	ldr	r2, [r2, #0]
  40054c:	68b9      	ldr	r1, [r7, #8]
  40054e:	4610      	mov	r0, r2
  400550:	4798      	blx	r3
		ptr++;
  400552:	68bb      	ldr	r3, [r7, #8]
  400554:	3301      	adds	r3, #1
  400556:	60bb      	str	r3, [r7, #8]
		nChars++;
  400558:	697b      	ldr	r3, [r7, #20]
  40055a:	3301      	adds	r3, #1
  40055c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	3b01      	subs	r3, #1
  400562:	607b      	str	r3, [r7, #4]
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	2b00      	cmp	r3, #0
  400568:	dcec      	bgt.n	400544 <_read+0x1c>
	}
	return nChars;
  40056a:	697b      	ldr	r3, [r7, #20]
}
  40056c:	4618      	mov	r0, r3
  40056e:	3718      	adds	r7, #24
  400570:	46bd      	mov	sp, r7
  400572:	bd80      	pop	{r7, pc}
  400574:	20400a80 	.word	0x20400a80
  400578:	20400a88 	.word	0x20400a88

0040057c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40057c:	b580      	push	{r7, lr}
  40057e:	b086      	sub	sp, #24
  400580:	af00      	add	r7, sp, #0
  400582:	60f8      	str	r0, [r7, #12]
  400584:	60b9      	str	r1, [r7, #8]
  400586:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400588:	2300      	movs	r3, #0
  40058a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	2b01      	cmp	r3, #1
  400590:	d01e      	beq.n	4005d0 <_write+0x54>
  400592:	68fb      	ldr	r3, [r7, #12]
  400594:	2b02      	cmp	r3, #2
  400596:	d01b      	beq.n	4005d0 <_write+0x54>
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	2b03      	cmp	r3, #3
  40059c:	d018      	beq.n	4005d0 <_write+0x54>
		return -1;
  40059e:	f04f 33ff 	mov.w	r3, #4294967295
  4005a2:	e019      	b.n	4005d8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005a4:	4b0e      	ldr	r3, [pc, #56]	; (4005e0 <_write+0x64>)
  4005a6:	681a      	ldr	r2, [r3, #0]
  4005a8:	4b0e      	ldr	r3, [pc, #56]	; (4005e4 <_write+0x68>)
  4005aa:	6818      	ldr	r0, [r3, #0]
  4005ac:	68bb      	ldr	r3, [r7, #8]
  4005ae:	1c59      	adds	r1, r3, #1
  4005b0:	60b9      	str	r1, [r7, #8]
  4005b2:	781b      	ldrb	r3, [r3, #0]
  4005b4:	4619      	mov	r1, r3
  4005b6:	4790      	blx	r2
  4005b8:	4603      	mov	r3, r0
  4005ba:	2b00      	cmp	r3, #0
  4005bc:	da02      	bge.n	4005c4 <_write+0x48>
			return -1;
  4005be:	f04f 33ff 	mov.w	r3, #4294967295
  4005c2:	e009      	b.n	4005d8 <_write+0x5c>
		}
		++nChars;
  4005c4:	697b      	ldr	r3, [r7, #20]
  4005c6:	3301      	adds	r3, #1
  4005c8:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	3b01      	subs	r3, #1
  4005ce:	607b      	str	r3, [r7, #4]
  4005d0:	687b      	ldr	r3, [r7, #4]
  4005d2:	2b00      	cmp	r3, #0
  4005d4:	d1e6      	bne.n	4005a4 <_write+0x28>
	}
	return nChars;
  4005d6:	697b      	ldr	r3, [r7, #20]
}
  4005d8:	4618      	mov	r0, r3
  4005da:	3718      	adds	r7, #24
  4005dc:	46bd      	mov	sp, r7
  4005de:	bd80      	pop	{r7, pc}
  4005e0:	20400a84 	.word	0x20400a84
  4005e4:	20400a88 	.word	0x20400a88

004005e8 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  4005e8:	b480      	push	{r7}
  4005ea:	b083      	sub	sp, #12
  4005ec:	af00      	add	r7, sp, #0
  4005ee:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  4005f0:	687b      	ldr	r3, [r7, #4]
  4005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4005f4:	4618      	mov	r0, r3
  4005f6:	370c      	adds	r7, #12
  4005f8:	46bd      	mov	sp, r7
  4005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005fe:	4770      	bx	lr

00400600 <afec_get_interrupt_mask>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
  400600:	b480      	push	{r7}
  400602:	b083      	sub	sp, #12
  400604:	af00      	add	r7, sp, #0
  400606:	6078      	str	r0, [r7, #4]
	return afec->AFEC_IMR;
  400608:	687b      	ldr	r3, [r7, #4]
  40060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  40060c:	4618      	mov	r0, r3
  40060e:	370c      	adds	r7, #12
  400610:	46bd      	mov	sp, r7
  400612:	f85d 7b04 	ldr.w	r7, [sp], #4
  400616:	4770      	bx	lr

00400618 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400618:	b480      	push	{r7}
  40061a:	b083      	sub	sp, #12
  40061c:	af00      	add	r7, sp, #0
  40061e:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	4a09      	ldr	r2, [pc, #36]	; (400648 <afec_find_inst_num+0x30>)
  400624:	4293      	cmp	r3, r2
  400626:	d101      	bne.n	40062c <afec_find_inst_num+0x14>
		return 1;
  400628:	2301      	movs	r3, #1
  40062a:	e006      	b.n	40063a <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  40062c:	687b      	ldr	r3, [r7, #4]
  40062e:	4a07      	ldr	r2, [pc, #28]	; (40064c <afec_find_inst_num+0x34>)
  400630:	4293      	cmp	r3, r2
  400632:	d101      	bne.n	400638 <afec_find_inst_num+0x20>
		return 0;
  400634:	2300      	movs	r3, #0
  400636:	e000      	b.n	40063a <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400638:	2300      	movs	r3, #0
}
  40063a:	4618      	mov	r0, r3
  40063c:	370c      	adds	r7, #12
  40063e:	46bd      	mov	sp, r7
  400640:	f85d 7b04 	ldr.w	r7, [sp], #4
  400644:	4770      	bx	lr
  400646:	bf00      	nop
  400648:	40064000 	.word	0x40064000
  40064c:	4003c000 	.word	0x4003c000

00400650 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  400650:	b580      	push	{r7, lr}
  400652:	b082      	sub	sp, #8
  400654:	af00      	add	r7, sp, #0
  400656:	4603      	mov	r3, r0
  400658:	6039      	str	r1, [r7, #0]
  40065a:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  40065c:	79fb      	ldrb	r3, [r7, #7]
  40065e:	490a      	ldr	r1, [pc, #40]	; (400688 <afec_interrupt+0x38>)
  400660:	011a      	lsls	r2, r3, #4
  400662:	683b      	ldr	r3, [r7, #0]
  400664:	4413      	add	r3, r2
  400666:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40066a:	2b00      	cmp	r3, #0
  40066c:	d007      	beq.n	40067e <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  40066e:	79fb      	ldrb	r3, [r7, #7]
  400670:	4905      	ldr	r1, [pc, #20]	; (400688 <afec_interrupt+0x38>)
  400672:	011a      	lsls	r2, r3, #4
  400674:	683b      	ldr	r3, [r7, #0]
  400676:	4413      	add	r3, r2
  400678:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40067c:	4798      	blx	r3
	}
}
  40067e:	bf00      	nop
  400680:	3708      	adds	r7, #8
  400682:	46bd      	mov	sp, r7
  400684:	bd80      	pop	{r7, pc}
  400686:	bf00      	nop
  400688:	20400a8c 	.word	0x20400a8c

0040068c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40068c:	b590      	push	{r4, r7, lr}
  40068e:	b087      	sub	sp, #28
  400690:	af00      	add	r7, sp, #0
  400692:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400694:	6878      	ldr	r0, [r7, #4]
  400696:	4b28      	ldr	r3, [pc, #160]	; (400738 <afec_process_callback+0xac>)
  400698:	4798      	blx	r3
  40069a:	4604      	mov	r4, r0
  40069c:	6878      	ldr	r0, [r7, #4]
  40069e:	4b27      	ldr	r3, [pc, #156]	; (40073c <afec_process_callback+0xb0>)
  4006a0:	4798      	blx	r3
  4006a2:	4603      	mov	r3, r0
  4006a4:	4023      	ands	r3, r4
  4006a6:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  4006a8:	6878      	ldr	r0, [r7, #4]
  4006aa:	4b25      	ldr	r3, [pc, #148]	; (400740 <afec_process_callback+0xb4>)
  4006ac:	4798      	blx	r3
  4006ae:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4006b0:	2300      	movs	r3, #0
  4006b2:	617b      	str	r3, [r7, #20]
  4006b4:	e039      	b.n	40072a <afec_process_callback+0x9e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4006b6:	697b      	ldr	r3, [r7, #20]
  4006b8:	2b0b      	cmp	r3, #11
  4006ba:	d80f      	bhi.n	4006dc <afec_process_callback+0x50>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4006bc:	2201      	movs	r2, #1
  4006be:	697b      	ldr	r3, [r7, #20]
  4006c0:	fa02 f303 	lsl.w	r3, r2, r3
  4006c4:	461a      	mov	r2, r3
  4006c6:	68fb      	ldr	r3, [r7, #12]
  4006c8:	4013      	ands	r3, r2
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d02a      	beq.n	400724 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4006ce:	693b      	ldr	r3, [r7, #16]
  4006d0:	b2db      	uxtb	r3, r3
  4006d2:	6979      	ldr	r1, [r7, #20]
  4006d4:	4618      	mov	r0, r3
  4006d6:	4b1b      	ldr	r3, [pc, #108]	; (400744 <afec_process_callback+0xb8>)
  4006d8:	4798      	blx	r3
  4006da:	e023      	b.n	400724 <afec_process_callback+0x98>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4006dc:	697b      	ldr	r3, [r7, #20]
  4006de:	2b0e      	cmp	r3, #14
  4006e0:	d810      	bhi.n	400704 <afec_process_callback+0x78>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	330c      	adds	r3, #12
  4006e6:	2201      	movs	r2, #1
  4006e8:	fa02 f303 	lsl.w	r3, r2, r3
  4006ec:	461a      	mov	r2, r3
  4006ee:	68fb      	ldr	r3, [r7, #12]
  4006f0:	4013      	ands	r3, r2
  4006f2:	2b00      	cmp	r3, #0
  4006f4:	d016      	beq.n	400724 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4006f6:	693b      	ldr	r3, [r7, #16]
  4006f8:	b2db      	uxtb	r3, r3
  4006fa:	6979      	ldr	r1, [r7, #20]
  4006fc:	4618      	mov	r0, r3
  4006fe:	4b11      	ldr	r3, [pc, #68]	; (400744 <afec_process_callback+0xb8>)
  400700:	4798      	blx	r3
  400702:	e00f      	b.n	400724 <afec_process_callback+0x98>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400704:	697b      	ldr	r3, [r7, #20]
  400706:	330f      	adds	r3, #15
  400708:	2201      	movs	r2, #1
  40070a:	fa02 f303 	lsl.w	r3, r2, r3
  40070e:	461a      	mov	r2, r3
  400710:	68fb      	ldr	r3, [r7, #12]
  400712:	4013      	ands	r3, r2
  400714:	2b00      	cmp	r3, #0
  400716:	d005      	beq.n	400724 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  400718:	693b      	ldr	r3, [r7, #16]
  40071a:	b2db      	uxtb	r3, r3
  40071c:	6979      	ldr	r1, [r7, #20]
  40071e:	4618      	mov	r0, r3
  400720:	4b08      	ldr	r3, [pc, #32]	; (400744 <afec_process_callback+0xb8>)
  400722:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	3301      	adds	r3, #1
  400728:	617b      	str	r3, [r7, #20]
  40072a:	697b      	ldr	r3, [r7, #20]
  40072c:	2b0f      	cmp	r3, #15
  40072e:	d9c2      	bls.n	4006b6 <afec_process_callback+0x2a>
			}
		}
	}
}
  400730:	bf00      	nop
  400732:	371c      	adds	r7, #28
  400734:	46bd      	mov	sp, r7
  400736:	bd90      	pop	{r4, r7, pc}
  400738:	004005e9 	.word	0x004005e9
  40073c:	00400601 	.word	0x00400601
  400740:	00400619 	.word	0x00400619
  400744:	00400651 	.word	0x00400651

00400748 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400748:	b580      	push	{r7, lr}
  40074a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40074c:	4802      	ldr	r0, [pc, #8]	; (400758 <AFEC0_Handler+0x10>)
  40074e:	4b03      	ldr	r3, [pc, #12]	; (40075c <AFEC0_Handler+0x14>)
  400750:	4798      	blx	r3
}
  400752:	bf00      	nop
  400754:	bd80      	pop	{r7, pc}
  400756:	bf00      	nop
  400758:	4003c000 	.word	0x4003c000
  40075c:	0040068d 	.word	0x0040068d

00400760 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400760:	b580      	push	{r7, lr}
  400762:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  400764:	4802      	ldr	r0, [pc, #8]	; (400770 <AFEC1_Handler+0x10>)
  400766:	4b03      	ldr	r3, [pc, #12]	; (400774 <AFEC1_Handler+0x14>)
  400768:	4798      	blx	r3
}
  40076a:	bf00      	nop
  40076c:	bd80      	pop	{r7, pc}
  40076e:	bf00      	nop
  400770:	40064000 	.word	0x40064000
  400774:	0040068d 	.word	0x0040068d

00400778 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400778:	b480      	push	{r7}
  40077a:	b085      	sub	sp, #20
  40077c:	af00      	add	r7, sp, #0
  40077e:	60f8      	str	r0, [r7, #12]
  400780:	60b9      	str	r1, [r7, #8]
  400782:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400784:	687b      	ldr	r3, [r7, #4]
  400786:	2b00      	cmp	r3, #0
  400788:	d003      	beq.n	400792 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40078a:	68fb      	ldr	r3, [r7, #12]
  40078c:	68ba      	ldr	r2, [r7, #8]
  40078e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400790:	e002      	b.n	400798 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400792:	68fb      	ldr	r3, [r7, #12]
  400794:	68ba      	ldr	r2, [r7, #8]
  400796:	661a      	str	r2, [r3, #96]	; 0x60
}
  400798:	bf00      	nop
  40079a:	3714      	adds	r7, #20
  40079c:	46bd      	mov	sp, r7
  40079e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007a2:	4770      	bx	lr

004007a4 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  4007a4:	b480      	push	{r7}
  4007a6:	b085      	sub	sp, #20
  4007a8:	af00      	add	r7, sp, #0
  4007aa:	60f8      	str	r0, [r7, #12]
  4007ac:	60b9      	str	r1, [r7, #8]
  4007ae:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4007b0:	68fb      	ldr	r3, [r7, #12]
  4007b2:	68ba      	ldr	r2, [r7, #8]
  4007b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4007b8:	687b      	ldr	r3, [r7, #4]
  4007ba:	005b      	lsls	r3, r3, #1
  4007bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007c0:	fbb2 f3f3 	udiv	r3, r2, r3
  4007c4:	3b01      	subs	r3, #1
  4007c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4007ca:	68fb      	ldr	r3, [r7, #12]
  4007cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4007d0:	bf00      	nop
  4007d2:	3714      	adds	r7, #20
  4007d4:	46bd      	mov	sp, r7
  4007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007da:	4770      	bx	lr

004007dc <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4007dc:	b480      	push	{r7}
  4007de:	b087      	sub	sp, #28
  4007e0:	af00      	add	r7, sp, #0
  4007e2:	60f8      	str	r0, [r7, #12]
  4007e4:	60b9      	str	r1, [r7, #8]
  4007e6:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4007e8:	68bb      	ldr	r3, [r7, #8]
  4007ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007ee:	d003      	beq.n	4007f8 <pio_get+0x1c>
  4007f0:	68bb      	ldr	r3, [r7, #8]
  4007f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007f6:	d103      	bne.n	400800 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  4007f8:	68fb      	ldr	r3, [r7, #12]
  4007fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4007fc:	617b      	str	r3, [r7, #20]
  4007fe:	e002      	b.n	400806 <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  400800:	68fb      	ldr	r3, [r7, #12]
  400802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400804:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  400806:	697a      	ldr	r2, [r7, #20]
  400808:	687b      	ldr	r3, [r7, #4]
  40080a:	4013      	ands	r3, r2
  40080c:	2b00      	cmp	r3, #0
  40080e:	d101      	bne.n	400814 <pio_get+0x38>
		return 0;
  400810:	2300      	movs	r3, #0
  400812:	e000      	b.n	400816 <pio_get+0x3a>
	} else {
		return 1;
  400814:	2301      	movs	r3, #1
	}
}
  400816:	4618      	mov	r0, r3
  400818:	371c      	adds	r7, #28
  40081a:	46bd      	mov	sp, r7
  40081c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400820:	4770      	bx	lr

00400822 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400822:	b480      	push	{r7}
  400824:	b087      	sub	sp, #28
  400826:	af00      	add	r7, sp, #0
  400828:	60f8      	str	r0, [r7, #12]
  40082a:	60b9      	str	r1, [r7, #8]
  40082c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	687a      	ldr	r2, [r7, #4]
  400832:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400834:	68bb      	ldr	r3, [r7, #8]
  400836:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40083a:	d04a      	beq.n	4008d2 <pio_set_peripheral+0xb0>
  40083c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400840:	d808      	bhi.n	400854 <pio_set_peripheral+0x32>
  400842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400846:	d016      	beq.n	400876 <pio_set_peripheral+0x54>
  400848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40084c:	d02c      	beq.n	4008a8 <pio_set_peripheral+0x86>
  40084e:	2b00      	cmp	r3, #0
  400850:	d069      	beq.n	400926 <pio_set_peripheral+0x104>
  400852:	e064      	b.n	40091e <pio_set_peripheral+0xfc>
  400854:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400858:	d065      	beq.n	400926 <pio_set_peripheral+0x104>
  40085a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40085e:	d803      	bhi.n	400868 <pio_set_peripheral+0x46>
  400860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400864:	d04a      	beq.n	4008fc <pio_set_peripheral+0xda>
  400866:	e05a      	b.n	40091e <pio_set_peripheral+0xfc>
  400868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40086c:	d05b      	beq.n	400926 <pio_set_peripheral+0x104>
  40086e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400872:	d058      	beq.n	400926 <pio_set_peripheral+0x104>
  400874:	e053      	b.n	40091e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400876:	68fb      	ldr	r3, [r7, #12]
  400878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40087a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40087c:	68fb      	ldr	r3, [r7, #12]
  40087e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	43d9      	mvns	r1, r3
  400884:	697b      	ldr	r3, [r7, #20]
  400886:	400b      	ands	r3, r1
  400888:	401a      	ands	r2, r3
  40088a:	68fb      	ldr	r3, [r7, #12]
  40088c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400892:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400894:	68fb      	ldr	r3, [r7, #12]
  400896:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400898:	687b      	ldr	r3, [r7, #4]
  40089a:	43d9      	mvns	r1, r3
  40089c:	697b      	ldr	r3, [r7, #20]
  40089e:	400b      	ands	r3, r1
  4008a0:	401a      	ands	r2, r3
  4008a2:	68fb      	ldr	r3, [r7, #12]
  4008a4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4008a6:	e03a      	b.n	40091e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008a8:	68fb      	ldr	r3, [r7, #12]
  4008aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4008ac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4008ae:	687a      	ldr	r2, [r7, #4]
  4008b0:	697b      	ldr	r3, [r7, #20]
  4008b2:	431a      	orrs	r2, r3
  4008b4:	68fb      	ldr	r3, [r7, #12]
  4008b6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4008b8:	68fb      	ldr	r3, [r7, #12]
  4008ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4008bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008be:	68fb      	ldr	r3, [r7, #12]
  4008c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008c2:	687b      	ldr	r3, [r7, #4]
  4008c4:	43d9      	mvns	r1, r3
  4008c6:	697b      	ldr	r3, [r7, #20]
  4008c8:	400b      	ands	r3, r1
  4008ca:	401a      	ands	r2, r3
  4008cc:	68fb      	ldr	r3, [r7, #12]
  4008ce:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4008d0:	e025      	b.n	40091e <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008d2:	68fb      	ldr	r3, [r7, #12]
  4008d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4008d6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008d8:	68fb      	ldr	r3, [r7, #12]
  4008da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008dc:	687b      	ldr	r3, [r7, #4]
  4008de:	43d9      	mvns	r1, r3
  4008e0:	697b      	ldr	r3, [r7, #20]
  4008e2:	400b      	ands	r3, r1
  4008e4:	401a      	ands	r2, r3
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4008ea:	68fb      	ldr	r3, [r7, #12]
  4008ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4008ee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008f0:	687a      	ldr	r2, [r7, #4]
  4008f2:	697b      	ldr	r3, [r7, #20]
  4008f4:	431a      	orrs	r2, r3
  4008f6:	68fb      	ldr	r3, [r7, #12]
  4008f8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4008fa:	e010      	b.n	40091e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008fc:	68fb      	ldr	r3, [r7, #12]
  4008fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400900:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400902:	687a      	ldr	r2, [r7, #4]
  400904:	697b      	ldr	r3, [r7, #20]
  400906:	431a      	orrs	r2, r3
  400908:	68fb      	ldr	r3, [r7, #12]
  40090a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400910:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400912:	687a      	ldr	r2, [r7, #4]
  400914:	697b      	ldr	r3, [r7, #20]
  400916:	431a      	orrs	r2, r3
  400918:	68fb      	ldr	r3, [r7, #12]
  40091a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40091c:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	687a      	ldr	r2, [r7, #4]
  400922:	605a      	str	r2, [r3, #4]
  400924:	e000      	b.n	400928 <pio_set_peripheral+0x106>
		return;
  400926:	bf00      	nop
}
  400928:	371c      	adds	r7, #28
  40092a:	46bd      	mov	sp, r7
  40092c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400930:	4770      	bx	lr
	...

00400934 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400934:	b580      	push	{r7, lr}
  400936:	b084      	sub	sp, #16
  400938:	af00      	add	r7, sp, #0
  40093a:	60f8      	str	r0, [r7, #12]
  40093c:	60b9      	str	r1, [r7, #8]
  40093e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400940:	68b9      	ldr	r1, [r7, #8]
  400942:	68f8      	ldr	r0, [r7, #12]
  400944:	4b19      	ldr	r3, [pc, #100]	; (4009ac <pio_set_input+0x78>)
  400946:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	f003 0301 	and.w	r3, r3, #1
  40094e:	461a      	mov	r2, r3
  400950:	68b9      	ldr	r1, [r7, #8]
  400952:	68f8      	ldr	r0, [r7, #12]
  400954:	4b16      	ldr	r3, [pc, #88]	; (4009b0 <pio_set_input+0x7c>)
  400956:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400958:	687b      	ldr	r3, [r7, #4]
  40095a:	f003 030a 	and.w	r3, r3, #10
  40095e:	2b00      	cmp	r3, #0
  400960:	d003      	beq.n	40096a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400962:	68fb      	ldr	r3, [r7, #12]
  400964:	68ba      	ldr	r2, [r7, #8]
  400966:	621a      	str	r2, [r3, #32]
  400968:	e002      	b.n	400970 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40096a:	68fb      	ldr	r3, [r7, #12]
  40096c:	68ba      	ldr	r2, [r7, #8]
  40096e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400970:	687b      	ldr	r3, [r7, #4]
  400972:	f003 0302 	and.w	r3, r3, #2
  400976:	2b00      	cmp	r3, #0
  400978:	d004      	beq.n	400984 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40097a:	68fb      	ldr	r3, [r7, #12]
  40097c:	68ba      	ldr	r2, [r7, #8]
  40097e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400982:	e008      	b.n	400996 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400984:	687b      	ldr	r3, [r7, #4]
  400986:	f003 0308 	and.w	r3, r3, #8
  40098a:	2b00      	cmp	r3, #0
  40098c:	d003      	beq.n	400996 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40098e:	68fb      	ldr	r3, [r7, #12]
  400990:	68ba      	ldr	r2, [r7, #8]
  400992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400996:	68fb      	ldr	r3, [r7, #12]
  400998:	68ba      	ldr	r2, [r7, #8]
  40099a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40099c:	68fb      	ldr	r3, [r7, #12]
  40099e:	68ba      	ldr	r2, [r7, #8]
  4009a0:	601a      	str	r2, [r3, #0]
}
  4009a2:	bf00      	nop
  4009a4:	3710      	adds	r7, #16
  4009a6:	46bd      	mov	sp, r7
  4009a8:	bd80      	pop	{r7, pc}
  4009aa:	bf00      	nop
  4009ac:	00400b6d 	.word	0x00400b6d
  4009b0:	00400779 	.word	0x00400779

004009b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4009b4:	b580      	push	{r7, lr}
  4009b6:	b084      	sub	sp, #16
  4009b8:	af00      	add	r7, sp, #0
  4009ba:	60f8      	str	r0, [r7, #12]
  4009bc:	60b9      	str	r1, [r7, #8]
  4009be:	607a      	str	r2, [r7, #4]
  4009c0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4009c2:	68b9      	ldr	r1, [r7, #8]
  4009c4:	68f8      	ldr	r0, [r7, #12]
  4009c6:	4b12      	ldr	r3, [pc, #72]	; (400a10 <pio_set_output+0x5c>)
  4009c8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4009ca:	69ba      	ldr	r2, [r7, #24]
  4009cc:	68b9      	ldr	r1, [r7, #8]
  4009ce:	68f8      	ldr	r0, [r7, #12]
  4009d0:	4b10      	ldr	r3, [pc, #64]	; (400a14 <pio_set_output+0x60>)
  4009d2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4009d4:	683b      	ldr	r3, [r7, #0]
  4009d6:	2b00      	cmp	r3, #0
  4009d8:	d003      	beq.n	4009e2 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4009da:	68fb      	ldr	r3, [r7, #12]
  4009dc:	68ba      	ldr	r2, [r7, #8]
  4009de:	651a      	str	r2, [r3, #80]	; 0x50
  4009e0:	e002      	b.n	4009e8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4009e2:	68fb      	ldr	r3, [r7, #12]
  4009e4:	68ba      	ldr	r2, [r7, #8]
  4009e6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4009e8:	687b      	ldr	r3, [r7, #4]
  4009ea:	2b00      	cmp	r3, #0
  4009ec:	d003      	beq.n	4009f6 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4009ee:	68fb      	ldr	r3, [r7, #12]
  4009f0:	68ba      	ldr	r2, [r7, #8]
  4009f2:	631a      	str	r2, [r3, #48]	; 0x30
  4009f4:	e002      	b.n	4009fc <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4009f6:	68fb      	ldr	r3, [r7, #12]
  4009f8:	68ba      	ldr	r2, [r7, #8]
  4009fa:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4009fc:	68fb      	ldr	r3, [r7, #12]
  4009fe:	68ba      	ldr	r2, [r7, #8]
  400a00:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	68ba      	ldr	r2, [r7, #8]
  400a06:	601a      	str	r2, [r3, #0]
}
  400a08:	bf00      	nop
  400a0a:	3710      	adds	r7, #16
  400a0c:	46bd      	mov	sp, r7
  400a0e:	bd80      	pop	{r7, pc}
  400a10:	00400b6d 	.word	0x00400b6d
  400a14:	00400779 	.word	0x00400779

00400a18 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  400a18:	b590      	push	{r4, r7, lr}
  400a1a:	b087      	sub	sp, #28
  400a1c:	af02      	add	r7, sp, #8
  400a1e:	60f8      	str	r0, [r7, #12]
  400a20:	60b9      	str	r1, [r7, #8]
  400a22:	607a      	str	r2, [r7, #4]
  400a24:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  400a26:	68bb      	ldr	r3, [r7, #8]
  400a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400a2c:	d016      	beq.n	400a5c <pio_configure+0x44>
  400a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400a32:	d809      	bhi.n	400a48 <pio_configure+0x30>
  400a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400a38:	d010      	beq.n	400a5c <pio_configure+0x44>
  400a3a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400a3e:	d00d      	beq.n	400a5c <pio_configure+0x44>
  400a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400a44:	d00a      	beq.n	400a5c <pio_configure+0x44>
  400a46:	e03d      	b.n	400ac4 <pio_configure+0xac>
  400a48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400a4c:	d01a      	beq.n	400a84 <pio_configure+0x6c>
  400a4e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400a52:	d017      	beq.n	400a84 <pio_configure+0x6c>
  400a54:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400a58:	d00e      	beq.n	400a78 <pio_configure+0x60>
  400a5a:	e033      	b.n	400ac4 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400a5c:	687a      	ldr	r2, [r7, #4]
  400a5e:	68b9      	ldr	r1, [r7, #8]
  400a60:	68f8      	ldr	r0, [r7, #12]
  400a62:	4b1c      	ldr	r3, [pc, #112]	; (400ad4 <pio_configure+0xbc>)
  400a64:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  400a66:	683b      	ldr	r3, [r7, #0]
  400a68:	f003 0301 	and.w	r3, r3, #1
  400a6c:	461a      	mov	r2, r3
  400a6e:	6879      	ldr	r1, [r7, #4]
  400a70:	68f8      	ldr	r0, [r7, #12]
  400a72:	4b19      	ldr	r3, [pc, #100]	; (400ad8 <pio_configure+0xc0>)
  400a74:	4798      	blx	r3
		break;
  400a76:	e027      	b.n	400ac8 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400a78:	683a      	ldr	r2, [r7, #0]
  400a7a:	6879      	ldr	r1, [r7, #4]
  400a7c:	68f8      	ldr	r0, [r7, #12]
  400a7e:	4b17      	ldr	r3, [pc, #92]	; (400adc <pio_configure+0xc4>)
  400a80:	4798      	blx	r3
		break;
  400a82:	e021      	b.n	400ac8 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400a84:	68bb      	ldr	r3, [r7, #8]
  400a86:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400a8a:	bf0c      	ite	eq
  400a8c:	2301      	moveq	r3, #1
  400a8e:	2300      	movne	r3, #0
  400a90:	b2db      	uxtb	r3, r3
  400a92:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  400a94:	683b      	ldr	r3, [r7, #0]
  400a96:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400a9a:	2b00      	cmp	r3, #0
  400a9c:	bf14      	ite	ne
  400a9e:	2301      	movne	r3, #1
  400aa0:	2300      	moveq	r3, #0
  400aa2:	b2db      	uxtb	r3, r3
  400aa4:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  400aa6:	683b      	ldr	r3, [r7, #0]
  400aa8:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400aac:	2b00      	cmp	r3, #0
  400aae:	bf14      	ite	ne
  400ab0:	2301      	movne	r3, #1
  400ab2:	2300      	moveq	r3, #0
  400ab4:	b2db      	uxtb	r3, r3
  400ab6:	9300      	str	r3, [sp, #0]
  400ab8:	460b      	mov	r3, r1
  400aba:	6879      	ldr	r1, [r7, #4]
  400abc:	68f8      	ldr	r0, [r7, #12]
  400abe:	4c08      	ldr	r4, [pc, #32]	; (400ae0 <pio_configure+0xc8>)
  400ac0:	47a0      	blx	r4
		break;
  400ac2:	e001      	b.n	400ac8 <pio_configure+0xb0>

	default:
		return 0;
  400ac4:	2300      	movs	r3, #0
  400ac6:	e000      	b.n	400aca <pio_configure+0xb2>
	}

	return 1;
  400ac8:	2301      	movs	r3, #1
}
  400aca:	4618      	mov	r0, r3
  400acc:	3714      	adds	r7, #20
  400ace:	46bd      	mov	sp, r7
  400ad0:	bd90      	pop	{r4, r7, pc}
  400ad2:	bf00      	nop
  400ad4:	00400823 	.word	0x00400823
  400ad8:	00400779 	.word	0x00400779
  400adc:	00400935 	.word	0x00400935
  400ae0:	004009b5 	.word	0x004009b5

00400ae4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400ae4:	b480      	push	{r7}
  400ae6:	b085      	sub	sp, #20
  400ae8:	af00      	add	r7, sp, #0
  400aea:	60f8      	str	r0, [r7, #12]
  400aec:	60b9      	str	r1, [r7, #8]
  400aee:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400af0:	687b      	ldr	r3, [r7, #4]
  400af2:	f003 0310 	and.w	r3, r3, #16
  400af6:	2b00      	cmp	r3, #0
  400af8:	d020      	beq.n	400b3c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400afa:	68fb      	ldr	r3, [r7, #12]
  400afc:	68ba      	ldr	r2, [r7, #8]
  400afe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400b02:	687b      	ldr	r3, [r7, #4]
  400b04:	f003 0320 	and.w	r3, r3, #32
  400b08:	2b00      	cmp	r3, #0
  400b0a:	d004      	beq.n	400b16 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400b0c:	68fb      	ldr	r3, [r7, #12]
  400b0e:	68ba      	ldr	r2, [r7, #8]
  400b10:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400b14:	e003      	b.n	400b1e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400b16:	68fb      	ldr	r3, [r7, #12]
  400b18:	68ba      	ldr	r2, [r7, #8]
  400b1a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400b1e:	687b      	ldr	r3, [r7, #4]
  400b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400b24:	2b00      	cmp	r3, #0
  400b26:	d004      	beq.n	400b32 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400b28:	68fb      	ldr	r3, [r7, #12]
  400b2a:	68ba      	ldr	r2, [r7, #8]
  400b2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400b30:	e008      	b.n	400b44 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400b32:	68fb      	ldr	r3, [r7, #12]
  400b34:	68ba      	ldr	r2, [r7, #8]
  400b36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400b3a:	e003      	b.n	400b44 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400b3c:	68fb      	ldr	r3, [r7, #12]
  400b3e:	68ba      	ldr	r2, [r7, #8]
  400b40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400b44:	bf00      	nop
  400b46:	3714      	adds	r7, #20
  400b48:	46bd      	mov	sp, r7
  400b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b4e:	4770      	bx	lr

00400b50 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400b50:	b480      	push	{r7}
  400b52:	b083      	sub	sp, #12
  400b54:	af00      	add	r7, sp, #0
  400b56:	6078      	str	r0, [r7, #4]
  400b58:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400b5a:	687b      	ldr	r3, [r7, #4]
  400b5c:	683a      	ldr	r2, [r7, #0]
  400b5e:	641a      	str	r2, [r3, #64]	; 0x40
}
  400b60:	bf00      	nop
  400b62:	370c      	adds	r7, #12
  400b64:	46bd      	mov	sp, r7
  400b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b6a:	4770      	bx	lr

00400b6c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400b6c:	b480      	push	{r7}
  400b6e:	b083      	sub	sp, #12
  400b70:	af00      	add	r7, sp, #0
  400b72:	6078      	str	r0, [r7, #4]
  400b74:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400b76:	687b      	ldr	r3, [r7, #4]
  400b78:	683a      	ldr	r2, [r7, #0]
  400b7a:	645a      	str	r2, [r3, #68]	; 0x44
}
  400b7c:	bf00      	nop
  400b7e:	370c      	adds	r7, #12
  400b80:	46bd      	mov	sp, r7
  400b82:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b86:	4770      	bx	lr

00400b88 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400b88:	b480      	push	{r7}
  400b8a:	b083      	sub	sp, #12
  400b8c:	af00      	add	r7, sp, #0
  400b8e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400b90:	687b      	ldr	r3, [r7, #4]
  400b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400b94:	4618      	mov	r0, r3
  400b96:	370c      	adds	r7, #12
  400b98:	46bd      	mov	sp, r7
  400b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b9e:	4770      	bx	lr

00400ba0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400ba0:	b480      	push	{r7}
  400ba2:	b083      	sub	sp, #12
  400ba4:	af00      	add	r7, sp, #0
  400ba6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400ba8:	687b      	ldr	r3, [r7, #4]
  400baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400bac:	4618      	mov	r0, r3
  400bae:	370c      	adds	r7, #12
  400bb0:	46bd      	mov	sp, r7
  400bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bb6:	4770      	bx	lr

00400bb8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400bb8:	b580      	push	{r7, lr}
  400bba:	b084      	sub	sp, #16
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
  400bc0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400bc2:	6878      	ldr	r0, [r7, #4]
  400bc4:	4b26      	ldr	r3, [pc, #152]	; (400c60 <pio_handler_process+0xa8>)
  400bc6:	4798      	blx	r3
  400bc8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400bca:	6878      	ldr	r0, [r7, #4]
  400bcc:	4b25      	ldr	r3, [pc, #148]	; (400c64 <pio_handler_process+0xac>)
  400bce:	4798      	blx	r3
  400bd0:	4602      	mov	r2, r0
  400bd2:	68fb      	ldr	r3, [r7, #12]
  400bd4:	4013      	ands	r3, r2
  400bd6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400bd8:	68fb      	ldr	r3, [r7, #12]
  400bda:	2b00      	cmp	r3, #0
  400bdc:	d03c      	beq.n	400c58 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400bde:	2300      	movs	r3, #0
  400be0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400be2:	e034      	b.n	400c4e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400be4:	4a20      	ldr	r2, [pc, #128]	; (400c68 <pio_handler_process+0xb0>)
  400be6:	68bb      	ldr	r3, [r7, #8]
  400be8:	011b      	lsls	r3, r3, #4
  400bea:	4413      	add	r3, r2
  400bec:	681a      	ldr	r2, [r3, #0]
  400bee:	683b      	ldr	r3, [r7, #0]
  400bf0:	429a      	cmp	r2, r3
  400bf2:	d126      	bne.n	400c42 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400bf4:	4a1c      	ldr	r2, [pc, #112]	; (400c68 <pio_handler_process+0xb0>)
  400bf6:	68bb      	ldr	r3, [r7, #8]
  400bf8:	011b      	lsls	r3, r3, #4
  400bfa:	4413      	add	r3, r2
  400bfc:	3304      	adds	r3, #4
  400bfe:	681a      	ldr	r2, [r3, #0]
  400c00:	68fb      	ldr	r3, [r7, #12]
  400c02:	4013      	ands	r3, r2
  400c04:	2b00      	cmp	r3, #0
  400c06:	d01c      	beq.n	400c42 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c08:	4a17      	ldr	r2, [pc, #92]	; (400c68 <pio_handler_process+0xb0>)
  400c0a:	68bb      	ldr	r3, [r7, #8]
  400c0c:	011b      	lsls	r3, r3, #4
  400c0e:	4413      	add	r3, r2
  400c10:	330c      	adds	r3, #12
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	4914      	ldr	r1, [pc, #80]	; (400c68 <pio_handler_process+0xb0>)
  400c16:	68ba      	ldr	r2, [r7, #8]
  400c18:	0112      	lsls	r2, r2, #4
  400c1a:	440a      	add	r2, r1
  400c1c:	6810      	ldr	r0, [r2, #0]
  400c1e:	4912      	ldr	r1, [pc, #72]	; (400c68 <pio_handler_process+0xb0>)
  400c20:	68ba      	ldr	r2, [r7, #8]
  400c22:	0112      	lsls	r2, r2, #4
  400c24:	440a      	add	r2, r1
  400c26:	3204      	adds	r2, #4
  400c28:	6812      	ldr	r2, [r2, #0]
  400c2a:	4611      	mov	r1, r2
  400c2c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400c2e:	4a0e      	ldr	r2, [pc, #56]	; (400c68 <pio_handler_process+0xb0>)
  400c30:	68bb      	ldr	r3, [r7, #8]
  400c32:	011b      	lsls	r3, r3, #4
  400c34:	4413      	add	r3, r2
  400c36:	3304      	adds	r3, #4
  400c38:	681b      	ldr	r3, [r3, #0]
  400c3a:	43db      	mvns	r3, r3
  400c3c:	68fa      	ldr	r2, [r7, #12]
  400c3e:	4013      	ands	r3, r2
  400c40:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400c42:	68bb      	ldr	r3, [r7, #8]
  400c44:	3301      	adds	r3, #1
  400c46:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c48:	68bb      	ldr	r3, [r7, #8]
  400c4a:	2b06      	cmp	r3, #6
  400c4c:	d803      	bhi.n	400c56 <pio_handler_process+0x9e>
		while (status != 0) {
  400c4e:	68fb      	ldr	r3, [r7, #12]
  400c50:	2b00      	cmp	r3, #0
  400c52:	d1c7      	bne.n	400be4 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400c54:	e000      	b.n	400c58 <pio_handler_process+0xa0>
				break;
  400c56:	bf00      	nop
}
  400c58:	bf00      	nop
  400c5a:	3710      	adds	r7, #16
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bd80      	pop	{r7, pc}
  400c60:	00400b89 	.word	0x00400b89
  400c64:	00400ba1 	.word	0x00400ba1
  400c68:	204009d4 	.word	0x204009d4

00400c6c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400c6c:	b580      	push	{r7, lr}
  400c6e:	b086      	sub	sp, #24
  400c70:	af00      	add	r7, sp, #0
  400c72:	60f8      	str	r0, [r7, #12]
  400c74:	60b9      	str	r1, [r7, #8]
  400c76:	607a      	str	r2, [r7, #4]
  400c78:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400c7a:	4b21      	ldr	r3, [pc, #132]	; (400d00 <pio_handler_set+0x94>)
  400c7c:	681b      	ldr	r3, [r3, #0]
  400c7e:	2b06      	cmp	r3, #6
  400c80:	d901      	bls.n	400c86 <pio_handler_set+0x1a>
		return 1;
  400c82:	2301      	movs	r3, #1
  400c84:	e038      	b.n	400cf8 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400c86:	2300      	movs	r3, #0
  400c88:	75fb      	strb	r3, [r7, #23]
  400c8a:	e011      	b.n	400cb0 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400c8c:	7dfb      	ldrb	r3, [r7, #23]
  400c8e:	011b      	lsls	r3, r3, #4
  400c90:	4a1c      	ldr	r2, [pc, #112]	; (400d04 <pio_handler_set+0x98>)
  400c92:	4413      	add	r3, r2
  400c94:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400c96:	693b      	ldr	r3, [r7, #16]
  400c98:	681a      	ldr	r2, [r3, #0]
  400c9a:	68bb      	ldr	r3, [r7, #8]
  400c9c:	429a      	cmp	r2, r3
  400c9e:	d104      	bne.n	400caa <pio_handler_set+0x3e>
  400ca0:	693b      	ldr	r3, [r7, #16]
  400ca2:	685a      	ldr	r2, [r3, #4]
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	429a      	cmp	r2, r3
  400ca8:	d008      	beq.n	400cbc <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400caa:	7dfb      	ldrb	r3, [r7, #23]
  400cac:	3301      	adds	r3, #1
  400cae:	75fb      	strb	r3, [r7, #23]
  400cb0:	7dfa      	ldrb	r2, [r7, #23]
  400cb2:	4b13      	ldr	r3, [pc, #76]	; (400d00 <pio_handler_set+0x94>)
  400cb4:	681b      	ldr	r3, [r3, #0]
  400cb6:	429a      	cmp	r2, r3
  400cb8:	d9e8      	bls.n	400c8c <pio_handler_set+0x20>
  400cba:	e000      	b.n	400cbe <pio_handler_set+0x52>
			break;
  400cbc:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400cbe:	693b      	ldr	r3, [r7, #16]
  400cc0:	68ba      	ldr	r2, [r7, #8]
  400cc2:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400cc4:	693b      	ldr	r3, [r7, #16]
  400cc6:	687a      	ldr	r2, [r7, #4]
  400cc8:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400cca:	693b      	ldr	r3, [r7, #16]
  400ccc:	683a      	ldr	r2, [r7, #0]
  400cce:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400cd0:	693b      	ldr	r3, [r7, #16]
  400cd2:	6a3a      	ldr	r2, [r7, #32]
  400cd4:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400cd6:	7dfa      	ldrb	r2, [r7, #23]
  400cd8:	4b09      	ldr	r3, [pc, #36]	; (400d00 <pio_handler_set+0x94>)
  400cda:	681b      	ldr	r3, [r3, #0]
  400cdc:	3301      	adds	r3, #1
  400cde:	429a      	cmp	r2, r3
  400ce0:	d104      	bne.n	400cec <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400ce2:	4b07      	ldr	r3, [pc, #28]	; (400d00 <pio_handler_set+0x94>)
  400ce4:	681b      	ldr	r3, [r3, #0]
  400ce6:	3301      	adds	r3, #1
  400ce8:	4a05      	ldr	r2, [pc, #20]	; (400d00 <pio_handler_set+0x94>)
  400cea:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400cec:	683a      	ldr	r2, [r7, #0]
  400cee:	6879      	ldr	r1, [r7, #4]
  400cf0:	68f8      	ldr	r0, [r7, #12]
  400cf2:	4b05      	ldr	r3, [pc, #20]	; (400d08 <pio_handler_set+0x9c>)
  400cf4:	4798      	blx	r3

	return 0;
  400cf6:	2300      	movs	r3, #0
}
  400cf8:	4618      	mov	r0, r3
  400cfa:	3718      	adds	r7, #24
  400cfc:	46bd      	mov	sp, r7
  400cfe:	bd80      	pop	{r7, pc}
  400d00:	20400a44 	.word	0x20400a44
  400d04:	204009d4 	.word	0x204009d4
  400d08:	00400ae5 	.word	0x00400ae5

00400d0c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d0c:	b580      	push	{r7, lr}
  400d0e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400d10:	210a      	movs	r1, #10
  400d12:	4802      	ldr	r0, [pc, #8]	; (400d1c <PIOA_Handler+0x10>)
  400d14:	4b02      	ldr	r3, [pc, #8]	; (400d20 <PIOA_Handler+0x14>)
  400d16:	4798      	blx	r3
}
  400d18:	bf00      	nop
  400d1a:	bd80      	pop	{r7, pc}
  400d1c:	400e0e00 	.word	0x400e0e00
  400d20:	00400bb9 	.word	0x00400bb9

00400d24 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d24:	b580      	push	{r7, lr}
  400d26:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400d28:	210b      	movs	r1, #11
  400d2a:	4802      	ldr	r0, [pc, #8]	; (400d34 <PIOB_Handler+0x10>)
  400d2c:	4b02      	ldr	r3, [pc, #8]	; (400d38 <PIOB_Handler+0x14>)
  400d2e:	4798      	blx	r3
}
  400d30:	bf00      	nop
  400d32:	bd80      	pop	{r7, pc}
  400d34:	400e1000 	.word	0x400e1000
  400d38:	00400bb9 	.word	0x00400bb9

00400d3c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d3c:	b580      	push	{r7, lr}
  400d3e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400d40:	210c      	movs	r1, #12
  400d42:	4802      	ldr	r0, [pc, #8]	; (400d4c <PIOC_Handler+0x10>)
  400d44:	4b02      	ldr	r3, [pc, #8]	; (400d50 <PIOC_Handler+0x14>)
  400d46:	4798      	blx	r3
}
  400d48:	bf00      	nop
  400d4a:	bd80      	pop	{r7, pc}
  400d4c:	400e1200 	.word	0x400e1200
  400d50:	00400bb9 	.word	0x00400bb9

00400d54 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d54:	b580      	push	{r7, lr}
  400d56:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400d58:	2110      	movs	r1, #16
  400d5a:	4802      	ldr	r0, [pc, #8]	; (400d64 <PIOD_Handler+0x10>)
  400d5c:	4b02      	ldr	r3, [pc, #8]	; (400d68 <PIOD_Handler+0x14>)
  400d5e:	4798      	blx	r3
}
  400d60:	bf00      	nop
  400d62:	bd80      	pop	{r7, pc}
  400d64:	400e1400 	.word	0x400e1400
  400d68:	00400bb9 	.word	0x00400bb9

00400d6c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d6c:	b580      	push	{r7, lr}
  400d6e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400d70:	2111      	movs	r1, #17
  400d72:	4802      	ldr	r0, [pc, #8]	; (400d7c <PIOE_Handler+0x10>)
  400d74:	4b02      	ldr	r3, [pc, #8]	; (400d80 <PIOE_Handler+0x14>)
  400d76:	4798      	blx	r3
}
  400d78:	bf00      	nop
  400d7a:	bd80      	pop	{r7, pc}
  400d7c:	400e1600 	.word	0x400e1600
  400d80:	00400bb9 	.word	0x00400bb9

00400d84 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400d84:	b480      	push	{r7}
  400d86:	b083      	sub	sp, #12
  400d88:	af00      	add	r7, sp, #0
  400d8a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400d8c:	687b      	ldr	r3, [r7, #4]
  400d8e:	3b01      	subs	r3, #1
  400d90:	2b03      	cmp	r3, #3
  400d92:	d81a      	bhi.n	400dca <pmc_mck_set_division+0x46>
  400d94:	a201      	add	r2, pc, #4	; (adr r2, 400d9c <pmc_mck_set_division+0x18>)
  400d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d9a:	bf00      	nop
  400d9c:	00400dad 	.word	0x00400dad
  400da0:	00400db3 	.word	0x00400db3
  400da4:	00400dbb 	.word	0x00400dbb
  400da8:	00400dc3 	.word	0x00400dc3
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400dac:	2300      	movs	r3, #0
  400dae:	607b      	str	r3, [r7, #4]
			break;
  400db0:	e00e      	b.n	400dd0 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400db2:	f44f 7380 	mov.w	r3, #256	; 0x100
  400db6:	607b      	str	r3, [r7, #4]
			break;
  400db8:	e00a      	b.n	400dd0 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400dba:	f44f 7340 	mov.w	r3, #768	; 0x300
  400dbe:	607b      	str	r3, [r7, #4]
			break;
  400dc0:	e006      	b.n	400dd0 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
  400dc6:	607b      	str	r3, [r7, #4]
			break;
  400dc8:	e002      	b.n	400dd0 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400dca:	2300      	movs	r3, #0
  400dcc:	607b      	str	r3, [r7, #4]
			break;
  400dce:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400dd0:	490a      	ldr	r1, [pc, #40]	; (400dfc <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400dd2:	4b0a      	ldr	r3, [pc, #40]	; (400dfc <pmc_mck_set_division+0x78>)
  400dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400dda:	687b      	ldr	r3, [r7, #4]
  400ddc:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400dde:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400de0:	bf00      	nop
  400de2:	4b06      	ldr	r3, [pc, #24]	; (400dfc <pmc_mck_set_division+0x78>)
  400de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400de6:	f003 0308 	and.w	r3, r3, #8
  400dea:	2b00      	cmp	r3, #0
  400dec:	d0f9      	beq.n	400de2 <pmc_mck_set_division+0x5e>
}
  400dee:	bf00      	nop
  400df0:	370c      	adds	r7, #12
  400df2:	46bd      	mov	sp, r7
  400df4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df8:	4770      	bx	lr
  400dfa:	bf00      	nop
  400dfc:	400e0600 	.word	0x400e0600

00400e00 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400e00:	b480      	push	{r7}
  400e02:	b085      	sub	sp, #20
  400e04:	af00      	add	r7, sp, #0
  400e06:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e08:	491d      	ldr	r1, [pc, #116]	; (400e80 <pmc_switch_mck_to_pllack+0x80>)
  400e0a:	4b1d      	ldr	r3, [pc, #116]	; (400e80 <pmc_switch_mck_to_pllack+0x80>)
  400e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400e12:	687b      	ldr	r3, [r7, #4]
  400e14:	4313      	orrs	r3, r2
  400e16:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e1c:	60fb      	str	r3, [r7, #12]
  400e1e:	e007      	b.n	400e30 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e20:	68fb      	ldr	r3, [r7, #12]
  400e22:	2b00      	cmp	r3, #0
  400e24:	d101      	bne.n	400e2a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400e26:	2301      	movs	r3, #1
  400e28:	e023      	b.n	400e72 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e2a:	68fb      	ldr	r3, [r7, #12]
  400e2c:	3b01      	subs	r3, #1
  400e2e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e30:	4b13      	ldr	r3, [pc, #76]	; (400e80 <pmc_switch_mck_to_pllack+0x80>)
  400e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e34:	f003 0308 	and.w	r3, r3, #8
  400e38:	2b00      	cmp	r3, #0
  400e3a:	d0f1      	beq.n	400e20 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e3c:	4a10      	ldr	r2, [pc, #64]	; (400e80 <pmc_switch_mck_to_pllack+0x80>)
  400e3e:	4b10      	ldr	r3, [pc, #64]	; (400e80 <pmc_switch_mck_to_pllack+0x80>)
  400e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e42:	f023 0303 	bic.w	r3, r3, #3
  400e46:	f043 0302 	orr.w	r3, r3, #2
  400e4a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e50:	60fb      	str	r3, [r7, #12]
  400e52:	e007      	b.n	400e64 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e54:	68fb      	ldr	r3, [r7, #12]
  400e56:	2b00      	cmp	r3, #0
  400e58:	d101      	bne.n	400e5e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400e5a:	2301      	movs	r3, #1
  400e5c:	e009      	b.n	400e72 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e5e:	68fb      	ldr	r3, [r7, #12]
  400e60:	3b01      	subs	r3, #1
  400e62:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e64:	4b06      	ldr	r3, [pc, #24]	; (400e80 <pmc_switch_mck_to_pllack+0x80>)
  400e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e68:	f003 0308 	and.w	r3, r3, #8
  400e6c:	2b00      	cmp	r3, #0
  400e6e:	d0f1      	beq.n	400e54 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400e70:	2300      	movs	r3, #0
}
  400e72:	4618      	mov	r0, r3
  400e74:	3714      	adds	r7, #20
  400e76:	46bd      	mov	sp, r7
  400e78:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e7c:	4770      	bx	lr
  400e7e:	bf00      	nop
  400e80:	400e0600 	.word	0x400e0600

00400e84 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400e84:	b480      	push	{r7}
  400e86:	b083      	sub	sp, #12
  400e88:	af00      	add	r7, sp, #0
  400e8a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400e8c:	687b      	ldr	r3, [r7, #4]
  400e8e:	2b01      	cmp	r3, #1
  400e90:	d105      	bne.n	400e9e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400e92:	4907      	ldr	r1, [pc, #28]	; (400eb0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400e94:	4b06      	ldr	r3, [pc, #24]	; (400eb0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400e96:	689a      	ldr	r2, [r3, #8]
  400e98:	4b06      	ldr	r3, [pc, #24]	; (400eb4 <pmc_switch_sclk_to_32kxtal+0x30>)
  400e9a:	4313      	orrs	r3, r2
  400e9c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400e9e:	4b04      	ldr	r3, [pc, #16]	; (400eb0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400ea0:	4a05      	ldr	r2, [pc, #20]	; (400eb8 <pmc_switch_sclk_to_32kxtal+0x34>)
  400ea2:	601a      	str	r2, [r3, #0]
}
  400ea4:	bf00      	nop
  400ea6:	370c      	adds	r7, #12
  400ea8:	46bd      	mov	sp, r7
  400eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eae:	4770      	bx	lr
  400eb0:	400e1810 	.word	0x400e1810
  400eb4:	a5100000 	.word	0xa5100000
  400eb8:	a5000008 	.word	0xa5000008

00400ebc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400ebc:	b480      	push	{r7}
  400ebe:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400ec0:	4b09      	ldr	r3, [pc, #36]	; (400ee8 <pmc_osc_is_ready_32kxtal+0x2c>)
  400ec2:	695b      	ldr	r3, [r3, #20]
  400ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400ec8:	2b00      	cmp	r3, #0
  400eca:	d007      	beq.n	400edc <pmc_osc_is_ready_32kxtal+0x20>
  400ecc:	4b07      	ldr	r3, [pc, #28]	; (400eec <pmc_osc_is_ready_32kxtal+0x30>)
  400ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400ed4:	2b00      	cmp	r3, #0
  400ed6:	d001      	beq.n	400edc <pmc_osc_is_ready_32kxtal+0x20>
  400ed8:	2301      	movs	r3, #1
  400eda:	e000      	b.n	400ede <pmc_osc_is_ready_32kxtal+0x22>
  400edc:	2300      	movs	r3, #0
}
  400ede:	4618      	mov	r0, r3
  400ee0:	46bd      	mov	sp, r7
  400ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee6:	4770      	bx	lr
  400ee8:	400e1810 	.word	0x400e1810
  400eec:	400e0600 	.word	0x400e0600

00400ef0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400ef0:	b480      	push	{r7}
  400ef2:	b083      	sub	sp, #12
  400ef4:	af00      	add	r7, sp, #0
  400ef6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400ef8:	4915      	ldr	r1, [pc, #84]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400efa:	4b15      	ldr	r3, [pc, #84]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400efc:	6a1a      	ldr	r2, [r3, #32]
  400efe:	4b15      	ldr	r3, [pc, #84]	; (400f54 <pmc_switch_mainck_to_fastrc+0x64>)
  400f00:	4313      	orrs	r3, r2
  400f02:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f04:	bf00      	nop
  400f06:	4b12      	ldr	r3, [pc, #72]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f0e:	2b00      	cmp	r3, #0
  400f10:	d0f9      	beq.n	400f06 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f12:	490f      	ldr	r1, [pc, #60]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400f14:	4b0e      	ldr	r3, [pc, #56]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400f16:	6a1a      	ldr	r2, [r3, #32]
  400f18:	4b0f      	ldr	r3, [pc, #60]	; (400f58 <pmc_switch_mainck_to_fastrc+0x68>)
  400f1a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400f1c:	687a      	ldr	r2, [r7, #4]
  400f1e:	4313      	orrs	r3, r2
  400f20:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f24:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f26:	bf00      	nop
  400f28:	4b09      	ldr	r3, [pc, #36]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f30:	2b00      	cmp	r3, #0
  400f32:	d0f9      	beq.n	400f28 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400f34:	4906      	ldr	r1, [pc, #24]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400f36:	4b06      	ldr	r3, [pc, #24]	; (400f50 <pmc_switch_mainck_to_fastrc+0x60>)
  400f38:	6a1a      	ldr	r2, [r3, #32]
  400f3a:	4b08      	ldr	r3, [pc, #32]	; (400f5c <pmc_switch_mainck_to_fastrc+0x6c>)
  400f3c:	4013      	ands	r3, r2
  400f3e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400f42:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400f44:	bf00      	nop
  400f46:	370c      	adds	r7, #12
  400f48:	46bd      	mov	sp, r7
  400f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4e:	4770      	bx	lr
  400f50:	400e0600 	.word	0x400e0600
  400f54:	00370008 	.word	0x00370008
  400f58:	ffc8ff8f 	.word	0xffc8ff8f
  400f5c:	fec8ffff 	.word	0xfec8ffff

00400f60 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400f60:	b480      	push	{r7}
  400f62:	b083      	sub	sp, #12
  400f64:	af00      	add	r7, sp, #0
  400f66:	6078      	str	r0, [r7, #4]
  400f68:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f6a:	687b      	ldr	r3, [r7, #4]
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	d008      	beq.n	400f82 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f70:	4913      	ldr	r1, [pc, #76]	; (400fc0 <pmc_switch_mainck_to_xtal+0x60>)
  400f72:	4b13      	ldr	r3, [pc, #76]	; (400fc0 <pmc_switch_mainck_to_xtal+0x60>)
  400f74:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f76:	4a13      	ldr	r2, [pc, #76]	; (400fc4 <pmc_switch_mainck_to_xtal+0x64>)
  400f78:	401a      	ands	r2, r3
  400f7a:	4b13      	ldr	r3, [pc, #76]	; (400fc8 <pmc_switch_mainck_to_xtal+0x68>)
  400f7c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f7e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400f80:	e018      	b.n	400fb4 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f82:	490f      	ldr	r1, [pc, #60]	; (400fc0 <pmc_switch_mainck_to_xtal+0x60>)
  400f84:	4b0e      	ldr	r3, [pc, #56]	; (400fc0 <pmc_switch_mainck_to_xtal+0x60>)
  400f86:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f88:	4b10      	ldr	r3, [pc, #64]	; (400fcc <pmc_switch_mainck_to_xtal+0x6c>)
  400f8a:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f8c:	683a      	ldr	r2, [r7, #0]
  400f8e:	0212      	lsls	r2, r2, #8
  400f90:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f92:	431a      	orrs	r2, r3
  400f94:	4b0e      	ldr	r3, [pc, #56]	; (400fd0 <pmc_switch_mainck_to_xtal+0x70>)
  400f96:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f98:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f9a:	bf00      	nop
  400f9c:	4b08      	ldr	r3, [pc, #32]	; (400fc0 <pmc_switch_mainck_to_xtal+0x60>)
  400f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fa0:	f003 0301 	and.w	r3, r3, #1
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	d0f9      	beq.n	400f9c <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fa8:	4905      	ldr	r1, [pc, #20]	; (400fc0 <pmc_switch_mainck_to_xtal+0x60>)
  400faa:	4b05      	ldr	r3, [pc, #20]	; (400fc0 <pmc_switch_mainck_to_xtal+0x60>)
  400fac:	6a1a      	ldr	r2, [r3, #32]
  400fae:	4b09      	ldr	r3, [pc, #36]	; (400fd4 <pmc_switch_mainck_to_xtal+0x74>)
  400fb0:	4313      	orrs	r3, r2
  400fb2:	620b      	str	r3, [r1, #32]
}
  400fb4:	bf00      	nop
  400fb6:	370c      	adds	r7, #12
  400fb8:	46bd      	mov	sp, r7
  400fba:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fbe:	4770      	bx	lr
  400fc0:	400e0600 	.word	0x400e0600
  400fc4:	fec8fffc 	.word	0xfec8fffc
  400fc8:	01370002 	.word	0x01370002
  400fcc:	ffc8fffc 	.word	0xffc8fffc
  400fd0:	00370001 	.word	0x00370001
  400fd4:	01370000 	.word	0x01370000

00400fd8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400fd8:	b480      	push	{r7}
  400fda:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fdc:	4b04      	ldr	r3, [pc, #16]	; (400ff0 <pmc_osc_is_ready_mainck+0x18>)
  400fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400fe4:	4618      	mov	r0, r3
  400fe6:	46bd      	mov	sp, r7
  400fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fec:	4770      	bx	lr
  400fee:	bf00      	nop
  400ff0:	400e0600 	.word	0x400e0600

00400ff4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400ff4:	b480      	push	{r7}
  400ff6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400ff8:	4b04      	ldr	r3, [pc, #16]	; (40100c <pmc_disable_pllack+0x18>)
  400ffa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ffe:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401000:	bf00      	nop
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr
  40100a:	bf00      	nop
  40100c:	400e0600 	.word	0x400e0600

00401010 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401010:	b480      	push	{r7}
  401012:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401014:	4b04      	ldr	r3, [pc, #16]	; (401028 <pmc_is_locked_pllack+0x18>)
  401016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401018:	f003 0302 	and.w	r3, r3, #2
}
  40101c:	4618      	mov	r0, r3
  40101e:	46bd      	mov	sp, r7
  401020:	f85d 7b04 	ldr.w	r7, [sp], #4
  401024:	4770      	bx	lr
  401026:	bf00      	nop
  401028:	400e0600 	.word	0x400e0600

0040102c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40102c:	b480      	push	{r7}
  40102e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401030:	4b04      	ldr	r3, [pc, #16]	; (401044 <pmc_is_locked_upll+0x18>)
  401032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401034:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401038:	4618      	mov	r0, r3
  40103a:	46bd      	mov	sp, r7
  40103c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401040:	4770      	bx	lr
  401042:	bf00      	nop
  401044:	400e0600 	.word	0x400e0600

00401048 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401048:	b480      	push	{r7}
  40104a:	b083      	sub	sp, #12
  40104c:	af00      	add	r7, sp, #0
  40104e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401050:	687b      	ldr	r3, [r7, #4]
  401052:	2b3f      	cmp	r3, #63	; 0x3f
  401054:	d901      	bls.n	40105a <pmc_enable_periph_clk+0x12>
		return 1;
  401056:	2301      	movs	r3, #1
  401058:	e02f      	b.n	4010ba <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40105a:	687b      	ldr	r3, [r7, #4]
  40105c:	2b1f      	cmp	r3, #31
  40105e:	d813      	bhi.n	401088 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401060:	4b19      	ldr	r3, [pc, #100]	; (4010c8 <pmc_enable_periph_clk+0x80>)
  401062:	699a      	ldr	r2, [r3, #24]
  401064:	2101      	movs	r1, #1
  401066:	687b      	ldr	r3, [r7, #4]
  401068:	fa01 f303 	lsl.w	r3, r1, r3
  40106c:	401a      	ands	r2, r3
  40106e:	2101      	movs	r1, #1
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	fa01 f303 	lsl.w	r3, r1, r3
  401076:	429a      	cmp	r2, r3
  401078:	d01e      	beq.n	4010b8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40107a:	4a13      	ldr	r2, [pc, #76]	; (4010c8 <pmc_enable_periph_clk+0x80>)
  40107c:	2101      	movs	r1, #1
  40107e:	687b      	ldr	r3, [r7, #4]
  401080:	fa01 f303 	lsl.w	r3, r1, r3
  401084:	6113      	str	r3, [r2, #16]
  401086:	e017      	b.n	4010b8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401088:	687b      	ldr	r3, [r7, #4]
  40108a:	3b20      	subs	r3, #32
  40108c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40108e:	4b0e      	ldr	r3, [pc, #56]	; (4010c8 <pmc_enable_periph_clk+0x80>)
  401090:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401094:	2101      	movs	r1, #1
  401096:	687b      	ldr	r3, [r7, #4]
  401098:	fa01 f303 	lsl.w	r3, r1, r3
  40109c:	401a      	ands	r2, r3
  40109e:	2101      	movs	r1, #1
  4010a0:	687b      	ldr	r3, [r7, #4]
  4010a2:	fa01 f303 	lsl.w	r3, r1, r3
  4010a6:	429a      	cmp	r2, r3
  4010a8:	d006      	beq.n	4010b8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4010aa:	4a07      	ldr	r2, [pc, #28]	; (4010c8 <pmc_enable_periph_clk+0x80>)
  4010ac:	2101      	movs	r1, #1
  4010ae:	687b      	ldr	r3, [r7, #4]
  4010b0:	fa01 f303 	lsl.w	r3, r1, r3
  4010b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4010b8:	2300      	movs	r3, #0
}
  4010ba:	4618      	mov	r0, r3
  4010bc:	370c      	adds	r7, #12
  4010be:	46bd      	mov	sp, r7
  4010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010c4:	4770      	bx	lr
  4010c6:	bf00      	nop
  4010c8:	400e0600 	.word	0x400e0600

004010cc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4010cc:	b480      	push	{r7}
  4010ce:	b083      	sub	sp, #12
  4010d0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010d2:	f3ef 8310 	mrs	r3, PRIMASK
  4010d6:	607b      	str	r3, [r7, #4]
  return(result);
  4010d8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010da:	2b00      	cmp	r3, #0
  4010dc:	bf0c      	ite	eq
  4010de:	2301      	moveq	r3, #1
  4010e0:	2300      	movne	r3, #0
  4010e2:	b2db      	uxtb	r3, r3
  4010e4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4010e6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4010e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010ec:	4b04      	ldr	r3, [pc, #16]	; (401100 <cpu_irq_save+0x34>)
  4010ee:	2200      	movs	r2, #0
  4010f0:	701a      	strb	r2, [r3, #0]
	return flags;
  4010f2:	683b      	ldr	r3, [r7, #0]
}
  4010f4:	4618      	mov	r0, r3
  4010f6:	370c      	adds	r7, #12
  4010f8:	46bd      	mov	sp, r7
  4010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010fe:	4770      	bx	lr
  401100:	20400000 	.word	0x20400000

00401104 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401104:	b480      	push	{r7}
  401106:	b083      	sub	sp, #12
  401108:	af00      	add	r7, sp, #0
  40110a:	6078      	str	r0, [r7, #4]
	return (flags);
  40110c:	687b      	ldr	r3, [r7, #4]
  40110e:	2b00      	cmp	r3, #0
  401110:	bf14      	ite	ne
  401112:	2301      	movne	r3, #1
  401114:	2300      	moveq	r3, #0
  401116:	b2db      	uxtb	r3, r3
}
  401118:	4618      	mov	r0, r3
  40111a:	370c      	adds	r7, #12
  40111c:	46bd      	mov	sp, r7
  40111e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401122:	4770      	bx	lr

00401124 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401124:	b580      	push	{r7, lr}
  401126:	b082      	sub	sp, #8
  401128:	af00      	add	r7, sp, #0
  40112a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40112c:	6878      	ldr	r0, [r7, #4]
  40112e:	4b07      	ldr	r3, [pc, #28]	; (40114c <cpu_irq_restore+0x28>)
  401130:	4798      	blx	r3
  401132:	4603      	mov	r3, r0
  401134:	2b00      	cmp	r3, #0
  401136:	d005      	beq.n	401144 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401138:	4b05      	ldr	r3, [pc, #20]	; (401150 <cpu_irq_restore+0x2c>)
  40113a:	2201      	movs	r2, #1
  40113c:	701a      	strb	r2, [r3, #0]
  40113e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401142:	b662      	cpsie	i
}
  401144:	bf00      	nop
  401146:	3708      	adds	r7, #8
  401148:	46bd      	mov	sp, r7
  40114a:	bd80      	pop	{r7, pc}
  40114c:	00401105 	.word	0x00401105
  401150:	20400000 	.word	0x20400000

00401154 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401154:	b580      	push	{r7, lr}
  401156:	b084      	sub	sp, #16
  401158:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40115a:	4b1e      	ldr	r3, [pc, #120]	; (4011d4 <Reset_Handler+0x80>)
  40115c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40115e:	4b1e      	ldr	r3, [pc, #120]	; (4011d8 <Reset_Handler+0x84>)
  401160:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401162:	68fa      	ldr	r2, [r7, #12]
  401164:	68bb      	ldr	r3, [r7, #8]
  401166:	429a      	cmp	r2, r3
  401168:	d00c      	beq.n	401184 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40116a:	e007      	b.n	40117c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40116c:	68bb      	ldr	r3, [r7, #8]
  40116e:	1d1a      	adds	r2, r3, #4
  401170:	60ba      	str	r2, [r7, #8]
  401172:	68fa      	ldr	r2, [r7, #12]
  401174:	1d11      	adds	r1, r2, #4
  401176:	60f9      	str	r1, [r7, #12]
  401178:	6812      	ldr	r2, [r2, #0]
  40117a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40117c:	68bb      	ldr	r3, [r7, #8]
  40117e:	4a17      	ldr	r2, [pc, #92]	; (4011dc <Reset_Handler+0x88>)
  401180:	4293      	cmp	r3, r2
  401182:	d3f3      	bcc.n	40116c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401184:	4b16      	ldr	r3, [pc, #88]	; (4011e0 <Reset_Handler+0x8c>)
  401186:	60bb      	str	r3, [r7, #8]
  401188:	e004      	b.n	401194 <Reset_Handler+0x40>
                *pDest++ = 0;
  40118a:	68bb      	ldr	r3, [r7, #8]
  40118c:	1d1a      	adds	r2, r3, #4
  40118e:	60ba      	str	r2, [r7, #8]
  401190:	2200      	movs	r2, #0
  401192:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401194:	68bb      	ldr	r3, [r7, #8]
  401196:	4a13      	ldr	r2, [pc, #76]	; (4011e4 <Reset_Handler+0x90>)
  401198:	4293      	cmp	r3, r2
  40119a:	d3f6      	bcc.n	40118a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40119c:	4b12      	ldr	r3, [pc, #72]	; (4011e8 <Reset_Handler+0x94>)
  40119e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011a0:	4a12      	ldr	r2, [pc, #72]	; (4011ec <Reset_Handler+0x98>)
  4011a2:	68fb      	ldr	r3, [r7, #12]
  4011a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011a8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4011aa:	4b11      	ldr	r3, [pc, #68]	; (4011f0 <Reset_Handler+0x9c>)
  4011ac:	4798      	blx	r3
  4011ae:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4011b0:	4a10      	ldr	r2, [pc, #64]	; (4011f4 <Reset_Handler+0xa0>)
  4011b2:	4b10      	ldr	r3, [pc, #64]	; (4011f4 <Reset_Handler+0xa0>)
  4011b4:	681b      	ldr	r3, [r3, #0]
  4011b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4011ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4011bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011c0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4011c4:	6878      	ldr	r0, [r7, #4]
  4011c6:	4b0c      	ldr	r3, [pc, #48]	; (4011f8 <Reset_Handler+0xa4>)
  4011c8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4011ca:	4b0c      	ldr	r3, [pc, #48]	; (4011fc <Reset_Handler+0xa8>)
  4011cc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4011ce:	4b0c      	ldr	r3, [pc, #48]	; (401200 <Reset_Handler+0xac>)
  4011d0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4011d2:	e7fe      	b.n	4011d2 <Reset_Handler+0x7e>
  4011d4:	004046ec 	.word	0x004046ec
  4011d8:	20400000 	.word	0x20400000
  4011dc:	204009b8 	.word	0x204009b8
  4011e0:	204009b8 	.word	0x204009b8
  4011e4:	20400b40 	.word	0x20400b40
  4011e8:	00400000 	.word	0x00400000
  4011ec:	e000ed00 	.word	0xe000ed00
  4011f0:	004010cd 	.word	0x004010cd
  4011f4:	e000ed88 	.word	0xe000ed88
  4011f8:	00401125 	.word	0x00401125
  4011fc:	00401721 	.word	0x00401721
  401200:	004016b5 	.word	0x004016b5

00401204 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401204:	b480      	push	{r7}
  401206:	af00      	add	r7, sp, #0
        while (1) {
  401208:	e7fe      	b.n	401208 <Dummy_Handler+0x4>
	...

0040120c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40120c:	b480      	push	{r7}
  40120e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401210:	4b52      	ldr	r3, [pc, #328]	; (40135c <SystemCoreClockUpdate+0x150>)
  401212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401214:	f003 0303 	and.w	r3, r3, #3
  401218:	2b01      	cmp	r3, #1
  40121a:	d014      	beq.n	401246 <SystemCoreClockUpdate+0x3a>
  40121c:	2b01      	cmp	r3, #1
  40121e:	d302      	bcc.n	401226 <SystemCoreClockUpdate+0x1a>
  401220:	2b02      	cmp	r3, #2
  401222:	d038      	beq.n	401296 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401224:	e07a      	b.n	40131c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401226:	4b4e      	ldr	r3, [pc, #312]	; (401360 <SystemCoreClockUpdate+0x154>)
  401228:	695b      	ldr	r3, [r3, #20]
  40122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40122e:	2b00      	cmp	r3, #0
  401230:	d004      	beq.n	40123c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401232:	4b4c      	ldr	r3, [pc, #304]	; (401364 <SystemCoreClockUpdate+0x158>)
  401234:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401238:	601a      	str	r2, [r3, #0]
    break;
  40123a:	e06f      	b.n	40131c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40123c:	4b49      	ldr	r3, [pc, #292]	; (401364 <SystemCoreClockUpdate+0x158>)
  40123e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401242:	601a      	str	r2, [r3, #0]
    break;
  401244:	e06a      	b.n	40131c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401246:	4b45      	ldr	r3, [pc, #276]	; (40135c <SystemCoreClockUpdate+0x150>)
  401248:	6a1b      	ldr	r3, [r3, #32]
  40124a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40124e:	2b00      	cmp	r3, #0
  401250:	d003      	beq.n	40125a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401252:	4b44      	ldr	r3, [pc, #272]	; (401364 <SystemCoreClockUpdate+0x158>)
  401254:	4a44      	ldr	r2, [pc, #272]	; (401368 <SystemCoreClockUpdate+0x15c>)
  401256:	601a      	str	r2, [r3, #0]
    break;
  401258:	e060      	b.n	40131c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40125a:	4b42      	ldr	r3, [pc, #264]	; (401364 <SystemCoreClockUpdate+0x158>)
  40125c:	4a43      	ldr	r2, [pc, #268]	; (40136c <SystemCoreClockUpdate+0x160>)
  40125e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401260:	4b3e      	ldr	r3, [pc, #248]	; (40135c <SystemCoreClockUpdate+0x150>)
  401262:	6a1b      	ldr	r3, [r3, #32]
  401264:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401268:	2b10      	cmp	r3, #16
  40126a:	d004      	beq.n	401276 <SystemCoreClockUpdate+0x6a>
  40126c:	2b20      	cmp	r3, #32
  40126e:	d008      	beq.n	401282 <SystemCoreClockUpdate+0x76>
  401270:	2b00      	cmp	r3, #0
  401272:	d00e      	beq.n	401292 <SystemCoreClockUpdate+0x86>
          break;
  401274:	e00e      	b.n	401294 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401276:	4b3b      	ldr	r3, [pc, #236]	; (401364 <SystemCoreClockUpdate+0x158>)
  401278:	681b      	ldr	r3, [r3, #0]
  40127a:	005b      	lsls	r3, r3, #1
  40127c:	4a39      	ldr	r2, [pc, #228]	; (401364 <SystemCoreClockUpdate+0x158>)
  40127e:	6013      	str	r3, [r2, #0]
          break;
  401280:	e008      	b.n	401294 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401282:	4b38      	ldr	r3, [pc, #224]	; (401364 <SystemCoreClockUpdate+0x158>)
  401284:	681a      	ldr	r2, [r3, #0]
  401286:	4613      	mov	r3, r2
  401288:	005b      	lsls	r3, r3, #1
  40128a:	4413      	add	r3, r2
  40128c:	4a35      	ldr	r2, [pc, #212]	; (401364 <SystemCoreClockUpdate+0x158>)
  40128e:	6013      	str	r3, [r2, #0]
          break;
  401290:	e000      	b.n	401294 <SystemCoreClockUpdate+0x88>
          break;
  401292:	bf00      	nop
    break;
  401294:	e042      	b.n	40131c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401296:	4b31      	ldr	r3, [pc, #196]	; (40135c <SystemCoreClockUpdate+0x150>)
  401298:	6a1b      	ldr	r3, [r3, #32]
  40129a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40129e:	2b00      	cmp	r3, #0
  4012a0:	d003      	beq.n	4012aa <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012a2:	4b30      	ldr	r3, [pc, #192]	; (401364 <SystemCoreClockUpdate+0x158>)
  4012a4:	4a30      	ldr	r2, [pc, #192]	; (401368 <SystemCoreClockUpdate+0x15c>)
  4012a6:	601a      	str	r2, [r3, #0]
  4012a8:	e01c      	b.n	4012e4 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012aa:	4b2e      	ldr	r3, [pc, #184]	; (401364 <SystemCoreClockUpdate+0x158>)
  4012ac:	4a2f      	ldr	r2, [pc, #188]	; (40136c <SystemCoreClockUpdate+0x160>)
  4012ae:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012b0:	4b2a      	ldr	r3, [pc, #168]	; (40135c <SystemCoreClockUpdate+0x150>)
  4012b2:	6a1b      	ldr	r3, [r3, #32]
  4012b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012b8:	2b10      	cmp	r3, #16
  4012ba:	d004      	beq.n	4012c6 <SystemCoreClockUpdate+0xba>
  4012bc:	2b20      	cmp	r3, #32
  4012be:	d008      	beq.n	4012d2 <SystemCoreClockUpdate+0xc6>
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d00e      	beq.n	4012e2 <SystemCoreClockUpdate+0xd6>
          break;
  4012c4:	e00e      	b.n	4012e4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4012c6:	4b27      	ldr	r3, [pc, #156]	; (401364 <SystemCoreClockUpdate+0x158>)
  4012c8:	681b      	ldr	r3, [r3, #0]
  4012ca:	005b      	lsls	r3, r3, #1
  4012cc:	4a25      	ldr	r2, [pc, #148]	; (401364 <SystemCoreClockUpdate+0x158>)
  4012ce:	6013      	str	r3, [r2, #0]
          break;
  4012d0:	e008      	b.n	4012e4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  4012d2:	4b24      	ldr	r3, [pc, #144]	; (401364 <SystemCoreClockUpdate+0x158>)
  4012d4:	681a      	ldr	r2, [r3, #0]
  4012d6:	4613      	mov	r3, r2
  4012d8:	005b      	lsls	r3, r3, #1
  4012da:	4413      	add	r3, r2
  4012dc:	4a21      	ldr	r2, [pc, #132]	; (401364 <SystemCoreClockUpdate+0x158>)
  4012de:	6013      	str	r3, [r2, #0]
          break;
  4012e0:	e000      	b.n	4012e4 <SystemCoreClockUpdate+0xd8>
          break;
  4012e2:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012e4:	4b1d      	ldr	r3, [pc, #116]	; (40135c <SystemCoreClockUpdate+0x150>)
  4012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012e8:	f003 0303 	and.w	r3, r3, #3
  4012ec:	2b02      	cmp	r3, #2
  4012ee:	d114      	bne.n	40131a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012f0:	4b1a      	ldr	r3, [pc, #104]	; (40135c <SystemCoreClockUpdate+0x150>)
  4012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4012f4:	0c1b      	lsrs	r3, r3, #16
  4012f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4012fa:	3301      	adds	r3, #1
  4012fc:	4a19      	ldr	r2, [pc, #100]	; (401364 <SystemCoreClockUpdate+0x158>)
  4012fe:	6812      	ldr	r2, [r2, #0]
  401300:	fb02 f303 	mul.w	r3, r2, r3
  401304:	4a17      	ldr	r2, [pc, #92]	; (401364 <SystemCoreClockUpdate+0x158>)
  401306:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401308:	4b14      	ldr	r3, [pc, #80]	; (40135c <SystemCoreClockUpdate+0x150>)
  40130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40130c:	b2db      	uxtb	r3, r3
  40130e:	4a15      	ldr	r2, [pc, #84]	; (401364 <SystemCoreClockUpdate+0x158>)
  401310:	6812      	ldr	r2, [r2, #0]
  401312:	fbb2 f3f3 	udiv	r3, r2, r3
  401316:	4a13      	ldr	r2, [pc, #76]	; (401364 <SystemCoreClockUpdate+0x158>)
  401318:	6013      	str	r3, [r2, #0]
    break;
  40131a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40131c:	4b0f      	ldr	r3, [pc, #60]	; (40135c <SystemCoreClockUpdate+0x150>)
  40131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401320:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401324:	2b70      	cmp	r3, #112	; 0x70
  401326:	d108      	bne.n	40133a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401328:	4b0e      	ldr	r3, [pc, #56]	; (401364 <SystemCoreClockUpdate+0x158>)
  40132a:	681b      	ldr	r3, [r3, #0]
  40132c:	4a10      	ldr	r2, [pc, #64]	; (401370 <SystemCoreClockUpdate+0x164>)
  40132e:	fba2 2303 	umull	r2, r3, r2, r3
  401332:	085b      	lsrs	r3, r3, #1
  401334:	4a0b      	ldr	r2, [pc, #44]	; (401364 <SystemCoreClockUpdate+0x158>)
  401336:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401338:	e00a      	b.n	401350 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40133a:	4b08      	ldr	r3, [pc, #32]	; (40135c <SystemCoreClockUpdate+0x150>)
  40133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40133e:	091b      	lsrs	r3, r3, #4
  401340:	f003 0307 	and.w	r3, r3, #7
  401344:	4a07      	ldr	r2, [pc, #28]	; (401364 <SystemCoreClockUpdate+0x158>)
  401346:	6812      	ldr	r2, [r2, #0]
  401348:	fa22 f303 	lsr.w	r3, r2, r3
  40134c:	4a05      	ldr	r2, [pc, #20]	; (401364 <SystemCoreClockUpdate+0x158>)
  40134e:	6013      	str	r3, [r2, #0]
}
  401350:	bf00      	nop
  401352:	46bd      	mov	sp, r7
  401354:	f85d 7b04 	ldr.w	r7, [sp], #4
  401358:	4770      	bx	lr
  40135a:	bf00      	nop
  40135c:	400e0600 	.word	0x400e0600
  401360:	400e1810 	.word	0x400e1810
  401364:	20400004 	.word	0x20400004
  401368:	00b71b00 	.word	0x00b71b00
  40136c:	003d0900 	.word	0x003d0900
  401370:	aaaaaaab 	.word	0xaaaaaaab

00401374 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401374:	b480      	push	{r7}
  401376:	b083      	sub	sp, #12
  401378:	af00      	add	r7, sp, #0
  40137a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40137c:	687b      	ldr	r3, [r7, #4]
  40137e:	4a19      	ldr	r2, [pc, #100]	; (4013e4 <system_init_flash+0x70>)
  401380:	4293      	cmp	r3, r2
  401382:	d804      	bhi.n	40138e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401384:	4b18      	ldr	r3, [pc, #96]	; (4013e8 <system_init_flash+0x74>)
  401386:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40138a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  40138c:	e023      	b.n	4013d6 <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  40138e:	687b      	ldr	r3, [r7, #4]
  401390:	4a16      	ldr	r2, [pc, #88]	; (4013ec <system_init_flash+0x78>)
  401392:	4293      	cmp	r3, r2
  401394:	d803      	bhi.n	40139e <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401396:	4b14      	ldr	r3, [pc, #80]	; (4013e8 <system_init_flash+0x74>)
  401398:	4a15      	ldr	r2, [pc, #84]	; (4013f0 <system_init_flash+0x7c>)
  40139a:	601a      	str	r2, [r3, #0]
}
  40139c:	e01b      	b.n	4013d6 <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  40139e:	687b      	ldr	r3, [r7, #4]
  4013a0:	4a14      	ldr	r2, [pc, #80]	; (4013f4 <system_init_flash+0x80>)
  4013a2:	4293      	cmp	r3, r2
  4013a4:	d803      	bhi.n	4013ae <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4013a6:	4b10      	ldr	r3, [pc, #64]	; (4013e8 <system_init_flash+0x74>)
  4013a8:	4a13      	ldr	r2, [pc, #76]	; (4013f8 <system_init_flash+0x84>)
  4013aa:	601a      	str	r2, [r3, #0]
}
  4013ac:	e013      	b.n	4013d6 <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4013ae:	687b      	ldr	r3, [r7, #4]
  4013b0:	4a12      	ldr	r2, [pc, #72]	; (4013fc <system_init_flash+0x88>)
  4013b2:	4293      	cmp	r3, r2
  4013b4:	d803      	bhi.n	4013be <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4013b6:	4b0c      	ldr	r3, [pc, #48]	; (4013e8 <system_init_flash+0x74>)
  4013b8:	4a11      	ldr	r2, [pc, #68]	; (401400 <system_init_flash+0x8c>)
  4013ba:	601a      	str	r2, [r3, #0]
}
  4013bc:	e00b      	b.n	4013d6 <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4013be:	687b      	ldr	r3, [r7, #4]
  4013c0:	4a10      	ldr	r2, [pc, #64]	; (401404 <system_init_flash+0x90>)
  4013c2:	4293      	cmp	r3, r2
  4013c4:	d804      	bhi.n	4013d0 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013c6:	4b08      	ldr	r3, [pc, #32]	; (4013e8 <system_init_flash+0x74>)
  4013c8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4013cc:	601a      	str	r2, [r3, #0]
}
  4013ce:	e002      	b.n	4013d6 <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4013d0:	4b05      	ldr	r3, [pc, #20]	; (4013e8 <system_init_flash+0x74>)
  4013d2:	4a0d      	ldr	r2, [pc, #52]	; (401408 <system_init_flash+0x94>)
  4013d4:	601a      	str	r2, [r3, #0]
}
  4013d6:	bf00      	nop
  4013d8:	370c      	adds	r7, #12
  4013da:	46bd      	mov	sp, r7
  4013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013e0:	4770      	bx	lr
  4013e2:	bf00      	nop
  4013e4:	01312cff 	.word	0x01312cff
  4013e8:	400e0c00 	.word	0x400e0c00
  4013ec:	026259ff 	.word	0x026259ff
  4013f0:	04000100 	.word	0x04000100
  4013f4:	039386ff 	.word	0x039386ff
  4013f8:	04000200 	.word	0x04000200
  4013fc:	04c4b3ff 	.word	0x04c4b3ff
  401400:	04000300 	.word	0x04000300
  401404:	05f5e0ff 	.word	0x05f5e0ff
  401408:	04000500 	.word	0x04000500

0040140c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40140c:	b480      	push	{r7}
  40140e:	b085      	sub	sp, #20
  401410:	af00      	add	r7, sp, #0
  401412:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401414:	4b10      	ldr	r3, [pc, #64]	; (401458 <_sbrk+0x4c>)
  401416:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401418:	4b10      	ldr	r3, [pc, #64]	; (40145c <_sbrk+0x50>)
  40141a:	681b      	ldr	r3, [r3, #0]
  40141c:	2b00      	cmp	r3, #0
  40141e:	d102      	bne.n	401426 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401420:	4b0e      	ldr	r3, [pc, #56]	; (40145c <_sbrk+0x50>)
  401422:	4a0f      	ldr	r2, [pc, #60]	; (401460 <_sbrk+0x54>)
  401424:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401426:	4b0d      	ldr	r3, [pc, #52]	; (40145c <_sbrk+0x50>)
  401428:	681b      	ldr	r3, [r3, #0]
  40142a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40142c:	68ba      	ldr	r2, [r7, #8]
  40142e:	687b      	ldr	r3, [r7, #4]
  401430:	441a      	add	r2, r3
  401432:	68fb      	ldr	r3, [r7, #12]
  401434:	429a      	cmp	r2, r3
  401436:	dd02      	ble.n	40143e <_sbrk+0x32>
		return (caddr_t) -1;	
  401438:	f04f 33ff 	mov.w	r3, #4294967295
  40143c:	e006      	b.n	40144c <_sbrk+0x40>
	}

	heap += incr;
  40143e:	4b07      	ldr	r3, [pc, #28]	; (40145c <_sbrk+0x50>)
  401440:	681a      	ldr	r2, [r3, #0]
  401442:	687b      	ldr	r3, [r7, #4]
  401444:	4413      	add	r3, r2
  401446:	4a05      	ldr	r2, [pc, #20]	; (40145c <_sbrk+0x50>)
  401448:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40144a:	68bb      	ldr	r3, [r7, #8]
}
  40144c:	4618      	mov	r0, r3
  40144e:	3714      	adds	r7, #20
  401450:	46bd      	mov	sp, r7
  401452:	f85d 7b04 	ldr.w	r7, [sp], #4
  401456:	4770      	bx	lr
  401458:	2045fffc 	.word	0x2045fffc
  40145c:	20400a48 	.word	0x20400a48
  401460:	20402d40 	.word	0x20402d40

00401464 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401464:	b480      	push	{r7}
  401466:	b083      	sub	sp, #12
  401468:	af00      	add	r7, sp, #0
  40146a:	6078      	str	r0, [r7, #4]
	return -1;
  40146c:	f04f 33ff 	mov.w	r3, #4294967295
}
  401470:	4618      	mov	r0, r3
  401472:	370c      	adds	r7, #12
  401474:	46bd      	mov	sp, r7
  401476:	f85d 7b04 	ldr.w	r7, [sp], #4
  40147a:	4770      	bx	lr

0040147c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40147c:	b480      	push	{r7}
  40147e:	b083      	sub	sp, #12
  401480:	af00      	add	r7, sp, #0
  401482:	6078      	str	r0, [r7, #4]
  401484:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401486:	683b      	ldr	r3, [r7, #0]
  401488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40148c:	605a      	str	r2, [r3, #4]

	return 0;
  40148e:	2300      	movs	r3, #0
}
  401490:	4618      	mov	r0, r3
  401492:	370c      	adds	r7, #12
  401494:	46bd      	mov	sp, r7
  401496:	f85d 7b04 	ldr.w	r7, [sp], #4
  40149a:	4770      	bx	lr

0040149c <_isatty>:

extern int _isatty(int file)
{
  40149c:	b480      	push	{r7}
  40149e:	b083      	sub	sp, #12
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	6078      	str	r0, [r7, #4]
	return 1;
  4014a4:	2301      	movs	r3, #1
}
  4014a6:	4618      	mov	r0, r3
  4014a8:	370c      	adds	r7, #12
  4014aa:	46bd      	mov	sp, r7
  4014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014b0:	4770      	bx	lr

004014b2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  4014b2:	b480      	push	{r7}
  4014b4:	b085      	sub	sp, #20
  4014b6:	af00      	add	r7, sp, #0
  4014b8:	60f8      	str	r0, [r7, #12]
  4014ba:	60b9      	str	r1, [r7, #8]
  4014bc:	607a      	str	r2, [r7, #4]
	return 0;
  4014be:	2300      	movs	r3, #0
}
  4014c0:	4618      	mov	r0, r3
  4014c2:	3714      	adds	r7, #20
  4014c4:	46bd      	mov	sp, r7
  4014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014ca:	4770      	bx	lr

004014cc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4014cc:	b480      	push	{r7}
  4014ce:	b083      	sub	sp, #12
  4014d0:	af00      	add	r7, sp, #0
  4014d2:	4603      	mov	r3, r0
  4014d4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4014d6:	4909      	ldr	r1, [pc, #36]	; (4014fc <NVIC_EnableIRQ+0x30>)
  4014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4014dc:	095b      	lsrs	r3, r3, #5
  4014de:	79fa      	ldrb	r2, [r7, #7]
  4014e0:	f002 021f 	and.w	r2, r2, #31
  4014e4:	2001      	movs	r0, #1
  4014e6:	fa00 f202 	lsl.w	r2, r0, r2
  4014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4014ee:	bf00      	nop
  4014f0:	370c      	adds	r7, #12
  4014f2:	46bd      	mov	sp, r7
  4014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014f8:	4770      	bx	lr
  4014fa:	bf00      	nop
  4014fc:	e000e100 	.word	0xe000e100

00401500 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401500:	b480      	push	{r7}
  401502:	b083      	sub	sp, #12
  401504:	af00      	add	r7, sp, #0
  401506:	4603      	mov	r3, r0
  401508:	6039      	str	r1, [r7, #0]
  40150a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401510:	2b00      	cmp	r3, #0
  401512:	da0b      	bge.n	40152c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401514:	490d      	ldr	r1, [pc, #52]	; (40154c <NVIC_SetPriority+0x4c>)
  401516:	79fb      	ldrb	r3, [r7, #7]
  401518:	f003 030f 	and.w	r3, r3, #15
  40151c:	3b04      	subs	r3, #4
  40151e:	683a      	ldr	r2, [r7, #0]
  401520:	b2d2      	uxtb	r2, r2
  401522:	0152      	lsls	r2, r2, #5
  401524:	b2d2      	uxtb	r2, r2
  401526:	440b      	add	r3, r1
  401528:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  40152a:	e009      	b.n	401540 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40152c:	4908      	ldr	r1, [pc, #32]	; (401550 <NVIC_SetPriority+0x50>)
  40152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401532:	683a      	ldr	r2, [r7, #0]
  401534:	b2d2      	uxtb	r2, r2
  401536:	0152      	lsls	r2, r2, #5
  401538:	b2d2      	uxtb	r2, r2
  40153a:	440b      	add	r3, r1
  40153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401540:	bf00      	nop
  401542:	370c      	adds	r7, #12
  401544:	46bd      	mov	sp, r7
  401546:	f85d 7b04 	ldr.w	r7, [sp], #4
  40154a:	4770      	bx	lr
  40154c:	e000ed00 	.word	0xe000ed00
  401550:	e000e100 	.word	0xe000e100

00401554 <clk_callback>:
 *
 * !! Isso é um exemplo ruim, nao deve ser feito na pratica, !!
 * !! pois nao se deve usar delays dentro de interrupcoes    !!
 */
void clk_callback(void)
{
  401554:	b580      	push	{r7, lr}
  401556:	af00      	add	r7, sp, #0
  if(!pio_get(CLK_PIO, PIO_INPUT, CLK_IDX_MASK)) {
  401558:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40155c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401560:	480f      	ldr	r0, [pc, #60]	; (4015a0 <clk_callback+0x4c>)
  401562:	4b10      	ldr	r3, [pc, #64]	; (4015a4 <clk_callback+0x50>)
  401564:	4798      	blx	r3
  401566:	4603      	mov	r3, r0
  401568:	2b00      	cmp	r3, #0
  40156a:	d103      	bne.n	401574 <clk_callback+0x20>
	  clk_flag = 1;
  40156c:	4b0e      	ldr	r3, [pc, #56]	; (4015a8 <clk_callback+0x54>)
  40156e:	2201      	movs	r2, #1
  401570:	701a      	strb	r2, [r3, #0]
  401572:	e002      	b.n	40157a <clk_callback+0x26>
  } else {
	  clk_flag = 0;
  401574:	4b0c      	ldr	r3, [pc, #48]	; (4015a8 <clk_callback+0x54>)
  401576:	2200      	movs	r2, #0
  401578:	701a      	strb	r2, [r3, #0]
  }
  
  if(!pio_get(DT_PIO, PIO_INPUT, DT_PIO)) {
  40157a:	4a0c      	ldr	r2, [pc, #48]	; (4015ac <clk_callback+0x58>)
  40157c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401580:	480a      	ldr	r0, [pc, #40]	; (4015ac <clk_callback+0x58>)
  401582:	4b08      	ldr	r3, [pc, #32]	; (4015a4 <clk_callback+0x50>)
  401584:	4798      	blx	r3
  401586:	4603      	mov	r3, r0
  401588:	2b00      	cmp	r3, #0
  40158a:	d103      	bne.n	401594 <clk_callback+0x40>
	  dt_flag = 1;
  40158c:	4b08      	ldr	r3, [pc, #32]	; (4015b0 <clk_callback+0x5c>)
  40158e:	2201      	movs	r2, #1
  401590:	701a      	strb	r2, [r3, #0]
	  } else {
	  dt_flag = 0;
  }
}
  401592:	e002      	b.n	40159a <clk_callback+0x46>
	  dt_flag = 0;
  401594:	4b06      	ldr	r3, [pc, #24]	; (4015b0 <clk_callback+0x5c>)
  401596:	2200      	movs	r2, #0
  401598:	701a      	strb	r2, [r3, #0]
}
  40159a:	bf00      	nop
  40159c:	bd80      	pop	{r7, pc}
  40159e:	bf00      	nop
  4015a0:	400e1200 	.word	0x400e1200
  4015a4:	004007dd 	.word	0x004007dd
  4015a8:	20400b0c 	.word	0x20400b0c
  4015ac:	400e0e00 	.word	0x400e0e00
  4015b0:	20400b14 	.word	0x20400b14

004015b4 <io_init>:
  printf("girou %d voltas\n", n);
}

// Inicializa botao SW0 do kit com interrupcao
void io_init(void)
{
  4015b4:	b590      	push	{r4, r7, lr}
  4015b6:	b083      	sub	sp, #12
  4015b8:	af02      	add	r7, sp, #8

  // Inicializa clock dos periféricos PIOs responsaveis pelo CLK, DT e SW
    pmc_enable_periph_clk(CLK_PIO_ID);
  4015ba:	200c      	movs	r0, #12
  4015bc:	4b32      	ldr	r3, [pc, #200]	; (401688 <io_init+0xd4>)
  4015be:	4798      	blx	r3
	pmc_enable_periph_clk(DT_PIO_ID);
  4015c0:	200a      	movs	r0, #10
  4015c2:	4b31      	ldr	r3, [pc, #196]	; (401688 <io_init+0xd4>)
  4015c4:	4798      	blx	r3
	pmc_enable_periph_clk(SW_PIO_ID);
  4015c6:	200c      	movs	r0, #12
  4015c8:	4b2f      	ldr	r3, [pc, #188]	; (401688 <io_init+0xd4>)
  4015ca:	4798      	blx	r3
	
  // ativando debounce nos pinos com frequência de 200Hz
	pio_set_debounce_filter(CLK_PIO, CLK_IDX_MASK, 200);
  4015cc:	22c8      	movs	r2, #200	; 0xc8
  4015ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4015d2:	482e      	ldr	r0, [pc, #184]	; (40168c <io_init+0xd8>)
  4015d4:	4b2e      	ldr	r3, [pc, #184]	; (401690 <io_init+0xdc>)
  4015d6:	4798      	blx	r3
	pio_set_debounce_filter(DT_PIO, DT_IDX_MASK, 200);
  4015d8:	22c8      	movs	r2, #200	; 0xc8
  4015da:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4015de:	482d      	ldr	r0, [pc, #180]	; (401694 <io_init+0xe0>)
  4015e0:	4b2b      	ldr	r3, [pc, #172]	; (401690 <io_init+0xdc>)
  4015e2:	4798      	blx	r3

  // Configura PIO para lidar com os pinos dos CLK, DT e SW como entrada
  // sem pullup
	pio_configure(CLK_PIO, PIO_INPUT, CLK_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4015e4:	2309      	movs	r3, #9
  4015e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4015ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4015ee:	4827      	ldr	r0, [pc, #156]	; (40168c <io_init+0xd8>)
  4015f0:	4c29      	ldr	r4, [pc, #164]	; (401698 <io_init+0xe4>)
  4015f2:	47a0      	blx	r4
	pio_configure(DT_PIO, PIO_INPUT, DT_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4015f4:	2309      	movs	r3, #9
  4015f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4015fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4015fe:	4825      	ldr	r0, [pc, #148]	; (401694 <io_init+0xe0>)
  401600:	4c25      	ldr	r4, [pc, #148]	; (401698 <io_init+0xe4>)
  401602:	47a0      	blx	r4
	pio_configure(SW_PIO, PIO_INPUT, SW_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401604:	2309      	movs	r3, #9
  401606:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40160a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40160e:	481f      	ldr	r0, [pc, #124]	; (40168c <io_init+0xd8>)
  401610:	4c21      	ldr	r4, [pc, #132]	; (401698 <io_init+0xe4>)
  401612:	47a0      	blx	r4

  // Configura interrupção no pino referente ao botao e associa
  // função de callback caso uma interrupção for gerada
  // a função de callback é a: but_callback()
  pio_handler_set(CLK_PIO,
  401614:	4b21      	ldr	r3, [pc, #132]	; (40169c <io_init+0xe8>)
  401616:	9300      	str	r3, [sp, #0]
  401618:	2340      	movs	r3, #64	; 0x40
  40161a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40161e:	210c      	movs	r1, #12
  401620:	481a      	ldr	r0, [pc, #104]	; (40168c <io_init+0xd8>)
  401622:	4c1f      	ldr	r4, [pc, #124]	; (4016a0 <io_init+0xec>)
  401624:	47a0      	blx	r4
                  CLK_IDX_MASK,
                  PIO_IT_EDGE,
                  clk_callback);

  // Ativa interrupção e limpa primeira IRQ gerada na ativacao
  pio_enable_interrupt(CLK_PIO, CLK_IDX_MASK);
  401626:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40162a:	4818      	ldr	r0, [pc, #96]	; (40168c <io_init+0xd8>)
  40162c:	4b1d      	ldr	r3, [pc, #116]	; (4016a4 <io_init+0xf0>)
  40162e:	4798      	blx	r3
  pio_get_interrupt_status(CLK_PIO);
  401630:	4816      	ldr	r0, [pc, #88]	; (40168c <io_init+0xd8>)
  401632:	4b1d      	ldr	r3, [pc, #116]	; (4016a8 <io_init+0xf4>)
  401634:	4798      	blx	r3
  pio_enable_interrupt(DT_PIO, DT_IDX_MASK);
  401636:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40163a:	4816      	ldr	r0, [pc, #88]	; (401694 <io_init+0xe0>)
  40163c:	4b19      	ldr	r3, [pc, #100]	; (4016a4 <io_init+0xf0>)
  40163e:	4798      	blx	r3
  pio_get_interrupt_status(DT_PIO);
  401640:	4814      	ldr	r0, [pc, #80]	; (401694 <io_init+0xe0>)
  401642:	4b19      	ldr	r3, [pc, #100]	; (4016a8 <io_init+0xf4>)
  401644:	4798      	blx	r3
  pio_enable_interrupt(SW_PIO, SW_IDX_MASK);
  401646:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40164a:	4810      	ldr	r0, [pc, #64]	; (40168c <io_init+0xd8>)
  40164c:	4b15      	ldr	r3, [pc, #84]	; (4016a4 <io_init+0xf0>)
  40164e:	4798      	blx	r3
  pio_get_interrupt_status(SW_PIO);
  401650:	480e      	ldr	r0, [pc, #56]	; (40168c <io_init+0xd8>)
  401652:	4b15      	ldr	r3, [pc, #84]	; (4016a8 <io_init+0xf4>)
  401654:	4798      	blx	r3
  
  // Configura NVIC para receber interrupcoes do PIO do botao
  // com prioridade 4 (quanto mais próximo de 0 maior)
  NVIC_EnableIRQ(CLK_PIO_ID);
  401656:	200c      	movs	r0, #12
  401658:	4b14      	ldr	r3, [pc, #80]	; (4016ac <io_init+0xf8>)
  40165a:	4798      	blx	r3
  NVIC_SetPriority(CLK_PIO_ID, 4); // Prioridade 4
  40165c:	2104      	movs	r1, #4
  40165e:	200c      	movs	r0, #12
  401660:	4b13      	ldr	r3, [pc, #76]	; (4016b0 <io_init+0xfc>)
  401662:	4798      	blx	r3
  NVIC_EnableIRQ(DT_PIO_ID);
  401664:	200a      	movs	r0, #10
  401666:	4b11      	ldr	r3, [pc, #68]	; (4016ac <io_init+0xf8>)
  401668:	4798      	blx	r3
  NVIC_SetPriority(DT_PIO_ID, 4); // Prioridade 4
  40166a:	2104      	movs	r1, #4
  40166c:	200a      	movs	r0, #10
  40166e:	4b10      	ldr	r3, [pc, #64]	; (4016b0 <io_init+0xfc>)
  401670:	4798      	blx	r3
  NVIC_EnableIRQ(SW_PIO_ID);
  401672:	200c      	movs	r0, #12
  401674:	4b0d      	ldr	r3, [pc, #52]	; (4016ac <io_init+0xf8>)
  401676:	4798      	blx	r3
  NVIC_SetPriority(SW_PIO_ID, 4); // Prioridade 4
  401678:	2104      	movs	r1, #4
  40167a:	200c      	movs	r0, #12
  40167c:	4b0c      	ldr	r3, [pc, #48]	; (4016b0 <io_init+0xfc>)
  40167e:	4798      	blx	r3
}
  401680:	bf00      	nop
  401682:	3704      	adds	r7, #4
  401684:	46bd      	mov	sp, r7
  401686:	bd90      	pop	{r4, r7, pc}
  401688:	00401049 	.word	0x00401049
  40168c:	400e1200 	.word	0x400e1200
  401690:	004007a5 	.word	0x004007a5
  401694:	400e0e00 	.word	0x400e0e00
  401698:	00400a19 	.word	0x00400a19
  40169c:	00401555 	.word	0x00401555
  4016a0:	00400c6d 	.word	0x00400c6d
  4016a4:	00400b51 	.word	0x00400b51
  4016a8:	00400b89 	.word	0x00400b89
  4016ac:	004014cd 	.word	0x004014cd
  4016b0:	00401501 	.word	0x00401501

004016b4 <main>:
/* Main                                                                 */
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.
void main(void)
{
  4016b4:	b580      	push	{r7, lr}
  4016b6:	af00      	add	r7, sp, #0
	// Inicializa clock
	sysclk_init();
  4016b8:	4b11      	ldr	r3, [pc, #68]	; (401700 <main+0x4c>)
  4016ba:	4798      	blx	r3

	// Desativa watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
  4016bc:	4b11      	ldr	r3, [pc, #68]	; (401704 <main+0x50>)
  4016be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4016c2:	605a      	str	r2, [r3, #4]

  // configura botao com interrupcao
  io_init();
  4016c4:	4b10      	ldr	r3, [pc, #64]	; (401708 <main+0x54>)
  4016c6:	4798      	blx	r3

	// super loop
	// aplicacoes embarcadas no devem sair do while(1).
	while(1)
	{
		if (clk_flag == 1){
  4016c8:	4b10      	ldr	r3, [pc, #64]	; (40170c <main+0x58>)
  4016ca:	781b      	ldrb	r3, [r3, #0]
  4016cc:	b2db      	uxtb	r3, r3
  4016ce:	2b01      	cmp	r3, #1
  4016d0:	d1fa      	bne.n	4016c8 <main+0x14>
			if (clk_flag == dt_flag) {
  4016d2:	4b0e      	ldr	r3, [pc, #56]	; (40170c <main+0x58>)
  4016d4:	781b      	ldrb	r3, [r3, #0]
  4016d6:	b2da      	uxtb	r2, r3
  4016d8:	4b0d      	ldr	r3, [pc, #52]	; (401710 <main+0x5c>)
  4016da:	781b      	ldrb	r3, [r3, #0]
  4016dc:	b2db      	uxtb	r3, r3
  4016de:	429a      	cmp	r2, r3
  4016e0:	d102      	bne.n	4016e8 <main+0x34>
				printf("girou no sentido horário");
  4016e2:	480c      	ldr	r0, [pc, #48]	; (401714 <main+0x60>)
  4016e4:	4b0c      	ldr	r3, [pc, #48]	; (401718 <main+0x64>)
  4016e6:	4798      	blx	r3
			}
			
			if (clk_flag != dt_flag) {
  4016e8:	4b08      	ldr	r3, [pc, #32]	; (40170c <main+0x58>)
  4016ea:	781b      	ldrb	r3, [r3, #0]
  4016ec:	b2da      	uxtb	r2, r3
  4016ee:	4b08      	ldr	r3, [pc, #32]	; (401710 <main+0x5c>)
  4016f0:	781b      	ldrb	r3, [r3, #0]
  4016f2:	b2db      	uxtb	r3, r3
  4016f4:	429a      	cmp	r2, r3
  4016f6:	d0e7      	beq.n	4016c8 <main+0x14>
				printf("girou no sentido anti-horário");
  4016f8:	4808      	ldr	r0, [pc, #32]	; (40171c <main+0x68>)
  4016fa:	4b07      	ldr	r3, [pc, #28]	; (401718 <main+0x64>)
  4016fc:	4798      	blx	r3
		if (clk_flag == 1){
  4016fe:	e7e3      	b.n	4016c8 <main+0x14>
  401700:	004004ad 	.word	0x004004ad
  401704:	400e1850 	.word	0x400e1850
  401708:	004015b5 	.word	0x004015b5
  40170c:	20400b0c 	.word	0x20400b0c
  401710:	20400b14 	.word	0x20400b14
  401714:	0040451c 	.word	0x0040451c
  401718:	00401771 	.word	0x00401771
  40171c:	00404538 	.word	0x00404538

00401720 <__libc_init_array>:
  401720:	b570      	push	{r4, r5, r6, lr}
  401722:	4e0f      	ldr	r6, [pc, #60]	; (401760 <__libc_init_array+0x40>)
  401724:	4d0f      	ldr	r5, [pc, #60]	; (401764 <__libc_init_array+0x44>)
  401726:	1b76      	subs	r6, r6, r5
  401728:	10b6      	asrs	r6, r6, #2
  40172a:	bf18      	it	ne
  40172c:	2400      	movne	r4, #0
  40172e:	d005      	beq.n	40173c <__libc_init_array+0x1c>
  401730:	3401      	adds	r4, #1
  401732:	f855 3b04 	ldr.w	r3, [r5], #4
  401736:	4798      	blx	r3
  401738:	42a6      	cmp	r6, r4
  40173a:	d1f9      	bne.n	401730 <__libc_init_array+0x10>
  40173c:	4e0a      	ldr	r6, [pc, #40]	; (401768 <__libc_init_array+0x48>)
  40173e:	4d0b      	ldr	r5, [pc, #44]	; (40176c <__libc_init_array+0x4c>)
  401740:	1b76      	subs	r6, r6, r5
  401742:	f002 ffbd 	bl	4046c0 <_init>
  401746:	10b6      	asrs	r6, r6, #2
  401748:	bf18      	it	ne
  40174a:	2400      	movne	r4, #0
  40174c:	d006      	beq.n	40175c <__libc_init_array+0x3c>
  40174e:	3401      	adds	r4, #1
  401750:	f855 3b04 	ldr.w	r3, [r5], #4
  401754:	4798      	blx	r3
  401756:	42a6      	cmp	r6, r4
  401758:	d1f9      	bne.n	40174e <__libc_init_array+0x2e>
  40175a:	bd70      	pop	{r4, r5, r6, pc}
  40175c:	bd70      	pop	{r4, r5, r6, pc}
  40175e:	bf00      	nop
  401760:	004046cc 	.word	0x004046cc
  401764:	004046cc 	.word	0x004046cc
  401768:	004046d4 	.word	0x004046d4
  40176c:	004046cc 	.word	0x004046cc

00401770 <iprintf>:
  401770:	b40f      	push	{r0, r1, r2, r3}
  401772:	b500      	push	{lr}
  401774:	4907      	ldr	r1, [pc, #28]	; (401794 <iprintf+0x24>)
  401776:	b083      	sub	sp, #12
  401778:	ab04      	add	r3, sp, #16
  40177a:	6808      	ldr	r0, [r1, #0]
  40177c:	f853 2b04 	ldr.w	r2, [r3], #4
  401780:	6881      	ldr	r1, [r0, #8]
  401782:	9301      	str	r3, [sp, #4]
  401784:	f000 f930 	bl	4019e8 <_vfiprintf_r>
  401788:	b003      	add	sp, #12
  40178a:	f85d eb04 	ldr.w	lr, [sp], #4
  40178e:	b004      	add	sp, #16
  401790:	4770      	bx	lr
  401792:	bf00      	nop
  401794:	20400008 	.word	0x20400008

00401798 <memcpy>:
  401798:	4684      	mov	ip, r0
  40179a:	ea41 0300 	orr.w	r3, r1, r0
  40179e:	f013 0303 	ands.w	r3, r3, #3
  4017a2:	d16d      	bne.n	401880 <memcpy+0xe8>
  4017a4:	3a40      	subs	r2, #64	; 0x40
  4017a6:	d341      	bcc.n	40182c <memcpy+0x94>
  4017a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4017ac:	f840 3b04 	str.w	r3, [r0], #4
  4017b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4017b4:	f840 3b04 	str.w	r3, [r0], #4
  4017b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4017bc:	f840 3b04 	str.w	r3, [r0], #4
  4017c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4017c4:	f840 3b04 	str.w	r3, [r0], #4
  4017c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4017cc:	f840 3b04 	str.w	r3, [r0], #4
  4017d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4017d4:	f840 3b04 	str.w	r3, [r0], #4
  4017d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4017dc:	f840 3b04 	str.w	r3, [r0], #4
  4017e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4017e4:	f840 3b04 	str.w	r3, [r0], #4
  4017e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4017ec:	f840 3b04 	str.w	r3, [r0], #4
  4017f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4017f4:	f840 3b04 	str.w	r3, [r0], #4
  4017f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4017fc:	f840 3b04 	str.w	r3, [r0], #4
  401800:	f851 3b04 	ldr.w	r3, [r1], #4
  401804:	f840 3b04 	str.w	r3, [r0], #4
  401808:	f851 3b04 	ldr.w	r3, [r1], #4
  40180c:	f840 3b04 	str.w	r3, [r0], #4
  401810:	f851 3b04 	ldr.w	r3, [r1], #4
  401814:	f840 3b04 	str.w	r3, [r0], #4
  401818:	f851 3b04 	ldr.w	r3, [r1], #4
  40181c:	f840 3b04 	str.w	r3, [r0], #4
  401820:	f851 3b04 	ldr.w	r3, [r1], #4
  401824:	f840 3b04 	str.w	r3, [r0], #4
  401828:	3a40      	subs	r2, #64	; 0x40
  40182a:	d2bd      	bcs.n	4017a8 <memcpy+0x10>
  40182c:	3230      	adds	r2, #48	; 0x30
  40182e:	d311      	bcc.n	401854 <memcpy+0xbc>
  401830:	f851 3b04 	ldr.w	r3, [r1], #4
  401834:	f840 3b04 	str.w	r3, [r0], #4
  401838:	f851 3b04 	ldr.w	r3, [r1], #4
  40183c:	f840 3b04 	str.w	r3, [r0], #4
  401840:	f851 3b04 	ldr.w	r3, [r1], #4
  401844:	f840 3b04 	str.w	r3, [r0], #4
  401848:	f851 3b04 	ldr.w	r3, [r1], #4
  40184c:	f840 3b04 	str.w	r3, [r0], #4
  401850:	3a10      	subs	r2, #16
  401852:	d2ed      	bcs.n	401830 <memcpy+0x98>
  401854:	320c      	adds	r2, #12
  401856:	d305      	bcc.n	401864 <memcpy+0xcc>
  401858:	f851 3b04 	ldr.w	r3, [r1], #4
  40185c:	f840 3b04 	str.w	r3, [r0], #4
  401860:	3a04      	subs	r2, #4
  401862:	d2f9      	bcs.n	401858 <memcpy+0xc0>
  401864:	3204      	adds	r2, #4
  401866:	d008      	beq.n	40187a <memcpy+0xe2>
  401868:	07d2      	lsls	r2, r2, #31
  40186a:	bf1c      	itt	ne
  40186c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401870:	f800 3b01 	strbne.w	r3, [r0], #1
  401874:	d301      	bcc.n	40187a <memcpy+0xe2>
  401876:	880b      	ldrh	r3, [r1, #0]
  401878:	8003      	strh	r3, [r0, #0]
  40187a:	4660      	mov	r0, ip
  40187c:	4770      	bx	lr
  40187e:	bf00      	nop
  401880:	2a08      	cmp	r2, #8
  401882:	d313      	bcc.n	4018ac <memcpy+0x114>
  401884:	078b      	lsls	r3, r1, #30
  401886:	d08d      	beq.n	4017a4 <memcpy+0xc>
  401888:	f010 0303 	ands.w	r3, r0, #3
  40188c:	d08a      	beq.n	4017a4 <memcpy+0xc>
  40188e:	f1c3 0304 	rsb	r3, r3, #4
  401892:	1ad2      	subs	r2, r2, r3
  401894:	07db      	lsls	r3, r3, #31
  401896:	bf1c      	itt	ne
  401898:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40189c:	f800 3b01 	strbne.w	r3, [r0], #1
  4018a0:	d380      	bcc.n	4017a4 <memcpy+0xc>
  4018a2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4018a6:	f820 3b02 	strh.w	r3, [r0], #2
  4018aa:	e77b      	b.n	4017a4 <memcpy+0xc>
  4018ac:	3a04      	subs	r2, #4
  4018ae:	d3d9      	bcc.n	401864 <memcpy+0xcc>
  4018b0:	3a01      	subs	r2, #1
  4018b2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4018b6:	f800 3b01 	strb.w	r3, [r0], #1
  4018ba:	d2f9      	bcs.n	4018b0 <memcpy+0x118>
  4018bc:	780b      	ldrb	r3, [r1, #0]
  4018be:	7003      	strb	r3, [r0, #0]
  4018c0:	784b      	ldrb	r3, [r1, #1]
  4018c2:	7043      	strb	r3, [r0, #1]
  4018c4:	788b      	ldrb	r3, [r1, #2]
  4018c6:	7083      	strb	r3, [r0, #2]
  4018c8:	4660      	mov	r0, ip
  4018ca:	4770      	bx	lr

004018cc <memset>:
  4018cc:	b470      	push	{r4, r5, r6}
  4018ce:	0786      	lsls	r6, r0, #30
  4018d0:	d046      	beq.n	401960 <memset+0x94>
  4018d2:	1e54      	subs	r4, r2, #1
  4018d4:	2a00      	cmp	r2, #0
  4018d6:	d041      	beq.n	40195c <memset+0x90>
  4018d8:	b2ca      	uxtb	r2, r1
  4018da:	4603      	mov	r3, r0
  4018dc:	e002      	b.n	4018e4 <memset+0x18>
  4018de:	f114 34ff 	adds.w	r4, r4, #4294967295
  4018e2:	d33b      	bcc.n	40195c <memset+0x90>
  4018e4:	f803 2b01 	strb.w	r2, [r3], #1
  4018e8:	079d      	lsls	r5, r3, #30
  4018ea:	d1f8      	bne.n	4018de <memset+0x12>
  4018ec:	2c03      	cmp	r4, #3
  4018ee:	d92e      	bls.n	40194e <memset+0x82>
  4018f0:	b2cd      	uxtb	r5, r1
  4018f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4018f6:	2c0f      	cmp	r4, #15
  4018f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4018fc:	d919      	bls.n	401932 <memset+0x66>
  4018fe:	f103 0210 	add.w	r2, r3, #16
  401902:	4626      	mov	r6, r4
  401904:	3e10      	subs	r6, #16
  401906:	2e0f      	cmp	r6, #15
  401908:	f842 5c10 	str.w	r5, [r2, #-16]
  40190c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401910:	f842 5c08 	str.w	r5, [r2, #-8]
  401914:	f842 5c04 	str.w	r5, [r2, #-4]
  401918:	f102 0210 	add.w	r2, r2, #16
  40191c:	d8f2      	bhi.n	401904 <memset+0x38>
  40191e:	f1a4 0210 	sub.w	r2, r4, #16
  401922:	f022 020f 	bic.w	r2, r2, #15
  401926:	f004 040f 	and.w	r4, r4, #15
  40192a:	3210      	adds	r2, #16
  40192c:	2c03      	cmp	r4, #3
  40192e:	4413      	add	r3, r2
  401930:	d90d      	bls.n	40194e <memset+0x82>
  401932:	461e      	mov	r6, r3
  401934:	4622      	mov	r2, r4
  401936:	3a04      	subs	r2, #4
  401938:	2a03      	cmp	r2, #3
  40193a:	f846 5b04 	str.w	r5, [r6], #4
  40193e:	d8fa      	bhi.n	401936 <memset+0x6a>
  401940:	1f22      	subs	r2, r4, #4
  401942:	f022 0203 	bic.w	r2, r2, #3
  401946:	3204      	adds	r2, #4
  401948:	4413      	add	r3, r2
  40194a:	f004 0403 	and.w	r4, r4, #3
  40194e:	b12c      	cbz	r4, 40195c <memset+0x90>
  401950:	b2c9      	uxtb	r1, r1
  401952:	441c      	add	r4, r3
  401954:	f803 1b01 	strb.w	r1, [r3], #1
  401958:	429c      	cmp	r4, r3
  40195a:	d1fb      	bne.n	401954 <memset+0x88>
  40195c:	bc70      	pop	{r4, r5, r6}
  40195e:	4770      	bx	lr
  401960:	4614      	mov	r4, r2
  401962:	4603      	mov	r3, r0
  401964:	e7c2      	b.n	4018ec <memset+0x20>
  401966:	bf00      	nop

00401968 <__sprint_r.part.0>:
  401968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40196c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40196e:	049c      	lsls	r4, r3, #18
  401970:	4693      	mov	fp, r2
  401972:	d52f      	bpl.n	4019d4 <__sprint_r.part.0+0x6c>
  401974:	6893      	ldr	r3, [r2, #8]
  401976:	6812      	ldr	r2, [r2, #0]
  401978:	b353      	cbz	r3, 4019d0 <__sprint_r.part.0+0x68>
  40197a:	460e      	mov	r6, r1
  40197c:	4607      	mov	r7, r0
  40197e:	f102 0908 	add.w	r9, r2, #8
  401982:	e919 0420 	ldmdb	r9, {r5, sl}
  401986:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40198a:	d017      	beq.n	4019bc <__sprint_r.part.0+0x54>
  40198c:	3d04      	subs	r5, #4
  40198e:	2400      	movs	r4, #0
  401990:	e001      	b.n	401996 <__sprint_r.part.0+0x2e>
  401992:	45a0      	cmp	r8, r4
  401994:	d010      	beq.n	4019b8 <__sprint_r.part.0+0x50>
  401996:	4632      	mov	r2, r6
  401998:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40199c:	4638      	mov	r0, r7
  40199e:	f001 f8bb 	bl	402b18 <_fputwc_r>
  4019a2:	1c43      	adds	r3, r0, #1
  4019a4:	f104 0401 	add.w	r4, r4, #1
  4019a8:	d1f3      	bne.n	401992 <__sprint_r.part.0+0x2a>
  4019aa:	2300      	movs	r3, #0
  4019ac:	f8cb 3008 	str.w	r3, [fp, #8]
  4019b0:	f8cb 3004 	str.w	r3, [fp, #4]
  4019b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019b8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4019bc:	f02a 0a03 	bic.w	sl, sl, #3
  4019c0:	eba3 030a 	sub.w	r3, r3, sl
  4019c4:	f8cb 3008 	str.w	r3, [fp, #8]
  4019c8:	f109 0908 	add.w	r9, r9, #8
  4019cc:	2b00      	cmp	r3, #0
  4019ce:	d1d8      	bne.n	401982 <__sprint_r.part.0+0x1a>
  4019d0:	2000      	movs	r0, #0
  4019d2:	e7ea      	b.n	4019aa <__sprint_r.part.0+0x42>
  4019d4:	f001 fa0a 	bl	402dec <__sfvwrite_r>
  4019d8:	2300      	movs	r3, #0
  4019da:	f8cb 3008 	str.w	r3, [fp, #8]
  4019de:	f8cb 3004 	str.w	r3, [fp, #4]
  4019e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019e6:	bf00      	nop

004019e8 <_vfiprintf_r>:
  4019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019ec:	b0ad      	sub	sp, #180	; 0xb4
  4019ee:	461d      	mov	r5, r3
  4019f0:	468b      	mov	fp, r1
  4019f2:	4690      	mov	r8, r2
  4019f4:	9307      	str	r3, [sp, #28]
  4019f6:	9006      	str	r0, [sp, #24]
  4019f8:	b118      	cbz	r0, 401a02 <_vfiprintf_r+0x1a>
  4019fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4019fc:	2b00      	cmp	r3, #0
  4019fe:	f000 80f3 	beq.w	401be8 <_vfiprintf_r+0x200>
  401a02:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401a06:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401a0a:	07df      	lsls	r7, r3, #31
  401a0c:	b281      	uxth	r1, r0
  401a0e:	d402      	bmi.n	401a16 <_vfiprintf_r+0x2e>
  401a10:	058e      	lsls	r6, r1, #22
  401a12:	f140 80fc 	bpl.w	401c0e <_vfiprintf_r+0x226>
  401a16:	048c      	lsls	r4, r1, #18
  401a18:	d40a      	bmi.n	401a30 <_vfiprintf_r+0x48>
  401a1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401a1e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401a26:	f8ab 100c 	strh.w	r1, [fp, #12]
  401a2a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401a2e:	b289      	uxth	r1, r1
  401a30:	0708      	lsls	r0, r1, #28
  401a32:	f140 80b3 	bpl.w	401b9c <_vfiprintf_r+0x1b4>
  401a36:	f8db 3010 	ldr.w	r3, [fp, #16]
  401a3a:	2b00      	cmp	r3, #0
  401a3c:	f000 80ae 	beq.w	401b9c <_vfiprintf_r+0x1b4>
  401a40:	f001 031a 	and.w	r3, r1, #26
  401a44:	2b0a      	cmp	r3, #10
  401a46:	f000 80b5 	beq.w	401bb4 <_vfiprintf_r+0x1cc>
  401a4a:	2300      	movs	r3, #0
  401a4c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401a50:	930b      	str	r3, [sp, #44]	; 0x2c
  401a52:	9311      	str	r3, [sp, #68]	; 0x44
  401a54:	9310      	str	r3, [sp, #64]	; 0x40
  401a56:	9303      	str	r3, [sp, #12]
  401a58:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401a5c:	46ca      	mov	sl, r9
  401a5e:	f8cd b010 	str.w	fp, [sp, #16]
  401a62:	f898 3000 	ldrb.w	r3, [r8]
  401a66:	4644      	mov	r4, r8
  401a68:	b1fb      	cbz	r3, 401aaa <_vfiprintf_r+0xc2>
  401a6a:	2b25      	cmp	r3, #37	; 0x25
  401a6c:	d102      	bne.n	401a74 <_vfiprintf_r+0x8c>
  401a6e:	e01c      	b.n	401aaa <_vfiprintf_r+0xc2>
  401a70:	2b25      	cmp	r3, #37	; 0x25
  401a72:	d003      	beq.n	401a7c <_vfiprintf_r+0x94>
  401a74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401a78:	2b00      	cmp	r3, #0
  401a7a:	d1f9      	bne.n	401a70 <_vfiprintf_r+0x88>
  401a7c:	eba4 0508 	sub.w	r5, r4, r8
  401a80:	b19d      	cbz	r5, 401aaa <_vfiprintf_r+0xc2>
  401a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401a84:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401a86:	f8ca 8000 	str.w	r8, [sl]
  401a8a:	3301      	adds	r3, #1
  401a8c:	442a      	add	r2, r5
  401a8e:	2b07      	cmp	r3, #7
  401a90:	f8ca 5004 	str.w	r5, [sl, #4]
  401a94:	9211      	str	r2, [sp, #68]	; 0x44
  401a96:	9310      	str	r3, [sp, #64]	; 0x40
  401a98:	dd7a      	ble.n	401b90 <_vfiprintf_r+0x1a8>
  401a9a:	2a00      	cmp	r2, #0
  401a9c:	f040 84b0 	bne.w	402400 <_vfiprintf_r+0xa18>
  401aa0:	9b03      	ldr	r3, [sp, #12]
  401aa2:	9210      	str	r2, [sp, #64]	; 0x40
  401aa4:	442b      	add	r3, r5
  401aa6:	46ca      	mov	sl, r9
  401aa8:	9303      	str	r3, [sp, #12]
  401aaa:	7823      	ldrb	r3, [r4, #0]
  401aac:	2b00      	cmp	r3, #0
  401aae:	f000 83e0 	beq.w	402272 <_vfiprintf_r+0x88a>
  401ab2:	2000      	movs	r0, #0
  401ab4:	f04f 0300 	mov.w	r3, #0
  401ab8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401abc:	f104 0801 	add.w	r8, r4, #1
  401ac0:	7862      	ldrb	r2, [r4, #1]
  401ac2:	4605      	mov	r5, r0
  401ac4:	4606      	mov	r6, r0
  401ac6:	4603      	mov	r3, r0
  401ac8:	f04f 34ff 	mov.w	r4, #4294967295
  401acc:	f108 0801 	add.w	r8, r8, #1
  401ad0:	f1a2 0120 	sub.w	r1, r2, #32
  401ad4:	2958      	cmp	r1, #88	; 0x58
  401ad6:	f200 82de 	bhi.w	402096 <_vfiprintf_r+0x6ae>
  401ada:	e8df f011 	tbh	[pc, r1, lsl #1]
  401ade:	0221      	.short	0x0221
  401ae0:	02dc02dc 	.word	0x02dc02dc
  401ae4:	02dc0229 	.word	0x02dc0229
  401ae8:	02dc02dc 	.word	0x02dc02dc
  401aec:	02dc02dc 	.word	0x02dc02dc
  401af0:	028902dc 	.word	0x028902dc
  401af4:	02dc0295 	.word	0x02dc0295
  401af8:	02bd00a2 	.word	0x02bd00a2
  401afc:	019f02dc 	.word	0x019f02dc
  401b00:	01a401a4 	.word	0x01a401a4
  401b04:	01a401a4 	.word	0x01a401a4
  401b08:	01a401a4 	.word	0x01a401a4
  401b0c:	01a401a4 	.word	0x01a401a4
  401b10:	02dc01a4 	.word	0x02dc01a4
  401b14:	02dc02dc 	.word	0x02dc02dc
  401b18:	02dc02dc 	.word	0x02dc02dc
  401b1c:	02dc02dc 	.word	0x02dc02dc
  401b20:	02dc02dc 	.word	0x02dc02dc
  401b24:	01b202dc 	.word	0x01b202dc
  401b28:	02dc02dc 	.word	0x02dc02dc
  401b2c:	02dc02dc 	.word	0x02dc02dc
  401b30:	02dc02dc 	.word	0x02dc02dc
  401b34:	02dc02dc 	.word	0x02dc02dc
  401b38:	02dc02dc 	.word	0x02dc02dc
  401b3c:	02dc0197 	.word	0x02dc0197
  401b40:	02dc02dc 	.word	0x02dc02dc
  401b44:	02dc02dc 	.word	0x02dc02dc
  401b48:	02dc019b 	.word	0x02dc019b
  401b4c:	025302dc 	.word	0x025302dc
  401b50:	02dc02dc 	.word	0x02dc02dc
  401b54:	02dc02dc 	.word	0x02dc02dc
  401b58:	02dc02dc 	.word	0x02dc02dc
  401b5c:	02dc02dc 	.word	0x02dc02dc
  401b60:	02dc02dc 	.word	0x02dc02dc
  401b64:	021b025a 	.word	0x021b025a
  401b68:	02dc02dc 	.word	0x02dc02dc
  401b6c:	026e02dc 	.word	0x026e02dc
  401b70:	02dc021b 	.word	0x02dc021b
  401b74:	027302dc 	.word	0x027302dc
  401b78:	01f502dc 	.word	0x01f502dc
  401b7c:	02090182 	.word	0x02090182
  401b80:	02dc02d7 	.word	0x02dc02d7
  401b84:	02dc029a 	.word	0x02dc029a
  401b88:	02dc00a7 	.word	0x02dc00a7
  401b8c:	022e02dc 	.word	0x022e02dc
  401b90:	f10a 0a08 	add.w	sl, sl, #8
  401b94:	9b03      	ldr	r3, [sp, #12]
  401b96:	442b      	add	r3, r5
  401b98:	9303      	str	r3, [sp, #12]
  401b9a:	e786      	b.n	401aaa <_vfiprintf_r+0xc2>
  401b9c:	4659      	mov	r1, fp
  401b9e:	9806      	ldr	r0, [sp, #24]
  401ba0:	f000 fdac 	bl	4026fc <__swsetup_r>
  401ba4:	bb18      	cbnz	r0, 401bee <_vfiprintf_r+0x206>
  401ba6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401baa:	f001 031a 	and.w	r3, r1, #26
  401bae:	2b0a      	cmp	r3, #10
  401bb0:	f47f af4b 	bne.w	401a4a <_vfiprintf_r+0x62>
  401bb4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401bb8:	2b00      	cmp	r3, #0
  401bba:	f6ff af46 	blt.w	401a4a <_vfiprintf_r+0x62>
  401bbe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bc2:	07db      	lsls	r3, r3, #31
  401bc4:	d405      	bmi.n	401bd2 <_vfiprintf_r+0x1ea>
  401bc6:	058f      	lsls	r7, r1, #22
  401bc8:	d403      	bmi.n	401bd2 <_vfiprintf_r+0x1ea>
  401bca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401bce:	f001 fac3 	bl	403158 <__retarget_lock_release_recursive>
  401bd2:	462b      	mov	r3, r5
  401bd4:	4642      	mov	r2, r8
  401bd6:	4659      	mov	r1, fp
  401bd8:	9806      	ldr	r0, [sp, #24]
  401bda:	f000 fd4d 	bl	402678 <__sbprintf>
  401bde:	9003      	str	r0, [sp, #12]
  401be0:	9803      	ldr	r0, [sp, #12]
  401be2:	b02d      	add	sp, #180	; 0xb4
  401be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401be8:	f000 fef4 	bl	4029d4 <__sinit>
  401bec:	e709      	b.n	401a02 <_vfiprintf_r+0x1a>
  401bee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bf2:	07d9      	lsls	r1, r3, #31
  401bf4:	d404      	bmi.n	401c00 <_vfiprintf_r+0x218>
  401bf6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401bfa:	059a      	lsls	r2, r3, #22
  401bfc:	f140 84aa 	bpl.w	402554 <_vfiprintf_r+0xb6c>
  401c00:	f04f 33ff 	mov.w	r3, #4294967295
  401c04:	9303      	str	r3, [sp, #12]
  401c06:	9803      	ldr	r0, [sp, #12]
  401c08:	b02d      	add	sp, #180	; 0xb4
  401c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c0e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401c12:	f001 fa9f 	bl	403154 <__retarget_lock_acquire_recursive>
  401c16:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401c1a:	b281      	uxth	r1, r0
  401c1c:	e6fb      	b.n	401a16 <_vfiprintf_r+0x2e>
  401c1e:	4276      	negs	r6, r6
  401c20:	9207      	str	r2, [sp, #28]
  401c22:	f043 0304 	orr.w	r3, r3, #4
  401c26:	f898 2000 	ldrb.w	r2, [r8]
  401c2a:	e74f      	b.n	401acc <_vfiprintf_r+0xe4>
  401c2c:	9608      	str	r6, [sp, #32]
  401c2e:	069e      	lsls	r6, r3, #26
  401c30:	f100 8450 	bmi.w	4024d4 <_vfiprintf_r+0xaec>
  401c34:	9907      	ldr	r1, [sp, #28]
  401c36:	06dd      	lsls	r5, r3, #27
  401c38:	460a      	mov	r2, r1
  401c3a:	f100 83ef 	bmi.w	40241c <_vfiprintf_r+0xa34>
  401c3e:	0658      	lsls	r0, r3, #25
  401c40:	f140 83ec 	bpl.w	40241c <_vfiprintf_r+0xa34>
  401c44:	880e      	ldrh	r6, [r1, #0]
  401c46:	3104      	adds	r1, #4
  401c48:	2700      	movs	r7, #0
  401c4a:	2201      	movs	r2, #1
  401c4c:	9107      	str	r1, [sp, #28]
  401c4e:	f04f 0100 	mov.w	r1, #0
  401c52:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401c56:	2500      	movs	r5, #0
  401c58:	1c61      	adds	r1, r4, #1
  401c5a:	f000 8116 	beq.w	401e8a <_vfiprintf_r+0x4a2>
  401c5e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401c62:	9102      	str	r1, [sp, #8]
  401c64:	ea56 0107 	orrs.w	r1, r6, r7
  401c68:	f040 8114 	bne.w	401e94 <_vfiprintf_r+0x4ac>
  401c6c:	2c00      	cmp	r4, #0
  401c6e:	f040 835c 	bne.w	40232a <_vfiprintf_r+0x942>
  401c72:	2a00      	cmp	r2, #0
  401c74:	f040 83b7 	bne.w	4023e6 <_vfiprintf_r+0x9fe>
  401c78:	f013 0301 	ands.w	r3, r3, #1
  401c7c:	9305      	str	r3, [sp, #20]
  401c7e:	f000 8457 	beq.w	402530 <_vfiprintf_r+0xb48>
  401c82:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401c86:	2330      	movs	r3, #48	; 0x30
  401c88:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401c8c:	9b05      	ldr	r3, [sp, #20]
  401c8e:	42a3      	cmp	r3, r4
  401c90:	bfb8      	it	lt
  401c92:	4623      	movlt	r3, r4
  401c94:	9301      	str	r3, [sp, #4]
  401c96:	b10d      	cbz	r5, 401c9c <_vfiprintf_r+0x2b4>
  401c98:	3301      	adds	r3, #1
  401c9a:	9301      	str	r3, [sp, #4]
  401c9c:	9b02      	ldr	r3, [sp, #8]
  401c9e:	f013 0302 	ands.w	r3, r3, #2
  401ca2:	9309      	str	r3, [sp, #36]	; 0x24
  401ca4:	d002      	beq.n	401cac <_vfiprintf_r+0x2c4>
  401ca6:	9b01      	ldr	r3, [sp, #4]
  401ca8:	3302      	adds	r3, #2
  401caa:	9301      	str	r3, [sp, #4]
  401cac:	9b02      	ldr	r3, [sp, #8]
  401cae:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401cb2:	930a      	str	r3, [sp, #40]	; 0x28
  401cb4:	f040 8217 	bne.w	4020e6 <_vfiprintf_r+0x6fe>
  401cb8:	9b08      	ldr	r3, [sp, #32]
  401cba:	9a01      	ldr	r2, [sp, #4]
  401cbc:	1a9d      	subs	r5, r3, r2
  401cbe:	2d00      	cmp	r5, #0
  401cc0:	f340 8211 	ble.w	4020e6 <_vfiprintf_r+0x6fe>
  401cc4:	2d10      	cmp	r5, #16
  401cc6:	f340 8490 	ble.w	4025ea <_vfiprintf_r+0xc02>
  401cca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401ccc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cce:	4ec4      	ldr	r6, [pc, #784]	; (401fe0 <_vfiprintf_r+0x5f8>)
  401cd0:	46d6      	mov	lr, sl
  401cd2:	2710      	movs	r7, #16
  401cd4:	46a2      	mov	sl, r4
  401cd6:	4619      	mov	r1, r3
  401cd8:	9c06      	ldr	r4, [sp, #24]
  401cda:	e007      	b.n	401cec <_vfiprintf_r+0x304>
  401cdc:	f101 0c02 	add.w	ip, r1, #2
  401ce0:	f10e 0e08 	add.w	lr, lr, #8
  401ce4:	4601      	mov	r1, r0
  401ce6:	3d10      	subs	r5, #16
  401ce8:	2d10      	cmp	r5, #16
  401cea:	dd11      	ble.n	401d10 <_vfiprintf_r+0x328>
  401cec:	1c48      	adds	r0, r1, #1
  401cee:	3210      	adds	r2, #16
  401cf0:	2807      	cmp	r0, #7
  401cf2:	9211      	str	r2, [sp, #68]	; 0x44
  401cf4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401cf8:	9010      	str	r0, [sp, #64]	; 0x40
  401cfa:	ddef      	ble.n	401cdc <_vfiprintf_r+0x2f4>
  401cfc:	2a00      	cmp	r2, #0
  401cfe:	f040 81e4 	bne.w	4020ca <_vfiprintf_r+0x6e2>
  401d02:	3d10      	subs	r5, #16
  401d04:	2d10      	cmp	r5, #16
  401d06:	4611      	mov	r1, r2
  401d08:	f04f 0c01 	mov.w	ip, #1
  401d0c:	46ce      	mov	lr, r9
  401d0e:	dced      	bgt.n	401cec <_vfiprintf_r+0x304>
  401d10:	4654      	mov	r4, sl
  401d12:	4661      	mov	r1, ip
  401d14:	46f2      	mov	sl, lr
  401d16:	442a      	add	r2, r5
  401d18:	2907      	cmp	r1, #7
  401d1a:	9211      	str	r2, [sp, #68]	; 0x44
  401d1c:	f8ca 6000 	str.w	r6, [sl]
  401d20:	f8ca 5004 	str.w	r5, [sl, #4]
  401d24:	9110      	str	r1, [sp, #64]	; 0x40
  401d26:	f300 82ec 	bgt.w	402302 <_vfiprintf_r+0x91a>
  401d2a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d2e:	f10a 0a08 	add.w	sl, sl, #8
  401d32:	1c48      	adds	r0, r1, #1
  401d34:	2d00      	cmp	r5, #0
  401d36:	f040 81de 	bne.w	4020f6 <_vfiprintf_r+0x70e>
  401d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d3c:	2b00      	cmp	r3, #0
  401d3e:	f000 81f8 	beq.w	402132 <_vfiprintf_r+0x74a>
  401d42:	3202      	adds	r2, #2
  401d44:	a90e      	add	r1, sp, #56	; 0x38
  401d46:	2302      	movs	r3, #2
  401d48:	2807      	cmp	r0, #7
  401d4a:	9211      	str	r2, [sp, #68]	; 0x44
  401d4c:	9010      	str	r0, [sp, #64]	; 0x40
  401d4e:	e88a 000a 	stmia.w	sl, {r1, r3}
  401d52:	f340 81ea 	ble.w	40212a <_vfiprintf_r+0x742>
  401d56:	2a00      	cmp	r2, #0
  401d58:	f040 838c 	bne.w	402474 <_vfiprintf_r+0xa8c>
  401d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d5e:	2b80      	cmp	r3, #128	; 0x80
  401d60:	f04f 0001 	mov.w	r0, #1
  401d64:	4611      	mov	r1, r2
  401d66:	46ca      	mov	sl, r9
  401d68:	f040 81e7 	bne.w	40213a <_vfiprintf_r+0x752>
  401d6c:	9b08      	ldr	r3, [sp, #32]
  401d6e:	9d01      	ldr	r5, [sp, #4]
  401d70:	1b5e      	subs	r6, r3, r5
  401d72:	2e00      	cmp	r6, #0
  401d74:	f340 81e1 	ble.w	40213a <_vfiprintf_r+0x752>
  401d78:	2e10      	cmp	r6, #16
  401d7a:	4d9a      	ldr	r5, [pc, #616]	; (401fe4 <_vfiprintf_r+0x5fc>)
  401d7c:	f340 8450 	ble.w	402620 <_vfiprintf_r+0xc38>
  401d80:	46d4      	mov	ip, sl
  401d82:	2710      	movs	r7, #16
  401d84:	46a2      	mov	sl, r4
  401d86:	9c06      	ldr	r4, [sp, #24]
  401d88:	e007      	b.n	401d9a <_vfiprintf_r+0x3b2>
  401d8a:	f101 0e02 	add.w	lr, r1, #2
  401d8e:	f10c 0c08 	add.w	ip, ip, #8
  401d92:	4601      	mov	r1, r0
  401d94:	3e10      	subs	r6, #16
  401d96:	2e10      	cmp	r6, #16
  401d98:	dd11      	ble.n	401dbe <_vfiprintf_r+0x3d6>
  401d9a:	1c48      	adds	r0, r1, #1
  401d9c:	3210      	adds	r2, #16
  401d9e:	2807      	cmp	r0, #7
  401da0:	9211      	str	r2, [sp, #68]	; 0x44
  401da2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401da6:	9010      	str	r0, [sp, #64]	; 0x40
  401da8:	ddef      	ble.n	401d8a <_vfiprintf_r+0x3a2>
  401daa:	2a00      	cmp	r2, #0
  401dac:	f040 829d 	bne.w	4022ea <_vfiprintf_r+0x902>
  401db0:	3e10      	subs	r6, #16
  401db2:	2e10      	cmp	r6, #16
  401db4:	f04f 0e01 	mov.w	lr, #1
  401db8:	4611      	mov	r1, r2
  401dba:	46cc      	mov	ip, r9
  401dbc:	dced      	bgt.n	401d9a <_vfiprintf_r+0x3b2>
  401dbe:	4654      	mov	r4, sl
  401dc0:	46e2      	mov	sl, ip
  401dc2:	4432      	add	r2, r6
  401dc4:	f1be 0f07 	cmp.w	lr, #7
  401dc8:	9211      	str	r2, [sp, #68]	; 0x44
  401dca:	e88a 0060 	stmia.w	sl, {r5, r6}
  401dce:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401dd2:	f300 8369 	bgt.w	4024a8 <_vfiprintf_r+0xac0>
  401dd6:	f10a 0a08 	add.w	sl, sl, #8
  401dda:	f10e 0001 	add.w	r0, lr, #1
  401dde:	4671      	mov	r1, lr
  401de0:	e1ab      	b.n	40213a <_vfiprintf_r+0x752>
  401de2:	9608      	str	r6, [sp, #32]
  401de4:	f013 0220 	ands.w	r2, r3, #32
  401de8:	f040 838c 	bne.w	402504 <_vfiprintf_r+0xb1c>
  401dec:	f013 0110 	ands.w	r1, r3, #16
  401df0:	f040 831a 	bne.w	402428 <_vfiprintf_r+0xa40>
  401df4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401df8:	f000 8316 	beq.w	402428 <_vfiprintf_r+0xa40>
  401dfc:	9807      	ldr	r0, [sp, #28]
  401dfe:	460a      	mov	r2, r1
  401e00:	4601      	mov	r1, r0
  401e02:	3104      	adds	r1, #4
  401e04:	8806      	ldrh	r6, [r0, #0]
  401e06:	9107      	str	r1, [sp, #28]
  401e08:	2700      	movs	r7, #0
  401e0a:	e720      	b.n	401c4e <_vfiprintf_r+0x266>
  401e0c:	9608      	str	r6, [sp, #32]
  401e0e:	f043 0310 	orr.w	r3, r3, #16
  401e12:	e7e7      	b.n	401de4 <_vfiprintf_r+0x3fc>
  401e14:	9608      	str	r6, [sp, #32]
  401e16:	f043 0310 	orr.w	r3, r3, #16
  401e1a:	e708      	b.n	401c2e <_vfiprintf_r+0x246>
  401e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401e20:	f898 2000 	ldrb.w	r2, [r8]
  401e24:	e652      	b.n	401acc <_vfiprintf_r+0xe4>
  401e26:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401e2a:	2600      	movs	r6, #0
  401e2c:	f818 2b01 	ldrb.w	r2, [r8], #1
  401e30:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401e34:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401e38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401e3c:	2909      	cmp	r1, #9
  401e3e:	d9f5      	bls.n	401e2c <_vfiprintf_r+0x444>
  401e40:	e646      	b.n	401ad0 <_vfiprintf_r+0xe8>
  401e42:	9608      	str	r6, [sp, #32]
  401e44:	2800      	cmp	r0, #0
  401e46:	f040 8408 	bne.w	40265a <_vfiprintf_r+0xc72>
  401e4a:	f043 0310 	orr.w	r3, r3, #16
  401e4e:	069e      	lsls	r6, r3, #26
  401e50:	f100 834c 	bmi.w	4024ec <_vfiprintf_r+0xb04>
  401e54:	06dd      	lsls	r5, r3, #27
  401e56:	f100 82f3 	bmi.w	402440 <_vfiprintf_r+0xa58>
  401e5a:	0658      	lsls	r0, r3, #25
  401e5c:	f140 82f0 	bpl.w	402440 <_vfiprintf_r+0xa58>
  401e60:	9d07      	ldr	r5, [sp, #28]
  401e62:	f9b5 6000 	ldrsh.w	r6, [r5]
  401e66:	462a      	mov	r2, r5
  401e68:	17f7      	asrs	r7, r6, #31
  401e6a:	3204      	adds	r2, #4
  401e6c:	4630      	mov	r0, r6
  401e6e:	4639      	mov	r1, r7
  401e70:	9207      	str	r2, [sp, #28]
  401e72:	2800      	cmp	r0, #0
  401e74:	f171 0200 	sbcs.w	r2, r1, #0
  401e78:	f2c0 835d 	blt.w	402536 <_vfiprintf_r+0xb4e>
  401e7c:	1c61      	adds	r1, r4, #1
  401e7e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401e82:	f04f 0201 	mov.w	r2, #1
  401e86:	f47f aeea 	bne.w	401c5e <_vfiprintf_r+0x276>
  401e8a:	ea56 0107 	orrs.w	r1, r6, r7
  401e8e:	f000 824d 	beq.w	40232c <_vfiprintf_r+0x944>
  401e92:	9302      	str	r3, [sp, #8]
  401e94:	2a01      	cmp	r2, #1
  401e96:	f000 828c 	beq.w	4023b2 <_vfiprintf_r+0x9ca>
  401e9a:	2a02      	cmp	r2, #2
  401e9c:	f040 825c 	bne.w	402358 <_vfiprintf_r+0x970>
  401ea0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401ea2:	46cb      	mov	fp, r9
  401ea4:	0933      	lsrs	r3, r6, #4
  401ea6:	f006 010f 	and.w	r1, r6, #15
  401eaa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401eae:	093a      	lsrs	r2, r7, #4
  401eb0:	461e      	mov	r6, r3
  401eb2:	4617      	mov	r7, r2
  401eb4:	5c43      	ldrb	r3, [r0, r1]
  401eb6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401eba:	ea56 0307 	orrs.w	r3, r6, r7
  401ebe:	d1f1      	bne.n	401ea4 <_vfiprintf_r+0x4bc>
  401ec0:	eba9 030b 	sub.w	r3, r9, fp
  401ec4:	9305      	str	r3, [sp, #20]
  401ec6:	e6e1      	b.n	401c8c <_vfiprintf_r+0x2a4>
  401ec8:	2800      	cmp	r0, #0
  401eca:	f040 83c0 	bne.w	40264e <_vfiprintf_r+0xc66>
  401ece:	0699      	lsls	r1, r3, #26
  401ed0:	f100 8367 	bmi.w	4025a2 <_vfiprintf_r+0xbba>
  401ed4:	06da      	lsls	r2, r3, #27
  401ed6:	f100 80f1 	bmi.w	4020bc <_vfiprintf_r+0x6d4>
  401eda:	065b      	lsls	r3, r3, #25
  401edc:	f140 80ee 	bpl.w	4020bc <_vfiprintf_r+0x6d4>
  401ee0:	9a07      	ldr	r2, [sp, #28]
  401ee2:	6813      	ldr	r3, [r2, #0]
  401ee4:	3204      	adds	r2, #4
  401ee6:	9207      	str	r2, [sp, #28]
  401ee8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401eec:	801a      	strh	r2, [r3, #0]
  401eee:	e5b8      	b.n	401a62 <_vfiprintf_r+0x7a>
  401ef0:	9807      	ldr	r0, [sp, #28]
  401ef2:	4a3d      	ldr	r2, [pc, #244]	; (401fe8 <_vfiprintf_r+0x600>)
  401ef4:	9608      	str	r6, [sp, #32]
  401ef6:	920b      	str	r2, [sp, #44]	; 0x2c
  401ef8:	6806      	ldr	r6, [r0, #0]
  401efa:	2278      	movs	r2, #120	; 0x78
  401efc:	2130      	movs	r1, #48	; 0x30
  401efe:	3004      	adds	r0, #4
  401f00:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401f04:	f043 0302 	orr.w	r3, r3, #2
  401f08:	9007      	str	r0, [sp, #28]
  401f0a:	2700      	movs	r7, #0
  401f0c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401f10:	2202      	movs	r2, #2
  401f12:	e69c      	b.n	401c4e <_vfiprintf_r+0x266>
  401f14:	9608      	str	r6, [sp, #32]
  401f16:	2800      	cmp	r0, #0
  401f18:	d099      	beq.n	401e4e <_vfiprintf_r+0x466>
  401f1a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f1e:	e796      	b.n	401e4e <_vfiprintf_r+0x466>
  401f20:	f898 2000 	ldrb.w	r2, [r8]
  401f24:	2d00      	cmp	r5, #0
  401f26:	f47f add1 	bne.w	401acc <_vfiprintf_r+0xe4>
  401f2a:	2001      	movs	r0, #1
  401f2c:	2520      	movs	r5, #32
  401f2e:	e5cd      	b.n	401acc <_vfiprintf_r+0xe4>
  401f30:	f043 0301 	orr.w	r3, r3, #1
  401f34:	f898 2000 	ldrb.w	r2, [r8]
  401f38:	e5c8      	b.n	401acc <_vfiprintf_r+0xe4>
  401f3a:	9608      	str	r6, [sp, #32]
  401f3c:	2800      	cmp	r0, #0
  401f3e:	f040 8393 	bne.w	402668 <_vfiprintf_r+0xc80>
  401f42:	4929      	ldr	r1, [pc, #164]	; (401fe8 <_vfiprintf_r+0x600>)
  401f44:	910b      	str	r1, [sp, #44]	; 0x2c
  401f46:	069f      	lsls	r7, r3, #26
  401f48:	f100 82e8 	bmi.w	40251c <_vfiprintf_r+0xb34>
  401f4c:	9807      	ldr	r0, [sp, #28]
  401f4e:	06de      	lsls	r6, r3, #27
  401f50:	4601      	mov	r1, r0
  401f52:	f100 8270 	bmi.w	402436 <_vfiprintf_r+0xa4e>
  401f56:	065d      	lsls	r5, r3, #25
  401f58:	f140 826d 	bpl.w	402436 <_vfiprintf_r+0xa4e>
  401f5c:	3104      	adds	r1, #4
  401f5e:	8806      	ldrh	r6, [r0, #0]
  401f60:	9107      	str	r1, [sp, #28]
  401f62:	2700      	movs	r7, #0
  401f64:	07d8      	lsls	r0, r3, #31
  401f66:	f140 8222 	bpl.w	4023ae <_vfiprintf_r+0x9c6>
  401f6a:	ea56 0107 	orrs.w	r1, r6, r7
  401f6e:	f000 821e 	beq.w	4023ae <_vfiprintf_r+0x9c6>
  401f72:	2130      	movs	r1, #48	; 0x30
  401f74:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401f78:	f043 0302 	orr.w	r3, r3, #2
  401f7c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401f80:	2202      	movs	r2, #2
  401f82:	e664      	b.n	401c4e <_vfiprintf_r+0x266>
  401f84:	9608      	str	r6, [sp, #32]
  401f86:	2800      	cmp	r0, #0
  401f88:	f040 836b 	bne.w	402662 <_vfiprintf_r+0xc7a>
  401f8c:	4917      	ldr	r1, [pc, #92]	; (401fec <_vfiprintf_r+0x604>)
  401f8e:	910b      	str	r1, [sp, #44]	; 0x2c
  401f90:	e7d9      	b.n	401f46 <_vfiprintf_r+0x55e>
  401f92:	9907      	ldr	r1, [sp, #28]
  401f94:	9608      	str	r6, [sp, #32]
  401f96:	680a      	ldr	r2, [r1, #0]
  401f98:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401f9c:	f04f 0000 	mov.w	r0, #0
  401fa0:	460a      	mov	r2, r1
  401fa2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401fa6:	3204      	adds	r2, #4
  401fa8:	2001      	movs	r0, #1
  401faa:	9001      	str	r0, [sp, #4]
  401fac:	9207      	str	r2, [sp, #28]
  401fae:	9005      	str	r0, [sp, #20]
  401fb0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401fb4:	9302      	str	r3, [sp, #8]
  401fb6:	2400      	movs	r4, #0
  401fb8:	e670      	b.n	401c9c <_vfiprintf_r+0x2b4>
  401fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401fbe:	f898 2000 	ldrb.w	r2, [r8]
  401fc2:	e583      	b.n	401acc <_vfiprintf_r+0xe4>
  401fc4:	f898 2000 	ldrb.w	r2, [r8]
  401fc8:	2a6c      	cmp	r2, #108	; 0x6c
  401fca:	bf03      	ittte	eq
  401fcc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401fd0:	f043 0320 	orreq.w	r3, r3, #32
  401fd4:	f108 0801 	addeq.w	r8, r8, #1
  401fd8:	f043 0310 	orrne.w	r3, r3, #16
  401fdc:	e576      	b.n	401acc <_vfiprintf_r+0xe4>
  401fde:	bf00      	nop
  401fe0:	0040458c 	.word	0x0040458c
  401fe4:	0040459c 	.word	0x0040459c
  401fe8:	00404570 	.word	0x00404570
  401fec:	0040455c 	.word	0x0040455c
  401ff0:	9907      	ldr	r1, [sp, #28]
  401ff2:	680e      	ldr	r6, [r1, #0]
  401ff4:	460a      	mov	r2, r1
  401ff6:	2e00      	cmp	r6, #0
  401ff8:	f102 0204 	add.w	r2, r2, #4
  401ffc:	f6ff ae0f 	blt.w	401c1e <_vfiprintf_r+0x236>
  402000:	9207      	str	r2, [sp, #28]
  402002:	f898 2000 	ldrb.w	r2, [r8]
  402006:	e561      	b.n	401acc <_vfiprintf_r+0xe4>
  402008:	f898 2000 	ldrb.w	r2, [r8]
  40200c:	2001      	movs	r0, #1
  40200e:	252b      	movs	r5, #43	; 0x2b
  402010:	e55c      	b.n	401acc <_vfiprintf_r+0xe4>
  402012:	9907      	ldr	r1, [sp, #28]
  402014:	9608      	str	r6, [sp, #32]
  402016:	f8d1 b000 	ldr.w	fp, [r1]
  40201a:	f04f 0200 	mov.w	r2, #0
  40201e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402022:	1d0e      	adds	r6, r1, #4
  402024:	f1bb 0f00 	cmp.w	fp, #0
  402028:	f000 82e5 	beq.w	4025f6 <_vfiprintf_r+0xc0e>
  40202c:	1c67      	adds	r7, r4, #1
  40202e:	f000 82c4 	beq.w	4025ba <_vfiprintf_r+0xbd2>
  402032:	4622      	mov	r2, r4
  402034:	2100      	movs	r1, #0
  402036:	4658      	mov	r0, fp
  402038:	9301      	str	r3, [sp, #4]
  40203a:	f001 fbd1 	bl	4037e0 <memchr>
  40203e:	9b01      	ldr	r3, [sp, #4]
  402040:	2800      	cmp	r0, #0
  402042:	f000 82e5 	beq.w	402610 <_vfiprintf_r+0xc28>
  402046:	eba0 020b 	sub.w	r2, r0, fp
  40204a:	9205      	str	r2, [sp, #20]
  40204c:	9607      	str	r6, [sp, #28]
  40204e:	9302      	str	r3, [sp, #8]
  402050:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402054:	2400      	movs	r4, #0
  402056:	e619      	b.n	401c8c <_vfiprintf_r+0x2a4>
  402058:	f898 2000 	ldrb.w	r2, [r8]
  40205c:	2a2a      	cmp	r2, #42	; 0x2a
  40205e:	f108 0701 	add.w	r7, r8, #1
  402062:	f000 82e9 	beq.w	402638 <_vfiprintf_r+0xc50>
  402066:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40206a:	2909      	cmp	r1, #9
  40206c:	46b8      	mov	r8, r7
  40206e:	f04f 0400 	mov.w	r4, #0
  402072:	f63f ad2d 	bhi.w	401ad0 <_vfiprintf_r+0xe8>
  402076:	f818 2b01 	ldrb.w	r2, [r8], #1
  40207a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40207e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402082:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402086:	2909      	cmp	r1, #9
  402088:	d9f5      	bls.n	402076 <_vfiprintf_r+0x68e>
  40208a:	e521      	b.n	401ad0 <_vfiprintf_r+0xe8>
  40208c:	f043 0320 	orr.w	r3, r3, #32
  402090:	f898 2000 	ldrb.w	r2, [r8]
  402094:	e51a      	b.n	401acc <_vfiprintf_r+0xe4>
  402096:	9608      	str	r6, [sp, #32]
  402098:	2800      	cmp	r0, #0
  40209a:	f040 82db 	bne.w	402654 <_vfiprintf_r+0xc6c>
  40209e:	2a00      	cmp	r2, #0
  4020a0:	f000 80e7 	beq.w	402272 <_vfiprintf_r+0x88a>
  4020a4:	2101      	movs	r1, #1
  4020a6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4020aa:	f04f 0200 	mov.w	r2, #0
  4020ae:	9101      	str	r1, [sp, #4]
  4020b0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4020b4:	9105      	str	r1, [sp, #20]
  4020b6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4020ba:	e77b      	b.n	401fb4 <_vfiprintf_r+0x5cc>
  4020bc:	9a07      	ldr	r2, [sp, #28]
  4020be:	6813      	ldr	r3, [r2, #0]
  4020c0:	3204      	adds	r2, #4
  4020c2:	9207      	str	r2, [sp, #28]
  4020c4:	9a03      	ldr	r2, [sp, #12]
  4020c6:	601a      	str	r2, [r3, #0]
  4020c8:	e4cb      	b.n	401a62 <_vfiprintf_r+0x7a>
  4020ca:	aa0f      	add	r2, sp, #60	; 0x3c
  4020cc:	9904      	ldr	r1, [sp, #16]
  4020ce:	4620      	mov	r0, r4
  4020d0:	f7ff fc4a 	bl	401968 <__sprint_r.part.0>
  4020d4:	2800      	cmp	r0, #0
  4020d6:	f040 8139 	bne.w	40234c <_vfiprintf_r+0x964>
  4020da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020de:	f101 0c01 	add.w	ip, r1, #1
  4020e2:	46ce      	mov	lr, r9
  4020e4:	e5ff      	b.n	401ce6 <_vfiprintf_r+0x2fe>
  4020e6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020ea:	1c48      	adds	r0, r1, #1
  4020ec:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4020f0:	2d00      	cmp	r5, #0
  4020f2:	f43f ae22 	beq.w	401d3a <_vfiprintf_r+0x352>
  4020f6:	3201      	adds	r2, #1
  4020f8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4020fc:	2101      	movs	r1, #1
  4020fe:	2807      	cmp	r0, #7
  402100:	9211      	str	r2, [sp, #68]	; 0x44
  402102:	9010      	str	r0, [sp, #64]	; 0x40
  402104:	f8ca 5000 	str.w	r5, [sl]
  402108:	f8ca 1004 	str.w	r1, [sl, #4]
  40210c:	f340 8108 	ble.w	402320 <_vfiprintf_r+0x938>
  402110:	2a00      	cmp	r2, #0
  402112:	f040 81bc 	bne.w	40248e <_vfiprintf_r+0xaa6>
  402116:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402118:	2b00      	cmp	r3, #0
  40211a:	f43f ae1f 	beq.w	401d5c <_vfiprintf_r+0x374>
  40211e:	ab0e      	add	r3, sp, #56	; 0x38
  402120:	2202      	movs	r2, #2
  402122:	4608      	mov	r0, r1
  402124:	931c      	str	r3, [sp, #112]	; 0x70
  402126:	921d      	str	r2, [sp, #116]	; 0x74
  402128:	46ca      	mov	sl, r9
  40212a:	4601      	mov	r1, r0
  40212c:	f10a 0a08 	add.w	sl, sl, #8
  402130:	3001      	adds	r0, #1
  402132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402134:	2b80      	cmp	r3, #128	; 0x80
  402136:	f43f ae19 	beq.w	401d6c <_vfiprintf_r+0x384>
  40213a:	9b05      	ldr	r3, [sp, #20]
  40213c:	1ae4      	subs	r4, r4, r3
  40213e:	2c00      	cmp	r4, #0
  402140:	dd2e      	ble.n	4021a0 <_vfiprintf_r+0x7b8>
  402142:	2c10      	cmp	r4, #16
  402144:	4db3      	ldr	r5, [pc, #716]	; (402414 <_vfiprintf_r+0xa2c>)
  402146:	dd1e      	ble.n	402186 <_vfiprintf_r+0x79e>
  402148:	46d6      	mov	lr, sl
  40214a:	2610      	movs	r6, #16
  40214c:	9f06      	ldr	r7, [sp, #24]
  40214e:	f8dd a010 	ldr.w	sl, [sp, #16]
  402152:	e006      	b.n	402162 <_vfiprintf_r+0x77a>
  402154:	1c88      	adds	r0, r1, #2
  402156:	f10e 0e08 	add.w	lr, lr, #8
  40215a:	4619      	mov	r1, r3
  40215c:	3c10      	subs	r4, #16
  40215e:	2c10      	cmp	r4, #16
  402160:	dd10      	ble.n	402184 <_vfiprintf_r+0x79c>
  402162:	1c4b      	adds	r3, r1, #1
  402164:	3210      	adds	r2, #16
  402166:	2b07      	cmp	r3, #7
  402168:	9211      	str	r2, [sp, #68]	; 0x44
  40216a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40216e:	9310      	str	r3, [sp, #64]	; 0x40
  402170:	ddf0      	ble.n	402154 <_vfiprintf_r+0x76c>
  402172:	2a00      	cmp	r2, #0
  402174:	d165      	bne.n	402242 <_vfiprintf_r+0x85a>
  402176:	3c10      	subs	r4, #16
  402178:	2c10      	cmp	r4, #16
  40217a:	f04f 0001 	mov.w	r0, #1
  40217e:	4611      	mov	r1, r2
  402180:	46ce      	mov	lr, r9
  402182:	dcee      	bgt.n	402162 <_vfiprintf_r+0x77a>
  402184:	46f2      	mov	sl, lr
  402186:	4422      	add	r2, r4
  402188:	2807      	cmp	r0, #7
  40218a:	9211      	str	r2, [sp, #68]	; 0x44
  40218c:	f8ca 5000 	str.w	r5, [sl]
  402190:	f8ca 4004 	str.w	r4, [sl, #4]
  402194:	9010      	str	r0, [sp, #64]	; 0x40
  402196:	f300 8085 	bgt.w	4022a4 <_vfiprintf_r+0x8bc>
  40219a:	f10a 0a08 	add.w	sl, sl, #8
  40219e:	3001      	adds	r0, #1
  4021a0:	9905      	ldr	r1, [sp, #20]
  4021a2:	f8ca b000 	str.w	fp, [sl]
  4021a6:	440a      	add	r2, r1
  4021a8:	2807      	cmp	r0, #7
  4021aa:	9211      	str	r2, [sp, #68]	; 0x44
  4021ac:	f8ca 1004 	str.w	r1, [sl, #4]
  4021b0:	9010      	str	r0, [sp, #64]	; 0x40
  4021b2:	f340 8082 	ble.w	4022ba <_vfiprintf_r+0x8d2>
  4021b6:	2a00      	cmp	r2, #0
  4021b8:	f040 8118 	bne.w	4023ec <_vfiprintf_r+0xa04>
  4021bc:	9b02      	ldr	r3, [sp, #8]
  4021be:	9210      	str	r2, [sp, #64]	; 0x40
  4021c0:	0758      	lsls	r0, r3, #29
  4021c2:	d535      	bpl.n	402230 <_vfiprintf_r+0x848>
  4021c4:	9b08      	ldr	r3, [sp, #32]
  4021c6:	9901      	ldr	r1, [sp, #4]
  4021c8:	1a5c      	subs	r4, r3, r1
  4021ca:	2c00      	cmp	r4, #0
  4021cc:	f340 80e7 	ble.w	40239e <_vfiprintf_r+0x9b6>
  4021d0:	46ca      	mov	sl, r9
  4021d2:	2c10      	cmp	r4, #16
  4021d4:	f340 8218 	ble.w	402608 <_vfiprintf_r+0xc20>
  4021d8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4021da:	4e8f      	ldr	r6, [pc, #572]	; (402418 <_vfiprintf_r+0xa30>)
  4021dc:	9f06      	ldr	r7, [sp, #24]
  4021de:	f8dd b010 	ldr.w	fp, [sp, #16]
  4021e2:	2510      	movs	r5, #16
  4021e4:	e006      	b.n	4021f4 <_vfiprintf_r+0x80c>
  4021e6:	1c88      	adds	r0, r1, #2
  4021e8:	f10a 0a08 	add.w	sl, sl, #8
  4021ec:	4619      	mov	r1, r3
  4021ee:	3c10      	subs	r4, #16
  4021f0:	2c10      	cmp	r4, #16
  4021f2:	dd11      	ble.n	402218 <_vfiprintf_r+0x830>
  4021f4:	1c4b      	adds	r3, r1, #1
  4021f6:	3210      	adds	r2, #16
  4021f8:	2b07      	cmp	r3, #7
  4021fa:	9211      	str	r2, [sp, #68]	; 0x44
  4021fc:	f8ca 6000 	str.w	r6, [sl]
  402200:	f8ca 5004 	str.w	r5, [sl, #4]
  402204:	9310      	str	r3, [sp, #64]	; 0x40
  402206:	ddee      	ble.n	4021e6 <_vfiprintf_r+0x7fe>
  402208:	bb42      	cbnz	r2, 40225c <_vfiprintf_r+0x874>
  40220a:	3c10      	subs	r4, #16
  40220c:	2c10      	cmp	r4, #16
  40220e:	f04f 0001 	mov.w	r0, #1
  402212:	4611      	mov	r1, r2
  402214:	46ca      	mov	sl, r9
  402216:	dced      	bgt.n	4021f4 <_vfiprintf_r+0x80c>
  402218:	4422      	add	r2, r4
  40221a:	2807      	cmp	r0, #7
  40221c:	9211      	str	r2, [sp, #68]	; 0x44
  40221e:	f8ca 6000 	str.w	r6, [sl]
  402222:	f8ca 4004 	str.w	r4, [sl, #4]
  402226:	9010      	str	r0, [sp, #64]	; 0x40
  402228:	dd51      	ble.n	4022ce <_vfiprintf_r+0x8e6>
  40222a:	2a00      	cmp	r2, #0
  40222c:	f040 819b 	bne.w	402566 <_vfiprintf_r+0xb7e>
  402230:	9b03      	ldr	r3, [sp, #12]
  402232:	9a08      	ldr	r2, [sp, #32]
  402234:	9901      	ldr	r1, [sp, #4]
  402236:	428a      	cmp	r2, r1
  402238:	bfac      	ite	ge
  40223a:	189b      	addge	r3, r3, r2
  40223c:	185b      	addlt	r3, r3, r1
  40223e:	9303      	str	r3, [sp, #12]
  402240:	e04e      	b.n	4022e0 <_vfiprintf_r+0x8f8>
  402242:	aa0f      	add	r2, sp, #60	; 0x3c
  402244:	4651      	mov	r1, sl
  402246:	4638      	mov	r0, r7
  402248:	f7ff fb8e 	bl	401968 <__sprint_r.part.0>
  40224c:	2800      	cmp	r0, #0
  40224e:	f040 813f 	bne.w	4024d0 <_vfiprintf_r+0xae8>
  402252:	9910      	ldr	r1, [sp, #64]	; 0x40
  402254:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402256:	1c48      	adds	r0, r1, #1
  402258:	46ce      	mov	lr, r9
  40225a:	e77f      	b.n	40215c <_vfiprintf_r+0x774>
  40225c:	aa0f      	add	r2, sp, #60	; 0x3c
  40225e:	4659      	mov	r1, fp
  402260:	4638      	mov	r0, r7
  402262:	f7ff fb81 	bl	401968 <__sprint_r.part.0>
  402266:	b960      	cbnz	r0, 402282 <_vfiprintf_r+0x89a>
  402268:	9910      	ldr	r1, [sp, #64]	; 0x40
  40226a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40226c:	1c48      	adds	r0, r1, #1
  40226e:	46ca      	mov	sl, r9
  402270:	e7bd      	b.n	4021ee <_vfiprintf_r+0x806>
  402272:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402274:	f8dd b010 	ldr.w	fp, [sp, #16]
  402278:	2b00      	cmp	r3, #0
  40227a:	f040 81d4 	bne.w	402626 <_vfiprintf_r+0xc3e>
  40227e:	2300      	movs	r3, #0
  402280:	9310      	str	r3, [sp, #64]	; 0x40
  402282:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402286:	f013 0f01 	tst.w	r3, #1
  40228a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40228e:	d102      	bne.n	402296 <_vfiprintf_r+0x8ae>
  402290:	059a      	lsls	r2, r3, #22
  402292:	f140 80de 	bpl.w	402452 <_vfiprintf_r+0xa6a>
  402296:	065b      	lsls	r3, r3, #25
  402298:	f53f acb2 	bmi.w	401c00 <_vfiprintf_r+0x218>
  40229c:	9803      	ldr	r0, [sp, #12]
  40229e:	b02d      	add	sp, #180	; 0xb4
  4022a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022a4:	2a00      	cmp	r2, #0
  4022a6:	f040 8106 	bne.w	4024b6 <_vfiprintf_r+0xace>
  4022aa:	9a05      	ldr	r2, [sp, #20]
  4022ac:	921d      	str	r2, [sp, #116]	; 0x74
  4022ae:	2301      	movs	r3, #1
  4022b0:	9211      	str	r2, [sp, #68]	; 0x44
  4022b2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4022b6:	9310      	str	r3, [sp, #64]	; 0x40
  4022b8:	46ca      	mov	sl, r9
  4022ba:	f10a 0a08 	add.w	sl, sl, #8
  4022be:	9b02      	ldr	r3, [sp, #8]
  4022c0:	0759      	lsls	r1, r3, #29
  4022c2:	d504      	bpl.n	4022ce <_vfiprintf_r+0x8e6>
  4022c4:	9b08      	ldr	r3, [sp, #32]
  4022c6:	9901      	ldr	r1, [sp, #4]
  4022c8:	1a5c      	subs	r4, r3, r1
  4022ca:	2c00      	cmp	r4, #0
  4022cc:	dc81      	bgt.n	4021d2 <_vfiprintf_r+0x7ea>
  4022ce:	9b03      	ldr	r3, [sp, #12]
  4022d0:	9908      	ldr	r1, [sp, #32]
  4022d2:	9801      	ldr	r0, [sp, #4]
  4022d4:	4281      	cmp	r1, r0
  4022d6:	bfac      	ite	ge
  4022d8:	185b      	addge	r3, r3, r1
  4022da:	181b      	addlt	r3, r3, r0
  4022dc:	9303      	str	r3, [sp, #12]
  4022de:	bb72      	cbnz	r2, 40233e <_vfiprintf_r+0x956>
  4022e0:	2300      	movs	r3, #0
  4022e2:	9310      	str	r3, [sp, #64]	; 0x40
  4022e4:	46ca      	mov	sl, r9
  4022e6:	f7ff bbbc 	b.w	401a62 <_vfiprintf_r+0x7a>
  4022ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4022ec:	9904      	ldr	r1, [sp, #16]
  4022ee:	4620      	mov	r0, r4
  4022f0:	f7ff fb3a 	bl	401968 <__sprint_r.part.0>
  4022f4:	bb50      	cbnz	r0, 40234c <_vfiprintf_r+0x964>
  4022f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022fa:	f101 0e01 	add.w	lr, r1, #1
  4022fe:	46cc      	mov	ip, r9
  402300:	e548      	b.n	401d94 <_vfiprintf_r+0x3ac>
  402302:	2a00      	cmp	r2, #0
  402304:	f040 8140 	bne.w	402588 <_vfiprintf_r+0xba0>
  402308:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40230c:	2900      	cmp	r1, #0
  40230e:	f000 811b 	beq.w	402548 <_vfiprintf_r+0xb60>
  402312:	2201      	movs	r2, #1
  402314:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402318:	4610      	mov	r0, r2
  40231a:	921d      	str	r2, [sp, #116]	; 0x74
  40231c:	911c      	str	r1, [sp, #112]	; 0x70
  40231e:	46ca      	mov	sl, r9
  402320:	4601      	mov	r1, r0
  402322:	f10a 0a08 	add.w	sl, sl, #8
  402326:	3001      	adds	r0, #1
  402328:	e507      	b.n	401d3a <_vfiprintf_r+0x352>
  40232a:	9b02      	ldr	r3, [sp, #8]
  40232c:	2a01      	cmp	r2, #1
  40232e:	f000 8098 	beq.w	402462 <_vfiprintf_r+0xa7a>
  402332:	2a02      	cmp	r2, #2
  402334:	d10d      	bne.n	402352 <_vfiprintf_r+0x96a>
  402336:	9302      	str	r3, [sp, #8]
  402338:	2600      	movs	r6, #0
  40233a:	2700      	movs	r7, #0
  40233c:	e5b0      	b.n	401ea0 <_vfiprintf_r+0x4b8>
  40233e:	aa0f      	add	r2, sp, #60	; 0x3c
  402340:	9904      	ldr	r1, [sp, #16]
  402342:	9806      	ldr	r0, [sp, #24]
  402344:	f7ff fb10 	bl	401968 <__sprint_r.part.0>
  402348:	2800      	cmp	r0, #0
  40234a:	d0c9      	beq.n	4022e0 <_vfiprintf_r+0x8f8>
  40234c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402350:	e797      	b.n	402282 <_vfiprintf_r+0x89a>
  402352:	9302      	str	r3, [sp, #8]
  402354:	2600      	movs	r6, #0
  402356:	2700      	movs	r7, #0
  402358:	4649      	mov	r1, r9
  40235a:	e000      	b.n	40235e <_vfiprintf_r+0x976>
  40235c:	4659      	mov	r1, fp
  40235e:	08f2      	lsrs	r2, r6, #3
  402360:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402364:	08f8      	lsrs	r0, r7, #3
  402366:	f006 0307 	and.w	r3, r6, #7
  40236a:	4607      	mov	r7, r0
  40236c:	4616      	mov	r6, r2
  40236e:	3330      	adds	r3, #48	; 0x30
  402370:	ea56 0207 	orrs.w	r2, r6, r7
  402374:	f801 3c01 	strb.w	r3, [r1, #-1]
  402378:	f101 3bff 	add.w	fp, r1, #4294967295
  40237c:	d1ee      	bne.n	40235c <_vfiprintf_r+0x974>
  40237e:	9a02      	ldr	r2, [sp, #8]
  402380:	07d6      	lsls	r6, r2, #31
  402382:	f57f ad9d 	bpl.w	401ec0 <_vfiprintf_r+0x4d8>
  402386:	2b30      	cmp	r3, #48	; 0x30
  402388:	f43f ad9a 	beq.w	401ec0 <_vfiprintf_r+0x4d8>
  40238c:	3902      	subs	r1, #2
  40238e:	2330      	movs	r3, #48	; 0x30
  402390:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402394:	eba9 0301 	sub.w	r3, r9, r1
  402398:	9305      	str	r3, [sp, #20]
  40239a:	468b      	mov	fp, r1
  40239c:	e476      	b.n	401c8c <_vfiprintf_r+0x2a4>
  40239e:	9b03      	ldr	r3, [sp, #12]
  4023a0:	9a08      	ldr	r2, [sp, #32]
  4023a2:	428a      	cmp	r2, r1
  4023a4:	bfac      	ite	ge
  4023a6:	189b      	addge	r3, r3, r2
  4023a8:	185b      	addlt	r3, r3, r1
  4023aa:	9303      	str	r3, [sp, #12]
  4023ac:	e798      	b.n	4022e0 <_vfiprintf_r+0x8f8>
  4023ae:	2202      	movs	r2, #2
  4023b0:	e44d      	b.n	401c4e <_vfiprintf_r+0x266>
  4023b2:	2f00      	cmp	r7, #0
  4023b4:	bf08      	it	eq
  4023b6:	2e0a      	cmpeq	r6, #10
  4023b8:	d352      	bcc.n	402460 <_vfiprintf_r+0xa78>
  4023ba:	46cb      	mov	fp, r9
  4023bc:	4630      	mov	r0, r6
  4023be:	4639      	mov	r1, r7
  4023c0:	220a      	movs	r2, #10
  4023c2:	2300      	movs	r3, #0
  4023c4:	f001 ff18 	bl	4041f8 <__aeabi_uldivmod>
  4023c8:	3230      	adds	r2, #48	; 0x30
  4023ca:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4023ce:	4630      	mov	r0, r6
  4023d0:	4639      	mov	r1, r7
  4023d2:	2300      	movs	r3, #0
  4023d4:	220a      	movs	r2, #10
  4023d6:	f001 ff0f 	bl	4041f8 <__aeabi_uldivmod>
  4023da:	4606      	mov	r6, r0
  4023dc:	460f      	mov	r7, r1
  4023de:	ea56 0307 	orrs.w	r3, r6, r7
  4023e2:	d1eb      	bne.n	4023bc <_vfiprintf_r+0x9d4>
  4023e4:	e56c      	b.n	401ec0 <_vfiprintf_r+0x4d8>
  4023e6:	9405      	str	r4, [sp, #20]
  4023e8:	46cb      	mov	fp, r9
  4023ea:	e44f      	b.n	401c8c <_vfiprintf_r+0x2a4>
  4023ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4023ee:	9904      	ldr	r1, [sp, #16]
  4023f0:	9806      	ldr	r0, [sp, #24]
  4023f2:	f7ff fab9 	bl	401968 <__sprint_r.part.0>
  4023f6:	2800      	cmp	r0, #0
  4023f8:	d1a8      	bne.n	40234c <_vfiprintf_r+0x964>
  4023fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023fc:	46ca      	mov	sl, r9
  4023fe:	e75e      	b.n	4022be <_vfiprintf_r+0x8d6>
  402400:	aa0f      	add	r2, sp, #60	; 0x3c
  402402:	9904      	ldr	r1, [sp, #16]
  402404:	9806      	ldr	r0, [sp, #24]
  402406:	f7ff faaf 	bl	401968 <__sprint_r.part.0>
  40240a:	2800      	cmp	r0, #0
  40240c:	d19e      	bne.n	40234c <_vfiprintf_r+0x964>
  40240e:	46ca      	mov	sl, r9
  402410:	f7ff bbc0 	b.w	401b94 <_vfiprintf_r+0x1ac>
  402414:	0040459c 	.word	0x0040459c
  402418:	0040458c 	.word	0x0040458c
  40241c:	3104      	adds	r1, #4
  40241e:	6816      	ldr	r6, [r2, #0]
  402420:	9107      	str	r1, [sp, #28]
  402422:	2201      	movs	r2, #1
  402424:	2700      	movs	r7, #0
  402426:	e412      	b.n	401c4e <_vfiprintf_r+0x266>
  402428:	9807      	ldr	r0, [sp, #28]
  40242a:	4601      	mov	r1, r0
  40242c:	3104      	adds	r1, #4
  40242e:	6806      	ldr	r6, [r0, #0]
  402430:	9107      	str	r1, [sp, #28]
  402432:	2700      	movs	r7, #0
  402434:	e40b      	b.n	401c4e <_vfiprintf_r+0x266>
  402436:	680e      	ldr	r6, [r1, #0]
  402438:	3104      	adds	r1, #4
  40243a:	9107      	str	r1, [sp, #28]
  40243c:	2700      	movs	r7, #0
  40243e:	e591      	b.n	401f64 <_vfiprintf_r+0x57c>
  402440:	9907      	ldr	r1, [sp, #28]
  402442:	680e      	ldr	r6, [r1, #0]
  402444:	460a      	mov	r2, r1
  402446:	17f7      	asrs	r7, r6, #31
  402448:	3204      	adds	r2, #4
  40244a:	9207      	str	r2, [sp, #28]
  40244c:	4630      	mov	r0, r6
  40244e:	4639      	mov	r1, r7
  402450:	e50f      	b.n	401e72 <_vfiprintf_r+0x48a>
  402452:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402456:	f000 fe7f 	bl	403158 <__retarget_lock_release_recursive>
  40245a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40245e:	e71a      	b.n	402296 <_vfiprintf_r+0x8ae>
  402460:	9b02      	ldr	r3, [sp, #8]
  402462:	9302      	str	r3, [sp, #8]
  402464:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402468:	3630      	adds	r6, #48	; 0x30
  40246a:	2301      	movs	r3, #1
  40246c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402470:	9305      	str	r3, [sp, #20]
  402472:	e40b      	b.n	401c8c <_vfiprintf_r+0x2a4>
  402474:	aa0f      	add	r2, sp, #60	; 0x3c
  402476:	9904      	ldr	r1, [sp, #16]
  402478:	9806      	ldr	r0, [sp, #24]
  40247a:	f7ff fa75 	bl	401968 <__sprint_r.part.0>
  40247e:	2800      	cmp	r0, #0
  402480:	f47f af64 	bne.w	40234c <_vfiprintf_r+0x964>
  402484:	9910      	ldr	r1, [sp, #64]	; 0x40
  402486:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402488:	1c48      	adds	r0, r1, #1
  40248a:	46ca      	mov	sl, r9
  40248c:	e651      	b.n	402132 <_vfiprintf_r+0x74a>
  40248e:	aa0f      	add	r2, sp, #60	; 0x3c
  402490:	9904      	ldr	r1, [sp, #16]
  402492:	9806      	ldr	r0, [sp, #24]
  402494:	f7ff fa68 	bl	401968 <__sprint_r.part.0>
  402498:	2800      	cmp	r0, #0
  40249a:	f47f af57 	bne.w	40234c <_vfiprintf_r+0x964>
  40249e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024a2:	1c48      	adds	r0, r1, #1
  4024a4:	46ca      	mov	sl, r9
  4024a6:	e448      	b.n	401d3a <_vfiprintf_r+0x352>
  4024a8:	2a00      	cmp	r2, #0
  4024aa:	f040 8091 	bne.w	4025d0 <_vfiprintf_r+0xbe8>
  4024ae:	2001      	movs	r0, #1
  4024b0:	4611      	mov	r1, r2
  4024b2:	46ca      	mov	sl, r9
  4024b4:	e641      	b.n	40213a <_vfiprintf_r+0x752>
  4024b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4024b8:	9904      	ldr	r1, [sp, #16]
  4024ba:	9806      	ldr	r0, [sp, #24]
  4024bc:	f7ff fa54 	bl	401968 <__sprint_r.part.0>
  4024c0:	2800      	cmp	r0, #0
  4024c2:	f47f af43 	bne.w	40234c <_vfiprintf_r+0x964>
  4024c6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4024c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024ca:	3001      	adds	r0, #1
  4024cc:	46ca      	mov	sl, r9
  4024ce:	e667      	b.n	4021a0 <_vfiprintf_r+0x7b8>
  4024d0:	46d3      	mov	fp, sl
  4024d2:	e6d6      	b.n	402282 <_vfiprintf_r+0x89a>
  4024d4:	9e07      	ldr	r6, [sp, #28]
  4024d6:	3607      	adds	r6, #7
  4024d8:	f026 0207 	bic.w	r2, r6, #7
  4024dc:	f102 0108 	add.w	r1, r2, #8
  4024e0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4024e4:	9107      	str	r1, [sp, #28]
  4024e6:	2201      	movs	r2, #1
  4024e8:	f7ff bbb1 	b.w	401c4e <_vfiprintf_r+0x266>
  4024ec:	9e07      	ldr	r6, [sp, #28]
  4024ee:	3607      	adds	r6, #7
  4024f0:	f026 0607 	bic.w	r6, r6, #7
  4024f4:	e9d6 0100 	ldrd	r0, r1, [r6]
  4024f8:	f106 0208 	add.w	r2, r6, #8
  4024fc:	9207      	str	r2, [sp, #28]
  4024fe:	4606      	mov	r6, r0
  402500:	460f      	mov	r7, r1
  402502:	e4b6      	b.n	401e72 <_vfiprintf_r+0x48a>
  402504:	9e07      	ldr	r6, [sp, #28]
  402506:	3607      	adds	r6, #7
  402508:	f026 0207 	bic.w	r2, r6, #7
  40250c:	f102 0108 	add.w	r1, r2, #8
  402510:	e9d2 6700 	ldrd	r6, r7, [r2]
  402514:	9107      	str	r1, [sp, #28]
  402516:	2200      	movs	r2, #0
  402518:	f7ff bb99 	b.w	401c4e <_vfiprintf_r+0x266>
  40251c:	9e07      	ldr	r6, [sp, #28]
  40251e:	3607      	adds	r6, #7
  402520:	f026 0107 	bic.w	r1, r6, #7
  402524:	f101 0008 	add.w	r0, r1, #8
  402528:	9007      	str	r0, [sp, #28]
  40252a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40252e:	e519      	b.n	401f64 <_vfiprintf_r+0x57c>
  402530:	46cb      	mov	fp, r9
  402532:	f7ff bbab 	b.w	401c8c <_vfiprintf_r+0x2a4>
  402536:	252d      	movs	r5, #45	; 0x2d
  402538:	4276      	negs	r6, r6
  40253a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40253e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402542:	2201      	movs	r2, #1
  402544:	f7ff bb88 	b.w	401c58 <_vfiprintf_r+0x270>
  402548:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40254a:	b9b3      	cbnz	r3, 40257a <_vfiprintf_r+0xb92>
  40254c:	4611      	mov	r1, r2
  40254e:	2001      	movs	r0, #1
  402550:	46ca      	mov	sl, r9
  402552:	e5f2      	b.n	40213a <_vfiprintf_r+0x752>
  402554:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402558:	f000 fdfe 	bl	403158 <__retarget_lock_release_recursive>
  40255c:	f04f 33ff 	mov.w	r3, #4294967295
  402560:	9303      	str	r3, [sp, #12]
  402562:	f7ff bb50 	b.w	401c06 <_vfiprintf_r+0x21e>
  402566:	aa0f      	add	r2, sp, #60	; 0x3c
  402568:	9904      	ldr	r1, [sp, #16]
  40256a:	9806      	ldr	r0, [sp, #24]
  40256c:	f7ff f9fc 	bl	401968 <__sprint_r.part.0>
  402570:	2800      	cmp	r0, #0
  402572:	f47f aeeb 	bne.w	40234c <_vfiprintf_r+0x964>
  402576:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402578:	e6a9      	b.n	4022ce <_vfiprintf_r+0x8e6>
  40257a:	ab0e      	add	r3, sp, #56	; 0x38
  40257c:	2202      	movs	r2, #2
  40257e:	931c      	str	r3, [sp, #112]	; 0x70
  402580:	921d      	str	r2, [sp, #116]	; 0x74
  402582:	2001      	movs	r0, #1
  402584:	46ca      	mov	sl, r9
  402586:	e5d0      	b.n	40212a <_vfiprintf_r+0x742>
  402588:	aa0f      	add	r2, sp, #60	; 0x3c
  40258a:	9904      	ldr	r1, [sp, #16]
  40258c:	9806      	ldr	r0, [sp, #24]
  40258e:	f7ff f9eb 	bl	401968 <__sprint_r.part.0>
  402592:	2800      	cmp	r0, #0
  402594:	f47f aeda 	bne.w	40234c <_vfiprintf_r+0x964>
  402598:	9910      	ldr	r1, [sp, #64]	; 0x40
  40259a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40259c:	1c48      	adds	r0, r1, #1
  40259e:	46ca      	mov	sl, r9
  4025a0:	e5a4      	b.n	4020ec <_vfiprintf_r+0x704>
  4025a2:	9a07      	ldr	r2, [sp, #28]
  4025a4:	9903      	ldr	r1, [sp, #12]
  4025a6:	6813      	ldr	r3, [r2, #0]
  4025a8:	17cd      	asrs	r5, r1, #31
  4025aa:	4608      	mov	r0, r1
  4025ac:	3204      	adds	r2, #4
  4025ae:	4629      	mov	r1, r5
  4025b0:	9207      	str	r2, [sp, #28]
  4025b2:	e9c3 0100 	strd	r0, r1, [r3]
  4025b6:	f7ff ba54 	b.w	401a62 <_vfiprintf_r+0x7a>
  4025ba:	4658      	mov	r0, fp
  4025bc:	9607      	str	r6, [sp, #28]
  4025be:	9302      	str	r3, [sp, #8]
  4025c0:	f001 fbde 	bl	403d80 <strlen>
  4025c4:	2400      	movs	r4, #0
  4025c6:	9005      	str	r0, [sp, #20]
  4025c8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4025cc:	f7ff bb5e 	b.w	401c8c <_vfiprintf_r+0x2a4>
  4025d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4025d2:	9904      	ldr	r1, [sp, #16]
  4025d4:	9806      	ldr	r0, [sp, #24]
  4025d6:	f7ff f9c7 	bl	401968 <__sprint_r.part.0>
  4025da:	2800      	cmp	r0, #0
  4025dc:	f47f aeb6 	bne.w	40234c <_vfiprintf_r+0x964>
  4025e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025e4:	1c48      	adds	r0, r1, #1
  4025e6:	46ca      	mov	sl, r9
  4025e8:	e5a7      	b.n	40213a <_vfiprintf_r+0x752>
  4025ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025ee:	4e20      	ldr	r6, [pc, #128]	; (402670 <_vfiprintf_r+0xc88>)
  4025f0:	3101      	adds	r1, #1
  4025f2:	f7ff bb90 	b.w	401d16 <_vfiprintf_r+0x32e>
  4025f6:	2c06      	cmp	r4, #6
  4025f8:	bf28      	it	cs
  4025fa:	2406      	movcs	r4, #6
  4025fc:	9405      	str	r4, [sp, #20]
  4025fe:	9607      	str	r6, [sp, #28]
  402600:	9401      	str	r4, [sp, #4]
  402602:	f8df b070 	ldr.w	fp, [pc, #112]	; 402674 <_vfiprintf_r+0xc8c>
  402606:	e4d5      	b.n	401fb4 <_vfiprintf_r+0x5cc>
  402608:	9810      	ldr	r0, [sp, #64]	; 0x40
  40260a:	4e19      	ldr	r6, [pc, #100]	; (402670 <_vfiprintf_r+0xc88>)
  40260c:	3001      	adds	r0, #1
  40260e:	e603      	b.n	402218 <_vfiprintf_r+0x830>
  402610:	9405      	str	r4, [sp, #20]
  402612:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402616:	9607      	str	r6, [sp, #28]
  402618:	9302      	str	r3, [sp, #8]
  40261a:	4604      	mov	r4, r0
  40261c:	f7ff bb36 	b.w	401c8c <_vfiprintf_r+0x2a4>
  402620:	4686      	mov	lr, r0
  402622:	f7ff bbce 	b.w	401dc2 <_vfiprintf_r+0x3da>
  402626:	9806      	ldr	r0, [sp, #24]
  402628:	aa0f      	add	r2, sp, #60	; 0x3c
  40262a:	4659      	mov	r1, fp
  40262c:	f7ff f99c 	bl	401968 <__sprint_r.part.0>
  402630:	2800      	cmp	r0, #0
  402632:	f43f ae24 	beq.w	40227e <_vfiprintf_r+0x896>
  402636:	e624      	b.n	402282 <_vfiprintf_r+0x89a>
  402638:	9907      	ldr	r1, [sp, #28]
  40263a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40263e:	680c      	ldr	r4, [r1, #0]
  402640:	3104      	adds	r1, #4
  402642:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402646:	46b8      	mov	r8, r7
  402648:	9107      	str	r1, [sp, #28]
  40264a:	f7ff ba3f 	b.w	401acc <_vfiprintf_r+0xe4>
  40264e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402652:	e43c      	b.n	401ece <_vfiprintf_r+0x4e6>
  402654:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402658:	e521      	b.n	40209e <_vfiprintf_r+0x6b6>
  40265a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40265e:	f7ff bbf4 	b.w	401e4a <_vfiprintf_r+0x462>
  402662:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402666:	e491      	b.n	401f8c <_vfiprintf_r+0x5a4>
  402668:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40266c:	e469      	b.n	401f42 <_vfiprintf_r+0x55a>
  40266e:	bf00      	nop
  402670:	0040458c 	.word	0x0040458c
  402674:	00404584 	.word	0x00404584

00402678 <__sbprintf>:
  402678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40267c:	460c      	mov	r4, r1
  40267e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402682:	8989      	ldrh	r1, [r1, #12]
  402684:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402686:	89e5      	ldrh	r5, [r4, #14]
  402688:	9619      	str	r6, [sp, #100]	; 0x64
  40268a:	f021 0102 	bic.w	r1, r1, #2
  40268e:	4606      	mov	r6, r0
  402690:	69e0      	ldr	r0, [r4, #28]
  402692:	f8ad 100c 	strh.w	r1, [sp, #12]
  402696:	4617      	mov	r7, r2
  402698:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40269c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40269e:	f8ad 500e 	strh.w	r5, [sp, #14]
  4026a2:	4698      	mov	r8, r3
  4026a4:	ad1a      	add	r5, sp, #104	; 0x68
  4026a6:	2300      	movs	r3, #0
  4026a8:	9007      	str	r0, [sp, #28]
  4026aa:	a816      	add	r0, sp, #88	; 0x58
  4026ac:	9209      	str	r2, [sp, #36]	; 0x24
  4026ae:	9306      	str	r3, [sp, #24]
  4026b0:	9500      	str	r5, [sp, #0]
  4026b2:	9504      	str	r5, [sp, #16]
  4026b4:	9102      	str	r1, [sp, #8]
  4026b6:	9105      	str	r1, [sp, #20]
  4026b8:	f000 fd48 	bl	40314c <__retarget_lock_init_recursive>
  4026bc:	4643      	mov	r3, r8
  4026be:	463a      	mov	r2, r7
  4026c0:	4669      	mov	r1, sp
  4026c2:	4630      	mov	r0, r6
  4026c4:	f7ff f990 	bl	4019e8 <_vfiprintf_r>
  4026c8:	1e05      	subs	r5, r0, #0
  4026ca:	db07      	blt.n	4026dc <__sbprintf+0x64>
  4026cc:	4630      	mov	r0, r6
  4026ce:	4669      	mov	r1, sp
  4026d0:	f000 f928 	bl	402924 <_fflush_r>
  4026d4:	2800      	cmp	r0, #0
  4026d6:	bf18      	it	ne
  4026d8:	f04f 35ff 	movne.w	r5, #4294967295
  4026dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4026e0:	065b      	lsls	r3, r3, #25
  4026e2:	d503      	bpl.n	4026ec <__sbprintf+0x74>
  4026e4:	89a3      	ldrh	r3, [r4, #12]
  4026e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4026ea:	81a3      	strh	r3, [r4, #12]
  4026ec:	9816      	ldr	r0, [sp, #88]	; 0x58
  4026ee:	f000 fd2f 	bl	403150 <__retarget_lock_close_recursive>
  4026f2:	4628      	mov	r0, r5
  4026f4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4026f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004026fc <__swsetup_r>:
  4026fc:	b538      	push	{r3, r4, r5, lr}
  4026fe:	4b30      	ldr	r3, [pc, #192]	; (4027c0 <__swsetup_r+0xc4>)
  402700:	681b      	ldr	r3, [r3, #0]
  402702:	4605      	mov	r5, r0
  402704:	460c      	mov	r4, r1
  402706:	b113      	cbz	r3, 40270e <__swsetup_r+0x12>
  402708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40270a:	2a00      	cmp	r2, #0
  40270c:	d038      	beq.n	402780 <__swsetup_r+0x84>
  40270e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402712:	b293      	uxth	r3, r2
  402714:	0718      	lsls	r0, r3, #28
  402716:	d50c      	bpl.n	402732 <__swsetup_r+0x36>
  402718:	6920      	ldr	r0, [r4, #16]
  40271a:	b1a8      	cbz	r0, 402748 <__swsetup_r+0x4c>
  40271c:	f013 0201 	ands.w	r2, r3, #1
  402720:	d01e      	beq.n	402760 <__swsetup_r+0x64>
  402722:	6963      	ldr	r3, [r4, #20]
  402724:	2200      	movs	r2, #0
  402726:	425b      	negs	r3, r3
  402728:	61a3      	str	r3, [r4, #24]
  40272a:	60a2      	str	r2, [r4, #8]
  40272c:	b1f0      	cbz	r0, 40276c <__swsetup_r+0x70>
  40272e:	2000      	movs	r0, #0
  402730:	bd38      	pop	{r3, r4, r5, pc}
  402732:	06d9      	lsls	r1, r3, #27
  402734:	d53c      	bpl.n	4027b0 <__swsetup_r+0xb4>
  402736:	0758      	lsls	r0, r3, #29
  402738:	d426      	bmi.n	402788 <__swsetup_r+0x8c>
  40273a:	6920      	ldr	r0, [r4, #16]
  40273c:	f042 0308 	orr.w	r3, r2, #8
  402740:	81a3      	strh	r3, [r4, #12]
  402742:	b29b      	uxth	r3, r3
  402744:	2800      	cmp	r0, #0
  402746:	d1e9      	bne.n	40271c <__swsetup_r+0x20>
  402748:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40274c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402750:	d0e4      	beq.n	40271c <__swsetup_r+0x20>
  402752:	4628      	mov	r0, r5
  402754:	4621      	mov	r1, r4
  402756:	f000 fd2f 	bl	4031b8 <__smakebuf_r>
  40275a:	89a3      	ldrh	r3, [r4, #12]
  40275c:	6920      	ldr	r0, [r4, #16]
  40275e:	e7dd      	b.n	40271c <__swsetup_r+0x20>
  402760:	0799      	lsls	r1, r3, #30
  402762:	bf58      	it	pl
  402764:	6962      	ldrpl	r2, [r4, #20]
  402766:	60a2      	str	r2, [r4, #8]
  402768:	2800      	cmp	r0, #0
  40276a:	d1e0      	bne.n	40272e <__swsetup_r+0x32>
  40276c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402770:	061a      	lsls	r2, r3, #24
  402772:	d5dd      	bpl.n	402730 <__swsetup_r+0x34>
  402774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402778:	81a3      	strh	r3, [r4, #12]
  40277a:	f04f 30ff 	mov.w	r0, #4294967295
  40277e:	bd38      	pop	{r3, r4, r5, pc}
  402780:	4618      	mov	r0, r3
  402782:	f000 f927 	bl	4029d4 <__sinit>
  402786:	e7c2      	b.n	40270e <__swsetup_r+0x12>
  402788:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40278a:	b151      	cbz	r1, 4027a2 <__swsetup_r+0xa6>
  40278c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402790:	4299      	cmp	r1, r3
  402792:	d004      	beq.n	40279e <__swsetup_r+0xa2>
  402794:	4628      	mov	r0, r5
  402796:	f000 fa43 	bl	402c20 <_free_r>
  40279a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40279e:	2300      	movs	r3, #0
  4027a0:	6323      	str	r3, [r4, #48]	; 0x30
  4027a2:	2300      	movs	r3, #0
  4027a4:	6920      	ldr	r0, [r4, #16]
  4027a6:	6063      	str	r3, [r4, #4]
  4027a8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4027ac:	6020      	str	r0, [r4, #0]
  4027ae:	e7c5      	b.n	40273c <__swsetup_r+0x40>
  4027b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4027b4:	2309      	movs	r3, #9
  4027b6:	602b      	str	r3, [r5, #0]
  4027b8:	f04f 30ff 	mov.w	r0, #4294967295
  4027bc:	81a2      	strh	r2, [r4, #12]
  4027be:	bd38      	pop	{r3, r4, r5, pc}
  4027c0:	20400008 	.word	0x20400008

004027c4 <register_fini>:
  4027c4:	4b02      	ldr	r3, [pc, #8]	; (4027d0 <register_fini+0xc>)
  4027c6:	b113      	cbz	r3, 4027ce <register_fini+0xa>
  4027c8:	4802      	ldr	r0, [pc, #8]	; (4027d4 <register_fini+0x10>)
  4027ca:	f000 b805 	b.w	4027d8 <atexit>
  4027ce:	4770      	bx	lr
  4027d0:	00000000 	.word	0x00000000
  4027d4:	00402a45 	.word	0x00402a45

004027d8 <atexit>:
  4027d8:	2300      	movs	r3, #0
  4027da:	4601      	mov	r1, r0
  4027dc:	461a      	mov	r2, r3
  4027de:	4618      	mov	r0, r3
  4027e0:	f001 bbe2 	b.w	403fa8 <__register_exitproc>

004027e4 <__sflush_r>:
  4027e4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4027e8:	b29a      	uxth	r2, r3
  4027ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4027ee:	460d      	mov	r5, r1
  4027f0:	0711      	lsls	r1, r2, #28
  4027f2:	4680      	mov	r8, r0
  4027f4:	d43a      	bmi.n	40286c <__sflush_r+0x88>
  4027f6:	686a      	ldr	r2, [r5, #4]
  4027f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4027fc:	2a00      	cmp	r2, #0
  4027fe:	81ab      	strh	r3, [r5, #12]
  402800:	dd6f      	ble.n	4028e2 <__sflush_r+0xfe>
  402802:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402804:	2c00      	cmp	r4, #0
  402806:	d049      	beq.n	40289c <__sflush_r+0xb8>
  402808:	2200      	movs	r2, #0
  40280a:	b29b      	uxth	r3, r3
  40280c:	f8d8 6000 	ldr.w	r6, [r8]
  402810:	f8c8 2000 	str.w	r2, [r8]
  402814:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402818:	d067      	beq.n	4028ea <__sflush_r+0x106>
  40281a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40281c:	075f      	lsls	r7, r3, #29
  40281e:	d505      	bpl.n	40282c <__sflush_r+0x48>
  402820:	6869      	ldr	r1, [r5, #4]
  402822:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402824:	1a52      	subs	r2, r2, r1
  402826:	b10b      	cbz	r3, 40282c <__sflush_r+0x48>
  402828:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40282a:	1ad2      	subs	r2, r2, r3
  40282c:	2300      	movs	r3, #0
  40282e:	69e9      	ldr	r1, [r5, #28]
  402830:	4640      	mov	r0, r8
  402832:	47a0      	blx	r4
  402834:	1c44      	adds	r4, r0, #1
  402836:	d03c      	beq.n	4028b2 <__sflush_r+0xce>
  402838:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40283c:	692a      	ldr	r2, [r5, #16]
  40283e:	602a      	str	r2, [r5, #0]
  402840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402844:	2200      	movs	r2, #0
  402846:	81ab      	strh	r3, [r5, #12]
  402848:	04db      	lsls	r3, r3, #19
  40284a:	606a      	str	r2, [r5, #4]
  40284c:	d447      	bmi.n	4028de <__sflush_r+0xfa>
  40284e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402850:	f8c8 6000 	str.w	r6, [r8]
  402854:	b311      	cbz	r1, 40289c <__sflush_r+0xb8>
  402856:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40285a:	4299      	cmp	r1, r3
  40285c:	d002      	beq.n	402864 <__sflush_r+0x80>
  40285e:	4640      	mov	r0, r8
  402860:	f000 f9de 	bl	402c20 <_free_r>
  402864:	2000      	movs	r0, #0
  402866:	6328      	str	r0, [r5, #48]	; 0x30
  402868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40286c:	692e      	ldr	r6, [r5, #16]
  40286e:	b1ae      	cbz	r6, 40289c <__sflush_r+0xb8>
  402870:	682c      	ldr	r4, [r5, #0]
  402872:	602e      	str	r6, [r5, #0]
  402874:	0791      	lsls	r1, r2, #30
  402876:	bf0c      	ite	eq
  402878:	696b      	ldreq	r3, [r5, #20]
  40287a:	2300      	movne	r3, #0
  40287c:	1ba4      	subs	r4, r4, r6
  40287e:	60ab      	str	r3, [r5, #8]
  402880:	e00a      	b.n	402898 <__sflush_r+0xb4>
  402882:	4623      	mov	r3, r4
  402884:	4632      	mov	r2, r6
  402886:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402888:	69e9      	ldr	r1, [r5, #28]
  40288a:	4640      	mov	r0, r8
  40288c:	47b8      	blx	r7
  40288e:	2800      	cmp	r0, #0
  402890:	eba4 0400 	sub.w	r4, r4, r0
  402894:	4406      	add	r6, r0
  402896:	dd04      	ble.n	4028a2 <__sflush_r+0xbe>
  402898:	2c00      	cmp	r4, #0
  40289a:	dcf2      	bgt.n	402882 <__sflush_r+0x9e>
  40289c:	2000      	movs	r0, #0
  40289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028a2:	89ab      	ldrh	r3, [r5, #12]
  4028a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028a8:	81ab      	strh	r3, [r5, #12]
  4028aa:	f04f 30ff 	mov.w	r0, #4294967295
  4028ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028b2:	f8d8 4000 	ldr.w	r4, [r8]
  4028b6:	2c1d      	cmp	r4, #29
  4028b8:	d8f3      	bhi.n	4028a2 <__sflush_r+0xbe>
  4028ba:	4b19      	ldr	r3, [pc, #100]	; (402920 <__sflush_r+0x13c>)
  4028bc:	40e3      	lsrs	r3, r4
  4028be:	43db      	mvns	r3, r3
  4028c0:	f013 0301 	ands.w	r3, r3, #1
  4028c4:	d1ed      	bne.n	4028a2 <__sflush_r+0xbe>
  4028c6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4028ca:	606b      	str	r3, [r5, #4]
  4028cc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4028d0:	6929      	ldr	r1, [r5, #16]
  4028d2:	81ab      	strh	r3, [r5, #12]
  4028d4:	04da      	lsls	r2, r3, #19
  4028d6:	6029      	str	r1, [r5, #0]
  4028d8:	d5b9      	bpl.n	40284e <__sflush_r+0x6a>
  4028da:	2c00      	cmp	r4, #0
  4028dc:	d1b7      	bne.n	40284e <__sflush_r+0x6a>
  4028de:	6528      	str	r0, [r5, #80]	; 0x50
  4028e0:	e7b5      	b.n	40284e <__sflush_r+0x6a>
  4028e2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4028e4:	2a00      	cmp	r2, #0
  4028e6:	dc8c      	bgt.n	402802 <__sflush_r+0x1e>
  4028e8:	e7d8      	b.n	40289c <__sflush_r+0xb8>
  4028ea:	2301      	movs	r3, #1
  4028ec:	69e9      	ldr	r1, [r5, #28]
  4028ee:	4640      	mov	r0, r8
  4028f0:	47a0      	blx	r4
  4028f2:	1c43      	adds	r3, r0, #1
  4028f4:	4602      	mov	r2, r0
  4028f6:	d002      	beq.n	4028fe <__sflush_r+0x11a>
  4028f8:	89ab      	ldrh	r3, [r5, #12]
  4028fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4028fc:	e78e      	b.n	40281c <__sflush_r+0x38>
  4028fe:	f8d8 3000 	ldr.w	r3, [r8]
  402902:	2b00      	cmp	r3, #0
  402904:	d0f8      	beq.n	4028f8 <__sflush_r+0x114>
  402906:	2b1d      	cmp	r3, #29
  402908:	d001      	beq.n	40290e <__sflush_r+0x12a>
  40290a:	2b16      	cmp	r3, #22
  40290c:	d102      	bne.n	402914 <__sflush_r+0x130>
  40290e:	f8c8 6000 	str.w	r6, [r8]
  402912:	e7c3      	b.n	40289c <__sflush_r+0xb8>
  402914:	89ab      	ldrh	r3, [r5, #12]
  402916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40291a:	81ab      	strh	r3, [r5, #12]
  40291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402920:	20400001 	.word	0x20400001

00402924 <_fflush_r>:
  402924:	b538      	push	{r3, r4, r5, lr}
  402926:	460d      	mov	r5, r1
  402928:	4604      	mov	r4, r0
  40292a:	b108      	cbz	r0, 402930 <_fflush_r+0xc>
  40292c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40292e:	b1bb      	cbz	r3, 402960 <_fflush_r+0x3c>
  402930:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402934:	b188      	cbz	r0, 40295a <_fflush_r+0x36>
  402936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402938:	07db      	lsls	r3, r3, #31
  40293a:	d401      	bmi.n	402940 <_fflush_r+0x1c>
  40293c:	0581      	lsls	r1, r0, #22
  40293e:	d517      	bpl.n	402970 <_fflush_r+0x4c>
  402940:	4620      	mov	r0, r4
  402942:	4629      	mov	r1, r5
  402944:	f7ff ff4e 	bl	4027e4 <__sflush_r>
  402948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40294a:	07da      	lsls	r2, r3, #31
  40294c:	4604      	mov	r4, r0
  40294e:	d402      	bmi.n	402956 <_fflush_r+0x32>
  402950:	89ab      	ldrh	r3, [r5, #12]
  402952:	059b      	lsls	r3, r3, #22
  402954:	d507      	bpl.n	402966 <_fflush_r+0x42>
  402956:	4620      	mov	r0, r4
  402958:	bd38      	pop	{r3, r4, r5, pc}
  40295a:	4604      	mov	r4, r0
  40295c:	4620      	mov	r0, r4
  40295e:	bd38      	pop	{r3, r4, r5, pc}
  402960:	f000 f838 	bl	4029d4 <__sinit>
  402964:	e7e4      	b.n	402930 <_fflush_r+0xc>
  402966:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402968:	f000 fbf6 	bl	403158 <__retarget_lock_release_recursive>
  40296c:	4620      	mov	r0, r4
  40296e:	bd38      	pop	{r3, r4, r5, pc}
  402970:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402972:	f000 fbef 	bl	403154 <__retarget_lock_acquire_recursive>
  402976:	e7e3      	b.n	402940 <_fflush_r+0x1c>

00402978 <_cleanup_r>:
  402978:	4901      	ldr	r1, [pc, #4]	; (402980 <_cleanup_r+0x8>)
  40297a:	f000 bbaf 	b.w	4030dc <_fwalk_reent>
  40297e:	bf00      	nop
  402980:	00404091 	.word	0x00404091

00402984 <std.isra.0>:
  402984:	b510      	push	{r4, lr}
  402986:	2300      	movs	r3, #0
  402988:	4604      	mov	r4, r0
  40298a:	8181      	strh	r1, [r0, #12]
  40298c:	81c2      	strh	r2, [r0, #14]
  40298e:	6003      	str	r3, [r0, #0]
  402990:	6043      	str	r3, [r0, #4]
  402992:	6083      	str	r3, [r0, #8]
  402994:	6643      	str	r3, [r0, #100]	; 0x64
  402996:	6103      	str	r3, [r0, #16]
  402998:	6143      	str	r3, [r0, #20]
  40299a:	6183      	str	r3, [r0, #24]
  40299c:	4619      	mov	r1, r3
  40299e:	2208      	movs	r2, #8
  4029a0:	305c      	adds	r0, #92	; 0x5c
  4029a2:	f7fe ff93 	bl	4018cc <memset>
  4029a6:	4807      	ldr	r0, [pc, #28]	; (4029c4 <std.isra.0+0x40>)
  4029a8:	4907      	ldr	r1, [pc, #28]	; (4029c8 <std.isra.0+0x44>)
  4029aa:	4a08      	ldr	r2, [pc, #32]	; (4029cc <std.isra.0+0x48>)
  4029ac:	4b08      	ldr	r3, [pc, #32]	; (4029d0 <std.isra.0+0x4c>)
  4029ae:	6220      	str	r0, [r4, #32]
  4029b0:	61e4      	str	r4, [r4, #28]
  4029b2:	6261      	str	r1, [r4, #36]	; 0x24
  4029b4:	62a2      	str	r2, [r4, #40]	; 0x28
  4029b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4029b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4029bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4029c0:	f000 bbc4 	b.w	40314c <__retarget_lock_init_recursive>
  4029c4:	00403cd1 	.word	0x00403cd1
  4029c8:	00403cf5 	.word	0x00403cf5
  4029cc:	00403d31 	.word	0x00403d31
  4029d0:	00403d51 	.word	0x00403d51

004029d4 <__sinit>:
  4029d4:	b510      	push	{r4, lr}
  4029d6:	4604      	mov	r4, r0
  4029d8:	4812      	ldr	r0, [pc, #72]	; (402a24 <__sinit+0x50>)
  4029da:	f000 fbbb 	bl	403154 <__retarget_lock_acquire_recursive>
  4029de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4029e0:	b9d2      	cbnz	r2, 402a18 <__sinit+0x44>
  4029e2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4029e6:	4810      	ldr	r0, [pc, #64]	; (402a28 <__sinit+0x54>)
  4029e8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4029ec:	2103      	movs	r1, #3
  4029ee:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4029f2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4029f4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4029f8:	6860      	ldr	r0, [r4, #4]
  4029fa:	2104      	movs	r1, #4
  4029fc:	f7ff ffc2 	bl	402984 <std.isra.0>
  402a00:	2201      	movs	r2, #1
  402a02:	2109      	movs	r1, #9
  402a04:	68a0      	ldr	r0, [r4, #8]
  402a06:	f7ff ffbd 	bl	402984 <std.isra.0>
  402a0a:	2202      	movs	r2, #2
  402a0c:	2112      	movs	r1, #18
  402a0e:	68e0      	ldr	r0, [r4, #12]
  402a10:	f7ff ffb8 	bl	402984 <std.isra.0>
  402a14:	2301      	movs	r3, #1
  402a16:	63a3      	str	r3, [r4, #56]	; 0x38
  402a18:	4802      	ldr	r0, [pc, #8]	; (402a24 <__sinit+0x50>)
  402a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402a1e:	f000 bb9b 	b.w	403158 <__retarget_lock_release_recursive>
  402a22:	bf00      	nop
  402a24:	20400b24 	.word	0x20400b24
  402a28:	00402979 	.word	0x00402979

00402a2c <__sfp_lock_acquire>:
  402a2c:	4801      	ldr	r0, [pc, #4]	; (402a34 <__sfp_lock_acquire+0x8>)
  402a2e:	f000 bb91 	b.w	403154 <__retarget_lock_acquire_recursive>
  402a32:	bf00      	nop
  402a34:	20400b38 	.word	0x20400b38

00402a38 <__sfp_lock_release>:
  402a38:	4801      	ldr	r0, [pc, #4]	; (402a40 <__sfp_lock_release+0x8>)
  402a3a:	f000 bb8d 	b.w	403158 <__retarget_lock_release_recursive>
  402a3e:	bf00      	nop
  402a40:	20400b38 	.word	0x20400b38

00402a44 <__libc_fini_array>:
  402a44:	b538      	push	{r3, r4, r5, lr}
  402a46:	4c0a      	ldr	r4, [pc, #40]	; (402a70 <__libc_fini_array+0x2c>)
  402a48:	4d0a      	ldr	r5, [pc, #40]	; (402a74 <__libc_fini_array+0x30>)
  402a4a:	1b64      	subs	r4, r4, r5
  402a4c:	10a4      	asrs	r4, r4, #2
  402a4e:	d00a      	beq.n	402a66 <__libc_fini_array+0x22>
  402a50:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402a54:	3b01      	subs	r3, #1
  402a56:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402a5a:	3c01      	subs	r4, #1
  402a5c:	f855 3904 	ldr.w	r3, [r5], #-4
  402a60:	4798      	blx	r3
  402a62:	2c00      	cmp	r4, #0
  402a64:	d1f9      	bne.n	402a5a <__libc_fini_array+0x16>
  402a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402a6a:	f001 be33 	b.w	4046d4 <_fini>
  402a6e:	bf00      	nop
  402a70:	004046e4 	.word	0x004046e4
  402a74:	004046e0 	.word	0x004046e0

00402a78 <__fputwc>:
  402a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a7c:	b082      	sub	sp, #8
  402a7e:	4680      	mov	r8, r0
  402a80:	4689      	mov	r9, r1
  402a82:	4614      	mov	r4, r2
  402a84:	f000 fb54 	bl	403130 <__locale_mb_cur_max>
  402a88:	2801      	cmp	r0, #1
  402a8a:	d036      	beq.n	402afa <__fputwc+0x82>
  402a8c:	464a      	mov	r2, r9
  402a8e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402a92:	a901      	add	r1, sp, #4
  402a94:	4640      	mov	r0, r8
  402a96:	f001 fa39 	bl	403f0c <_wcrtomb_r>
  402a9a:	1c42      	adds	r2, r0, #1
  402a9c:	4606      	mov	r6, r0
  402a9e:	d025      	beq.n	402aec <__fputwc+0x74>
  402aa0:	b3a8      	cbz	r0, 402b0e <__fputwc+0x96>
  402aa2:	f89d e004 	ldrb.w	lr, [sp, #4]
  402aa6:	2500      	movs	r5, #0
  402aa8:	f10d 0a04 	add.w	sl, sp, #4
  402aac:	e009      	b.n	402ac2 <__fputwc+0x4a>
  402aae:	6823      	ldr	r3, [r4, #0]
  402ab0:	1c5a      	adds	r2, r3, #1
  402ab2:	6022      	str	r2, [r4, #0]
  402ab4:	f883 e000 	strb.w	lr, [r3]
  402ab8:	3501      	adds	r5, #1
  402aba:	42b5      	cmp	r5, r6
  402abc:	d227      	bcs.n	402b0e <__fputwc+0x96>
  402abe:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402ac2:	68a3      	ldr	r3, [r4, #8]
  402ac4:	3b01      	subs	r3, #1
  402ac6:	2b00      	cmp	r3, #0
  402ac8:	60a3      	str	r3, [r4, #8]
  402aca:	daf0      	bge.n	402aae <__fputwc+0x36>
  402acc:	69a7      	ldr	r7, [r4, #24]
  402ace:	42bb      	cmp	r3, r7
  402ad0:	4671      	mov	r1, lr
  402ad2:	4622      	mov	r2, r4
  402ad4:	4640      	mov	r0, r8
  402ad6:	db02      	blt.n	402ade <__fputwc+0x66>
  402ad8:	f1be 0f0a 	cmp.w	lr, #10
  402adc:	d1e7      	bne.n	402aae <__fputwc+0x36>
  402ade:	f001 f9bd 	bl	403e5c <__swbuf_r>
  402ae2:	1c43      	adds	r3, r0, #1
  402ae4:	d1e8      	bne.n	402ab8 <__fputwc+0x40>
  402ae6:	b002      	add	sp, #8
  402ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402aec:	89a3      	ldrh	r3, [r4, #12]
  402aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402af2:	81a3      	strh	r3, [r4, #12]
  402af4:	b002      	add	sp, #8
  402af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402afa:	f109 33ff 	add.w	r3, r9, #4294967295
  402afe:	2bfe      	cmp	r3, #254	; 0xfe
  402b00:	d8c4      	bhi.n	402a8c <__fputwc+0x14>
  402b02:	fa5f fe89 	uxtb.w	lr, r9
  402b06:	4606      	mov	r6, r0
  402b08:	f88d e004 	strb.w	lr, [sp, #4]
  402b0c:	e7cb      	b.n	402aa6 <__fputwc+0x2e>
  402b0e:	4648      	mov	r0, r9
  402b10:	b002      	add	sp, #8
  402b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b16:	bf00      	nop

00402b18 <_fputwc_r>:
  402b18:	b530      	push	{r4, r5, lr}
  402b1a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402b1c:	f013 0f01 	tst.w	r3, #1
  402b20:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402b24:	4614      	mov	r4, r2
  402b26:	b083      	sub	sp, #12
  402b28:	4605      	mov	r5, r0
  402b2a:	b29a      	uxth	r2, r3
  402b2c:	d101      	bne.n	402b32 <_fputwc_r+0x1a>
  402b2e:	0590      	lsls	r0, r2, #22
  402b30:	d51c      	bpl.n	402b6c <_fputwc_r+0x54>
  402b32:	0490      	lsls	r0, r2, #18
  402b34:	d406      	bmi.n	402b44 <_fputwc_r+0x2c>
  402b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402b40:	81a3      	strh	r3, [r4, #12]
  402b42:	6662      	str	r2, [r4, #100]	; 0x64
  402b44:	4628      	mov	r0, r5
  402b46:	4622      	mov	r2, r4
  402b48:	f7ff ff96 	bl	402a78 <__fputwc>
  402b4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402b4e:	07da      	lsls	r2, r3, #31
  402b50:	4605      	mov	r5, r0
  402b52:	d402      	bmi.n	402b5a <_fputwc_r+0x42>
  402b54:	89a3      	ldrh	r3, [r4, #12]
  402b56:	059b      	lsls	r3, r3, #22
  402b58:	d502      	bpl.n	402b60 <_fputwc_r+0x48>
  402b5a:	4628      	mov	r0, r5
  402b5c:	b003      	add	sp, #12
  402b5e:	bd30      	pop	{r4, r5, pc}
  402b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402b62:	f000 faf9 	bl	403158 <__retarget_lock_release_recursive>
  402b66:	4628      	mov	r0, r5
  402b68:	b003      	add	sp, #12
  402b6a:	bd30      	pop	{r4, r5, pc}
  402b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402b6e:	9101      	str	r1, [sp, #4]
  402b70:	f000 faf0 	bl	403154 <__retarget_lock_acquire_recursive>
  402b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b78:	9901      	ldr	r1, [sp, #4]
  402b7a:	b29a      	uxth	r2, r3
  402b7c:	e7d9      	b.n	402b32 <_fputwc_r+0x1a>
  402b7e:	bf00      	nop

00402b80 <_malloc_trim_r>:
  402b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b82:	4f24      	ldr	r7, [pc, #144]	; (402c14 <_malloc_trim_r+0x94>)
  402b84:	460c      	mov	r4, r1
  402b86:	4606      	mov	r6, r0
  402b88:	f000 fede 	bl	403948 <__malloc_lock>
  402b8c:	68bb      	ldr	r3, [r7, #8]
  402b8e:	685d      	ldr	r5, [r3, #4]
  402b90:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402b94:	310f      	adds	r1, #15
  402b96:	f025 0503 	bic.w	r5, r5, #3
  402b9a:	4429      	add	r1, r5
  402b9c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402ba0:	f021 010f 	bic.w	r1, r1, #15
  402ba4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402ba8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402bac:	db07      	blt.n	402bbe <_malloc_trim_r+0x3e>
  402bae:	2100      	movs	r1, #0
  402bb0:	4630      	mov	r0, r6
  402bb2:	f001 f87b 	bl	403cac <_sbrk_r>
  402bb6:	68bb      	ldr	r3, [r7, #8]
  402bb8:	442b      	add	r3, r5
  402bba:	4298      	cmp	r0, r3
  402bbc:	d004      	beq.n	402bc8 <_malloc_trim_r+0x48>
  402bbe:	4630      	mov	r0, r6
  402bc0:	f000 fec8 	bl	403954 <__malloc_unlock>
  402bc4:	2000      	movs	r0, #0
  402bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bc8:	4261      	negs	r1, r4
  402bca:	4630      	mov	r0, r6
  402bcc:	f001 f86e 	bl	403cac <_sbrk_r>
  402bd0:	3001      	adds	r0, #1
  402bd2:	d00d      	beq.n	402bf0 <_malloc_trim_r+0x70>
  402bd4:	4b10      	ldr	r3, [pc, #64]	; (402c18 <_malloc_trim_r+0x98>)
  402bd6:	68ba      	ldr	r2, [r7, #8]
  402bd8:	6819      	ldr	r1, [r3, #0]
  402bda:	1b2d      	subs	r5, r5, r4
  402bdc:	f045 0501 	orr.w	r5, r5, #1
  402be0:	4630      	mov	r0, r6
  402be2:	1b09      	subs	r1, r1, r4
  402be4:	6055      	str	r5, [r2, #4]
  402be6:	6019      	str	r1, [r3, #0]
  402be8:	f000 feb4 	bl	403954 <__malloc_unlock>
  402bec:	2001      	movs	r0, #1
  402bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bf0:	2100      	movs	r1, #0
  402bf2:	4630      	mov	r0, r6
  402bf4:	f001 f85a 	bl	403cac <_sbrk_r>
  402bf8:	68ba      	ldr	r2, [r7, #8]
  402bfa:	1a83      	subs	r3, r0, r2
  402bfc:	2b0f      	cmp	r3, #15
  402bfe:	ddde      	ble.n	402bbe <_malloc_trim_r+0x3e>
  402c00:	4c06      	ldr	r4, [pc, #24]	; (402c1c <_malloc_trim_r+0x9c>)
  402c02:	4905      	ldr	r1, [pc, #20]	; (402c18 <_malloc_trim_r+0x98>)
  402c04:	6824      	ldr	r4, [r4, #0]
  402c06:	f043 0301 	orr.w	r3, r3, #1
  402c0a:	1b00      	subs	r0, r0, r4
  402c0c:	6053      	str	r3, [r2, #4]
  402c0e:	6008      	str	r0, [r1, #0]
  402c10:	e7d5      	b.n	402bbe <_malloc_trim_r+0x3e>
  402c12:	bf00      	nop
  402c14:	204005a8 	.word	0x204005a8
  402c18:	20400a4c 	.word	0x20400a4c
  402c1c:	204009b0 	.word	0x204009b0

00402c20 <_free_r>:
  402c20:	2900      	cmp	r1, #0
  402c22:	d044      	beq.n	402cae <_free_r+0x8e>
  402c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c28:	460d      	mov	r5, r1
  402c2a:	4680      	mov	r8, r0
  402c2c:	f000 fe8c 	bl	403948 <__malloc_lock>
  402c30:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402c34:	4969      	ldr	r1, [pc, #420]	; (402ddc <_free_r+0x1bc>)
  402c36:	f027 0301 	bic.w	r3, r7, #1
  402c3a:	f1a5 0408 	sub.w	r4, r5, #8
  402c3e:	18e2      	adds	r2, r4, r3
  402c40:	688e      	ldr	r6, [r1, #8]
  402c42:	6850      	ldr	r0, [r2, #4]
  402c44:	42b2      	cmp	r2, r6
  402c46:	f020 0003 	bic.w	r0, r0, #3
  402c4a:	d05e      	beq.n	402d0a <_free_r+0xea>
  402c4c:	07fe      	lsls	r6, r7, #31
  402c4e:	6050      	str	r0, [r2, #4]
  402c50:	d40b      	bmi.n	402c6a <_free_r+0x4a>
  402c52:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402c56:	1be4      	subs	r4, r4, r7
  402c58:	f101 0e08 	add.w	lr, r1, #8
  402c5c:	68a5      	ldr	r5, [r4, #8]
  402c5e:	4575      	cmp	r5, lr
  402c60:	443b      	add	r3, r7
  402c62:	d06d      	beq.n	402d40 <_free_r+0x120>
  402c64:	68e7      	ldr	r7, [r4, #12]
  402c66:	60ef      	str	r7, [r5, #12]
  402c68:	60bd      	str	r5, [r7, #8]
  402c6a:	1815      	adds	r5, r2, r0
  402c6c:	686d      	ldr	r5, [r5, #4]
  402c6e:	07ed      	lsls	r5, r5, #31
  402c70:	d53e      	bpl.n	402cf0 <_free_r+0xd0>
  402c72:	f043 0201 	orr.w	r2, r3, #1
  402c76:	6062      	str	r2, [r4, #4]
  402c78:	50e3      	str	r3, [r4, r3]
  402c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c7e:	d217      	bcs.n	402cb0 <_free_r+0x90>
  402c80:	08db      	lsrs	r3, r3, #3
  402c82:	1c58      	adds	r0, r3, #1
  402c84:	109a      	asrs	r2, r3, #2
  402c86:	684d      	ldr	r5, [r1, #4]
  402c88:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402c8c:	60a7      	str	r7, [r4, #8]
  402c8e:	2301      	movs	r3, #1
  402c90:	4093      	lsls	r3, r2
  402c92:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402c96:	432b      	orrs	r3, r5
  402c98:	3a08      	subs	r2, #8
  402c9a:	60e2      	str	r2, [r4, #12]
  402c9c:	604b      	str	r3, [r1, #4]
  402c9e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402ca2:	60fc      	str	r4, [r7, #12]
  402ca4:	4640      	mov	r0, r8
  402ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402caa:	f000 be53 	b.w	403954 <__malloc_unlock>
  402cae:	4770      	bx	lr
  402cb0:	0a5a      	lsrs	r2, r3, #9
  402cb2:	2a04      	cmp	r2, #4
  402cb4:	d852      	bhi.n	402d5c <_free_r+0x13c>
  402cb6:	099a      	lsrs	r2, r3, #6
  402cb8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402cbc:	00ff      	lsls	r7, r7, #3
  402cbe:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402cc2:	19c8      	adds	r0, r1, r7
  402cc4:	59ca      	ldr	r2, [r1, r7]
  402cc6:	3808      	subs	r0, #8
  402cc8:	4290      	cmp	r0, r2
  402cca:	d04f      	beq.n	402d6c <_free_r+0x14c>
  402ccc:	6851      	ldr	r1, [r2, #4]
  402cce:	f021 0103 	bic.w	r1, r1, #3
  402cd2:	428b      	cmp	r3, r1
  402cd4:	d232      	bcs.n	402d3c <_free_r+0x11c>
  402cd6:	6892      	ldr	r2, [r2, #8]
  402cd8:	4290      	cmp	r0, r2
  402cda:	d1f7      	bne.n	402ccc <_free_r+0xac>
  402cdc:	68c3      	ldr	r3, [r0, #12]
  402cde:	60a0      	str	r0, [r4, #8]
  402ce0:	60e3      	str	r3, [r4, #12]
  402ce2:	609c      	str	r4, [r3, #8]
  402ce4:	60c4      	str	r4, [r0, #12]
  402ce6:	4640      	mov	r0, r8
  402ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402cec:	f000 be32 	b.w	403954 <__malloc_unlock>
  402cf0:	6895      	ldr	r5, [r2, #8]
  402cf2:	4f3b      	ldr	r7, [pc, #236]	; (402de0 <_free_r+0x1c0>)
  402cf4:	42bd      	cmp	r5, r7
  402cf6:	4403      	add	r3, r0
  402cf8:	d040      	beq.n	402d7c <_free_r+0x15c>
  402cfa:	68d0      	ldr	r0, [r2, #12]
  402cfc:	60e8      	str	r0, [r5, #12]
  402cfe:	f043 0201 	orr.w	r2, r3, #1
  402d02:	6085      	str	r5, [r0, #8]
  402d04:	6062      	str	r2, [r4, #4]
  402d06:	50e3      	str	r3, [r4, r3]
  402d08:	e7b7      	b.n	402c7a <_free_r+0x5a>
  402d0a:	07ff      	lsls	r7, r7, #31
  402d0c:	4403      	add	r3, r0
  402d0e:	d407      	bmi.n	402d20 <_free_r+0x100>
  402d10:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402d14:	1aa4      	subs	r4, r4, r2
  402d16:	4413      	add	r3, r2
  402d18:	68a0      	ldr	r0, [r4, #8]
  402d1a:	68e2      	ldr	r2, [r4, #12]
  402d1c:	60c2      	str	r2, [r0, #12]
  402d1e:	6090      	str	r0, [r2, #8]
  402d20:	4a30      	ldr	r2, [pc, #192]	; (402de4 <_free_r+0x1c4>)
  402d22:	6812      	ldr	r2, [r2, #0]
  402d24:	f043 0001 	orr.w	r0, r3, #1
  402d28:	4293      	cmp	r3, r2
  402d2a:	6060      	str	r0, [r4, #4]
  402d2c:	608c      	str	r4, [r1, #8]
  402d2e:	d3b9      	bcc.n	402ca4 <_free_r+0x84>
  402d30:	4b2d      	ldr	r3, [pc, #180]	; (402de8 <_free_r+0x1c8>)
  402d32:	4640      	mov	r0, r8
  402d34:	6819      	ldr	r1, [r3, #0]
  402d36:	f7ff ff23 	bl	402b80 <_malloc_trim_r>
  402d3a:	e7b3      	b.n	402ca4 <_free_r+0x84>
  402d3c:	4610      	mov	r0, r2
  402d3e:	e7cd      	b.n	402cdc <_free_r+0xbc>
  402d40:	1811      	adds	r1, r2, r0
  402d42:	6849      	ldr	r1, [r1, #4]
  402d44:	07c9      	lsls	r1, r1, #31
  402d46:	d444      	bmi.n	402dd2 <_free_r+0x1b2>
  402d48:	6891      	ldr	r1, [r2, #8]
  402d4a:	68d2      	ldr	r2, [r2, #12]
  402d4c:	60ca      	str	r2, [r1, #12]
  402d4e:	4403      	add	r3, r0
  402d50:	f043 0001 	orr.w	r0, r3, #1
  402d54:	6091      	str	r1, [r2, #8]
  402d56:	6060      	str	r0, [r4, #4]
  402d58:	50e3      	str	r3, [r4, r3]
  402d5a:	e7a3      	b.n	402ca4 <_free_r+0x84>
  402d5c:	2a14      	cmp	r2, #20
  402d5e:	d816      	bhi.n	402d8e <_free_r+0x16e>
  402d60:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402d64:	00ff      	lsls	r7, r7, #3
  402d66:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402d6a:	e7aa      	b.n	402cc2 <_free_r+0xa2>
  402d6c:	10aa      	asrs	r2, r5, #2
  402d6e:	2301      	movs	r3, #1
  402d70:	684d      	ldr	r5, [r1, #4]
  402d72:	4093      	lsls	r3, r2
  402d74:	432b      	orrs	r3, r5
  402d76:	604b      	str	r3, [r1, #4]
  402d78:	4603      	mov	r3, r0
  402d7a:	e7b0      	b.n	402cde <_free_r+0xbe>
  402d7c:	f043 0201 	orr.w	r2, r3, #1
  402d80:	614c      	str	r4, [r1, #20]
  402d82:	610c      	str	r4, [r1, #16]
  402d84:	60e5      	str	r5, [r4, #12]
  402d86:	60a5      	str	r5, [r4, #8]
  402d88:	6062      	str	r2, [r4, #4]
  402d8a:	50e3      	str	r3, [r4, r3]
  402d8c:	e78a      	b.n	402ca4 <_free_r+0x84>
  402d8e:	2a54      	cmp	r2, #84	; 0x54
  402d90:	d806      	bhi.n	402da0 <_free_r+0x180>
  402d92:	0b1a      	lsrs	r2, r3, #12
  402d94:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402d98:	00ff      	lsls	r7, r7, #3
  402d9a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402d9e:	e790      	b.n	402cc2 <_free_r+0xa2>
  402da0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402da4:	d806      	bhi.n	402db4 <_free_r+0x194>
  402da6:	0bda      	lsrs	r2, r3, #15
  402da8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402dac:	00ff      	lsls	r7, r7, #3
  402dae:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402db2:	e786      	b.n	402cc2 <_free_r+0xa2>
  402db4:	f240 5054 	movw	r0, #1364	; 0x554
  402db8:	4282      	cmp	r2, r0
  402dba:	d806      	bhi.n	402dca <_free_r+0x1aa>
  402dbc:	0c9a      	lsrs	r2, r3, #18
  402dbe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402dc2:	00ff      	lsls	r7, r7, #3
  402dc4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402dc8:	e77b      	b.n	402cc2 <_free_r+0xa2>
  402dca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402dce:	257e      	movs	r5, #126	; 0x7e
  402dd0:	e777      	b.n	402cc2 <_free_r+0xa2>
  402dd2:	f043 0101 	orr.w	r1, r3, #1
  402dd6:	6061      	str	r1, [r4, #4]
  402dd8:	6013      	str	r3, [r2, #0]
  402dda:	e763      	b.n	402ca4 <_free_r+0x84>
  402ddc:	204005a8 	.word	0x204005a8
  402de0:	204005b0 	.word	0x204005b0
  402de4:	204009b4 	.word	0x204009b4
  402de8:	20400a7c 	.word	0x20400a7c

00402dec <__sfvwrite_r>:
  402dec:	6893      	ldr	r3, [r2, #8]
  402dee:	2b00      	cmp	r3, #0
  402df0:	d073      	beq.n	402eda <__sfvwrite_r+0xee>
  402df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402df6:	898b      	ldrh	r3, [r1, #12]
  402df8:	b083      	sub	sp, #12
  402dfa:	460c      	mov	r4, r1
  402dfc:	0719      	lsls	r1, r3, #28
  402dfe:	9000      	str	r0, [sp, #0]
  402e00:	4616      	mov	r6, r2
  402e02:	d526      	bpl.n	402e52 <__sfvwrite_r+0x66>
  402e04:	6922      	ldr	r2, [r4, #16]
  402e06:	b322      	cbz	r2, 402e52 <__sfvwrite_r+0x66>
  402e08:	f013 0002 	ands.w	r0, r3, #2
  402e0c:	6835      	ldr	r5, [r6, #0]
  402e0e:	d02c      	beq.n	402e6a <__sfvwrite_r+0x7e>
  402e10:	f04f 0900 	mov.w	r9, #0
  402e14:	4fb0      	ldr	r7, [pc, #704]	; (4030d8 <__sfvwrite_r+0x2ec>)
  402e16:	46c8      	mov	r8, r9
  402e18:	46b2      	mov	sl, r6
  402e1a:	45b8      	cmp	r8, r7
  402e1c:	4643      	mov	r3, r8
  402e1e:	464a      	mov	r2, r9
  402e20:	bf28      	it	cs
  402e22:	463b      	movcs	r3, r7
  402e24:	9800      	ldr	r0, [sp, #0]
  402e26:	f1b8 0f00 	cmp.w	r8, #0
  402e2a:	d050      	beq.n	402ece <__sfvwrite_r+0xe2>
  402e2c:	69e1      	ldr	r1, [r4, #28]
  402e2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402e30:	47b0      	blx	r6
  402e32:	2800      	cmp	r0, #0
  402e34:	dd58      	ble.n	402ee8 <__sfvwrite_r+0xfc>
  402e36:	f8da 3008 	ldr.w	r3, [sl, #8]
  402e3a:	1a1b      	subs	r3, r3, r0
  402e3c:	4481      	add	r9, r0
  402e3e:	eba8 0800 	sub.w	r8, r8, r0
  402e42:	f8ca 3008 	str.w	r3, [sl, #8]
  402e46:	2b00      	cmp	r3, #0
  402e48:	d1e7      	bne.n	402e1a <__sfvwrite_r+0x2e>
  402e4a:	2000      	movs	r0, #0
  402e4c:	b003      	add	sp, #12
  402e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e52:	4621      	mov	r1, r4
  402e54:	9800      	ldr	r0, [sp, #0]
  402e56:	f7ff fc51 	bl	4026fc <__swsetup_r>
  402e5a:	2800      	cmp	r0, #0
  402e5c:	f040 8133 	bne.w	4030c6 <__sfvwrite_r+0x2da>
  402e60:	89a3      	ldrh	r3, [r4, #12]
  402e62:	6835      	ldr	r5, [r6, #0]
  402e64:	f013 0002 	ands.w	r0, r3, #2
  402e68:	d1d2      	bne.n	402e10 <__sfvwrite_r+0x24>
  402e6a:	f013 0901 	ands.w	r9, r3, #1
  402e6e:	d145      	bne.n	402efc <__sfvwrite_r+0x110>
  402e70:	464f      	mov	r7, r9
  402e72:	9601      	str	r6, [sp, #4]
  402e74:	b337      	cbz	r7, 402ec4 <__sfvwrite_r+0xd8>
  402e76:	059a      	lsls	r2, r3, #22
  402e78:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402e7c:	f140 8083 	bpl.w	402f86 <__sfvwrite_r+0x19a>
  402e80:	4547      	cmp	r7, r8
  402e82:	46c3      	mov	fp, r8
  402e84:	f0c0 80ab 	bcc.w	402fde <__sfvwrite_r+0x1f2>
  402e88:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402e8c:	f040 80ac 	bne.w	402fe8 <__sfvwrite_r+0x1fc>
  402e90:	6820      	ldr	r0, [r4, #0]
  402e92:	46ba      	mov	sl, r7
  402e94:	465a      	mov	r2, fp
  402e96:	4649      	mov	r1, r9
  402e98:	f000 fcf2 	bl	403880 <memmove>
  402e9c:	68a2      	ldr	r2, [r4, #8]
  402e9e:	6823      	ldr	r3, [r4, #0]
  402ea0:	eba2 0208 	sub.w	r2, r2, r8
  402ea4:	445b      	add	r3, fp
  402ea6:	60a2      	str	r2, [r4, #8]
  402ea8:	6023      	str	r3, [r4, #0]
  402eaa:	9a01      	ldr	r2, [sp, #4]
  402eac:	6893      	ldr	r3, [r2, #8]
  402eae:	eba3 030a 	sub.w	r3, r3, sl
  402eb2:	44d1      	add	r9, sl
  402eb4:	eba7 070a 	sub.w	r7, r7, sl
  402eb8:	6093      	str	r3, [r2, #8]
  402eba:	2b00      	cmp	r3, #0
  402ebc:	d0c5      	beq.n	402e4a <__sfvwrite_r+0x5e>
  402ebe:	89a3      	ldrh	r3, [r4, #12]
  402ec0:	2f00      	cmp	r7, #0
  402ec2:	d1d8      	bne.n	402e76 <__sfvwrite_r+0x8a>
  402ec4:	f8d5 9000 	ldr.w	r9, [r5]
  402ec8:	686f      	ldr	r7, [r5, #4]
  402eca:	3508      	adds	r5, #8
  402ecc:	e7d2      	b.n	402e74 <__sfvwrite_r+0x88>
  402ece:	f8d5 9000 	ldr.w	r9, [r5]
  402ed2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402ed6:	3508      	adds	r5, #8
  402ed8:	e79f      	b.n	402e1a <__sfvwrite_r+0x2e>
  402eda:	2000      	movs	r0, #0
  402edc:	4770      	bx	lr
  402ede:	4621      	mov	r1, r4
  402ee0:	9800      	ldr	r0, [sp, #0]
  402ee2:	f7ff fd1f 	bl	402924 <_fflush_r>
  402ee6:	b370      	cbz	r0, 402f46 <__sfvwrite_r+0x15a>
  402ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ef0:	f04f 30ff 	mov.w	r0, #4294967295
  402ef4:	81a3      	strh	r3, [r4, #12]
  402ef6:	b003      	add	sp, #12
  402ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402efc:	4681      	mov	r9, r0
  402efe:	4633      	mov	r3, r6
  402f00:	464e      	mov	r6, r9
  402f02:	46a8      	mov	r8, r5
  402f04:	469a      	mov	sl, r3
  402f06:	464d      	mov	r5, r9
  402f08:	b34e      	cbz	r6, 402f5e <__sfvwrite_r+0x172>
  402f0a:	b380      	cbz	r0, 402f6e <__sfvwrite_r+0x182>
  402f0c:	6820      	ldr	r0, [r4, #0]
  402f0e:	6923      	ldr	r3, [r4, #16]
  402f10:	6962      	ldr	r2, [r4, #20]
  402f12:	45b1      	cmp	r9, r6
  402f14:	46cb      	mov	fp, r9
  402f16:	bf28      	it	cs
  402f18:	46b3      	movcs	fp, r6
  402f1a:	4298      	cmp	r0, r3
  402f1c:	465f      	mov	r7, fp
  402f1e:	d904      	bls.n	402f2a <__sfvwrite_r+0x13e>
  402f20:	68a3      	ldr	r3, [r4, #8]
  402f22:	4413      	add	r3, r2
  402f24:	459b      	cmp	fp, r3
  402f26:	f300 80a6 	bgt.w	403076 <__sfvwrite_r+0x28a>
  402f2a:	4593      	cmp	fp, r2
  402f2c:	db4b      	blt.n	402fc6 <__sfvwrite_r+0x1da>
  402f2e:	4613      	mov	r3, r2
  402f30:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402f32:	69e1      	ldr	r1, [r4, #28]
  402f34:	9800      	ldr	r0, [sp, #0]
  402f36:	462a      	mov	r2, r5
  402f38:	47b8      	blx	r7
  402f3a:	1e07      	subs	r7, r0, #0
  402f3c:	ddd4      	ble.n	402ee8 <__sfvwrite_r+0xfc>
  402f3e:	ebb9 0907 	subs.w	r9, r9, r7
  402f42:	d0cc      	beq.n	402ede <__sfvwrite_r+0xf2>
  402f44:	2001      	movs	r0, #1
  402f46:	f8da 3008 	ldr.w	r3, [sl, #8]
  402f4a:	1bdb      	subs	r3, r3, r7
  402f4c:	443d      	add	r5, r7
  402f4e:	1bf6      	subs	r6, r6, r7
  402f50:	f8ca 3008 	str.w	r3, [sl, #8]
  402f54:	2b00      	cmp	r3, #0
  402f56:	f43f af78 	beq.w	402e4a <__sfvwrite_r+0x5e>
  402f5a:	2e00      	cmp	r6, #0
  402f5c:	d1d5      	bne.n	402f0a <__sfvwrite_r+0x11e>
  402f5e:	f108 0308 	add.w	r3, r8, #8
  402f62:	e913 0060 	ldmdb	r3, {r5, r6}
  402f66:	4698      	mov	r8, r3
  402f68:	3308      	adds	r3, #8
  402f6a:	2e00      	cmp	r6, #0
  402f6c:	d0f9      	beq.n	402f62 <__sfvwrite_r+0x176>
  402f6e:	4632      	mov	r2, r6
  402f70:	210a      	movs	r1, #10
  402f72:	4628      	mov	r0, r5
  402f74:	f000 fc34 	bl	4037e0 <memchr>
  402f78:	2800      	cmp	r0, #0
  402f7a:	f000 80a1 	beq.w	4030c0 <__sfvwrite_r+0x2d4>
  402f7e:	3001      	adds	r0, #1
  402f80:	eba0 0905 	sub.w	r9, r0, r5
  402f84:	e7c2      	b.n	402f0c <__sfvwrite_r+0x120>
  402f86:	6820      	ldr	r0, [r4, #0]
  402f88:	6923      	ldr	r3, [r4, #16]
  402f8a:	4298      	cmp	r0, r3
  402f8c:	d802      	bhi.n	402f94 <__sfvwrite_r+0x1a8>
  402f8e:	6963      	ldr	r3, [r4, #20]
  402f90:	429f      	cmp	r7, r3
  402f92:	d25d      	bcs.n	403050 <__sfvwrite_r+0x264>
  402f94:	45b8      	cmp	r8, r7
  402f96:	bf28      	it	cs
  402f98:	46b8      	movcs	r8, r7
  402f9a:	4642      	mov	r2, r8
  402f9c:	4649      	mov	r1, r9
  402f9e:	f000 fc6f 	bl	403880 <memmove>
  402fa2:	68a3      	ldr	r3, [r4, #8]
  402fa4:	6822      	ldr	r2, [r4, #0]
  402fa6:	eba3 0308 	sub.w	r3, r3, r8
  402faa:	4442      	add	r2, r8
  402fac:	60a3      	str	r3, [r4, #8]
  402fae:	6022      	str	r2, [r4, #0]
  402fb0:	b10b      	cbz	r3, 402fb6 <__sfvwrite_r+0x1ca>
  402fb2:	46c2      	mov	sl, r8
  402fb4:	e779      	b.n	402eaa <__sfvwrite_r+0xbe>
  402fb6:	4621      	mov	r1, r4
  402fb8:	9800      	ldr	r0, [sp, #0]
  402fba:	f7ff fcb3 	bl	402924 <_fflush_r>
  402fbe:	2800      	cmp	r0, #0
  402fc0:	d192      	bne.n	402ee8 <__sfvwrite_r+0xfc>
  402fc2:	46c2      	mov	sl, r8
  402fc4:	e771      	b.n	402eaa <__sfvwrite_r+0xbe>
  402fc6:	465a      	mov	r2, fp
  402fc8:	4629      	mov	r1, r5
  402fca:	f000 fc59 	bl	403880 <memmove>
  402fce:	68a2      	ldr	r2, [r4, #8]
  402fd0:	6823      	ldr	r3, [r4, #0]
  402fd2:	eba2 020b 	sub.w	r2, r2, fp
  402fd6:	445b      	add	r3, fp
  402fd8:	60a2      	str	r2, [r4, #8]
  402fda:	6023      	str	r3, [r4, #0]
  402fdc:	e7af      	b.n	402f3e <__sfvwrite_r+0x152>
  402fde:	6820      	ldr	r0, [r4, #0]
  402fe0:	46b8      	mov	r8, r7
  402fe2:	46ba      	mov	sl, r7
  402fe4:	46bb      	mov	fp, r7
  402fe6:	e755      	b.n	402e94 <__sfvwrite_r+0xa8>
  402fe8:	6962      	ldr	r2, [r4, #20]
  402fea:	6820      	ldr	r0, [r4, #0]
  402fec:	6921      	ldr	r1, [r4, #16]
  402fee:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402ff2:	eba0 0a01 	sub.w	sl, r0, r1
  402ff6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402ffa:	f10a 0001 	add.w	r0, sl, #1
  402ffe:	ea4f 0868 	mov.w	r8, r8, asr #1
  403002:	4438      	add	r0, r7
  403004:	4540      	cmp	r0, r8
  403006:	4642      	mov	r2, r8
  403008:	bf84      	itt	hi
  40300a:	4680      	movhi	r8, r0
  40300c:	4642      	movhi	r2, r8
  40300e:	055b      	lsls	r3, r3, #21
  403010:	d544      	bpl.n	40309c <__sfvwrite_r+0x2b0>
  403012:	4611      	mov	r1, r2
  403014:	9800      	ldr	r0, [sp, #0]
  403016:	f000 f919 	bl	40324c <_malloc_r>
  40301a:	4683      	mov	fp, r0
  40301c:	2800      	cmp	r0, #0
  40301e:	d055      	beq.n	4030cc <__sfvwrite_r+0x2e0>
  403020:	4652      	mov	r2, sl
  403022:	6921      	ldr	r1, [r4, #16]
  403024:	f7fe fbb8 	bl	401798 <memcpy>
  403028:	89a3      	ldrh	r3, [r4, #12]
  40302a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40302e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403032:	81a3      	strh	r3, [r4, #12]
  403034:	eb0b 000a 	add.w	r0, fp, sl
  403038:	eba8 030a 	sub.w	r3, r8, sl
  40303c:	f8c4 b010 	str.w	fp, [r4, #16]
  403040:	f8c4 8014 	str.w	r8, [r4, #20]
  403044:	6020      	str	r0, [r4, #0]
  403046:	60a3      	str	r3, [r4, #8]
  403048:	46b8      	mov	r8, r7
  40304a:	46ba      	mov	sl, r7
  40304c:	46bb      	mov	fp, r7
  40304e:	e721      	b.n	402e94 <__sfvwrite_r+0xa8>
  403050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403054:	42b9      	cmp	r1, r7
  403056:	bf28      	it	cs
  403058:	4639      	movcs	r1, r7
  40305a:	464a      	mov	r2, r9
  40305c:	fb91 f1f3 	sdiv	r1, r1, r3
  403060:	9800      	ldr	r0, [sp, #0]
  403062:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403064:	fb03 f301 	mul.w	r3, r3, r1
  403068:	69e1      	ldr	r1, [r4, #28]
  40306a:	47b0      	blx	r6
  40306c:	f1b0 0a00 	subs.w	sl, r0, #0
  403070:	f73f af1b 	bgt.w	402eaa <__sfvwrite_r+0xbe>
  403074:	e738      	b.n	402ee8 <__sfvwrite_r+0xfc>
  403076:	461a      	mov	r2, r3
  403078:	4629      	mov	r1, r5
  40307a:	9301      	str	r3, [sp, #4]
  40307c:	f000 fc00 	bl	403880 <memmove>
  403080:	6822      	ldr	r2, [r4, #0]
  403082:	9b01      	ldr	r3, [sp, #4]
  403084:	9800      	ldr	r0, [sp, #0]
  403086:	441a      	add	r2, r3
  403088:	6022      	str	r2, [r4, #0]
  40308a:	4621      	mov	r1, r4
  40308c:	f7ff fc4a 	bl	402924 <_fflush_r>
  403090:	9b01      	ldr	r3, [sp, #4]
  403092:	2800      	cmp	r0, #0
  403094:	f47f af28 	bne.w	402ee8 <__sfvwrite_r+0xfc>
  403098:	461f      	mov	r7, r3
  40309a:	e750      	b.n	402f3e <__sfvwrite_r+0x152>
  40309c:	9800      	ldr	r0, [sp, #0]
  40309e:	f000 fc5f 	bl	403960 <_realloc_r>
  4030a2:	4683      	mov	fp, r0
  4030a4:	2800      	cmp	r0, #0
  4030a6:	d1c5      	bne.n	403034 <__sfvwrite_r+0x248>
  4030a8:	9d00      	ldr	r5, [sp, #0]
  4030aa:	6921      	ldr	r1, [r4, #16]
  4030ac:	4628      	mov	r0, r5
  4030ae:	f7ff fdb7 	bl	402c20 <_free_r>
  4030b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030b6:	220c      	movs	r2, #12
  4030b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4030bc:	602a      	str	r2, [r5, #0]
  4030be:	e715      	b.n	402eec <__sfvwrite_r+0x100>
  4030c0:	f106 0901 	add.w	r9, r6, #1
  4030c4:	e722      	b.n	402f0c <__sfvwrite_r+0x120>
  4030c6:	f04f 30ff 	mov.w	r0, #4294967295
  4030ca:	e6bf      	b.n	402e4c <__sfvwrite_r+0x60>
  4030cc:	9a00      	ldr	r2, [sp, #0]
  4030ce:	230c      	movs	r3, #12
  4030d0:	6013      	str	r3, [r2, #0]
  4030d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030d6:	e709      	b.n	402eec <__sfvwrite_r+0x100>
  4030d8:	7ffffc00 	.word	0x7ffffc00

004030dc <_fwalk_reent>:
  4030dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4030e0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4030e4:	d01f      	beq.n	403126 <_fwalk_reent+0x4a>
  4030e6:	4688      	mov	r8, r1
  4030e8:	4606      	mov	r6, r0
  4030ea:	f04f 0900 	mov.w	r9, #0
  4030ee:	687d      	ldr	r5, [r7, #4]
  4030f0:	68bc      	ldr	r4, [r7, #8]
  4030f2:	3d01      	subs	r5, #1
  4030f4:	d411      	bmi.n	40311a <_fwalk_reent+0x3e>
  4030f6:	89a3      	ldrh	r3, [r4, #12]
  4030f8:	2b01      	cmp	r3, #1
  4030fa:	f105 35ff 	add.w	r5, r5, #4294967295
  4030fe:	d908      	bls.n	403112 <_fwalk_reent+0x36>
  403100:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403104:	3301      	adds	r3, #1
  403106:	4621      	mov	r1, r4
  403108:	4630      	mov	r0, r6
  40310a:	d002      	beq.n	403112 <_fwalk_reent+0x36>
  40310c:	47c0      	blx	r8
  40310e:	ea49 0900 	orr.w	r9, r9, r0
  403112:	1c6b      	adds	r3, r5, #1
  403114:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403118:	d1ed      	bne.n	4030f6 <_fwalk_reent+0x1a>
  40311a:	683f      	ldr	r7, [r7, #0]
  40311c:	2f00      	cmp	r7, #0
  40311e:	d1e6      	bne.n	4030ee <_fwalk_reent+0x12>
  403120:	4648      	mov	r0, r9
  403122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403126:	46b9      	mov	r9, r7
  403128:	4648      	mov	r0, r9
  40312a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40312e:	bf00      	nop

00403130 <__locale_mb_cur_max>:
  403130:	4b04      	ldr	r3, [pc, #16]	; (403144 <__locale_mb_cur_max+0x14>)
  403132:	4a05      	ldr	r2, [pc, #20]	; (403148 <__locale_mb_cur_max+0x18>)
  403134:	681b      	ldr	r3, [r3, #0]
  403136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403138:	2b00      	cmp	r3, #0
  40313a:	bf08      	it	eq
  40313c:	4613      	moveq	r3, r2
  40313e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403142:	4770      	bx	lr
  403144:	20400008 	.word	0x20400008
  403148:	2040043c 	.word	0x2040043c

0040314c <__retarget_lock_init_recursive>:
  40314c:	4770      	bx	lr
  40314e:	bf00      	nop

00403150 <__retarget_lock_close_recursive>:
  403150:	4770      	bx	lr
  403152:	bf00      	nop

00403154 <__retarget_lock_acquire_recursive>:
  403154:	4770      	bx	lr
  403156:	bf00      	nop

00403158 <__retarget_lock_release_recursive>:
  403158:	4770      	bx	lr
  40315a:	bf00      	nop

0040315c <__swhatbuf_r>:
  40315c:	b570      	push	{r4, r5, r6, lr}
  40315e:	460c      	mov	r4, r1
  403160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403164:	2900      	cmp	r1, #0
  403166:	b090      	sub	sp, #64	; 0x40
  403168:	4615      	mov	r5, r2
  40316a:	461e      	mov	r6, r3
  40316c:	db14      	blt.n	403198 <__swhatbuf_r+0x3c>
  40316e:	aa01      	add	r2, sp, #4
  403170:	f000 fff0 	bl	404154 <_fstat_r>
  403174:	2800      	cmp	r0, #0
  403176:	db0f      	blt.n	403198 <__swhatbuf_r+0x3c>
  403178:	9a02      	ldr	r2, [sp, #8]
  40317a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40317e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403182:	fab2 f282 	clz	r2, r2
  403186:	0952      	lsrs	r2, r2, #5
  403188:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40318c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403190:	6032      	str	r2, [r6, #0]
  403192:	602b      	str	r3, [r5, #0]
  403194:	b010      	add	sp, #64	; 0x40
  403196:	bd70      	pop	{r4, r5, r6, pc}
  403198:	89a2      	ldrh	r2, [r4, #12]
  40319a:	2300      	movs	r3, #0
  40319c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4031a0:	6033      	str	r3, [r6, #0]
  4031a2:	d004      	beq.n	4031ae <__swhatbuf_r+0x52>
  4031a4:	2240      	movs	r2, #64	; 0x40
  4031a6:	4618      	mov	r0, r3
  4031a8:	602a      	str	r2, [r5, #0]
  4031aa:	b010      	add	sp, #64	; 0x40
  4031ac:	bd70      	pop	{r4, r5, r6, pc}
  4031ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4031b2:	602b      	str	r3, [r5, #0]
  4031b4:	b010      	add	sp, #64	; 0x40
  4031b6:	bd70      	pop	{r4, r5, r6, pc}

004031b8 <__smakebuf_r>:
  4031b8:	898a      	ldrh	r2, [r1, #12]
  4031ba:	0792      	lsls	r2, r2, #30
  4031bc:	460b      	mov	r3, r1
  4031be:	d506      	bpl.n	4031ce <__smakebuf_r+0x16>
  4031c0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4031c4:	2101      	movs	r1, #1
  4031c6:	601a      	str	r2, [r3, #0]
  4031c8:	611a      	str	r2, [r3, #16]
  4031ca:	6159      	str	r1, [r3, #20]
  4031cc:	4770      	bx	lr
  4031ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031d0:	b083      	sub	sp, #12
  4031d2:	ab01      	add	r3, sp, #4
  4031d4:	466a      	mov	r2, sp
  4031d6:	460c      	mov	r4, r1
  4031d8:	4606      	mov	r6, r0
  4031da:	f7ff ffbf 	bl	40315c <__swhatbuf_r>
  4031de:	9900      	ldr	r1, [sp, #0]
  4031e0:	4605      	mov	r5, r0
  4031e2:	4630      	mov	r0, r6
  4031e4:	f000 f832 	bl	40324c <_malloc_r>
  4031e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4031ec:	b1d8      	cbz	r0, 403226 <__smakebuf_r+0x6e>
  4031ee:	9a01      	ldr	r2, [sp, #4]
  4031f0:	4f15      	ldr	r7, [pc, #84]	; (403248 <__smakebuf_r+0x90>)
  4031f2:	9900      	ldr	r1, [sp, #0]
  4031f4:	63f7      	str	r7, [r6, #60]	; 0x3c
  4031f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4031fa:	81a3      	strh	r3, [r4, #12]
  4031fc:	6020      	str	r0, [r4, #0]
  4031fe:	6120      	str	r0, [r4, #16]
  403200:	6161      	str	r1, [r4, #20]
  403202:	b91a      	cbnz	r2, 40320c <__smakebuf_r+0x54>
  403204:	432b      	orrs	r3, r5
  403206:	81a3      	strh	r3, [r4, #12]
  403208:	b003      	add	sp, #12
  40320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40320c:	4630      	mov	r0, r6
  40320e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403212:	f000 ffb3 	bl	40417c <_isatty_r>
  403216:	b1a0      	cbz	r0, 403242 <__smakebuf_r+0x8a>
  403218:	89a3      	ldrh	r3, [r4, #12]
  40321a:	f023 0303 	bic.w	r3, r3, #3
  40321e:	f043 0301 	orr.w	r3, r3, #1
  403222:	b21b      	sxth	r3, r3
  403224:	e7ee      	b.n	403204 <__smakebuf_r+0x4c>
  403226:	059a      	lsls	r2, r3, #22
  403228:	d4ee      	bmi.n	403208 <__smakebuf_r+0x50>
  40322a:	f023 0303 	bic.w	r3, r3, #3
  40322e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403232:	f043 0302 	orr.w	r3, r3, #2
  403236:	2101      	movs	r1, #1
  403238:	81a3      	strh	r3, [r4, #12]
  40323a:	6022      	str	r2, [r4, #0]
  40323c:	6122      	str	r2, [r4, #16]
  40323e:	6161      	str	r1, [r4, #20]
  403240:	e7e2      	b.n	403208 <__smakebuf_r+0x50>
  403242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403246:	e7dd      	b.n	403204 <__smakebuf_r+0x4c>
  403248:	00402979 	.word	0x00402979

0040324c <_malloc_r>:
  40324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403250:	f101 060b 	add.w	r6, r1, #11
  403254:	2e16      	cmp	r6, #22
  403256:	b083      	sub	sp, #12
  403258:	4605      	mov	r5, r0
  40325a:	f240 809e 	bls.w	40339a <_malloc_r+0x14e>
  40325e:	f036 0607 	bics.w	r6, r6, #7
  403262:	f100 80bd 	bmi.w	4033e0 <_malloc_r+0x194>
  403266:	42b1      	cmp	r1, r6
  403268:	f200 80ba 	bhi.w	4033e0 <_malloc_r+0x194>
  40326c:	f000 fb6c 	bl	403948 <__malloc_lock>
  403270:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403274:	f0c0 8293 	bcc.w	40379e <_malloc_r+0x552>
  403278:	0a73      	lsrs	r3, r6, #9
  40327a:	f000 80b8 	beq.w	4033ee <_malloc_r+0x1a2>
  40327e:	2b04      	cmp	r3, #4
  403280:	f200 8179 	bhi.w	403576 <_malloc_r+0x32a>
  403284:	09b3      	lsrs	r3, r6, #6
  403286:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40328a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40328e:	00c3      	lsls	r3, r0, #3
  403290:	4fbf      	ldr	r7, [pc, #764]	; (403590 <_malloc_r+0x344>)
  403292:	443b      	add	r3, r7
  403294:	f1a3 0108 	sub.w	r1, r3, #8
  403298:	685c      	ldr	r4, [r3, #4]
  40329a:	42a1      	cmp	r1, r4
  40329c:	d106      	bne.n	4032ac <_malloc_r+0x60>
  40329e:	e00c      	b.n	4032ba <_malloc_r+0x6e>
  4032a0:	2a00      	cmp	r2, #0
  4032a2:	f280 80aa 	bge.w	4033fa <_malloc_r+0x1ae>
  4032a6:	68e4      	ldr	r4, [r4, #12]
  4032a8:	42a1      	cmp	r1, r4
  4032aa:	d006      	beq.n	4032ba <_malloc_r+0x6e>
  4032ac:	6863      	ldr	r3, [r4, #4]
  4032ae:	f023 0303 	bic.w	r3, r3, #3
  4032b2:	1b9a      	subs	r2, r3, r6
  4032b4:	2a0f      	cmp	r2, #15
  4032b6:	ddf3      	ble.n	4032a0 <_malloc_r+0x54>
  4032b8:	4670      	mov	r0, lr
  4032ba:	693c      	ldr	r4, [r7, #16]
  4032bc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4035a4 <_malloc_r+0x358>
  4032c0:	4574      	cmp	r4, lr
  4032c2:	f000 81ab 	beq.w	40361c <_malloc_r+0x3d0>
  4032c6:	6863      	ldr	r3, [r4, #4]
  4032c8:	f023 0303 	bic.w	r3, r3, #3
  4032cc:	1b9a      	subs	r2, r3, r6
  4032ce:	2a0f      	cmp	r2, #15
  4032d0:	f300 8190 	bgt.w	4035f4 <_malloc_r+0x3a8>
  4032d4:	2a00      	cmp	r2, #0
  4032d6:	f8c7 e014 	str.w	lr, [r7, #20]
  4032da:	f8c7 e010 	str.w	lr, [r7, #16]
  4032de:	f280 809d 	bge.w	40341c <_malloc_r+0x1d0>
  4032e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4032e6:	f080 8161 	bcs.w	4035ac <_malloc_r+0x360>
  4032ea:	08db      	lsrs	r3, r3, #3
  4032ec:	f103 0c01 	add.w	ip, r3, #1
  4032f0:	1099      	asrs	r1, r3, #2
  4032f2:	687a      	ldr	r2, [r7, #4]
  4032f4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4032f8:	f8c4 8008 	str.w	r8, [r4, #8]
  4032fc:	2301      	movs	r3, #1
  4032fe:	408b      	lsls	r3, r1
  403300:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403304:	4313      	orrs	r3, r2
  403306:	3908      	subs	r1, #8
  403308:	60e1      	str	r1, [r4, #12]
  40330a:	607b      	str	r3, [r7, #4]
  40330c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403310:	f8c8 400c 	str.w	r4, [r8, #12]
  403314:	1082      	asrs	r2, r0, #2
  403316:	2401      	movs	r4, #1
  403318:	4094      	lsls	r4, r2
  40331a:	429c      	cmp	r4, r3
  40331c:	f200 808b 	bhi.w	403436 <_malloc_r+0x1ea>
  403320:	421c      	tst	r4, r3
  403322:	d106      	bne.n	403332 <_malloc_r+0xe6>
  403324:	f020 0003 	bic.w	r0, r0, #3
  403328:	0064      	lsls	r4, r4, #1
  40332a:	421c      	tst	r4, r3
  40332c:	f100 0004 	add.w	r0, r0, #4
  403330:	d0fa      	beq.n	403328 <_malloc_r+0xdc>
  403332:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403336:	46cc      	mov	ip, r9
  403338:	4680      	mov	r8, r0
  40333a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40333e:	459c      	cmp	ip, r3
  403340:	d107      	bne.n	403352 <_malloc_r+0x106>
  403342:	e16d      	b.n	403620 <_malloc_r+0x3d4>
  403344:	2a00      	cmp	r2, #0
  403346:	f280 817b 	bge.w	403640 <_malloc_r+0x3f4>
  40334a:	68db      	ldr	r3, [r3, #12]
  40334c:	459c      	cmp	ip, r3
  40334e:	f000 8167 	beq.w	403620 <_malloc_r+0x3d4>
  403352:	6859      	ldr	r1, [r3, #4]
  403354:	f021 0103 	bic.w	r1, r1, #3
  403358:	1b8a      	subs	r2, r1, r6
  40335a:	2a0f      	cmp	r2, #15
  40335c:	ddf2      	ble.n	403344 <_malloc_r+0xf8>
  40335e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403362:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403366:	9300      	str	r3, [sp, #0]
  403368:	199c      	adds	r4, r3, r6
  40336a:	4628      	mov	r0, r5
  40336c:	f046 0601 	orr.w	r6, r6, #1
  403370:	f042 0501 	orr.w	r5, r2, #1
  403374:	605e      	str	r6, [r3, #4]
  403376:	f8c8 c00c 	str.w	ip, [r8, #12]
  40337a:	f8cc 8008 	str.w	r8, [ip, #8]
  40337e:	617c      	str	r4, [r7, #20]
  403380:	613c      	str	r4, [r7, #16]
  403382:	f8c4 e00c 	str.w	lr, [r4, #12]
  403386:	f8c4 e008 	str.w	lr, [r4, #8]
  40338a:	6065      	str	r5, [r4, #4]
  40338c:	505a      	str	r2, [r3, r1]
  40338e:	f000 fae1 	bl	403954 <__malloc_unlock>
  403392:	9b00      	ldr	r3, [sp, #0]
  403394:	f103 0408 	add.w	r4, r3, #8
  403398:	e01e      	b.n	4033d8 <_malloc_r+0x18c>
  40339a:	2910      	cmp	r1, #16
  40339c:	d820      	bhi.n	4033e0 <_malloc_r+0x194>
  40339e:	f000 fad3 	bl	403948 <__malloc_lock>
  4033a2:	2610      	movs	r6, #16
  4033a4:	2318      	movs	r3, #24
  4033a6:	2002      	movs	r0, #2
  4033a8:	4f79      	ldr	r7, [pc, #484]	; (403590 <_malloc_r+0x344>)
  4033aa:	443b      	add	r3, r7
  4033ac:	f1a3 0208 	sub.w	r2, r3, #8
  4033b0:	685c      	ldr	r4, [r3, #4]
  4033b2:	4294      	cmp	r4, r2
  4033b4:	f000 813d 	beq.w	403632 <_malloc_r+0x3e6>
  4033b8:	6863      	ldr	r3, [r4, #4]
  4033ba:	68e1      	ldr	r1, [r4, #12]
  4033bc:	68a6      	ldr	r6, [r4, #8]
  4033be:	f023 0303 	bic.w	r3, r3, #3
  4033c2:	4423      	add	r3, r4
  4033c4:	4628      	mov	r0, r5
  4033c6:	685a      	ldr	r2, [r3, #4]
  4033c8:	60f1      	str	r1, [r6, #12]
  4033ca:	f042 0201 	orr.w	r2, r2, #1
  4033ce:	608e      	str	r6, [r1, #8]
  4033d0:	605a      	str	r2, [r3, #4]
  4033d2:	f000 fabf 	bl	403954 <__malloc_unlock>
  4033d6:	3408      	adds	r4, #8
  4033d8:	4620      	mov	r0, r4
  4033da:	b003      	add	sp, #12
  4033dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033e0:	2400      	movs	r4, #0
  4033e2:	230c      	movs	r3, #12
  4033e4:	4620      	mov	r0, r4
  4033e6:	602b      	str	r3, [r5, #0]
  4033e8:	b003      	add	sp, #12
  4033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033ee:	2040      	movs	r0, #64	; 0x40
  4033f0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4033f4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4033f8:	e74a      	b.n	403290 <_malloc_r+0x44>
  4033fa:	4423      	add	r3, r4
  4033fc:	68e1      	ldr	r1, [r4, #12]
  4033fe:	685a      	ldr	r2, [r3, #4]
  403400:	68a6      	ldr	r6, [r4, #8]
  403402:	f042 0201 	orr.w	r2, r2, #1
  403406:	60f1      	str	r1, [r6, #12]
  403408:	4628      	mov	r0, r5
  40340a:	608e      	str	r6, [r1, #8]
  40340c:	605a      	str	r2, [r3, #4]
  40340e:	f000 faa1 	bl	403954 <__malloc_unlock>
  403412:	3408      	adds	r4, #8
  403414:	4620      	mov	r0, r4
  403416:	b003      	add	sp, #12
  403418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40341c:	4423      	add	r3, r4
  40341e:	4628      	mov	r0, r5
  403420:	685a      	ldr	r2, [r3, #4]
  403422:	f042 0201 	orr.w	r2, r2, #1
  403426:	605a      	str	r2, [r3, #4]
  403428:	f000 fa94 	bl	403954 <__malloc_unlock>
  40342c:	3408      	adds	r4, #8
  40342e:	4620      	mov	r0, r4
  403430:	b003      	add	sp, #12
  403432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403436:	68bc      	ldr	r4, [r7, #8]
  403438:	6863      	ldr	r3, [r4, #4]
  40343a:	f023 0803 	bic.w	r8, r3, #3
  40343e:	45b0      	cmp	r8, r6
  403440:	d304      	bcc.n	40344c <_malloc_r+0x200>
  403442:	eba8 0306 	sub.w	r3, r8, r6
  403446:	2b0f      	cmp	r3, #15
  403448:	f300 8085 	bgt.w	403556 <_malloc_r+0x30a>
  40344c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4035a8 <_malloc_r+0x35c>
  403450:	4b50      	ldr	r3, [pc, #320]	; (403594 <_malloc_r+0x348>)
  403452:	f8d9 2000 	ldr.w	r2, [r9]
  403456:	681b      	ldr	r3, [r3, #0]
  403458:	3201      	adds	r2, #1
  40345a:	4433      	add	r3, r6
  40345c:	eb04 0a08 	add.w	sl, r4, r8
  403460:	f000 8155 	beq.w	40370e <_malloc_r+0x4c2>
  403464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403468:	330f      	adds	r3, #15
  40346a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40346e:	f02b 0b0f 	bic.w	fp, fp, #15
  403472:	4659      	mov	r1, fp
  403474:	4628      	mov	r0, r5
  403476:	f000 fc19 	bl	403cac <_sbrk_r>
  40347a:	1c41      	adds	r1, r0, #1
  40347c:	4602      	mov	r2, r0
  40347e:	f000 80fc 	beq.w	40367a <_malloc_r+0x42e>
  403482:	4582      	cmp	sl, r0
  403484:	f200 80f7 	bhi.w	403676 <_malloc_r+0x42a>
  403488:	4b43      	ldr	r3, [pc, #268]	; (403598 <_malloc_r+0x34c>)
  40348a:	6819      	ldr	r1, [r3, #0]
  40348c:	4459      	add	r1, fp
  40348e:	6019      	str	r1, [r3, #0]
  403490:	f000 814d 	beq.w	40372e <_malloc_r+0x4e2>
  403494:	f8d9 0000 	ldr.w	r0, [r9]
  403498:	3001      	adds	r0, #1
  40349a:	bf1b      	ittet	ne
  40349c:	eba2 0a0a 	subne.w	sl, r2, sl
  4034a0:	4451      	addne	r1, sl
  4034a2:	f8c9 2000 	streq.w	r2, [r9]
  4034a6:	6019      	strne	r1, [r3, #0]
  4034a8:	f012 0107 	ands.w	r1, r2, #7
  4034ac:	f000 8115 	beq.w	4036da <_malloc_r+0x48e>
  4034b0:	f1c1 0008 	rsb	r0, r1, #8
  4034b4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4034b8:	4402      	add	r2, r0
  4034ba:	3108      	adds	r1, #8
  4034bc:	eb02 090b 	add.w	r9, r2, fp
  4034c0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4034c4:	eba1 0909 	sub.w	r9, r1, r9
  4034c8:	4649      	mov	r1, r9
  4034ca:	4628      	mov	r0, r5
  4034cc:	9301      	str	r3, [sp, #4]
  4034ce:	9200      	str	r2, [sp, #0]
  4034d0:	f000 fbec 	bl	403cac <_sbrk_r>
  4034d4:	1c43      	adds	r3, r0, #1
  4034d6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4034da:	f000 8143 	beq.w	403764 <_malloc_r+0x518>
  4034de:	1a80      	subs	r0, r0, r2
  4034e0:	4448      	add	r0, r9
  4034e2:	f040 0001 	orr.w	r0, r0, #1
  4034e6:	6819      	ldr	r1, [r3, #0]
  4034e8:	60ba      	str	r2, [r7, #8]
  4034ea:	4449      	add	r1, r9
  4034ec:	42bc      	cmp	r4, r7
  4034ee:	6050      	str	r0, [r2, #4]
  4034f0:	6019      	str	r1, [r3, #0]
  4034f2:	d017      	beq.n	403524 <_malloc_r+0x2d8>
  4034f4:	f1b8 0f0f 	cmp.w	r8, #15
  4034f8:	f240 80fb 	bls.w	4036f2 <_malloc_r+0x4a6>
  4034fc:	6860      	ldr	r0, [r4, #4]
  4034fe:	f1a8 020c 	sub.w	r2, r8, #12
  403502:	f022 0207 	bic.w	r2, r2, #7
  403506:	eb04 0e02 	add.w	lr, r4, r2
  40350a:	f000 0001 	and.w	r0, r0, #1
  40350e:	f04f 0c05 	mov.w	ip, #5
  403512:	4310      	orrs	r0, r2
  403514:	2a0f      	cmp	r2, #15
  403516:	6060      	str	r0, [r4, #4]
  403518:	f8ce c004 	str.w	ip, [lr, #4]
  40351c:	f8ce c008 	str.w	ip, [lr, #8]
  403520:	f200 8117 	bhi.w	403752 <_malloc_r+0x506>
  403524:	4b1d      	ldr	r3, [pc, #116]	; (40359c <_malloc_r+0x350>)
  403526:	68bc      	ldr	r4, [r7, #8]
  403528:	681a      	ldr	r2, [r3, #0]
  40352a:	4291      	cmp	r1, r2
  40352c:	bf88      	it	hi
  40352e:	6019      	strhi	r1, [r3, #0]
  403530:	4b1b      	ldr	r3, [pc, #108]	; (4035a0 <_malloc_r+0x354>)
  403532:	681a      	ldr	r2, [r3, #0]
  403534:	4291      	cmp	r1, r2
  403536:	6862      	ldr	r2, [r4, #4]
  403538:	bf88      	it	hi
  40353a:	6019      	strhi	r1, [r3, #0]
  40353c:	f022 0203 	bic.w	r2, r2, #3
  403540:	4296      	cmp	r6, r2
  403542:	eba2 0306 	sub.w	r3, r2, r6
  403546:	d801      	bhi.n	40354c <_malloc_r+0x300>
  403548:	2b0f      	cmp	r3, #15
  40354a:	dc04      	bgt.n	403556 <_malloc_r+0x30a>
  40354c:	4628      	mov	r0, r5
  40354e:	f000 fa01 	bl	403954 <__malloc_unlock>
  403552:	2400      	movs	r4, #0
  403554:	e740      	b.n	4033d8 <_malloc_r+0x18c>
  403556:	19a2      	adds	r2, r4, r6
  403558:	f043 0301 	orr.w	r3, r3, #1
  40355c:	f046 0601 	orr.w	r6, r6, #1
  403560:	6066      	str	r6, [r4, #4]
  403562:	4628      	mov	r0, r5
  403564:	60ba      	str	r2, [r7, #8]
  403566:	6053      	str	r3, [r2, #4]
  403568:	f000 f9f4 	bl	403954 <__malloc_unlock>
  40356c:	3408      	adds	r4, #8
  40356e:	4620      	mov	r0, r4
  403570:	b003      	add	sp, #12
  403572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403576:	2b14      	cmp	r3, #20
  403578:	d971      	bls.n	40365e <_malloc_r+0x412>
  40357a:	2b54      	cmp	r3, #84	; 0x54
  40357c:	f200 80a3 	bhi.w	4036c6 <_malloc_r+0x47a>
  403580:	0b33      	lsrs	r3, r6, #12
  403582:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403586:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40358a:	00c3      	lsls	r3, r0, #3
  40358c:	e680      	b.n	403290 <_malloc_r+0x44>
  40358e:	bf00      	nop
  403590:	204005a8 	.word	0x204005a8
  403594:	20400a7c 	.word	0x20400a7c
  403598:	20400a4c 	.word	0x20400a4c
  40359c:	20400a74 	.word	0x20400a74
  4035a0:	20400a78 	.word	0x20400a78
  4035a4:	204005b0 	.word	0x204005b0
  4035a8:	204009b0 	.word	0x204009b0
  4035ac:	0a5a      	lsrs	r2, r3, #9
  4035ae:	2a04      	cmp	r2, #4
  4035b0:	d95b      	bls.n	40366a <_malloc_r+0x41e>
  4035b2:	2a14      	cmp	r2, #20
  4035b4:	f200 80ae 	bhi.w	403714 <_malloc_r+0x4c8>
  4035b8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4035bc:	00c9      	lsls	r1, r1, #3
  4035be:	325b      	adds	r2, #91	; 0x5b
  4035c0:	eb07 0c01 	add.w	ip, r7, r1
  4035c4:	5879      	ldr	r1, [r7, r1]
  4035c6:	f1ac 0c08 	sub.w	ip, ip, #8
  4035ca:	458c      	cmp	ip, r1
  4035cc:	f000 8088 	beq.w	4036e0 <_malloc_r+0x494>
  4035d0:	684a      	ldr	r2, [r1, #4]
  4035d2:	f022 0203 	bic.w	r2, r2, #3
  4035d6:	4293      	cmp	r3, r2
  4035d8:	d273      	bcs.n	4036c2 <_malloc_r+0x476>
  4035da:	6889      	ldr	r1, [r1, #8]
  4035dc:	458c      	cmp	ip, r1
  4035de:	d1f7      	bne.n	4035d0 <_malloc_r+0x384>
  4035e0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4035e4:	687b      	ldr	r3, [r7, #4]
  4035e6:	60e2      	str	r2, [r4, #12]
  4035e8:	f8c4 c008 	str.w	ip, [r4, #8]
  4035ec:	6094      	str	r4, [r2, #8]
  4035ee:	f8cc 400c 	str.w	r4, [ip, #12]
  4035f2:	e68f      	b.n	403314 <_malloc_r+0xc8>
  4035f4:	19a1      	adds	r1, r4, r6
  4035f6:	f046 0c01 	orr.w	ip, r6, #1
  4035fa:	f042 0601 	orr.w	r6, r2, #1
  4035fe:	f8c4 c004 	str.w	ip, [r4, #4]
  403602:	4628      	mov	r0, r5
  403604:	6179      	str	r1, [r7, #20]
  403606:	6139      	str	r1, [r7, #16]
  403608:	f8c1 e00c 	str.w	lr, [r1, #12]
  40360c:	f8c1 e008 	str.w	lr, [r1, #8]
  403610:	604e      	str	r6, [r1, #4]
  403612:	50e2      	str	r2, [r4, r3]
  403614:	f000 f99e 	bl	403954 <__malloc_unlock>
  403618:	3408      	adds	r4, #8
  40361a:	e6dd      	b.n	4033d8 <_malloc_r+0x18c>
  40361c:	687b      	ldr	r3, [r7, #4]
  40361e:	e679      	b.n	403314 <_malloc_r+0xc8>
  403620:	f108 0801 	add.w	r8, r8, #1
  403624:	f018 0f03 	tst.w	r8, #3
  403628:	f10c 0c08 	add.w	ip, ip, #8
  40362c:	f47f ae85 	bne.w	40333a <_malloc_r+0xee>
  403630:	e02d      	b.n	40368e <_malloc_r+0x442>
  403632:	68dc      	ldr	r4, [r3, #12]
  403634:	42a3      	cmp	r3, r4
  403636:	bf08      	it	eq
  403638:	3002      	addeq	r0, #2
  40363a:	f43f ae3e 	beq.w	4032ba <_malloc_r+0x6e>
  40363e:	e6bb      	b.n	4033b8 <_malloc_r+0x16c>
  403640:	4419      	add	r1, r3
  403642:	461c      	mov	r4, r3
  403644:	684a      	ldr	r2, [r1, #4]
  403646:	68db      	ldr	r3, [r3, #12]
  403648:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40364c:	f042 0201 	orr.w	r2, r2, #1
  403650:	604a      	str	r2, [r1, #4]
  403652:	4628      	mov	r0, r5
  403654:	60f3      	str	r3, [r6, #12]
  403656:	609e      	str	r6, [r3, #8]
  403658:	f000 f97c 	bl	403954 <__malloc_unlock>
  40365c:	e6bc      	b.n	4033d8 <_malloc_r+0x18c>
  40365e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403662:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403666:	00c3      	lsls	r3, r0, #3
  403668:	e612      	b.n	403290 <_malloc_r+0x44>
  40366a:	099a      	lsrs	r2, r3, #6
  40366c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403670:	00c9      	lsls	r1, r1, #3
  403672:	3238      	adds	r2, #56	; 0x38
  403674:	e7a4      	b.n	4035c0 <_malloc_r+0x374>
  403676:	42bc      	cmp	r4, r7
  403678:	d054      	beq.n	403724 <_malloc_r+0x4d8>
  40367a:	68bc      	ldr	r4, [r7, #8]
  40367c:	6862      	ldr	r2, [r4, #4]
  40367e:	f022 0203 	bic.w	r2, r2, #3
  403682:	e75d      	b.n	403540 <_malloc_r+0x2f4>
  403684:	f859 3908 	ldr.w	r3, [r9], #-8
  403688:	4599      	cmp	r9, r3
  40368a:	f040 8086 	bne.w	40379a <_malloc_r+0x54e>
  40368e:	f010 0f03 	tst.w	r0, #3
  403692:	f100 30ff 	add.w	r0, r0, #4294967295
  403696:	d1f5      	bne.n	403684 <_malloc_r+0x438>
  403698:	687b      	ldr	r3, [r7, #4]
  40369a:	ea23 0304 	bic.w	r3, r3, r4
  40369e:	607b      	str	r3, [r7, #4]
  4036a0:	0064      	lsls	r4, r4, #1
  4036a2:	429c      	cmp	r4, r3
  4036a4:	f63f aec7 	bhi.w	403436 <_malloc_r+0x1ea>
  4036a8:	2c00      	cmp	r4, #0
  4036aa:	f43f aec4 	beq.w	403436 <_malloc_r+0x1ea>
  4036ae:	421c      	tst	r4, r3
  4036b0:	4640      	mov	r0, r8
  4036b2:	f47f ae3e 	bne.w	403332 <_malloc_r+0xe6>
  4036b6:	0064      	lsls	r4, r4, #1
  4036b8:	421c      	tst	r4, r3
  4036ba:	f100 0004 	add.w	r0, r0, #4
  4036be:	d0fa      	beq.n	4036b6 <_malloc_r+0x46a>
  4036c0:	e637      	b.n	403332 <_malloc_r+0xe6>
  4036c2:	468c      	mov	ip, r1
  4036c4:	e78c      	b.n	4035e0 <_malloc_r+0x394>
  4036c6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4036ca:	d815      	bhi.n	4036f8 <_malloc_r+0x4ac>
  4036cc:	0bf3      	lsrs	r3, r6, #15
  4036ce:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4036d2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4036d6:	00c3      	lsls	r3, r0, #3
  4036d8:	e5da      	b.n	403290 <_malloc_r+0x44>
  4036da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4036de:	e6ed      	b.n	4034bc <_malloc_r+0x270>
  4036e0:	687b      	ldr	r3, [r7, #4]
  4036e2:	1092      	asrs	r2, r2, #2
  4036e4:	2101      	movs	r1, #1
  4036e6:	fa01 f202 	lsl.w	r2, r1, r2
  4036ea:	4313      	orrs	r3, r2
  4036ec:	607b      	str	r3, [r7, #4]
  4036ee:	4662      	mov	r2, ip
  4036f0:	e779      	b.n	4035e6 <_malloc_r+0x39a>
  4036f2:	2301      	movs	r3, #1
  4036f4:	6053      	str	r3, [r2, #4]
  4036f6:	e729      	b.n	40354c <_malloc_r+0x300>
  4036f8:	f240 5254 	movw	r2, #1364	; 0x554
  4036fc:	4293      	cmp	r3, r2
  4036fe:	d822      	bhi.n	403746 <_malloc_r+0x4fa>
  403700:	0cb3      	lsrs	r3, r6, #18
  403702:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403706:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40370a:	00c3      	lsls	r3, r0, #3
  40370c:	e5c0      	b.n	403290 <_malloc_r+0x44>
  40370e:	f103 0b10 	add.w	fp, r3, #16
  403712:	e6ae      	b.n	403472 <_malloc_r+0x226>
  403714:	2a54      	cmp	r2, #84	; 0x54
  403716:	d829      	bhi.n	40376c <_malloc_r+0x520>
  403718:	0b1a      	lsrs	r2, r3, #12
  40371a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40371e:	00c9      	lsls	r1, r1, #3
  403720:	326e      	adds	r2, #110	; 0x6e
  403722:	e74d      	b.n	4035c0 <_malloc_r+0x374>
  403724:	4b20      	ldr	r3, [pc, #128]	; (4037a8 <_malloc_r+0x55c>)
  403726:	6819      	ldr	r1, [r3, #0]
  403728:	4459      	add	r1, fp
  40372a:	6019      	str	r1, [r3, #0]
  40372c:	e6b2      	b.n	403494 <_malloc_r+0x248>
  40372e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403732:	2800      	cmp	r0, #0
  403734:	f47f aeae 	bne.w	403494 <_malloc_r+0x248>
  403738:	eb08 030b 	add.w	r3, r8, fp
  40373c:	68ba      	ldr	r2, [r7, #8]
  40373e:	f043 0301 	orr.w	r3, r3, #1
  403742:	6053      	str	r3, [r2, #4]
  403744:	e6ee      	b.n	403524 <_malloc_r+0x2d8>
  403746:	207f      	movs	r0, #127	; 0x7f
  403748:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40374c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403750:	e59e      	b.n	403290 <_malloc_r+0x44>
  403752:	f104 0108 	add.w	r1, r4, #8
  403756:	4628      	mov	r0, r5
  403758:	9300      	str	r3, [sp, #0]
  40375a:	f7ff fa61 	bl	402c20 <_free_r>
  40375e:	9b00      	ldr	r3, [sp, #0]
  403760:	6819      	ldr	r1, [r3, #0]
  403762:	e6df      	b.n	403524 <_malloc_r+0x2d8>
  403764:	2001      	movs	r0, #1
  403766:	f04f 0900 	mov.w	r9, #0
  40376a:	e6bc      	b.n	4034e6 <_malloc_r+0x29a>
  40376c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403770:	d805      	bhi.n	40377e <_malloc_r+0x532>
  403772:	0bda      	lsrs	r2, r3, #15
  403774:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403778:	00c9      	lsls	r1, r1, #3
  40377a:	3277      	adds	r2, #119	; 0x77
  40377c:	e720      	b.n	4035c0 <_malloc_r+0x374>
  40377e:	f240 5154 	movw	r1, #1364	; 0x554
  403782:	428a      	cmp	r2, r1
  403784:	d805      	bhi.n	403792 <_malloc_r+0x546>
  403786:	0c9a      	lsrs	r2, r3, #18
  403788:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40378c:	00c9      	lsls	r1, r1, #3
  40378e:	327c      	adds	r2, #124	; 0x7c
  403790:	e716      	b.n	4035c0 <_malloc_r+0x374>
  403792:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403796:	227e      	movs	r2, #126	; 0x7e
  403798:	e712      	b.n	4035c0 <_malloc_r+0x374>
  40379a:	687b      	ldr	r3, [r7, #4]
  40379c:	e780      	b.n	4036a0 <_malloc_r+0x454>
  40379e:	08f0      	lsrs	r0, r6, #3
  4037a0:	f106 0308 	add.w	r3, r6, #8
  4037a4:	e600      	b.n	4033a8 <_malloc_r+0x15c>
  4037a6:	bf00      	nop
  4037a8:	20400a4c 	.word	0x20400a4c

004037ac <__ascii_mbtowc>:
  4037ac:	b082      	sub	sp, #8
  4037ae:	b149      	cbz	r1, 4037c4 <__ascii_mbtowc+0x18>
  4037b0:	b15a      	cbz	r2, 4037ca <__ascii_mbtowc+0x1e>
  4037b2:	b16b      	cbz	r3, 4037d0 <__ascii_mbtowc+0x24>
  4037b4:	7813      	ldrb	r3, [r2, #0]
  4037b6:	600b      	str	r3, [r1, #0]
  4037b8:	7812      	ldrb	r2, [r2, #0]
  4037ba:	1c10      	adds	r0, r2, #0
  4037bc:	bf18      	it	ne
  4037be:	2001      	movne	r0, #1
  4037c0:	b002      	add	sp, #8
  4037c2:	4770      	bx	lr
  4037c4:	a901      	add	r1, sp, #4
  4037c6:	2a00      	cmp	r2, #0
  4037c8:	d1f3      	bne.n	4037b2 <__ascii_mbtowc+0x6>
  4037ca:	4610      	mov	r0, r2
  4037cc:	b002      	add	sp, #8
  4037ce:	4770      	bx	lr
  4037d0:	f06f 0001 	mvn.w	r0, #1
  4037d4:	e7f4      	b.n	4037c0 <__ascii_mbtowc+0x14>
  4037d6:	bf00      	nop
	...

004037e0 <memchr>:
  4037e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4037e4:	2a10      	cmp	r2, #16
  4037e6:	db2b      	blt.n	403840 <memchr+0x60>
  4037e8:	f010 0f07 	tst.w	r0, #7
  4037ec:	d008      	beq.n	403800 <memchr+0x20>
  4037ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4037f2:	3a01      	subs	r2, #1
  4037f4:	428b      	cmp	r3, r1
  4037f6:	d02d      	beq.n	403854 <memchr+0x74>
  4037f8:	f010 0f07 	tst.w	r0, #7
  4037fc:	b342      	cbz	r2, 403850 <memchr+0x70>
  4037fe:	d1f6      	bne.n	4037ee <memchr+0xe>
  403800:	b4f0      	push	{r4, r5, r6, r7}
  403802:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403806:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40380a:	f022 0407 	bic.w	r4, r2, #7
  40380e:	f07f 0700 	mvns.w	r7, #0
  403812:	2300      	movs	r3, #0
  403814:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403818:	3c08      	subs	r4, #8
  40381a:	ea85 0501 	eor.w	r5, r5, r1
  40381e:	ea86 0601 	eor.w	r6, r6, r1
  403822:	fa85 f547 	uadd8	r5, r5, r7
  403826:	faa3 f587 	sel	r5, r3, r7
  40382a:	fa86 f647 	uadd8	r6, r6, r7
  40382e:	faa5 f687 	sel	r6, r5, r7
  403832:	b98e      	cbnz	r6, 403858 <memchr+0x78>
  403834:	d1ee      	bne.n	403814 <memchr+0x34>
  403836:	bcf0      	pop	{r4, r5, r6, r7}
  403838:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40383c:	f002 0207 	and.w	r2, r2, #7
  403840:	b132      	cbz	r2, 403850 <memchr+0x70>
  403842:	f810 3b01 	ldrb.w	r3, [r0], #1
  403846:	3a01      	subs	r2, #1
  403848:	ea83 0301 	eor.w	r3, r3, r1
  40384c:	b113      	cbz	r3, 403854 <memchr+0x74>
  40384e:	d1f8      	bne.n	403842 <memchr+0x62>
  403850:	2000      	movs	r0, #0
  403852:	4770      	bx	lr
  403854:	3801      	subs	r0, #1
  403856:	4770      	bx	lr
  403858:	2d00      	cmp	r5, #0
  40385a:	bf06      	itte	eq
  40385c:	4635      	moveq	r5, r6
  40385e:	3803      	subeq	r0, #3
  403860:	3807      	subne	r0, #7
  403862:	f015 0f01 	tst.w	r5, #1
  403866:	d107      	bne.n	403878 <memchr+0x98>
  403868:	3001      	adds	r0, #1
  40386a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40386e:	bf02      	ittt	eq
  403870:	3001      	addeq	r0, #1
  403872:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403876:	3001      	addeq	r0, #1
  403878:	bcf0      	pop	{r4, r5, r6, r7}
  40387a:	3801      	subs	r0, #1
  40387c:	4770      	bx	lr
  40387e:	bf00      	nop

00403880 <memmove>:
  403880:	4288      	cmp	r0, r1
  403882:	b5f0      	push	{r4, r5, r6, r7, lr}
  403884:	d90d      	bls.n	4038a2 <memmove+0x22>
  403886:	188b      	adds	r3, r1, r2
  403888:	4298      	cmp	r0, r3
  40388a:	d20a      	bcs.n	4038a2 <memmove+0x22>
  40388c:	1884      	adds	r4, r0, r2
  40388e:	2a00      	cmp	r2, #0
  403890:	d051      	beq.n	403936 <memmove+0xb6>
  403892:	4622      	mov	r2, r4
  403894:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403898:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40389c:	4299      	cmp	r1, r3
  40389e:	d1f9      	bne.n	403894 <memmove+0x14>
  4038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038a2:	2a0f      	cmp	r2, #15
  4038a4:	d948      	bls.n	403938 <memmove+0xb8>
  4038a6:	ea41 0300 	orr.w	r3, r1, r0
  4038aa:	079b      	lsls	r3, r3, #30
  4038ac:	d146      	bne.n	40393c <memmove+0xbc>
  4038ae:	f100 0410 	add.w	r4, r0, #16
  4038b2:	f101 0310 	add.w	r3, r1, #16
  4038b6:	4615      	mov	r5, r2
  4038b8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4038bc:	f844 6c10 	str.w	r6, [r4, #-16]
  4038c0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4038c4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4038c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4038cc:	f844 6c08 	str.w	r6, [r4, #-8]
  4038d0:	3d10      	subs	r5, #16
  4038d2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4038d6:	f844 6c04 	str.w	r6, [r4, #-4]
  4038da:	2d0f      	cmp	r5, #15
  4038dc:	f103 0310 	add.w	r3, r3, #16
  4038e0:	f104 0410 	add.w	r4, r4, #16
  4038e4:	d8e8      	bhi.n	4038b8 <memmove+0x38>
  4038e6:	f1a2 0310 	sub.w	r3, r2, #16
  4038ea:	f023 030f 	bic.w	r3, r3, #15
  4038ee:	f002 0e0f 	and.w	lr, r2, #15
  4038f2:	3310      	adds	r3, #16
  4038f4:	f1be 0f03 	cmp.w	lr, #3
  4038f8:	4419      	add	r1, r3
  4038fa:	4403      	add	r3, r0
  4038fc:	d921      	bls.n	403942 <memmove+0xc2>
  4038fe:	1f1e      	subs	r6, r3, #4
  403900:	460d      	mov	r5, r1
  403902:	4674      	mov	r4, lr
  403904:	3c04      	subs	r4, #4
  403906:	f855 7b04 	ldr.w	r7, [r5], #4
  40390a:	f846 7f04 	str.w	r7, [r6, #4]!
  40390e:	2c03      	cmp	r4, #3
  403910:	d8f8      	bhi.n	403904 <memmove+0x84>
  403912:	f1ae 0404 	sub.w	r4, lr, #4
  403916:	f024 0403 	bic.w	r4, r4, #3
  40391a:	3404      	adds	r4, #4
  40391c:	4421      	add	r1, r4
  40391e:	4423      	add	r3, r4
  403920:	f002 0203 	and.w	r2, r2, #3
  403924:	b162      	cbz	r2, 403940 <memmove+0xc0>
  403926:	3b01      	subs	r3, #1
  403928:	440a      	add	r2, r1
  40392a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40392e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403932:	428a      	cmp	r2, r1
  403934:	d1f9      	bne.n	40392a <memmove+0xaa>
  403936:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403938:	4603      	mov	r3, r0
  40393a:	e7f3      	b.n	403924 <memmove+0xa4>
  40393c:	4603      	mov	r3, r0
  40393e:	e7f2      	b.n	403926 <memmove+0xa6>
  403940:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403942:	4672      	mov	r2, lr
  403944:	e7ee      	b.n	403924 <memmove+0xa4>
  403946:	bf00      	nop

00403948 <__malloc_lock>:
  403948:	4801      	ldr	r0, [pc, #4]	; (403950 <__malloc_lock+0x8>)
  40394a:	f7ff bc03 	b.w	403154 <__retarget_lock_acquire_recursive>
  40394e:	bf00      	nop
  403950:	20400b28 	.word	0x20400b28

00403954 <__malloc_unlock>:
  403954:	4801      	ldr	r0, [pc, #4]	; (40395c <__malloc_unlock+0x8>)
  403956:	f7ff bbff 	b.w	403158 <__retarget_lock_release_recursive>
  40395a:	bf00      	nop
  40395c:	20400b28 	.word	0x20400b28

00403960 <_realloc_r>:
  403960:	2900      	cmp	r1, #0
  403962:	f000 8095 	beq.w	403a90 <_realloc_r+0x130>
  403966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40396a:	460d      	mov	r5, r1
  40396c:	4616      	mov	r6, r2
  40396e:	b083      	sub	sp, #12
  403970:	4680      	mov	r8, r0
  403972:	f106 070b 	add.w	r7, r6, #11
  403976:	f7ff ffe7 	bl	403948 <__malloc_lock>
  40397a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40397e:	2f16      	cmp	r7, #22
  403980:	f02e 0403 	bic.w	r4, lr, #3
  403984:	f1a5 0908 	sub.w	r9, r5, #8
  403988:	d83c      	bhi.n	403a04 <_realloc_r+0xa4>
  40398a:	2210      	movs	r2, #16
  40398c:	4617      	mov	r7, r2
  40398e:	42be      	cmp	r6, r7
  403990:	d83d      	bhi.n	403a0e <_realloc_r+0xae>
  403992:	4294      	cmp	r4, r2
  403994:	da43      	bge.n	403a1e <_realloc_r+0xbe>
  403996:	4bc4      	ldr	r3, [pc, #784]	; (403ca8 <_realloc_r+0x348>)
  403998:	6899      	ldr	r1, [r3, #8]
  40399a:	eb09 0004 	add.w	r0, r9, r4
  40399e:	4288      	cmp	r0, r1
  4039a0:	f000 80b4 	beq.w	403b0c <_realloc_r+0x1ac>
  4039a4:	6843      	ldr	r3, [r0, #4]
  4039a6:	f023 0101 	bic.w	r1, r3, #1
  4039aa:	4401      	add	r1, r0
  4039ac:	6849      	ldr	r1, [r1, #4]
  4039ae:	07c9      	lsls	r1, r1, #31
  4039b0:	d54c      	bpl.n	403a4c <_realloc_r+0xec>
  4039b2:	f01e 0f01 	tst.w	lr, #1
  4039b6:	f000 809b 	beq.w	403af0 <_realloc_r+0x190>
  4039ba:	4631      	mov	r1, r6
  4039bc:	4640      	mov	r0, r8
  4039be:	f7ff fc45 	bl	40324c <_malloc_r>
  4039c2:	4606      	mov	r6, r0
  4039c4:	2800      	cmp	r0, #0
  4039c6:	d03a      	beq.n	403a3e <_realloc_r+0xde>
  4039c8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4039cc:	f023 0301 	bic.w	r3, r3, #1
  4039d0:	444b      	add	r3, r9
  4039d2:	f1a0 0208 	sub.w	r2, r0, #8
  4039d6:	429a      	cmp	r2, r3
  4039d8:	f000 8121 	beq.w	403c1e <_realloc_r+0x2be>
  4039dc:	1f22      	subs	r2, r4, #4
  4039de:	2a24      	cmp	r2, #36	; 0x24
  4039e0:	f200 8107 	bhi.w	403bf2 <_realloc_r+0x292>
  4039e4:	2a13      	cmp	r2, #19
  4039e6:	f200 80db 	bhi.w	403ba0 <_realloc_r+0x240>
  4039ea:	4603      	mov	r3, r0
  4039ec:	462a      	mov	r2, r5
  4039ee:	6811      	ldr	r1, [r2, #0]
  4039f0:	6019      	str	r1, [r3, #0]
  4039f2:	6851      	ldr	r1, [r2, #4]
  4039f4:	6059      	str	r1, [r3, #4]
  4039f6:	6892      	ldr	r2, [r2, #8]
  4039f8:	609a      	str	r2, [r3, #8]
  4039fa:	4629      	mov	r1, r5
  4039fc:	4640      	mov	r0, r8
  4039fe:	f7ff f90f 	bl	402c20 <_free_r>
  403a02:	e01c      	b.n	403a3e <_realloc_r+0xde>
  403a04:	f027 0707 	bic.w	r7, r7, #7
  403a08:	2f00      	cmp	r7, #0
  403a0a:	463a      	mov	r2, r7
  403a0c:	dabf      	bge.n	40398e <_realloc_r+0x2e>
  403a0e:	2600      	movs	r6, #0
  403a10:	230c      	movs	r3, #12
  403a12:	4630      	mov	r0, r6
  403a14:	f8c8 3000 	str.w	r3, [r8]
  403a18:	b003      	add	sp, #12
  403a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a1e:	462e      	mov	r6, r5
  403a20:	1be3      	subs	r3, r4, r7
  403a22:	2b0f      	cmp	r3, #15
  403a24:	d81e      	bhi.n	403a64 <_realloc_r+0x104>
  403a26:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403a2a:	f003 0301 	and.w	r3, r3, #1
  403a2e:	4323      	orrs	r3, r4
  403a30:	444c      	add	r4, r9
  403a32:	f8c9 3004 	str.w	r3, [r9, #4]
  403a36:	6863      	ldr	r3, [r4, #4]
  403a38:	f043 0301 	orr.w	r3, r3, #1
  403a3c:	6063      	str	r3, [r4, #4]
  403a3e:	4640      	mov	r0, r8
  403a40:	f7ff ff88 	bl	403954 <__malloc_unlock>
  403a44:	4630      	mov	r0, r6
  403a46:	b003      	add	sp, #12
  403a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a4c:	f023 0303 	bic.w	r3, r3, #3
  403a50:	18e1      	adds	r1, r4, r3
  403a52:	4291      	cmp	r1, r2
  403a54:	db1f      	blt.n	403a96 <_realloc_r+0x136>
  403a56:	68c3      	ldr	r3, [r0, #12]
  403a58:	6882      	ldr	r2, [r0, #8]
  403a5a:	462e      	mov	r6, r5
  403a5c:	60d3      	str	r3, [r2, #12]
  403a5e:	460c      	mov	r4, r1
  403a60:	609a      	str	r2, [r3, #8]
  403a62:	e7dd      	b.n	403a20 <_realloc_r+0xc0>
  403a64:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403a68:	eb09 0107 	add.w	r1, r9, r7
  403a6c:	f002 0201 	and.w	r2, r2, #1
  403a70:	444c      	add	r4, r9
  403a72:	f043 0301 	orr.w	r3, r3, #1
  403a76:	4317      	orrs	r7, r2
  403a78:	f8c9 7004 	str.w	r7, [r9, #4]
  403a7c:	604b      	str	r3, [r1, #4]
  403a7e:	6863      	ldr	r3, [r4, #4]
  403a80:	f043 0301 	orr.w	r3, r3, #1
  403a84:	3108      	adds	r1, #8
  403a86:	6063      	str	r3, [r4, #4]
  403a88:	4640      	mov	r0, r8
  403a8a:	f7ff f8c9 	bl	402c20 <_free_r>
  403a8e:	e7d6      	b.n	403a3e <_realloc_r+0xde>
  403a90:	4611      	mov	r1, r2
  403a92:	f7ff bbdb 	b.w	40324c <_malloc_r>
  403a96:	f01e 0f01 	tst.w	lr, #1
  403a9a:	d18e      	bne.n	4039ba <_realloc_r+0x5a>
  403a9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403aa0:	eba9 0a01 	sub.w	sl, r9, r1
  403aa4:	f8da 1004 	ldr.w	r1, [sl, #4]
  403aa8:	f021 0103 	bic.w	r1, r1, #3
  403aac:	440b      	add	r3, r1
  403aae:	4423      	add	r3, r4
  403ab0:	4293      	cmp	r3, r2
  403ab2:	db25      	blt.n	403b00 <_realloc_r+0x1a0>
  403ab4:	68c2      	ldr	r2, [r0, #12]
  403ab6:	6881      	ldr	r1, [r0, #8]
  403ab8:	4656      	mov	r6, sl
  403aba:	60ca      	str	r2, [r1, #12]
  403abc:	6091      	str	r1, [r2, #8]
  403abe:	f8da 100c 	ldr.w	r1, [sl, #12]
  403ac2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403ac6:	1f22      	subs	r2, r4, #4
  403ac8:	2a24      	cmp	r2, #36	; 0x24
  403aca:	60c1      	str	r1, [r0, #12]
  403acc:	6088      	str	r0, [r1, #8]
  403ace:	f200 8094 	bhi.w	403bfa <_realloc_r+0x29a>
  403ad2:	2a13      	cmp	r2, #19
  403ad4:	d96f      	bls.n	403bb6 <_realloc_r+0x256>
  403ad6:	6829      	ldr	r1, [r5, #0]
  403ad8:	f8ca 1008 	str.w	r1, [sl, #8]
  403adc:	6869      	ldr	r1, [r5, #4]
  403ade:	f8ca 100c 	str.w	r1, [sl, #12]
  403ae2:	2a1b      	cmp	r2, #27
  403ae4:	f200 80a2 	bhi.w	403c2c <_realloc_r+0x2cc>
  403ae8:	3508      	adds	r5, #8
  403aea:	f10a 0210 	add.w	r2, sl, #16
  403aee:	e063      	b.n	403bb8 <_realloc_r+0x258>
  403af0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403af4:	eba9 0a03 	sub.w	sl, r9, r3
  403af8:	f8da 1004 	ldr.w	r1, [sl, #4]
  403afc:	f021 0103 	bic.w	r1, r1, #3
  403b00:	1863      	adds	r3, r4, r1
  403b02:	4293      	cmp	r3, r2
  403b04:	f6ff af59 	blt.w	4039ba <_realloc_r+0x5a>
  403b08:	4656      	mov	r6, sl
  403b0a:	e7d8      	b.n	403abe <_realloc_r+0x15e>
  403b0c:	6841      	ldr	r1, [r0, #4]
  403b0e:	f021 0b03 	bic.w	fp, r1, #3
  403b12:	44a3      	add	fp, r4
  403b14:	f107 0010 	add.w	r0, r7, #16
  403b18:	4583      	cmp	fp, r0
  403b1a:	da56      	bge.n	403bca <_realloc_r+0x26a>
  403b1c:	f01e 0f01 	tst.w	lr, #1
  403b20:	f47f af4b 	bne.w	4039ba <_realloc_r+0x5a>
  403b24:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403b28:	eba9 0a01 	sub.w	sl, r9, r1
  403b2c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403b30:	f021 0103 	bic.w	r1, r1, #3
  403b34:	448b      	add	fp, r1
  403b36:	4558      	cmp	r0, fp
  403b38:	dce2      	bgt.n	403b00 <_realloc_r+0x1a0>
  403b3a:	4656      	mov	r6, sl
  403b3c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403b40:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403b44:	1f22      	subs	r2, r4, #4
  403b46:	2a24      	cmp	r2, #36	; 0x24
  403b48:	60c1      	str	r1, [r0, #12]
  403b4a:	6088      	str	r0, [r1, #8]
  403b4c:	f200 808f 	bhi.w	403c6e <_realloc_r+0x30e>
  403b50:	2a13      	cmp	r2, #19
  403b52:	f240 808a 	bls.w	403c6a <_realloc_r+0x30a>
  403b56:	6829      	ldr	r1, [r5, #0]
  403b58:	f8ca 1008 	str.w	r1, [sl, #8]
  403b5c:	6869      	ldr	r1, [r5, #4]
  403b5e:	f8ca 100c 	str.w	r1, [sl, #12]
  403b62:	2a1b      	cmp	r2, #27
  403b64:	f200 808a 	bhi.w	403c7c <_realloc_r+0x31c>
  403b68:	3508      	adds	r5, #8
  403b6a:	f10a 0210 	add.w	r2, sl, #16
  403b6e:	6829      	ldr	r1, [r5, #0]
  403b70:	6011      	str	r1, [r2, #0]
  403b72:	6869      	ldr	r1, [r5, #4]
  403b74:	6051      	str	r1, [r2, #4]
  403b76:	68a9      	ldr	r1, [r5, #8]
  403b78:	6091      	str	r1, [r2, #8]
  403b7a:	eb0a 0107 	add.w	r1, sl, r7
  403b7e:	ebab 0207 	sub.w	r2, fp, r7
  403b82:	f042 0201 	orr.w	r2, r2, #1
  403b86:	6099      	str	r1, [r3, #8]
  403b88:	604a      	str	r2, [r1, #4]
  403b8a:	f8da 3004 	ldr.w	r3, [sl, #4]
  403b8e:	f003 0301 	and.w	r3, r3, #1
  403b92:	431f      	orrs	r7, r3
  403b94:	4640      	mov	r0, r8
  403b96:	f8ca 7004 	str.w	r7, [sl, #4]
  403b9a:	f7ff fedb 	bl	403954 <__malloc_unlock>
  403b9e:	e751      	b.n	403a44 <_realloc_r+0xe4>
  403ba0:	682b      	ldr	r3, [r5, #0]
  403ba2:	6003      	str	r3, [r0, #0]
  403ba4:	686b      	ldr	r3, [r5, #4]
  403ba6:	6043      	str	r3, [r0, #4]
  403ba8:	2a1b      	cmp	r2, #27
  403baa:	d82d      	bhi.n	403c08 <_realloc_r+0x2a8>
  403bac:	f100 0308 	add.w	r3, r0, #8
  403bb0:	f105 0208 	add.w	r2, r5, #8
  403bb4:	e71b      	b.n	4039ee <_realloc_r+0x8e>
  403bb6:	4632      	mov	r2, r6
  403bb8:	6829      	ldr	r1, [r5, #0]
  403bba:	6011      	str	r1, [r2, #0]
  403bbc:	6869      	ldr	r1, [r5, #4]
  403bbe:	6051      	str	r1, [r2, #4]
  403bc0:	68a9      	ldr	r1, [r5, #8]
  403bc2:	6091      	str	r1, [r2, #8]
  403bc4:	461c      	mov	r4, r3
  403bc6:	46d1      	mov	r9, sl
  403bc8:	e72a      	b.n	403a20 <_realloc_r+0xc0>
  403bca:	eb09 0107 	add.w	r1, r9, r7
  403bce:	ebab 0b07 	sub.w	fp, fp, r7
  403bd2:	f04b 0201 	orr.w	r2, fp, #1
  403bd6:	6099      	str	r1, [r3, #8]
  403bd8:	604a      	str	r2, [r1, #4]
  403bda:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403bde:	f003 0301 	and.w	r3, r3, #1
  403be2:	431f      	orrs	r7, r3
  403be4:	4640      	mov	r0, r8
  403be6:	f845 7c04 	str.w	r7, [r5, #-4]
  403bea:	f7ff feb3 	bl	403954 <__malloc_unlock>
  403bee:	462e      	mov	r6, r5
  403bf0:	e728      	b.n	403a44 <_realloc_r+0xe4>
  403bf2:	4629      	mov	r1, r5
  403bf4:	f7ff fe44 	bl	403880 <memmove>
  403bf8:	e6ff      	b.n	4039fa <_realloc_r+0x9a>
  403bfa:	4629      	mov	r1, r5
  403bfc:	4630      	mov	r0, r6
  403bfe:	461c      	mov	r4, r3
  403c00:	46d1      	mov	r9, sl
  403c02:	f7ff fe3d 	bl	403880 <memmove>
  403c06:	e70b      	b.n	403a20 <_realloc_r+0xc0>
  403c08:	68ab      	ldr	r3, [r5, #8]
  403c0a:	6083      	str	r3, [r0, #8]
  403c0c:	68eb      	ldr	r3, [r5, #12]
  403c0e:	60c3      	str	r3, [r0, #12]
  403c10:	2a24      	cmp	r2, #36	; 0x24
  403c12:	d017      	beq.n	403c44 <_realloc_r+0x2e4>
  403c14:	f100 0310 	add.w	r3, r0, #16
  403c18:	f105 0210 	add.w	r2, r5, #16
  403c1c:	e6e7      	b.n	4039ee <_realloc_r+0x8e>
  403c1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403c22:	f023 0303 	bic.w	r3, r3, #3
  403c26:	441c      	add	r4, r3
  403c28:	462e      	mov	r6, r5
  403c2a:	e6f9      	b.n	403a20 <_realloc_r+0xc0>
  403c2c:	68a9      	ldr	r1, [r5, #8]
  403c2e:	f8ca 1010 	str.w	r1, [sl, #16]
  403c32:	68e9      	ldr	r1, [r5, #12]
  403c34:	f8ca 1014 	str.w	r1, [sl, #20]
  403c38:	2a24      	cmp	r2, #36	; 0x24
  403c3a:	d00c      	beq.n	403c56 <_realloc_r+0x2f6>
  403c3c:	3510      	adds	r5, #16
  403c3e:	f10a 0218 	add.w	r2, sl, #24
  403c42:	e7b9      	b.n	403bb8 <_realloc_r+0x258>
  403c44:	692b      	ldr	r3, [r5, #16]
  403c46:	6103      	str	r3, [r0, #16]
  403c48:	696b      	ldr	r3, [r5, #20]
  403c4a:	6143      	str	r3, [r0, #20]
  403c4c:	f105 0218 	add.w	r2, r5, #24
  403c50:	f100 0318 	add.w	r3, r0, #24
  403c54:	e6cb      	b.n	4039ee <_realloc_r+0x8e>
  403c56:	692a      	ldr	r2, [r5, #16]
  403c58:	f8ca 2018 	str.w	r2, [sl, #24]
  403c5c:	696a      	ldr	r2, [r5, #20]
  403c5e:	f8ca 201c 	str.w	r2, [sl, #28]
  403c62:	3518      	adds	r5, #24
  403c64:	f10a 0220 	add.w	r2, sl, #32
  403c68:	e7a6      	b.n	403bb8 <_realloc_r+0x258>
  403c6a:	4632      	mov	r2, r6
  403c6c:	e77f      	b.n	403b6e <_realloc_r+0x20e>
  403c6e:	4629      	mov	r1, r5
  403c70:	4630      	mov	r0, r6
  403c72:	9301      	str	r3, [sp, #4]
  403c74:	f7ff fe04 	bl	403880 <memmove>
  403c78:	9b01      	ldr	r3, [sp, #4]
  403c7a:	e77e      	b.n	403b7a <_realloc_r+0x21a>
  403c7c:	68a9      	ldr	r1, [r5, #8]
  403c7e:	f8ca 1010 	str.w	r1, [sl, #16]
  403c82:	68e9      	ldr	r1, [r5, #12]
  403c84:	f8ca 1014 	str.w	r1, [sl, #20]
  403c88:	2a24      	cmp	r2, #36	; 0x24
  403c8a:	d003      	beq.n	403c94 <_realloc_r+0x334>
  403c8c:	3510      	adds	r5, #16
  403c8e:	f10a 0218 	add.w	r2, sl, #24
  403c92:	e76c      	b.n	403b6e <_realloc_r+0x20e>
  403c94:	692a      	ldr	r2, [r5, #16]
  403c96:	f8ca 2018 	str.w	r2, [sl, #24]
  403c9a:	696a      	ldr	r2, [r5, #20]
  403c9c:	f8ca 201c 	str.w	r2, [sl, #28]
  403ca0:	3518      	adds	r5, #24
  403ca2:	f10a 0220 	add.w	r2, sl, #32
  403ca6:	e762      	b.n	403b6e <_realloc_r+0x20e>
  403ca8:	204005a8 	.word	0x204005a8

00403cac <_sbrk_r>:
  403cac:	b538      	push	{r3, r4, r5, lr}
  403cae:	4c07      	ldr	r4, [pc, #28]	; (403ccc <_sbrk_r+0x20>)
  403cb0:	2300      	movs	r3, #0
  403cb2:	4605      	mov	r5, r0
  403cb4:	4608      	mov	r0, r1
  403cb6:	6023      	str	r3, [r4, #0]
  403cb8:	f7fd fba8 	bl	40140c <_sbrk>
  403cbc:	1c43      	adds	r3, r0, #1
  403cbe:	d000      	beq.n	403cc2 <_sbrk_r+0x16>
  403cc0:	bd38      	pop	{r3, r4, r5, pc}
  403cc2:	6823      	ldr	r3, [r4, #0]
  403cc4:	2b00      	cmp	r3, #0
  403cc6:	d0fb      	beq.n	403cc0 <_sbrk_r+0x14>
  403cc8:	602b      	str	r3, [r5, #0]
  403cca:	bd38      	pop	{r3, r4, r5, pc}
  403ccc:	20400b3c 	.word	0x20400b3c

00403cd0 <__sread>:
  403cd0:	b510      	push	{r4, lr}
  403cd2:	460c      	mov	r4, r1
  403cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403cd8:	f000 fa78 	bl	4041cc <_read_r>
  403cdc:	2800      	cmp	r0, #0
  403cde:	db03      	blt.n	403ce8 <__sread+0x18>
  403ce0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403ce2:	4403      	add	r3, r0
  403ce4:	6523      	str	r3, [r4, #80]	; 0x50
  403ce6:	bd10      	pop	{r4, pc}
  403ce8:	89a3      	ldrh	r3, [r4, #12]
  403cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403cee:	81a3      	strh	r3, [r4, #12]
  403cf0:	bd10      	pop	{r4, pc}
  403cf2:	bf00      	nop

00403cf4 <__swrite>:
  403cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403cf8:	4616      	mov	r6, r2
  403cfa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403cfe:	461f      	mov	r7, r3
  403d00:	05d3      	lsls	r3, r2, #23
  403d02:	460c      	mov	r4, r1
  403d04:	4605      	mov	r5, r0
  403d06:	d507      	bpl.n	403d18 <__swrite+0x24>
  403d08:	2200      	movs	r2, #0
  403d0a:	2302      	movs	r3, #2
  403d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d10:	f000 fa46 	bl	4041a0 <_lseek_r>
  403d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403d1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403d20:	81a2      	strh	r2, [r4, #12]
  403d22:	463b      	mov	r3, r7
  403d24:	4632      	mov	r2, r6
  403d26:	4628      	mov	r0, r5
  403d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403d2c:	f000 b926 	b.w	403f7c <_write_r>

00403d30 <__sseek>:
  403d30:	b510      	push	{r4, lr}
  403d32:	460c      	mov	r4, r1
  403d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d38:	f000 fa32 	bl	4041a0 <_lseek_r>
  403d3c:	89a3      	ldrh	r3, [r4, #12]
  403d3e:	1c42      	adds	r2, r0, #1
  403d40:	bf0e      	itee	eq
  403d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403d4a:	6520      	strne	r0, [r4, #80]	; 0x50
  403d4c:	81a3      	strh	r3, [r4, #12]
  403d4e:	bd10      	pop	{r4, pc}

00403d50 <__sclose>:
  403d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d54:	f000 b98a 	b.w	40406c <_close_r>
	...

00403d80 <strlen>:
  403d80:	f890 f000 	pld	[r0]
  403d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403d88:	f020 0107 	bic.w	r1, r0, #7
  403d8c:	f06f 0c00 	mvn.w	ip, #0
  403d90:	f010 0407 	ands.w	r4, r0, #7
  403d94:	f891 f020 	pld	[r1, #32]
  403d98:	f040 8049 	bne.w	403e2e <strlen+0xae>
  403d9c:	f04f 0400 	mov.w	r4, #0
  403da0:	f06f 0007 	mvn.w	r0, #7
  403da4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403da8:	f891 f040 	pld	[r1, #64]	; 0x40
  403dac:	f100 0008 	add.w	r0, r0, #8
  403db0:	fa82 f24c 	uadd8	r2, r2, ip
  403db4:	faa4 f28c 	sel	r2, r4, ip
  403db8:	fa83 f34c 	uadd8	r3, r3, ip
  403dbc:	faa2 f38c 	sel	r3, r2, ip
  403dc0:	bb4b      	cbnz	r3, 403e16 <strlen+0x96>
  403dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403dc6:	fa82 f24c 	uadd8	r2, r2, ip
  403dca:	f100 0008 	add.w	r0, r0, #8
  403dce:	faa4 f28c 	sel	r2, r4, ip
  403dd2:	fa83 f34c 	uadd8	r3, r3, ip
  403dd6:	faa2 f38c 	sel	r3, r2, ip
  403dda:	b9e3      	cbnz	r3, 403e16 <strlen+0x96>
  403ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403de0:	fa82 f24c 	uadd8	r2, r2, ip
  403de4:	f100 0008 	add.w	r0, r0, #8
  403de8:	faa4 f28c 	sel	r2, r4, ip
  403dec:	fa83 f34c 	uadd8	r3, r3, ip
  403df0:	faa2 f38c 	sel	r3, r2, ip
  403df4:	b97b      	cbnz	r3, 403e16 <strlen+0x96>
  403df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403dfa:	f101 0120 	add.w	r1, r1, #32
  403dfe:	fa82 f24c 	uadd8	r2, r2, ip
  403e02:	f100 0008 	add.w	r0, r0, #8
  403e06:	faa4 f28c 	sel	r2, r4, ip
  403e0a:	fa83 f34c 	uadd8	r3, r3, ip
  403e0e:	faa2 f38c 	sel	r3, r2, ip
  403e12:	2b00      	cmp	r3, #0
  403e14:	d0c6      	beq.n	403da4 <strlen+0x24>
  403e16:	2a00      	cmp	r2, #0
  403e18:	bf04      	itt	eq
  403e1a:	3004      	addeq	r0, #4
  403e1c:	461a      	moveq	r2, r3
  403e1e:	ba12      	rev	r2, r2
  403e20:	fab2 f282 	clz	r2, r2
  403e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403e2c:	4770      	bx	lr
  403e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403e32:	f004 0503 	and.w	r5, r4, #3
  403e36:	f1c4 0000 	rsb	r0, r4, #0
  403e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403e3e:	f014 0f04 	tst.w	r4, #4
  403e42:	f891 f040 	pld	[r1, #64]	; 0x40
  403e46:	fa0c f505 	lsl.w	r5, ip, r5
  403e4a:	ea62 0205 	orn	r2, r2, r5
  403e4e:	bf1c      	itt	ne
  403e50:	ea63 0305 	ornne	r3, r3, r5
  403e54:	4662      	movne	r2, ip
  403e56:	f04f 0400 	mov.w	r4, #0
  403e5a:	e7a9      	b.n	403db0 <strlen+0x30>

00403e5c <__swbuf_r>:
  403e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e5e:	460d      	mov	r5, r1
  403e60:	4614      	mov	r4, r2
  403e62:	4606      	mov	r6, r0
  403e64:	b110      	cbz	r0, 403e6c <__swbuf_r+0x10>
  403e66:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403e68:	2b00      	cmp	r3, #0
  403e6a:	d04b      	beq.n	403f04 <__swbuf_r+0xa8>
  403e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403e70:	69a3      	ldr	r3, [r4, #24]
  403e72:	60a3      	str	r3, [r4, #8]
  403e74:	b291      	uxth	r1, r2
  403e76:	0708      	lsls	r0, r1, #28
  403e78:	d539      	bpl.n	403eee <__swbuf_r+0x92>
  403e7a:	6923      	ldr	r3, [r4, #16]
  403e7c:	2b00      	cmp	r3, #0
  403e7e:	d036      	beq.n	403eee <__swbuf_r+0x92>
  403e80:	b2ed      	uxtb	r5, r5
  403e82:	0489      	lsls	r1, r1, #18
  403e84:	462f      	mov	r7, r5
  403e86:	d515      	bpl.n	403eb4 <__swbuf_r+0x58>
  403e88:	6822      	ldr	r2, [r4, #0]
  403e8a:	6961      	ldr	r1, [r4, #20]
  403e8c:	1ad3      	subs	r3, r2, r3
  403e8e:	428b      	cmp	r3, r1
  403e90:	da1c      	bge.n	403ecc <__swbuf_r+0x70>
  403e92:	3301      	adds	r3, #1
  403e94:	68a1      	ldr	r1, [r4, #8]
  403e96:	1c50      	adds	r0, r2, #1
  403e98:	3901      	subs	r1, #1
  403e9a:	60a1      	str	r1, [r4, #8]
  403e9c:	6020      	str	r0, [r4, #0]
  403e9e:	7015      	strb	r5, [r2, #0]
  403ea0:	6962      	ldr	r2, [r4, #20]
  403ea2:	429a      	cmp	r2, r3
  403ea4:	d01a      	beq.n	403edc <__swbuf_r+0x80>
  403ea6:	89a3      	ldrh	r3, [r4, #12]
  403ea8:	07db      	lsls	r3, r3, #31
  403eaa:	d501      	bpl.n	403eb0 <__swbuf_r+0x54>
  403eac:	2d0a      	cmp	r5, #10
  403eae:	d015      	beq.n	403edc <__swbuf_r+0x80>
  403eb0:	4638      	mov	r0, r7
  403eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403eb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403eba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403ebe:	81a2      	strh	r2, [r4, #12]
  403ec0:	6822      	ldr	r2, [r4, #0]
  403ec2:	6661      	str	r1, [r4, #100]	; 0x64
  403ec4:	6961      	ldr	r1, [r4, #20]
  403ec6:	1ad3      	subs	r3, r2, r3
  403ec8:	428b      	cmp	r3, r1
  403eca:	dbe2      	blt.n	403e92 <__swbuf_r+0x36>
  403ecc:	4621      	mov	r1, r4
  403ece:	4630      	mov	r0, r6
  403ed0:	f7fe fd28 	bl	402924 <_fflush_r>
  403ed4:	b940      	cbnz	r0, 403ee8 <__swbuf_r+0x8c>
  403ed6:	6822      	ldr	r2, [r4, #0]
  403ed8:	2301      	movs	r3, #1
  403eda:	e7db      	b.n	403e94 <__swbuf_r+0x38>
  403edc:	4621      	mov	r1, r4
  403ede:	4630      	mov	r0, r6
  403ee0:	f7fe fd20 	bl	402924 <_fflush_r>
  403ee4:	2800      	cmp	r0, #0
  403ee6:	d0e3      	beq.n	403eb0 <__swbuf_r+0x54>
  403ee8:	f04f 37ff 	mov.w	r7, #4294967295
  403eec:	e7e0      	b.n	403eb0 <__swbuf_r+0x54>
  403eee:	4621      	mov	r1, r4
  403ef0:	4630      	mov	r0, r6
  403ef2:	f7fe fc03 	bl	4026fc <__swsetup_r>
  403ef6:	2800      	cmp	r0, #0
  403ef8:	d1f6      	bne.n	403ee8 <__swbuf_r+0x8c>
  403efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403efe:	6923      	ldr	r3, [r4, #16]
  403f00:	b291      	uxth	r1, r2
  403f02:	e7bd      	b.n	403e80 <__swbuf_r+0x24>
  403f04:	f7fe fd66 	bl	4029d4 <__sinit>
  403f08:	e7b0      	b.n	403e6c <__swbuf_r+0x10>
  403f0a:	bf00      	nop

00403f0c <_wcrtomb_r>:
  403f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f0e:	4606      	mov	r6, r0
  403f10:	b085      	sub	sp, #20
  403f12:	461f      	mov	r7, r3
  403f14:	b189      	cbz	r1, 403f3a <_wcrtomb_r+0x2e>
  403f16:	4c10      	ldr	r4, [pc, #64]	; (403f58 <_wcrtomb_r+0x4c>)
  403f18:	4d10      	ldr	r5, [pc, #64]	; (403f5c <_wcrtomb_r+0x50>)
  403f1a:	6824      	ldr	r4, [r4, #0]
  403f1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403f1e:	2c00      	cmp	r4, #0
  403f20:	bf08      	it	eq
  403f22:	462c      	moveq	r4, r5
  403f24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403f28:	47a0      	blx	r4
  403f2a:	1c43      	adds	r3, r0, #1
  403f2c:	d103      	bne.n	403f36 <_wcrtomb_r+0x2a>
  403f2e:	2200      	movs	r2, #0
  403f30:	238a      	movs	r3, #138	; 0x8a
  403f32:	603a      	str	r2, [r7, #0]
  403f34:	6033      	str	r3, [r6, #0]
  403f36:	b005      	add	sp, #20
  403f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f3a:	460c      	mov	r4, r1
  403f3c:	4906      	ldr	r1, [pc, #24]	; (403f58 <_wcrtomb_r+0x4c>)
  403f3e:	4a07      	ldr	r2, [pc, #28]	; (403f5c <_wcrtomb_r+0x50>)
  403f40:	6809      	ldr	r1, [r1, #0]
  403f42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403f44:	2900      	cmp	r1, #0
  403f46:	bf08      	it	eq
  403f48:	4611      	moveq	r1, r2
  403f4a:	4622      	mov	r2, r4
  403f4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403f50:	a901      	add	r1, sp, #4
  403f52:	47a0      	blx	r4
  403f54:	e7e9      	b.n	403f2a <_wcrtomb_r+0x1e>
  403f56:	bf00      	nop
  403f58:	20400008 	.word	0x20400008
  403f5c:	2040043c 	.word	0x2040043c

00403f60 <__ascii_wctomb>:
  403f60:	b121      	cbz	r1, 403f6c <__ascii_wctomb+0xc>
  403f62:	2aff      	cmp	r2, #255	; 0xff
  403f64:	d804      	bhi.n	403f70 <__ascii_wctomb+0x10>
  403f66:	700a      	strb	r2, [r1, #0]
  403f68:	2001      	movs	r0, #1
  403f6a:	4770      	bx	lr
  403f6c:	4608      	mov	r0, r1
  403f6e:	4770      	bx	lr
  403f70:	238a      	movs	r3, #138	; 0x8a
  403f72:	6003      	str	r3, [r0, #0]
  403f74:	f04f 30ff 	mov.w	r0, #4294967295
  403f78:	4770      	bx	lr
  403f7a:	bf00      	nop

00403f7c <_write_r>:
  403f7c:	b570      	push	{r4, r5, r6, lr}
  403f7e:	460d      	mov	r5, r1
  403f80:	4c08      	ldr	r4, [pc, #32]	; (403fa4 <_write_r+0x28>)
  403f82:	4611      	mov	r1, r2
  403f84:	4606      	mov	r6, r0
  403f86:	461a      	mov	r2, r3
  403f88:	4628      	mov	r0, r5
  403f8a:	2300      	movs	r3, #0
  403f8c:	6023      	str	r3, [r4, #0]
  403f8e:	f7fc faf5 	bl	40057c <_write>
  403f92:	1c43      	adds	r3, r0, #1
  403f94:	d000      	beq.n	403f98 <_write_r+0x1c>
  403f96:	bd70      	pop	{r4, r5, r6, pc}
  403f98:	6823      	ldr	r3, [r4, #0]
  403f9a:	2b00      	cmp	r3, #0
  403f9c:	d0fb      	beq.n	403f96 <_write_r+0x1a>
  403f9e:	6033      	str	r3, [r6, #0]
  403fa0:	bd70      	pop	{r4, r5, r6, pc}
  403fa2:	bf00      	nop
  403fa4:	20400b3c 	.word	0x20400b3c

00403fa8 <__register_exitproc>:
  403fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403fac:	4d2c      	ldr	r5, [pc, #176]	; (404060 <__register_exitproc+0xb8>)
  403fae:	4606      	mov	r6, r0
  403fb0:	6828      	ldr	r0, [r5, #0]
  403fb2:	4698      	mov	r8, r3
  403fb4:	460f      	mov	r7, r1
  403fb6:	4691      	mov	r9, r2
  403fb8:	f7ff f8cc 	bl	403154 <__retarget_lock_acquire_recursive>
  403fbc:	4b29      	ldr	r3, [pc, #164]	; (404064 <__register_exitproc+0xbc>)
  403fbe:	681c      	ldr	r4, [r3, #0]
  403fc0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403fc4:	2b00      	cmp	r3, #0
  403fc6:	d03e      	beq.n	404046 <__register_exitproc+0x9e>
  403fc8:	685a      	ldr	r2, [r3, #4]
  403fca:	2a1f      	cmp	r2, #31
  403fcc:	dc1c      	bgt.n	404008 <__register_exitproc+0x60>
  403fce:	f102 0e01 	add.w	lr, r2, #1
  403fd2:	b176      	cbz	r6, 403ff2 <__register_exitproc+0x4a>
  403fd4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403fd8:	2401      	movs	r4, #1
  403fda:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403fde:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403fe2:	4094      	lsls	r4, r2
  403fe4:	4320      	orrs	r0, r4
  403fe6:	2e02      	cmp	r6, #2
  403fe8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403fec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403ff0:	d023      	beq.n	40403a <__register_exitproc+0x92>
  403ff2:	3202      	adds	r2, #2
  403ff4:	f8c3 e004 	str.w	lr, [r3, #4]
  403ff8:	6828      	ldr	r0, [r5, #0]
  403ffa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403ffe:	f7ff f8ab 	bl	403158 <__retarget_lock_release_recursive>
  404002:	2000      	movs	r0, #0
  404004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404008:	4b17      	ldr	r3, [pc, #92]	; (404068 <__register_exitproc+0xc0>)
  40400a:	b30b      	cbz	r3, 404050 <__register_exitproc+0xa8>
  40400c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404010:	f3af 8000 	nop.w
  404014:	4603      	mov	r3, r0
  404016:	b1d8      	cbz	r0, 404050 <__register_exitproc+0xa8>
  404018:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40401c:	6002      	str	r2, [r0, #0]
  40401e:	2100      	movs	r1, #0
  404020:	6041      	str	r1, [r0, #4]
  404022:	460a      	mov	r2, r1
  404024:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404028:	f04f 0e01 	mov.w	lr, #1
  40402c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404030:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404034:	2e00      	cmp	r6, #0
  404036:	d0dc      	beq.n	403ff2 <__register_exitproc+0x4a>
  404038:	e7cc      	b.n	403fd4 <__register_exitproc+0x2c>
  40403a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40403e:	430c      	orrs	r4, r1
  404040:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404044:	e7d5      	b.n	403ff2 <__register_exitproc+0x4a>
  404046:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40404a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40404e:	e7bb      	b.n	403fc8 <__register_exitproc+0x20>
  404050:	6828      	ldr	r0, [r5, #0]
  404052:	f7ff f881 	bl	403158 <__retarget_lock_release_recursive>
  404056:	f04f 30ff 	mov.w	r0, #4294967295
  40405a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40405e:	bf00      	nop
  404060:	20400438 	.word	0x20400438
  404064:	00404558 	.word	0x00404558
  404068:	00000000 	.word	0x00000000

0040406c <_close_r>:
  40406c:	b538      	push	{r3, r4, r5, lr}
  40406e:	4c07      	ldr	r4, [pc, #28]	; (40408c <_close_r+0x20>)
  404070:	2300      	movs	r3, #0
  404072:	4605      	mov	r5, r0
  404074:	4608      	mov	r0, r1
  404076:	6023      	str	r3, [r4, #0]
  404078:	f7fd f9f4 	bl	401464 <_close>
  40407c:	1c43      	adds	r3, r0, #1
  40407e:	d000      	beq.n	404082 <_close_r+0x16>
  404080:	bd38      	pop	{r3, r4, r5, pc}
  404082:	6823      	ldr	r3, [r4, #0]
  404084:	2b00      	cmp	r3, #0
  404086:	d0fb      	beq.n	404080 <_close_r+0x14>
  404088:	602b      	str	r3, [r5, #0]
  40408a:	bd38      	pop	{r3, r4, r5, pc}
  40408c:	20400b3c 	.word	0x20400b3c

00404090 <_fclose_r>:
  404090:	b570      	push	{r4, r5, r6, lr}
  404092:	b159      	cbz	r1, 4040ac <_fclose_r+0x1c>
  404094:	4605      	mov	r5, r0
  404096:	460c      	mov	r4, r1
  404098:	b110      	cbz	r0, 4040a0 <_fclose_r+0x10>
  40409a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40409c:	2b00      	cmp	r3, #0
  40409e:	d03c      	beq.n	40411a <_fclose_r+0x8a>
  4040a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4040a2:	07d8      	lsls	r0, r3, #31
  4040a4:	d505      	bpl.n	4040b2 <_fclose_r+0x22>
  4040a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040aa:	b92b      	cbnz	r3, 4040b8 <_fclose_r+0x28>
  4040ac:	2600      	movs	r6, #0
  4040ae:	4630      	mov	r0, r6
  4040b0:	bd70      	pop	{r4, r5, r6, pc}
  4040b2:	89a3      	ldrh	r3, [r4, #12]
  4040b4:	0599      	lsls	r1, r3, #22
  4040b6:	d53c      	bpl.n	404132 <_fclose_r+0xa2>
  4040b8:	4621      	mov	r1, r4
  4040ba:	4628      	mov	r0, r5
  4040bc:	f7fe fb92 	bl	4027e4 <__sflush_r>
  4040c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4040c2:	4606      	mov	r6, r0
  4040c4:	b133      	cbz	r3, 4040d4 <_fclose_r+0x44>
  4040c6:	69e1      	ldr	r1, [r4, #28]
  4040c8:	4628      	mov	r0, r5
  4040ca:	4798      	blx	r3
  4040cc:	2800      	cmp	r0, #0
  4040ce:	bfb8      	it	lt
  4040d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4040d4:	89a3      	ldrh	r3, [r4, #12]
  4040d6:	061a      	lsls	r2, r3, #24
  4040d8:	d422      	bmi.n	404120 <_fclose_r+0x90>
  4040da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4040dc:	b141      	cbz	r1, 4040f0 <_fclose_r+0x60>
  4040de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4040e2:	4299      	cmp	r1, r3
  4040e4:	d002      	beq.n	4040ec <_fclose_r+0x5c>
  4040e6:	4628      	mov	r0, r5
  4040e8:	f7fe fd9a 	bl	402c20 <_free_r>
  4040ec:	2300      	movs	r3, #0
  4040ee:	6323      	str	r3, [r4, #48]	; 0x30
  4040f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4040f2:	b121      	cbz	r1, 4040fe <_fclose_r+0x6e>
  4040f4:	4628      	mov	r0, r5
  4040f6:	f7fe fd93 	bl	402c20 <_free_r>
  4040fa:	2300      	movs	r3, #0
  4040fc:	6463      	str	r3, [r4, #68]	; 0x44
  4040fe:	f7fe fc95 	bl	402a2c <__sfp_lock_acquire>
  404102:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404104:	2200      	movs	r2, #0
  404106:	07db      	lsls	r3, r3, #31
  404108:	81a2      	strh	r2, [r4, #12]
  40410a:	d50e      	bpl.n	40412a <_fclose_r+0x9a>
  40410c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40410e:	f7ff f81f 	bl	403150 <__retarget_lock_close_recursive>
  404112:	f7fe fc91 	bl	402a38 <__sfp_lock_release>
  404116:	4630      	mov	r0, r6
  404118:	bd70      	pop	{r4, r5, r6, pc}
  40411a:	f7fe fc5b 	bl	4029d4 <__sinit>
  40411e:	e7bf      	b.n	4040a0 <_fclose_r+0x10>
  404120:	6921      	ldr	r1, [r4, #16]
  404122:	4628      	mov	r0, r5
  404124:	f7fe fd7c 	bl	402c20 <_free_r>
  404128:	e7d7      	b.n	4040da <_fclose_r+0x4a>
  40412a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40412c:	f7ff f814 	bl	403158 <__retarget_lock_release_recursive>
  404130:	e7ec      	b.n	40410c <_fclose_r+0x7c>
  404132:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404134:	f7ff f80e 	bl	403154 <__retarget_lock_acquire_recursive>
  404138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40413c:	2b00      	cmp	r3, #0
  40413e:	d1bb      	bne.n	4040b8 <_fclose_r+0x28>
  404140:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404142:	f016 0601 	ands.w	r6, r6, #1
  404146:	d1b1      	bne.n	4040ac <_fclose_r+0x1c>
  404148:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40414a:	f7ff f805 	bl	403158 <__retarget_lock_release_recursive>
  40414e:	4630      	mov	r0, r6
  404150:	bd70      	pop	{r4, r5, r6, pc}
  404152:	bf00      	nop

00404154 <_fstat_r>:
  404154:	b538      	push	{r3, r4, r5, lr}
  404156:	460b      	mov	r3, r1
  404158:	4c07      	ldr	r4, [pc, #28]	; (404178 <_fstat_r+0x24>)
  40415a:	4605      	mov	r5, r0
  40415c:	4611      	mov	r1, r2
  40415e:	4618      	mov	r0, r3
  404160:	2300      	movs	r3, #0
  404162:	6023      	str	r3, [r4, #0]
  404164:	f7fd f98a 	bl	40147c <_fstat>
  404168:	1c43      	adds	r3, r0, #1
  40416a:	d000      	beq.n	40416e <_fstat_r+0x1a>
  40416c:	bd38      	pop	{r3, r4, r5, pc}
  40416e:	6823      	ldr	r3, [r4, #0]
  404170:	2b00      	cmp	r3, #0
  404172:	d0fb      	beq.n	40416c <_fstat_r+0x18>
  404174:	602b      	str	r3, [r5, #0]
  404176:	bd38      	pop	{r3, r4, r5, pc}
  404178:	20400b3c 	.word	0x20400b3c

0040417c <_isatty_r>:
  40417c:	b538      	push	{r3, r4, r5, lr}
  40417e:	4c07      	ldr	r4, [pc, #28]	; (40419c <_isatty_r+0x20>)
  404180:	2300      	movs	r3, #0
  404182:	4605      	mov	r5, r0
  404184:	4608      	mov	r0, r1
  404186:	6023      	str	r3, [r4, #0]
  404188:	f7fd f988 	bl	40149c <_isatty>
  40418c:	1c43      	adds	r3, r0, #1
  40418e:	d000      	beq.n	404192 <_isatty_r+0x16>
  404190:	bd38      	pop	{r3, r4, r5, pc}
  404192:	6823      	ldr	r3, [r4, #0]
  404194:	2b00      	cmp	r3, #0
  404196:	d0fb      	beq.n	404190 <_isatty_r+0x14>
  404198:	602b      	str	r3, [r5, #0]
  40419a:	bd38      	pop	{r3, r4, r5, pc}
  40419c:	20400b3c 	.word	0x20400b3c

004041a0 <_lseek_r>:
  4041a0:	b570      	push	{r4, r5, r6, lr}
  4041a2:	460d      	mov	r5, r1
  4041a4:	4c08      	ldr	r4, [pc, #32]	; (4041c8 <_lseek_r+0x28>)
  4041a6:	4611      	mov	r1, r2
  4041a8:	4606      	mov	r6, r0
  4041aa:	461a      	mov	r2, r3
  4041ac:	4628      	mov	r0, r5
  4041ae:	2300      	movs	r3, #0
  4041b0:	6023      	str	r3, [r4, #0]
  4041b2:	f7fd f97e 	bl	4014b2 <_lseek>
  4041b6:	1c43      	adds	r3, r0, #1
  4041b8:	d000      	beq.n	4041bc <_lseek_r+0x1c>
  4041ba:	bd70      	pop	{r4, r5, r6, pc}
  4041bc:	6823      	ldr	r3, [r4, #0]
  4041be:	2b00      	cmp	r3, #0
  4041c0:	d0fb      	beq.n	4041ba <_lseek_r+0x1a>
  4041c2:	6033      	str	r3, [r6, #0]
  4041c4:	bd70      	pop	{r4, r5, r6, pc}
  4041c6:	bf00      	nop
  4041c8:	20400b3c 	.word	0x20400b3c

004041cc <_read_r>:
  4041cc:	b570      	push	{r4, r5, r6, lr}
  4041ce:	460d      	mov	r5, r1
  4041d0:	4c08      	ldr	r4, [pc, #32]	; (4041f4 <_read_r+0x28>)
  4041d2:	4611      	mov	r1, r2
  4041d4:	4606      	mov	r6, r0
  4041d6:	461a      	mov	r2, r3
  4041d8:	4628      	mov	r0, r5
  4041da:	2300      	movs	r3, #0
  4041dc:	6023      	str	r3, [r4, #0]
  4041de:	f7fc f9a3 	bl	400528 <_read>
  4041e2:	1c43      	adds	r3, r0, #1
  4041e4:	d000      	beq.n	4041e8 <_read_r+0x1c>
  4041e6:	bd70      	pop	{r4, r5, r6, pc}
  4041e8:	6823      	ldr	r3, [r4, #0]
  4041ea:	2b00      	cmp	r3, #0
  4041ec:	d0fb      	beq.n	4041e6 <_read_r+0x1a>
  4041ee:	6033      	str	r3, [r6, #0]
  4041f0:	bd70      	pop	{r4, r5, r6, pc}
  4041f2:	bf00      	nop
  4041f4:	20400b3c 	.word	0x20400b3c

004041f8 <__aeabi_uldivmod>:
  4041f8:	b953      	cbnz	r3, 404210 <__aeabi_uldivmod+0x18>
  4041fa:	b94a      	cbnz	r2, 404210 <__aeabi_uldivmod+0x18>
  4041fc:	2900      	cmp	r1, #0
  4041fe:	bf08      	it	eq
  404200:	2800      	cmpeq	r0, #0
  404202:	bf1c      	itt	ne
  404204:	f04f 31ff 	movne.w	r1, #4294967295
  404208:	f04f 30ff 	movne.w	r0, #4294967295
  40420c:	f000 b97a 	b.w	404504 <__aeabi_idiv0>
  404210:	f1ad 0c08 	sub.w	ip, sp, #8
  404214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404218:	f000 f806 	bl	404228 <__udivmoddi4>
  40421c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404224:	b004      	add	sp, #16
  404226:	4770      	bx	lr

00404228 <__udivmoddi4>:
  404228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40422c:	468c      	mov	ip, r1
  40422e:	460d      	mov	r5, r1
  404230:	4604      	mov	r4, r0
  404232:	9e08      	ldr	r6, [sp, #32]
  404234:	2b00      	cmp	r3, #0
  404236:	d151      	bne.n	4042dc <__udivmoddi4+0xb4>
  404238:	428a      	cmp	r2, r1
  40423a:	4617      	mov	r7, r2
  40423c:	d96d      	bls.n	40431a <__udivmoddi4+0xf2>
  40423e:	fab2 fe82 	clz	lr, r2
  404242:	f1be 0f00 	cmp.w	lr, #0
  404246:	d00b      	beq.n	404260 <__udivmoddi4+0x38>
  404248:	f1ce 0c20 	rsb	ip, lr, #32
  40424c:	fa01 f50e 	lsl.w	r5, r1, lr
  404250:	fa20 fc0c 	lsr.w	ip, r0, ip
  404254:	fa02 f70e 	lsl.w	r7, r2, lr
  404258:	ea4c 0c05 	orr.w	ip, ip, r5
  40425c:	fa00 f40e 	lsl.w	r4, r0, lr
  404260:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404264:	0c25      	lsrs	r5, r4, #16
  404266:	fbbc f8fa 	udiv	r8, ip, sl
  40426a:	fa1f f987 	uxth.w	r9, r7
  40426e:	fb0a cc18 	mls	ip, sl, r8, ip
  404272:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404276:	fb08 f309 	mul.w	r3, r8, r9
  40427a:	42ab      	cmp	r3, r5
  40427c:	d90a      	bls.n	404294 <__udivmoddi4+0x6c>
  40427e:	19ed      	adds	r5, r5, r7
  404280:	f108 32ff 	add.w	r2, r8, #4294967295
  404284:	f080 8123 	bcs.w	4044ce <__udivmoddi4+0x2a6>
  404288:	42ab      	cmp	r3, r5
  40428a:	f240 8120 	bls.w	4044ce <__udivmoddi4+0x2a6>
  40428e:	f1a8 0802 	sub.w	r8, r8, #2
  404292:	443d      	add	r5, r7
  404294:	1aed      	subs	r5, r5, r3
  404296:	b2a4      	uxth	r4, r4
  404298:	fbb5 f0fa 	udiv	r0, r5, sl
  40429c:	fb0a 5510 	mls	r5, sl, r0, r5
  4042a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4042a4:	fb00 f909 	mul.w	r9, r0, r9
  4042a8:	45a1      	cmp	r9, r4
  4042aa:	d909      	bls.n	4042c0 <__udivmoddi4+0x98>
  4042ac:	19e4      	adds	r4, r4, r7
  4042ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4042b2:	f080 810a 	bcs.w	4044ca <__udivmoddi4+0x2a2>
  4042b6:	45a1      	cmp	r9, r4
  4042b8:	f240 8107 	bls.w	4044ca <__udivmoddi4+0x2a2>
  4042bc:	3802      	subs	r0, #2
  4042be:	443c      	add	r4, r7
  4042c0:	eba4 0409 	sub.w	r4, r4, r9
  4042c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4042c8:	2100      	movs	r1, #0
  4042ca:	2e00      	cmp	r6, #0
  4042cc:	d061      	beq.n	404392 <__udivmoddi4+0x16a>
  4042ce:	fa24 f40e 	lsr.w	r4, r4, lr
  4042d2:	2300      	movs	r3, #0
  4042d4:	6034      	str	r4, [r6, #0]
  4042d6:	6073      	str	r3, [r6, #4]
  4042d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042dc:	428b      	cmp	r3, r1
  4042de:	d907      	bls.n	4042f0 <__udivmoddi4+0xc8>
  4042e0:	2e00      	cmp	r6, #0
  4042e2:	d054      	beq.n	40438e <__udivmoddi4+0x166>
  4042e4:	2100      	movs	r1, #0
  4042e6:	e886 0021 	stmia.w	r6, {r0, r5}
  4042ea:	4608      	mov	r0, r1
  4042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042f0:	fab3 f183 	clz	r1, r3
  4042f4:	2900      	cmp	r1, #0
  4042f6:	f040 808e 	bne.w	404416 <__udivmoddi4+0x1ee>
  4042fa:	42ab      	cmp	r3, r5
  4042fc:	d302      	bcc.n	404304 <__udivmoddi4+0xdc>
  4042fe:	4282      	cmp	r2, r0
  404300:	f200 80fa 	bhi.w	4044f8 <__udivmoddi4+0x2d0>
  404304:	1a84      	subs	r4, r0, r2
  404306:	eb65 0503 	sbc.w	r5, r5, r3
  40430a:	2001      	movs	r0, #1
  40430c:	46ac      	mov	ip, r5
  40430e:	2e00      	cmp	r6, #0
  404310:	d03f      	beq.n	404392 <__udivmoddi4+0x16a>
  404312:	e886 1010 	stmia.w	r6, {r4, ip}
  404316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40431a:	b912      	cbnz	r2, 404322 <__udivmoddi4+0xfa>
  40431c:	2701      	movs	r7, #1
  40431e:	fbb7 f7f2 	udiv	r7, r7, r2
  404322:	fab7 fe87 	clz	lr, r7
  404326:	f1be 0f00 	cmp.w	lr, #0
  40432a:	d134      	bne.n	404396 <__udivmoddi4+0x16e>
  40432c:	1beb      	subs	r3, r5, r7
  40432e:	0c3a      	lsrs	r2, r7, #16
  404330:	fa1f fc87 	uxth.w	ip, r7
  404334:	2101      	movs	r1, #1
  404336:	fbb3 f8f2 	udiv	r8, r3, r2
  40433a:	0c25      	lsrs	r5, r4, #16
  40433c:	fb02 3318 	mls	r3, r2, r8, r3
  404340:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404344:	fb0c f308 	mul.w	r3, ip, r8
  404348:	42ab      	cmp	r3, r5
  40434a:	d907      	bls.n	40435c <__udivmoddi4+0x134>
  40434c:	19ed      	adds	r5, r5, r7
  40434e:	f108 30ff 	add.w	r0, r8, #4294967295
  404352:	d202      	bcs.n	40435a <__udivmoddi4+0x132>
  404354:	42ab      	cmp	r3, r5
  404356:	f200 80d1 	bhi.w	4044fc <__udivmoddi4+0x2d4>
  40435a:	4680      	mov	r8, r0
  40435c:	1aed      	subs	r5, r5, r3
  40435e:	b2a3      	uxth	r3, r4
  404360:	fbb5 f0f2 	udiv	r0, r5, r2
  404364:	fb02 5510 	mls	r5, r2, r0, r5
  404368:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40436c:	fb0c fc00 	mul.w	ip, ip, r0
  404370:	45a4      	cmp	ip, r4
  404372:	d907      	bls.n	404384 <__udivmoddi4+0x15c>
  404374:	19e4      	adds	r4, r4, r7
  404376:	f100 33ff 	add.w	r3, r0, #4294967295
  40437a:	d202      	bcs.n	404382 <__udivmoddi4+0x15a>
  40437c:	45a4      	cmp	ip, r4
  40437e:	f200 80b8 	bhi.w	4044f2 <__udivmoddi4+0x2ca>
  404382:	4618      	mov	r0, r3
  404384:	eba4 040c 	sub.w	r4, r4, ip
  404388:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40438c:	e79d      	b.n	4042ca <__udivmoddi4+0xa2>
  40438e:	4631      	mov	r1, r6
  404390:	4630      	mov	r0, r6
  404392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404396:	f1ce 0420 	rsb	r4, lr, #32
  40439a:	fa05 f30e 	lsl.w	r3, r5, lr
  40439e:	fa07 f70e 	lsl.w	r7, r7, lr
  4043a2:	fa20 f804 	lsr.w	r8, r0, r4
  4043a6:	0c3a      	lsrs	r2, r7, #16
  4043a8:	fa25 f404 	lsr.w	r4, r5, r4
  4043ac:	ea48 0803 	orr.w	r8, r8, r3
  4043b0:	fbb4 f1f2 	udiv	r1, r4, r2
  4043b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4043b8:	fb02 4411 	mls	r4, r2, r1, r4
  4043bc:	fa1f fc87 	uxth.w	ip, r7
  4043c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4043c4:	fb01 f30c 	mul.w	r3, r1, ip
  4043c8:	42ab      	cmp	r3, r5
  4043ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4043ce:	d909      	bls.n	4043e4 <__udivmoddi4+0x1bc>
  4043d0:	19ed      	adds	r5, r5, r7
  4043d2:	f101 30ff 	add.w	r0, r1, #4294967295
  4043d6:	f080 808a 	bcs.w	4044ee <__udivmoddi4+0x2c6>
  4043da:	42ab      	cmp	r3, r5
  4043dc:	f240 8087 	bls.w	4044ee <__udivmoddi4+0x2c6>
  4043e0:	3902      	subs	r1, #2
  4043e2:	443d      	add	r5, r7
  4043e4:	1aeb      	subs	r3, r5, r3
  4043e6:	fa1f f588 	uxth.w	r5, r8
  4043ea:	fbb3 f0f2 	udiv	r0, r3, r2
  4043ee:	fb02 3310 	mls	r3, r2, r0, r3
  4043f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4043f6:	fb00 f30c 	mul.w	r3, r0, ip
  4043fa:	42ab      	cmp	r3, r5
  4043fc:	d907      	bls.n	40440e <__udivmoddi4+0x1e6>
  4043fe:	19ed      	adds	r5, r5, r7
  404400:	f100 38ff 	add.w	r8, r0, #4294967295
  404404:	d26f      	bcs.n	4044e6 <__udivmoddi4+0x2be>
  404406:	42ab      	cmp	r3, r5
  404408:	d96d      	bls.n	4044e6 <__udivmoddi4+0x2be>
  40440a:	3802      	subs	r0, #2
  40440c:	443d      	add	r5, r7
  40440e:	1aeb      	subs	r3, r5, r3
  404410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404414:	e78f      	b.n	404336 <__udivmoddi4+0x10e>
  404416:	f1c1 0720 	rsb	r7, r1, #32
  40441a:	fa22 f807 	lsr.w	r8, r2, r7
  40441e:	408b      	lsls	r3, r1
  404420:	fa05 f401 	lsl.w	r4, r5, r1
  404424:	ea48 0303 	orr.w	r3, r8, r3
  404428:	fa20 fe07 	lsr.w	lr, r0, r7
  40442c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404430:	40fd      	lsrs	r5, r7
  404432:	ea4e 0e04 	orr.w	lr, lr, r4
  404436:	fbb5 f9fc 	udiv	r9, r5, ip
  40443a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40443e:	fb0c 5519 	mls	r5, ip, r9, r5
  404442:	fa1f f883 	uxth.w	r8, r3
  404446:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40444a:	fb09 f408 	mul.w	r4, r9, r8
  40444e:	42ac      	cmp	r4, r5
  404450:	fa02 f201 	lsl.w	r2, r2, r1
  404454:	fa00 fa01 	lsl.w	sl, r0, r1
  404458:	d908      	bls.n	40446c <__udivmoddi4+0x244>
  40445a:	18ed      	adds	r5, r5, r3
  40445c:	f109 30ff 	add.w	r0, r9, #4294967295
  404460:	d243      	bcs.n	4044ea <__udivmoddi4+0x2c2>
  404462:	42ac      	cmp	r4, r5
  404464:	d941      	bls.n	4044ea <__udivmoddi4+0x2c2>
  404466:	f1a9 0902 	sub.w	r9, r9, #2
  40446a:	441d      	add	r5, r3
  40446c:	1b2d      	subs	r5, r5, r4
  40446e:	fa1f fe8e 	uxth.w	lr, lr
  404472:	fbb5 f0fc 	udiv	r0, r5, ip
  404476:	fb0c 5510 	mls	r5, ip, r0, r5
  40447a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40447e:	fb00 f808 	mul.w	r8, r0, r8
  404482:	45a0      	cmp	r8, r4
  404484:	d907      	bls.n	404496 <__udivmoddi4+0x26e>
  404486:	18e4      	adds	r4, r4, r3
  404488:	f100 35ff 	add.w	r5, r0, #4294967295
  40448c:	d229      	bcs.n	4044e2 <__udivmoddi4+0x2ba>
  40448e:	45a0      	cmp	r8, r4
  404490:	d927      	bls.n	4044e2 <__udivmoddi4+0x2ba>
  404492:	3802      	subs	r0, #2
  404494:	441c      	add	r4, r3
  404496:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40449a:	eba4 0408 	sub.w	r4, r4, r8
  40449e:	fba0 8902 	umull	r8, r9, r0, r2
  4044a2:	454c      	cmp	r4, r9
  4044a4:	46c6      	mov	lr, r8
  4044a6:	464d      	mov	r5, r9
  4044a8:	d315      	bcc.n	4044d6 <__udivmoddi4+0x2ae>
  4044aa:	d012      	beq.n	4044d2 <__udivmoddi4+0x2aa>
  4044ac:	b156      	cbz	r6, 4044c4 <__udivmoddi4+0x29c>
  4044ae:	ebba 030e 	subs.w	r3, sl, lr
  4044b2:	eb64 0405 	sbc.w	r4, r4, r5
  4044b6:	fa04 f707 	lsl.w	r7, r4, r7
  4044ba:	40cb      	lsrs	r3, r1
  4044bc:	431f      	orrs	r7, r3
  4044be:	40cc      	lsrs	r4, r1
  4044c0:	6037      	str	r7, [r6, #0]
  4044c2:	6074      	str	r4, [r6, #4]
  4044c4:	2100      	movs	r1, #0
  4044c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044ca:	4618      	mov	r0, r3
  4044cc:	e6f8      	b.n	4042c0 <__udivmoddi4+0x98>
  4044ce:	4690      	mov	r8, r2
  4044d0:	e6e0      	b.n	404294 <__udivmoddi4+0x6c>
  4044d2:	45c2      	cmp	sl, r8
  4044d4:	d2ea      	bcs.n	4044ac <__udivmoddi4+0x284>
  4044d6:	ebb8 0e02 	subs.w	lr, r8, r2
  4044da:	eb69 0503 	sbc.w	r5, r9, r3
  4044de:	3801      	subs	r0, #1
  4044e0:	e7e4      	b.n	4044ac <__udivmoddi4+0x284>
  4044e2:	4628      	mov	r0, r5
  4044e4:	e7d7      	b.n	404496 <__udivmoddi4+0x26e>
  4044e6:	4640      	mov	r0, r8
  4044e8:	e791      	b.n	40440e <__udivmoddi4+0x1e6>
  4044ea:	4681      	mov	r9, r0
  4044ec:	e7be      	b.n	40446c <__udivmoddi4+0x244>
  4044ee:	4601      	mov	r1, r0
  4044f0:	e778      	b.n	4043e4 <__udivmoddi4+0x1bc>
  4044f2:	3802      	subs	r0, #2
  4044f4:	443c      	add	r4, r7
  4044f6:	e745      	b.n	404384 <__udivmoddi4+0x15c>
  4044f8:	4608      	mov	r0, r1
  4044fa:	e708      	b.n	40430e <__udivmoddi4+0xe6>
  4044fc:	f1a8 0802 	sub.w	r8, r8, #2
  404500:	443d      	add	r5, r7
  404502:	e72b      	b.n	40435c <__udivmoddi4+0x134>

00404504 <__aeabi_idiv0>:
  404504:	4770      	bx	lr
  404506:	bf00      	nop
  404508:	6f726967 	.word	0x6f726967
  40450c:	64252075 	.word	0x64252075
  404510:	6c6f7620 	.word	0x6c6f7620
  404514:	0a736174 	.word	0x0a736174
  404518:	00000000 	.word	0x00000000
  40451c:	6f726967 	.word	0x6f726967
  404520:	6f6e2075 	.word	0x6f6e2075
  404524:	6e657320 	.word	0x6e657320
  404528:	6f646974 	.word	0x6f646974
  40452c:	726f6820 	.word	0x726f6820
  404530:	6972a1c3 	.word	0x6972a1c3
  404534:	0000006f 	.word	0x0000006f
  404538:	6f726967 	.word	0x6f726967
  40453c:	6f6e2075 	.word	0x6f6e2075
  404540:	6e657320 	.word	0x6e657320
  404544:	6f646974 	.word	0x6f646974
  404548:	746e6120 	.word	0x746e6120
  40454c:	6f682d69 	.word	0x6f682d69
  404550:	72a1c372 	.word	0x72a1c372
  404554:	00006f69 	.word	0x00006f69

00404558 <_global_impure_ptr>:
  404558:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  404568:	46454443 00000000 33323130 37363534     CDEF....01234567
  404578:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404588:	0000296c                                l)..

0040458c <blanks.7217>:
  40458c:	20202020 20202020 20202020 20202020                     

0040459c <zeroes.7218>:
  40459c:	30303030 30303030 30303030 30303030     0000000000000000
  4045ac:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004045bc <_ctype_>:
  4045bc:	20202000 20202020 28282020 20282828     .         ((((( 
  4045cc:	20202020 20202020 20202020 20202020                     
  4045dc:	10108820 10101010 10101010 10101010      ...............
  4045ec:	04040410 04040404 10040404 10101010     ................
  4045fc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40460c:	01010101 01010101 01010101 10101010     ................
  40461c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40462c:	02020202 02020202 02020202 10101010     ................
  40463c:	00000020 00000000 00000000 00000000      ...............
	...

004046c0 <_init>:
  4046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046c2:	bf00      	nop
  4046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4046c6:	bc08      	pop	{r3}
  4046c8:	469e      	mov	lr, r3
  4046ca:	4770      	bx	lr

004046cc <__init_array_start>:
  4046cc:	004027c5 	.word	0x004027c5

004046d0 <__frame_dummy_init_array_entry>:
  4046d0:	00400165                                e.@.

004046d4 <_fini>:
  4046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046d6:	bf00      	nop
  4046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4046da:	bc08      	pop	{r3}
  4046dc:	469e      	mov	lr, r3
  4046de:	4770      	bx	lr

004046e0 <__fini_array_start>:
  4046e0:	00400141 	.word	0x00400141
