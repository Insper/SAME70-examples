
LIDAR_MINI_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d18  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405d18  00405d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00405d20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000284  204009b8  004066d8  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400c3c  0040695c  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402c40  00408960  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001d6ba  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003d5f  00000000  00000000  0003e0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009641  00000000  00000000  00041e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e60  00000000  00000000  0004b499  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001198  00000000  00000000  0004c2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002226d  00000000  00000000  0004d491  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010140  00000000  00000000  0006f6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a956  00000000  00000000  0007f83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002f4c  00000000  00000000  0011a194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 2c 40 20 35 08 40 00 33 08 40 00 33 08 40 00     @,@ 5.@.3.@.3.@.
  400010:	33 08 40 00 33 08 40 00 33 08 40 00 00 00 00 00     3.@.3.@.3.@.....
	...
  40002c:	31 0c 40 00 33 08 40 00 00 00 00 00 d1 0c 40 00     1.@.3.@.......@.
  40003c:	35 0d 40 00 33 08 40 00 33 08 40 00 33 08 40 00     5.@.3.@.3.@.3.@.
  40004c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40005c:	33 08 40 00 33 08 40 00 00 00 00 00 59 05 40 00     3.@.3.@.....Y.@.
  40006c:	6d 05 40 00 81 05 40 00 33 08 40 00 33 08 40 00     m.@...@.3.@.3.@.
  40007c:	33 08 40 00 95 05 40 00 a9 05 40 00 33 08 40 00     3.@...@...@.3.@.
  40008c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40009c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000ac:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000bc:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000cc:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000dc:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000ec:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000fc:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40010c:	33 08 40 00 33 08 40 00 00 00 00 00 00 00 00 00     3.@.3.@.........
  40011c:	00 00 00 00 33 08 40 00 33 08 40 00 33 08 40 00     ....3.@.3.@.3.@.
  40012c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40013c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40014c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40015c:	33 08 40 00 33 08 40 00 33 08 40 00                 3.@.3.@.3.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00405d20 	.word	0x00405d20

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405d20 	.word	0x00405d20
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00405d20 	.word	0x00405d20
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40020e:	480d      	ldr	r0, [pc, #52]	; (400244 <sysclk_init+0x70>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	07270e00 	.word	0x07270e00
  40021c:	00400a09 	.word	0x00400a09
  400220:	00400659 	.word	0x00400659
  400224:	004006ad 	.word	0x004006ad
  400228:	004006bd 	.word	0x004006bd
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	004006cd 	.word	0x004006cd
  400238:	004005bd 	.word	0x004005bd
  40023c:	004005f5 	.word	0x004005f5
  400240:	004008fd 	.word	0x004008fd
  400244:	11e1a300 	.word	0x11e1a300

00400248 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40024c:	b980      	cbnz	r0, 400270 <_read+0x28>
  40024e:	460c      	mov	r4, r1
  400250:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400252:	2a00      	cmp	r2, #0
  400254:	dd0f      	ble.n	400276 <_read+0x2e>
  400256:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400258:	4e08      	ldr	r6, [pc, #32]	; (40027c <_read+0x34>)
  40025a:	4d09      	ldr	r5, [pc, #36]	; (400280 <_read+0x38>)
  40025c:	6830      	ldr	r0, [r6, #0]
  40025e:	4621      	mov	r1, r4
  400260:	682b      	ldr	r3, [r5, #0]
  400262:	4798      	blx	r3
		ptr++;
  400264:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400266:	42bc      	cmp	r4, r7
  400268:	d1f8      	bne.n	40025c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40026a:	4640      	mov	r0, r8
  40026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400270:	f04f 38ff 	mov.w	r8, #4294967295
  400274:	e7f9      	b.n	40026a <_read+0x22>
	for (; len > 0; --len) {
  400276:	4680      	mov	r8, r0
  400278:	e7f7      	b.n	40026a <_read+0x22>
  40027a:	bf00      	nop
  40027c:	20400bd0 	.word	0x20400bd0
  400280:	20400bc8 	.word	0x20400bc8

00400284 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400284:	3801      	subs	r0, #1
  400286:	2802      	cmp	r0, #2
  400288:	d815      	bhi.n	4002b6 <_write+0x32>
{
  40028a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028e:	460e      	mov	r6, r1
  400290:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400292:	b19a      	cbz	r2, 4002bc <_write+0x38>
  400294:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400296:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002d0 <_write+0x4c>
  40029a:	4f0c      	ldr	r7, [pc, #48]	; (4002cc <_write+0x48>)
  40029c:	f8d8 0000 	ldr.w	r0, [r8]
  4002a0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a4:	683b      	ldr	r3, [r7, #0]
  4002a6:	4798      	blx	r3
  4002a8:	2800      	cmp	r0, #0
  4002aa:	db0a      	blt.n	4002c2 <_write+0x3e>
  4002ac:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002ae:	3c01      	subs	r4, #1
  4002b0:	d1f4      	bne.n	40029c <_write+0x18>
  4002b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b6:	f04f 30ff 	mov.w	r0, #4294967295
  4002ba:	4770      	bx	lr
	for (; len != 0; --len) {
  4002bc:	4610      	mov	r0, r2
  4002be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002c2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ca:	bf00      	nop
  4002cc:	20400bcc 	.word	0x20400bcc
  4002d0:	20400bd0 	.word	0x20400bd0

004002d4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002da:	4b5c      	ldr	r3, [pc, #368]	; (40044c <board_init+0x178>)
  4002dc:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002e2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002e6:	4b5a      	ldr	r3, [pc, #360]	; (400450 <board_init+0x17c>)
  4002e8:	2200      	movs	r2, #0
  4002ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002ee:	695a      	ldr	r2, [r3, #20]
  4002f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4002f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002fa:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002fe:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400302:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400306:	f007 0007 	and.w	r0, r7, #7
  40030a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40030c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400310:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400314:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400318:	f3bf 8f4f 	dsb	sy
  40031c:	f04f 34ff 	mov.w	r4, #4294967295
  400320:	fa04 fc00 	lsl.w	ip, r4, r0
  400324:	fa06 f000 	lsl.w	r0, r6, r0
  400328:	fa04 f40e 	lsl.w	r4, r4, lr
  40032c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400330:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400332:	463a      	mov	r2, r7
  400334:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400336:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40033a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40033e:	3a01      	subs	r2, #1
  400340:	4423      	add	r3, r4
  400342:	f1b2 3fff 	cmp.w	r2, #4294967295
  400346:	d1f6      	bne.n	400336 <board_init+0x62>
        } while(sets--);
  400348:	3e01      	subs	r6, #1
  40034a:	4460      	add	r0, ip
  40034c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400350:	d1ef      	bne.n	400332 <board_init+0x5e>
  400352:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400356:	4b3e      	ldr	r3, [pc, #248]	; (400450 <board_init+0x17c>)
  400358:	695a      	ldr	r2, [r3, #20]
  40035a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40035e:	615a      	str	r2, [r3, #20]
  400360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400364:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400368:	4a3a      	ldr	r2, [pc, #232]	; (400454 <board_init+0x180>)
  40036a:	493b      	ldr	r1, [pc, #236]	; (400458 <board_init+0x184>)
  40036c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40036e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400372:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400374:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400378:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40037c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400380:	f022 0201 	bic.w	r2, r2, #1
  400384:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400388:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40038c:	f022 0201 	bic.w	r2, r2, #1
  400390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400398:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40039c:	200a      	movs	r0, #10
  40039e:	4c2f      	ldr	r4, [pc, #188]	; (40045c <board_init+0x188>)
  4003a0:	47a0      	blx	r4
  4003a2:	200b      	movs	r0, #11
  4003a4:	47a0      	blx	r4
  4003a6:	200c      	movs	r0, #12
  4003a8:	47a0      	blx	r4
  4003aa:	2010      	movs	r0, #16
  4003ac:	47a0      	blx	r4
  4003ae:	2011      	movs	r0, #17
  4003b0:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003b2:	4b2b      	ldr	r3, [pc, #172]	; (400460 <board_init+0x18c>)
  4003b4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003b8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003be:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003c8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003ce:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003d6:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003de:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003ea:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003fc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400402:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400404:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40040a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40040c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400410:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400412:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400414:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400418:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40041c:	4a11      	ldr	r2, [pc, #68]	; (400464 <board_init+0x190>)
  40041e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400422:	f043 0310 	orr.w	r3, r3, #16
  400426:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  40042a:	4b0f      	ldr	r3, [pc, #60]	; (400468 <board_init+0x194>)
  40042c:	2210      	movs	r2, #16
  40042e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400434:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400436:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40043c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40043e:	4311      	orrs	r1, r2
  400440:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400442:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400444:	4311      	orrs	r1, r2
  400446:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400448:	605a      	str	r2, [r3, #4]
  40044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40044c:	400e1850 	.word	0x400e1850
  400450:	e000ed00 	.word	0xe000ed00
  400454:	400e0c00 	.word	0x400e0c00
  400458:	5a00080c 	.word	0x5a00080c
  40045c:	004006dd 	.word	0x004006dd
  400460:	400e1200 	.word	0x400e1200
  400464:	40088000 	.word	0x40088000
  400468:	400e1000 	.word	0x400e1000

0040046c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40046c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40046e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400472:	d03a      	beq.n	4004ea <pio_set_peripheral+0x7e>
  400474:	d813      	bhi.n	40049e <pio_set_peripheral+0x32>
  400476:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40047a:	d025      	beq.n	4004c8 <pio_set_peripheral+0x5c>
  40047c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400480:	d10a      	bne.n	400498 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400482:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400484:	4313      	orrs	r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40048a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40048c:	400b      	ands	r3, r1
  40048e:	ea23 0302 	bic.w	r3, r3, r2
  400492:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400494:	6042      	str	r2, [r0, #4]
  400496:	4770      	bx	lr
	switch (ul_type) {
  400498:	2900      	cmp	r1, #0
  40049a:	d1fb      	bne.n	400494 <pio_set_peripheral+0x28>
  40049c:	4770      	bx	lr
  40049e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004a2:	d021      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004a4:	d809      	bhi.n	4004ba <pio_set_peripheral+0x4e>
  4004a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004aa:	d1f3      	bne.n	400494 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004ae:	4313      	orrs	r3, r2
  4004b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004b4:	4313      	orrs	r3, r2
  4004b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004b8:	e7ec      	b.n	400494 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004be:	d013      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004c4:	d010      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c6:	e7e5      	b.n	400494 <pio_set_peripheral+0x28>
{
  4004c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004ce:	43d3      	mvns	r3, r2
  4004d0:	4021      	ands	r1, r4
  4004d2:	461c      	mov	r4, r3
  4004d4:	4019      	ands	r1, r3
  4004d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004dc:	400b      	ands	r3, r1
  4004de:	4023      	ands	r3, r4
  4004e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004e2:	6042      	str	r2, [r0, #4]
}
  4004e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004ee:	400b      	ands	r3, r1
  4004f0:	ea23 0302 	bic.w	r3, r3, r2
  4004f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004f8:	4313      	orrs	r3, r2
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004fc:	e7ca      	b.n	400494 <pio_set_peripheral+0x28>

004004fe <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004fe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400500:	4770      	bx	lr

00400502 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400502:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400504:	4770      	bx	lr
	...

00400508 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40050c:	4604      	mov	r4, r0
  40050e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400510:	4b0e      	ldr	r3, [pc, #56]	; (40054c <pio_handler_process+0x44>)
  400512:	4798      	blx	r3
  400514:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400516:	4620      	mov	r0, r4
  400518:	4b0d      	ldr	r3, [pc, #52]	; (400550 <pio_handler_process+0x48>)
  40051a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40051c:	4005      	ands	r5, r0
  40051e:	d013      	beq.n	400548 <pio_handler_process+0x40>
  400520:	4c0c      	ldr	r4, [pc, #48]	; (400554 <pio_handler_process+0x4c>)
  400522:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400526:	e003      	b.n	400530 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400528:	42b4      	cmp	r4, r6
  40052a:	d00d      	beq.n	400548 <pio_handler_process+0x40>
  40052c:	3410      	adds	r4, #16
		while (status != 0) {
  40052e:	b15d      	cbz	r5, 400548 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400530:	6820      	ldr	r0, [r4, #0]
  400532:	4540      	cmp	r0, r8
  400534:	d1f8      	bne.n	400528 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400536:	6861      	ldr	r1, [r4, #4]
  400538:	4229      	tst	r1, r5
  40053a:	d0f5      	beq.n	400528 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40053c:	68e3      	ldr	r3, [r4, #12]
  40053e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400540:	6863      	ldr	r3, [r4, #4]
  400542:	ea25 0503 	bic.w	r5, r5, r3
  400546:	e7ef      	b.n	400528 <pio_handler_process+0x20>
  400548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40054c:	004004ff 	.word	0x004004ff
  400550:	00400503 	.word	0x00400503
  400554:	204009d4 	.word	0x204009d4

00400558 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400558:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40055a:	210a      	movs	r1, #10
  40055c:	4801      	ldr	r0, [pc, #4]	; (400564 <PIOA_Handler+0xc>)
  40055e:	4b02      	ldr	r3, [pc, #8]	; (400568 <PIOA_Handler+0x10>)
  400560:	4798      	blx	r3
  400562:	bd08      	pop	{r3, pc}
  400564:	400e0e00 	.word	0x400e0e00
  400568:	00400509 	.word	0x00400509

0040056c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40056c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40056e:	210b      	movs	r1, #11
  400570:	4801      	ldr	r0, [pc, #4]	; (400578 <PIOB_Handler+0xc>)
  400572:	4b02      	ldr	r3, [pc, #8]	; (40057c <PIOB_Handler+0x10>)
  400574:	4798      	blx	r3
  400576:	bd08      	pop	{r3, pc}
  400578:	400e1000 	.word	0x400e1000
  40057c:	00400509 	.word	0x00400509

00400580 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400580:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400582:	210c      	movs	r1, #12
  400584:	4801      	ldr	r0, [pc, #4]	; (40058c <PIOC_Handler+0xc>)
  400586:	4b02      	ldr	r3, [pc, #8]	; (400590 <PIOC_Handler+0x10>)
  400588:	4798      	blx	r3
  40058a:	bd08      	pop	{r3, pc}
  40058c:	400e1200 	.word	0x400e1200
  400590:	00400509 	.word	0x00400509

00400594 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400594:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400596:	2110      	movs	r1, #16
  400598:	4801      	ldr	r0, [pc, #4]	; (4005a0 <PIOD_Handler+0xc>)
  40059a:	4b02      	ldr	r3, [pc, #8]	; (4005a4 <PIOD_Handler+0x10>)
  40059c:	4798      	blx	r3
  40059e:	bd08      	pop	{r3, pc}
  4005a0:	400e1400 	.word	0x400e1400
  4005a4:	00400509 	.word	0x00400509

004005a8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4005a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4005aa:	2111      	movs	r1, #17
  4005ac:	4801      	ldr	r0, [pc, #4]	; (4005b4 <PIOE_Handler+0xc>)
  4005ae:	4b02      	ldr	r3, [pc, #8]	; (4005b8 <PIOE_Handler+0x10>)
  4005b0:	4798      	blx	r3
  4005b2:	bd08      	pop	{r3, pc}
  4005b4:	400e1600 	.word	0x400e1600
  4005b8:	00400509 	.word	0x00400509

004005bc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4005bc:	2803      	cmp	r0, #3
  4005be:	d011      	beq.n	4005e4 <pmc_mck_set_division+0x28>
  4005c0:	2804      	cmp	r0, #4
  4005c2:	d012      	beq.n	4005ea <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4005c4:	2802      	cmp	r0, #2
  4005c6:	bf0c      	ite	eq
  4005c8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4005cc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4005ce:	4a08      	ldr	r2, [pc, #32]	; (4005f0 <pmc_mck_set_division+0x34>)
  4005d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4005d6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4005d8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4005da:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005dc:	f013 0f08 	tst.w	r3, #8
  4005e0:	d0fb      	beq.n	4005da <pmc_mck_set_division+0x1e>
}
  4005e2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4005e4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4005e8:	e7f1      	b.n	4005ce <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4005ee:	e7ee      	b.n	4005ce <pmc_mck_set_division+0x12>
  4005f0:	400e0600 	.word	0x400e0600

004005f4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005f4:	4a17      	ldr	r2, [pc, #92]	; (400654 <pmc_switch_mck_to_pllack+0x60>)
  4005f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005fc:	4318      	orrs	r0, r3
  4005fe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400600:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400602:	f013 0f08 	tst.w	r3, #8
  400606:	d10a      	bne.n	40061e <pmc_switch_mck_to_pllack+0x2a>
  400608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40060c:	4911      	ldr	r1, [pc, #68]	; (400654 <pmc_switch_mck_to_pllack+0x60>)
  40060e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400610:	f012 0f08 	tst.w	r2, #8
  400614:	d103      	bne.n	40061e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400616:	3b01      	subs	r3, #1
  400618:	d1f9      	bne.n	40060e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40061a:	2001      	movs	r0, #1
  40061c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40061e:	4a0d      	ldr	r2, [pc, #52]	; (400654 <pmc_switch_mck_to_pllack+0x60>)
  400620:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400622:	f023 0303 	bic.w	r3, r3, #3
  400626:	f043 0302 	orr.w	r3, r3, #2
  40062a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40062c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40062e:	f013 0f08 	tst.w	r3, #8
  400632:	d10a      	bne.n	40064a <pmc_switch_mck_to_pllack+0x56>
  400634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400638:	4906      	ldr	r1, [pc, #24]	; (400654 <pmc_switch_mck_to_pllack+0x60>)
  40063a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40063c:	f012 0f08 	tst.w	r2, #8
  400640:	d105      	bne.n	40064e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400642:	3b01      	subs	r3, #1
  400644:	d1f9      	bne.n	40063a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400646:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400648:	4770      	bx	lr
	return 0;
  40064a:	2000      	movs	r0, #0
  40064c:	4770      	bx	lr
  40064e:	2000      	movs	r0, #0
  400650:	4770      	bx	lr
  400652:	bf00      	nop
  400654:	400e0600 	.word	0x400e0600

00400658 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400658:	b9a0      	cbnz	r0, 400684 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40065a:	480e      	ldr	r0, [pc, #56]	; (400694 <pmc_switch_mainck_to_xtal+0x3c>)
  40065c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40065e:	0209      	lsls	r1, r1, #8
  400660:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400662:	4a0d      	ldr	r2, [pc, #52]	; (400698 <pmc_switch_mainck_to_xtal+0x40>)
  400664:	401a      	ands	r2, r3
  400666:	4b0d      	ldr	r3, [pc, #52]	; (40069c <pmc_switch_mainck_to_xtal+0x44>)
  400668:	4313      	orrs	r3, r2
  40066a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40066c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40066e:	4602      	mov	r2, r0
  400670:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400672:	f013 0f01 	tst.w	r3, #1
  400676:	d0fb      	beq.n	400670 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400678:	4a06      	ldr	r2, [pc, #24]	; (400694 <pmc_switch_mainck_to_xtal+0x3c>)
  40067a:	6a11      	ldr	r1, [r2, #32]
  40067c:	4b08      	ldr	r3, [pc, #32]	; (4006a0 <pmc_switch_mainck_to_xtal+0x48>)
  40067e:	430b      	orrs	r3, r1
  400680:	6213      	str	r3, [r2, #32]
  400682:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400684:	4903      	ldr	r1, [pc, #12]	; (400694 <pmc_switch_mainck_to_xtal+0x3c>)
  400686:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400688:	4a06      	ldr	r2, [pc, #24]	; (4006a4 <pmc_switch_mainck_to_xtal+0x4c>)
  40068a:	401a      	ands	r2, r3
  40068c:	4b06      	ldr	r3, [pc, #24]	; (4006a8 <pmc_switch_mainck_to_xtal+0x50>)
  40068e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400690:	620b      	str	r3, [r1, #32]
  400692:	4770      	bx	lr
  400694:	400e0600 	.word	0x400e0600
  400698:	ffc8fffc 	.word	0xffc8fffc
  40069c:	00370001 	.word	0x00370001
  4006a0:	01370000 	.word	0x01370000
  4006a4:	fec8fffc 	.word	0xfec8fffc
  4006a8:	01370002 	.word	0x01370002

004006ac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4006ac:	4b02      	ldr	r3, [pc, #8]	; (4006b8 <pmc_osc_is_ready_mainck+0xc>)
  4006ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006b0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4006b4:	4770      	bx	lr
  4006b6:	bf00      	nop
  4006b8:	400e0600 	.word	0x400e0600

004006bc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4006bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4006c0:	4b01      	ldr	r3, [pc, #4]	; (4006c8 <pmc_disable_pllack+0xc>)
  4006c2:	629a      	str	r2, [r3, #40]	; 0x28
  4006c4:	4770      	bx	lr
  4006c6:	bf00      	nop
  4006c8:	400e0600 	.word	0x400e0600

004006cc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4006cc:	4b02      	ldr	r3, [pc, #8]	; (4006d8 <pmc_is_locked_pllack+0xc>)
  4006ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006d0:	f000 0002 	and.w	r0, r0, #2
  4006d4:	4770      	bx	lr
  4006d6:	bf00      	nop
  4006d8:	400e0600 	.word	0x400e0600

004006dc <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4006dc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4006e0:	4b05      	ldr	r3, [pc, #20]	; (4006f8 <pmc_enable_periph_clk+0x1c>)
  4006e2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4006e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4006ea:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4006ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4006f2:	2000      	movs	r0, #0
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	400e0600 	.word	0x400e0600

004006fc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4006fc:	6943      	ldr	r3, [r0, #20]
  4006fe:	f013 0f02 	tst.w	r3, #2
  400702:	d002      	beq.n	40070a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400704:	61c1      	str	r1, [r0, #28]
	return 0;
  400706:	2000      	movs	r0, #0
  400708:	4770      	bx	lr
		return 1;
  40070a:	2001      	movs	r0, #1
}
  40070c:	4770      	bx	lr

0040070e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40070e:	6943      	ldr	r3, [r0, #20]
  400710:	f013 0f01 	tst.w	r3, #1
  400714:	d003      	beq.n	40071e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400716:	6983      	ldr	r3, [r0, #24]
  400718:	700b      	strb	r3, [r1, #0]
	return 0;
  40071a:	2000      	movs	r0, #0
  40071c:	4770      	bx	lr
		return 1;
  40071e:	2001      	movs	r0, #1
}
  400720:	4770      	bx	lr

00400722 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400722:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400724:	010b      	lsls	r3, r1, #4
  400726:	4293      	cmp	r3, r2
  400728:	d914      	bls.n	400754 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40072a:	00c9      	lsls	r1, r1, #3
  40072c:	084b      	lsrs	r3, r1, #1
  40072e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400732:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400736:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400738:	1e5c      	subs	r4, r3, #1
  40073a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40073e:	428c      	cmp	r4, r1
  400740:	d901      	bls.n	400746 <usart_set_async_baudrate+0x24>
		return 1;
  400742:	2001      	movs	r0, #1
  400744:	e017      	b.n	400776 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400746:	6841      	ldr	r1, [r0, #4]
  400748:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40074c:	6041      	str	r1, [r0, #4]
  40074e:	e00c      	b.n	40076a <usart_set_async_baudrate+0x48>
		return 1;
  400750:	2001      	movs	r0, #1
  400752:	e010      	b.n	400776 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400754:	0859      	lsrs	r1, r3, #1
  400756:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40075a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40075e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400760:	1e5c      	subs	r4, r3, #1
  400762:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400766:	428c      	cmp	r4, r1
  400768:	d8f2      	bhi.n	400750 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40076a:	0412      	lsls	r2, r2, #16
  40076c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400770:	431a      	orrs	r2, r3
  400772:	6202      	str	r2, [r0, #32]

	return 0;
  400774:	2000      	movs	r0, #0
}
  400776:	f85d 4b04 	ldr.w	r4, [sp], #4
  40077a:	4770      	bx	lr

0040077c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40077c:	4b08      	ldr	r3, [pc, #32]	; (4007a0 <usart_reset+0x24>)
  40077e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400782:	2300      	movs	r3, #0
  400784:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400786:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400788:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40078a:	2388      	movs	r3, #136	; 0x88
  40078c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40078e:	2324      	movs	r3, #36	; 0x24
  400790:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400792:	f44f 7380 	mov.w	r3, #256	; 0x100
  400796:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400798:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40079c:	6003      	str	r3, [r0, #0]
  40079e:	4770      	bx	lr
  4007a0:	55534100 	.word	0x55534100

004007a4 <usart_init_rs232>:
{
  4007a4:	b570      	push	{r4, r5, r6, lr}
  4007a6:	4605      	mov	r5, r0
  4007a8:	460c      	mov	r4, r1
  4007aa:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4007ac:	4b0f      	ldr	r3, [pc, #60]	; (4007ec <usart_init_rs232+0x48>)
  4007ae:	4798      	blx	r3
	ul_reg_val = 0;
  4007b0:	2200      	movs	r2, #0
  4007b2:	4b0f      	ldr	r3, [pc, #60]	; (4007f0 <usart_init_rs232+0x4c>)
  4007b4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4007b6:	b1a4      	cbz	r4, 4007e2 <usart_init_rs232+0x3e>
  4007b8:	4632      	mov	r2, r6
  4007ba:	6821      	ldr	r1, [r4, #0]
  4007bc:	4628      	mov	r0, r5
  4007be:	4b0d      	ldr	r3, [pc, #52]	; (4007f4 <usart_init_rs232+0x50>)
  4007c0:	4798      	blx	r3
  4007c2:	4602      	mov	r2, r0
  4007c4:	b978      	cbnz	r0, 4007e6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007c6:	6863      	ldr	r3, [r4, #4]
  4007c8:	68a1      	ldr	r1, [r4, #8]
  4007ca:	430b      	orrs	r3, r1
  4007cc:	6921      	ldr	r1, [r4, #16]
  4007ce:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007d0:	68e1      	ldr	r1, [r4, #12]
  4007d2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007d4:	4906      	ldr	r1, [pc, #24]	; (4007f0 <usart_init_rs232+0x4c>)
  4007d6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4007d8:	6869      	ldr	r1, [r5, #4]
  4007da:	430b      	orrs	r3, r1
  4007dc:	606b      	str	r3, [r5, #4]
}
  4007de:	4610      	mov	r0, r2
  4007e0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4007e2:	2201      	movs	r2, #1
  4007e4:	e7fb      	b.n	4007de <usart_init_rs232+0x3a>
  4007e6:	2201      	movs	r2, #1
  4007e8:	e7f9      	b.n	4007de <usart_init_rs232+0x3a>
  4007ea:	bf00      	nop
  4007ec:	0040077d 	.word	0x0040077d
  4007f0:	20400a44 	.word	0x20400a44
  4007f4:	00400723 	.word	0x00400723

004007f8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4007f8:	2340      	movs	r3, #64	; 0x40
  4007fa:	6003      	str	r3, [r0, #0]
  4007fc:	4770      	bx	lr

004007fe <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4007fe:	2310      	movs	r3, #16
  400800:	6003      	str	r3, [r0, #0]
  400802:	4770      	bx	lr

00400804 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400804:	6943      	ldr	r3, [r0, #20]
  400806:	f013 0f02 	tst.w	r3, #2
  40080a:	d004      	beq.n	400816 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40080c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400810:	61c1      	str	r1, [r0, #28]
	return 0;
  400812:	2000      	movs	r0, #0
  400814:	4770      	bx	lr
		return 1;
  400816:	2001      	movs	r0, #1
}
  400818:	4770      	bx	lr

0040081a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40081a:	6943      	ldr	r3, [r0, #20]
  40081c:	f013 0f01 	tst.w	r3, #1
  400820:	d005      	beq.n	40082e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400822:	6983      	ldr	r3, [r0, #24]
  400824:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400828:	600b      	str	r3, [r1, #0]
	return 0;
  40082a:	2000      	movs	r0, #0
  40082c:	4770      	bx	lr
		return 1;
  40082e:	2001      	movs	r0, #1
}
  400830:	4770      	bx	lr

00400832 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400832:	e7fe      	b.n	400832 <Dummy_Handler>

00400834 <Reset_Handler>:
{
  400834:	b500      	push	{lr}
  400836:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400838:	4b25      	ldr	r3, [pc, #148]	; (4008d0 <Reset_Handler+0x9c>)
  40083a:	4a26      	ldr	r2, [pc, #152]	; (4008d4 <Reset_Handler+0xa0>)
  40083c:	429a      	cmp	r2, r3
  40083e:	d010      	beq.n	400862 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400840:	4b25      	ldr	r3, [pc, #148]	; (4008d8 <Reset_Handler+0xa4>)
  400842:	4a23      	ldr	r2, [pc, #140]	; (4008d0 <Reset_Handler+0x9c>)
  400844:	429a      	cmp	r2, r3
  400846:	d20c      	bcs.n	400862 <Reset_Handler+0x2e>
  400848:	3b01      	subs	r3, #1
  40084a:	1a9b      	subs	r3, r3, r2
  40084c:	f023 0303 	bic.w	r3, r3, #3
  400850:	3304      	adds	r3, #4
  400852:	4413      	add	r3, r2
  400854:	491f      	ldr	r1, [pc, #124]	; (4008d4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400856:	f851 0b04 	ldr.w	r0, [r1], #4
  40085a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40085e:	429a      	cmp	r2, r3
  400860:	d1f9      	bne.n	400856 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400862:	4b1e      	ldr	r3, [pc, #120]	; (4008dc <Reset_Handler+0xa8>)
  400864:	4a1e      	ldr	r2, [pc, #120]	; (4008e0 <Reset_Handler+0xac>)
  400866:	429a      	cmp	r2, r3
  400868:	d20a      	bcs.n	400880 <Reset_Handler+0x4c>
  40086a:	3b01      	subs	r3, #1
  40086c:	1a9b      	subs	r3, r3, r2
  40086e:	f023 0303 	bic.w	r3, r3, #3
  400872:	3304      	adds	r3, #4
  400874:	4413      	add	r3, r2
                *pDest++ = 0;
  400876:	2100      	movs	r1, #0
  400878:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40087c:	4293      	cmp	r3, r2
  40087e:	d1fb      	bne.n	400878 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400880:	4a18      	ldr	r2, [pc, #96]	; (4008e4 <Reset_Handler+0xb0>)
  400882:	4b19      	ldr	r3, [pc, #100]	; (4008e8 <Reset_Handler+0xb4>)
  400884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400888:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40088a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40088e:	fab3 f383 	clz	r3, r3
  400892:	095b      	lsrs	r3, r3, #5
  400894:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400896:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400898:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40089c:	2200      	movs	r2, #0
  40089e:	4b13      	ldr	r3, [pc, #76]	; (4008ec <Reset_Handler+0xb8>)
  4008a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008a2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008a4:	4a12      	ldr	r2, [pc, #72]	; (4008f0 <Reset_Handler+0xbc>)
  4008a6:	6813      	ldr	r3, [r2, #0]
  4008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4008ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008b2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008b6:	b129      	cbz	r1, 4008c4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4008b8:	2201      	movs	r2, #1
  4008ba:	4b0c      	ldr	r3, [pc, #48]	; (4008ec <Reset_Handler+0xb8>)
  4008bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4008be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008c2:	b662      	cpsie	i
        __libc_init_array();
  4008c4:	4b0b      	ldr	r3, [pc, #44]	; (4008f4 <Reset_Handler+0xc0>)
  4008c6:	4798      	blx	r3
        main();
  4008c8:	4b0b      	ldr	r3, [pc, #44]	; (4008f8 <Reset_Handler+0xc4>)
  4008ca:	4798      	blx	r3
  4008cc:	e7fe      	b.n	4008cc <Reset_Handler+0x98>
  4008ce:	bf00      	nop
  4008d0:	20400000 	.word	0x20400000
  4008d4:	00405d20 	.word	0x00405d20
  4008d8:	204009b8 	.word	0x204009b8
  4008dc:	20400c3c 	.word	0x20400c3c
  4008e0:	204009b8 	.word	0x204009b8
  4008e4:	e000ed00 	.word	0xe000ed00
  4008e8:	00400000 	.word	0x00400000
  4008ec:	20400000 	.word	0x20400000
  4008f0:	e000ed88 	.word	0xe000ed88
  4008f4:	00402b11 	.word	0x00402b11
  4008f8:	004029fd 	.word	0x004029fd

004008fc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4008fc:	4b3b      	ldr	r3, [pc, #236]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  4008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400900:	f003 0303 	and.w	r3, r3, #3
  400904:	2b01      	cmp	r3, #1
  400906:	d01d      	beq.n	400944 <SystemCoreClockUpdate+0x48>
  400908:	b183      	cbz	r3, 40092c <SystemCoreClockUpdate+0x30>
  40090a:	2b02      	cmp	r3, #2
  40090c:	d036      	beq.n	40097c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40090e:	4b37      	ldr	r3, [pc, #220]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  400910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400912:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400916:	2b70      	cmp	r3, #112	; 0x70
  400918:	d05f      	beq.n	4009da <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40091a:	4b34      	ldr	r3, [pc, #208]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40091c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40091e:	4934      	ldr	r1, [pc, #208]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400920:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400924:	680b      	ldr	r3, [r1, #0]
  400926:	40d3      	lsrs	r3, r2
  400928:	600b      	str	r3, [r1, #0]
  40092a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40092c:	4b31      	ldr	r3, [pc, #196]	; (4009f4 <SystemCoreClockUpdate+0xf8>)
  40092e:	695b      	ldr	r3, [r3, #20]
  400930:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400934:	bf14      	ite	ne
  400936:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40093a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40093e:	4b2c      	ldr	r3, [pc, #176]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400940:	601a      	str	r2, [r3, #0]
  400942:	e7e4      	b.n	40090e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400944:	4b29      	ldr	r3, [pc, #164]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  400946:	6a1b      	ldr	r3, [r3, #32]
  400948:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40094c:	d003      	beq.n	400956 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40094e:	4a2a      	ldr	r2, [pc, #168]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  400950:	4b27      	ldr	r3, [pc, #156]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400952:	601a      	str	r2, [r3, #0]
  400954:	e7db      	b.n	40090e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400956:	4a29      	ldr	r2, [pc, #164]	; (4009fc <SystemCoreClockUpdate+0x100>)
  400958:	4b25      	ldr	r3, [pc, #148]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  40095a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40095c:	4b23      	ldr	r3, [pc, #140]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40095e:	6a1b      	ldr	r3, [r3, #32]
  400960:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400964:	2b10      	cmp	r3, #16
  400966:	d005      	beq.n	400974 <SystemCoreClockUpdate+0x78>
  400968:	2b20      	cmp	r3, #32
  40096a:	d1d0      	bne.n	40090e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40096c:	4a22      	ldr	r2, [pc, #136]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  40096e:	4b20      	ldr	r3, [pc, #128]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400970:	601a      	str	r2, [r3, #0]
          break;
  400972:	e7cc      	b.n	40090e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400974:	4a22      	ldr	r2, [pc, #136]	; (400a00 <SystemCoreClockUpdate+0x104>)
  400976:	4b1e      	ldr	r3, [pc, #120]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400978:	601a      	str	r2, [r3, #0]
          break;
  40097a:	e7c8      	b.n	40090e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40097c:	4b1b      	ldr	r3, [pc, #108]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40097e:	6a1b      	ldr	r3, [r3, #32]
  400980:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400984:	d016      	beq.n	4009b4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400986:	4a1c      	ldr	r2, [pc, #112]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  400988:	4b19      	ldr	r3, [pc, #100]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  40098a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40098c:	4b17      	ldr	r3, [pc, #92]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400990:	f003 0303 	and.w	r3, r3, #3
  400994:	2b02      	cmp	r3, #2
  400996:	d1ba      	bne.n	40090e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400998:	4a14      	ldr	r2, [pc, #80]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40099a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40099c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40099e:	4814      	ldr	r0, [pc, #80]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009a0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4009a4:	6803      	ldr	r3, [r0, #0]
  4009a6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009aa:	b2d2      	uxtb	r2, r2
  4009ac:	fbb3 f3f2 	udiv	r3, r3, r2
  4009b0:	6003      	str	r3, [r0, #0]
  4009b2:	e7ac      	b.n	40090e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009b4:	4a11      	ldr	r2, [pc, #68]	; (4009fc <SystemCoreClockUpdate+0x100>)
  4009b6:	4b0e      	ldr	r3, [pc, #56]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009b8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4009ba:	4b0c      	ldr	r3, [pc, #48]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  4009bc:	6a1b      	ldr	r3, [r3, #32]
  4009be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009c2:	2b10      	cmp	r3, #16
  4009c4:	d005      	beq.n	4009d2 <SystemCoreClockUpdate+0xd6>
  4009c6:	2b20      	cmp	r3, #32
  4009c8:	d1e0      	bne.n	40098c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4009ca:	4a0b      	ldr	r2, [pc, #44]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  4009cc:	4b08      	ldr	r3, [pc, #32]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009ce:	601a      	str	r2, [r3, #0]
          break;
  4009d0:	e7dc      	b.n	40098c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4009d2:	4a0b      	ldr	r2, [pc, #44]	; (400a00 <SystemCoreClockUpdate+0x104>)
  4009d4:	4b06      	ldr	r3, [pc, #24]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009d6:	601a      	str	r2, [r3, #0]
          break;
  4009d8:	e7d8      	b.n	40098c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4009da:	4a05      	ldr	r2, [pc, #20]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009dc:	6813      	ldr	r3, [r2, #0]
  4009de:	4909      	ldr	r1, [pc, #36]	; (400a04 <SystemCoreClockUpdate+0x108>)
  4009e0:	fba1 1303 	umull	r1, r3, r1, r3
  4009e4:	085b      	lsrs	r3, r3, #1
  4009e6:	6013      	str	r3, [r2, #0]
  4009e8:	4770      	bx	lr
  4009ea:	bf00      	nop
  4009ec:	400e0600 	.word	0x400e0600
  4009f0:	20400004 	.word	0x20400004
  4009f4:	400e1810 	.word	0x400e1810
  4009f8:	00b71b00 	.word	0x00b71b00
  4009fc:	003d0900 	.word	0x003d0900
  400a00:	007a1200 	.word	0x007a1200
  400a04:	aaaaaaab 	.word	0xaaaaaaab

00400a08 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a08:	4b16      	ldr	r3, [pc, #88]	; (400a64 <system_init_flash+0x5c>)
  400a0a:	4298      	cmp	r0, r3
  400a0c:	d913      	bls.n	400a36 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a0e:	4b16      	ldr	r3, [pc, #88]	; (400a68 <system_init_flash+0x60>)
  400a10:	4298      	cmp	r0, r3
  400a12:	d915      	bls.n	400a40 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a14:	4b15      	ldr	r3, [pc, #84]	; (400a6c <system_init_flash+0x64>)
  400a16:	4298      	cmp	r0, r3
  400a18:	d916      	bls.n	400a48 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a1a:	4b15      	ldr	r3, [pc, #84]	; (400a70 <system_init_flash+0x68>)
  400a1c:	4298      	cmp	r0, r3
  400a1e:	d917      	bls.n	400a50 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a20:	4b14      	ldr	r3, [pc, #80]	; (400a74 <system_init_flash+0x6c>)
  400a22:	4298      	cmp	r0, r3
  400a24:	d918      	bls.n	400a58 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400a26:	4b14      	ldr	r3, [pc, #80]	; (400a78 <system_init_flash+0x70>)
  400a28:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a2a:	bf94      	ite	ls
  400a2c:	4a13      	ldrls	r2, [pc, #76]	; (400a7c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400a2e:	4a14      	ldrhi	r2, [pc, #80]	; (400a80 <system_init_flash+0x78>)
  400a30:	4b14      	ldr	r3, [pc, #80]	; (400a84 <system_init_flash+0x7c>)
  400a32:	601a      	str	r2, [r3, #0]
  400a34:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a3a:	4b12      	ldr	r3, [pc, #72]	; (400a84 <system_init_flash+0x7c>)
  400a3c:	601a      	str	r2, [r3, #0]
  400a3e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a40:	4a11      	ldr	r2, [pc, #68]	; (400a88 <system_init_flash+0x80>)
  400a42:	4b10      	ldr	r3, [pc, #64]	; (400a84 <system_init_flash+0x7c>)
  400a44:	601a      	str	r2, [r3, #0]
  400a46:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a48:	4a10      	ldr	r2, [pc, #64]	; (400a8c <system_init_flash+0x84>)
  400a4a:	4b0e      	ldr	r3, [pc, #56]	; (400a84 <system_init_flash+0x7c>)
  400a4c:	601a      	str	r2, [r3, #0]
  400a4e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a50:	4a0f      	ldr	r2, [pc, #60]	; (400a90 <system_init_flash+0x88>)
  400a52:	4b0c      	ldr	r3, [pc, #48]	; (400a84 <system_init_flash+0x7c>)
  400a54:	601a      	str	r2, [r3, #0]
  400a56:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a58:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400a5c:	4b09      	ldr	r3, [pc, #36]	; (400a84 <system_init_flash+0x7c>)
  400a5e:	601a      	str	r2, [r3, #0]
  400a60:	4770      	bx	lr
  400a62:	bf00      	nop
  400a64:	015ef3bf 	.word	0x015ef3bf
  400a68:	02bde77f 	.word	0x02bde77f
  400a6c:	041cdb3f 	.word	0x041cdb3f
  400a70:	057bceff 	.word	0x057bceff
  400a74:	06dac2bf 	.word	0x06dac2bf
  400a78:	0839b67f 	.word	0x0839b67f
  400a7c:	04000500 	.word	0x04000500
  400a80:	04000600 	.word	0x04000600
  400a84:	400e0c00 	.word	0x400e0c00
  400a88:	04000100 	.word	0x04000100
  400a8c:	04000200 	.word	0x04000200
  400a90:	04000300 	.word	0x04000300

00400a94 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a94:	4b0a      	ldr	r3, [pc, #40]	; (400ac0 <_sbrk+0x2c>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	b153      	cbz	r3, 400ab0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400a9a:	4b09      	ldr	r3, [pc, #36]	; (400ac0 <_sbrk+0x2c>)
  400a9c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400a9e:	181a      	adds	r2, r3, r0
  400aa0:	4908      	ldr	r1, [pc, #32]	; (400ac4 <_sbrk+0x30>)
  400aa2:	4291      	cmp	r1, r2
  400aa4:	db08      	blt.n	400ab8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400aa6:	4610      	mov	r0, r2
  400aa8:	4a05      	ldr	r2, [pc, #20]	; (400ac0 <_sbrk+0x2c>)
  400aaa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400aac:	4618      	mov	r0, r3
  400aae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ab0:	4a05      	ldr	r2, [pc, #20]	; (400ac8 <_sbrk+0x34>)
  400ab2:	4b03      	ldr	r3, [pc, #12]	; (400ac0 <_sbrk+0x2c>)
  400ab4:	601a      	str	r2, [r3, #0]
  400ab6:	e7f0      	b.n	400a9a <_sbrk+0x6>
		return (caddr_t) -1;	
  400ab8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400abc:	4770      	bx	lr
  400abe:	bf00      	nop
  400ac0:	20400a48 	.word	0x20400a48
  400ac4:	2045fffc 	.word	0x2045fffc
  400ac8:	20402e40 	.word	0x20402e40

00400acc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400acc:	f04f 30ff 	mov.w	r0, #4294967295
  400ad0:	4770      	bx	lr

00400ad2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400ad6:	604b      	str	r3, [r1, #4]

	return 0;
}
  400ad8:	2000      	movs	r0, #0
  400ada:	4770      	bx	lr

00400adc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400adc:	2001      	movs	r0, #1
  400ade:	4770      	bx	lr

00400ae0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400ae0:	2000      	movs	r0, #0
  400ae2:	4770      	bx	lr

00400ae4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ae4:	f100 0308 	add.w	r3, r0, #8
  400ae8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400aea:	f04f 32ff 	mov.w	r2, #4294967295
  400aee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400af0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400af2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400af4:	2300      	movs	r3, #0
  400af6:	6003      	str	r3, [r0, #0]
  400af8:	4770      	bx	lr

00400afa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400afa:	2300      	movs	r3, #0
  400afc:	6103      	str	r3, [r0, #16]
  400afe:	4770      	bx	lr

00400b00 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400b00:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400b02:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400b04:	689a      	ldr	r2, [r3, #8]
  400b06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400b08:	689a      	ldr	r2, [r3, #8]
  400b0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400b0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b10:	6803      	ldr	r3, [r0, #0]
  400b12:	3301      	adds	r3, #1
  400b14:	6003      	str	r3, [r0, #0]
  400b16:	4770      	bx	lr

00400b18 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400b18:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400b1a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400b1c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400b20:	d002      	beq.n	400b28 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b22:	f100 0208 	add.w	r2, r0, #8
  400b26:	e002      	b.n	400b2e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400b28:	6902      	ldr	r2, [r0, #16]
  400b2a:	e004      	b.n	400b36 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b2c:	461a      	mov	r2, r3
  400b2e:	6853      	ldr	r3, [r2, #4]
  400b30:	681c      	ldr	r4, [r3, #0]
  400b32:	42a5      	cmp	r5, r4
  400b34:	d2fa      	bcs.n	400b2c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400b36:	6853      	ldr	r3, [r2, #4]
  400b38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400b3a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400b3c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400b3e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b40:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b42:	6803      	ldr	r3, [r0, #0]
  400b44:	3301      	adds	r3, #1
  400b46:	6003      	str	r3, [r0, #0]
}
  400b48:	bc30      	pop	{r4, r5}
  400b4a:	4770      	bx	lr

00400b4c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400b4c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b4e:	6842      	ldr	r2, [r0, #4]
  400b50:	6881      	ldr	r1, [r0, #8]
  400b52:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b54:	6882      	ldr	r2, [r0, #8]
  400b56:	6841      	ldr	r1, [r0, #4]
  400b58:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400b5a:	685a      	ldr	r2, [r3, #4]
  400b5c:	4290      	cmp	r0, r2
  400b5e:	d006      	beq.n	400b6e <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400b60:	2200      	movs	r2, #0
  400b62:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400b64:	681a      	ldr	r2, [r3, #0]
  400b66:	3a01      	subs	r2, #1
  400b68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400b6a:	6818      	ldr	r0, [r3, #0]
}
  400b6c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b6e:	6882      	ldr	r2, [r0, #8]
  400b70:	605a      	str	r2, [r3, #4]
  400b72:	e7f5      	b.n	400b60 <uxListRemove+0x14>

00400b74 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400b74:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400b76:	2300      	movs	r3, #0
  400b78:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400b7a:	4b0f      	ldr	r3, [pc, #60]	; (400bb8 <prvTaskExitError+0x44>)
  400b7c:	681b      	ldr	r3, [r3, #0]
  400b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b82:	d00a      	beq.n	400b9a <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400b84:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b88:	b672      	cpsid	i
  400b8a:	f383 8811 	msr	BASEPRI, r3
  400b8e:	f3bf 8f6f 	isb	sy
  400b92:	f3bf 8f4f 	dsb	sy
  400b96:	b662      	cpsie	i
  400b98:	e7fe      	b.n	400b98 <prvTaskExitError+0x24>
  400b9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b9e:	b672      	cpsid	i
  400ba0:	f383 8811 	msr	BASEPRI, r3
  400ba4:	f3bf 8f6f 	isb	sy
  400ba8:	f3bf 8f4f 	dsb	sy
  400bac:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  400bae:	9b01      	ldr	r3, [sp, #4]
  400bb0:	2b00      	cmp	r3, #0
  400bb2:	d0fc      	beq.n	400bae <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  400bb4:	b002      	add	sp, #8
  400bb6:	4770      	bx	lr
  400bb8:	20400008 	.word	0x20400008

00400bbc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  400bbc:	4808      	ldr	r0, [pc, #32]	; (400be0 <prvPortStartFirstTask+0x24>)
  400bbe:	6800      	ldr	r0, [r0, #0]
  400bc0:	6800      	ldr	r0, [r0, #0]
  400bc2:	f380 8808 	msr	MSP, r0
  400bc6:	f04f 0000 	mov.w	r0, #0
  400bca:	f380 8814 	msr	CONTROL, r0
  400bce:	b662      	cpsie	i
  400bd0:	b661      	cpsie	f
  400bd2:	f3bf 8f4f 	dsb	sy
  400bd6:	f3bf 8f6f 	isb	sy
  400bda:	df00      	svc	0
  400bdc:	bf00      	nop
  400bde:	0000      	.short	0x0000
  400be0:	e000ed08 	.word	0xe000ed08

00400be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400bf4 <vPortEnableVFP+0x10>
  400be8:	6801      	ldr	r1, [r0, #0]
  400bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400bee:	6001      	str	r1, [r0, #0]
  400bf0:	4770      	bx	lr
  400bf2:	0000      	.short	0x0000
  400bf4:	e000ed88 	.word	0xe000ed88

00400bf8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400bfc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400c00:	f021 0101 	bic.w	r1, r1, #1
  400c04:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400c08:	4b05      	ldr	r3, [pc, #20]	; (400c20 <pxPortInitialiseStack+0x28>)
  400c0a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400c0e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  400c12:	f06f 0302 	mvn.w	r3, #2
  400c16:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400c1a:	3844      	subs	r0, #68	; 0x44
  400c1c:	4770      	bx	lr
  400c1e:	bf00      	nop
  400c20:	00400b75 	.word	0x00400b75
	...

00400c30 <SVC_Handler>:
	__asm volatile (
  400c30:	4b07      	ldr	r3, [pc, #28]	; (400c50 <pxCurrentTCBConst2>)
  400c32:	6819      	ldr	r1, [r3, #0]
  400c34:	6808      	ldr	r0, [r1, #0]
  400c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c3a:	f380 8809 	msr	PSP, r0
  400c3e:	f3bf 8f6f 	isb	sy
  400c42:	f04f 0000 	mov.w	r0, #0
  400c46:	f380 8811 	msr	BASEPRI, r0
  400c4a:	4770      	bx	lr
  400c4c:	f3af 8000 	nop.w

00400c50 <pxCurrentTCBConst2>:
  400c50:	20400a54 	.word	0x20400a54

00400c54 <vPortEnterCritical>:
  400c54:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c58:	b672      	cpsid	i
  400c5a:	f383 8811 	msr	BASEPRI, r3
  400c5e:	f3bf 8f6f 	isb	sy
  400c62:	f3bf 8f4f 	dsb	sy
  400c66:	b662      	cpsie	i
	uxCriticalNesting++;
  400c68:	4a0b      	ldr	r2, [pc, #44]	; (400c98 <vPortEnterCritical+0x44>)
  400c6a:	6813      	ldr	r3, [r2, #0]
  400c6c:	3301      	adds	r3, #1
  400c6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400c70:	2b01      	cmp	r3, #1
  400c72:	d10f      	bne.n	400c94 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400c74:	4b09      	ldr	r3, [pc, #36]	; (400c9c <vPortEnterCritical+0x48>)
  400c76:	681b      	ldr	r3, [r3, #0]
  400c78:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c7c:	d00a      	beq.n	400c94 <vPortEnterCritical+0x40>
  400c7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c82:	b672      	cpsid	i
  400c84:	f383 8811 	msr	BASEPRI, r3
  400c88:	f3bf 8f6f 	isb	sy
  400c8c:	f3bf 8f4f 	dsb	sy
  400c90:	b662      	cpsie	i
  400c92:	e7fe      	b.n	400c92 <vPortEnterCritical+0x3e>
  400c94:	4770      	bx	lr
  400c96:	bf00      	nop
  400c98:	20400008 	.word	0x20400008
  400c9c:	e000ed04 	.word	0xe000ed04

00400ca0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400ca0:	4b0a      	ldr	r3, [pc, #40]	; (400ccc <vPortExitCritical+0x2c>)
  400ca2:	681b      	ldr	r3, [r3, #0]
  400ca4:	b953      	cbnz	r3, 400cbc <vPortExitCritical+0x1c>
  400ca6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400caa:	b672      	cpsid	i
  400cac:	f383 8811 	msr	BASEPRI, r3
  400cb0:	f3bf 8f6f 	isb	sy
  400cb4:	f3bf 8f4f 	dsb	sy
  400cb8:	b662      	cpsie	i
  400cba:	e7fe      	b.n	400cba <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400cbc:	3b01      	subs	r3, #1
  400cbe:	4a03      	ldr	r2, [pc, #12]	; (400ccc <vPortExitCritical+0x2c>)
  400cc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400cc2:	b90b      	cbnz	r3, 400cc8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400cc4:	f383 8811 	msr	BASEPRI, r3
  400cc8:	4770      	bx	lr
  400cca:	bf00      	nop
  400ccc:	20400008 	.word	0x20400008

00400cd0 <PendSV_Handler>:
	__asm volatile
  400cd0:	f3ef 8009 	mrs	r0, PSP
  400cd4:	f3bf 8f6f 	isb	sy
  400cd8:	4b15      	ldr	r3, [pc, #84]	; (400d30 <pxCurrentTCBConst>)
  400cda:	681a      	ldr	r2, [r3, #0]
  400cdc:	f01e 0f10 	tst.w	lr, #16
  400ce0:	bf08      	it	eq
  400ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cea:	6010      	str	r0, [r2, #0]
  400cec:	e92d 0009 	stmdb	sp!, {r0, r3}
  400cf0:	f04f 0080 	mov.w	r0, #128	; 0x80
  400cf4:	b672      	cpsid	i
  400cf6:	f380 8811 	msr	BASEPRI, r0
  400cfa:	f3bf 8f4f 	dsb	sy
  400cfe:	f3bf 8f6f 	isb	sy
  400d02:	b662      	cpsie	i
  400d04:	f001 f87a 	bl	401dfc <vTaskSwitchContext>
  400d08:	f04f 0000 	mov.w	r0, #0
  400d0c:	f380 8811 	msr	BASEPRI, r0
  400d10:	bc09      	pop	{r0, r3}
  400d12:	6819      	ldr	r1, [r3, #0]
  400d14:	6808      	ldr	r0, [r1, #0]
  400d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d1a:	f01e 0f10 	tst.w	lr, #16
  400d1e:	bf08      	it	eq
  400d20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400d24:	f380 8809 	msr	PSP, r0
  400d28:	f3bf 8f6f 	isb	sy
  400d2c:	4770      	bx	lr
  400d2e:	bf00      	nop

00400d30 <pxCurrentTCBConst>:
  400d30:	20400a54 	.word	0x20400a54

00400d34 <SysTick_Handler>:
{
  400d34:	b508      	push	{r3, lr}
	__asm volatile
  400d36:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d3a:	b672      	cpsid	i
  400d3c:	f383 8811 	msr	BASEPRI, r3
  400d40:	f3bf 8f6f 	isb	sy
  400d44:	f3bf 8f4f 	dsb	sy
  400d48:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400d4a:	4b05      	ldr	r3, [pc, #20]	; (400d60 <SysTick_Handler+0x2c>)
  400d4c:	4798      	blx	r3
  400d4e:	b118      	cbz	r0, 400d58 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d54:	4b03      	ldr	r3, [pc, #12]	; (400d64 <SysTick_Handler+0x30>)
  400d56:	601a      	str	r2, [r3, #0]
	__asm volatile
  400d58:	2300      	movs	r3, #0
  400d5a:	f383 8811 	msr	BASEPRI, r3
  400d5e:	bd08      	pop	{r3, pc}
  400d60:	00401b41 	.word	0x00401b41
  400d64:	e000ed04 	.word	0xe000ed04

00400d68 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  400d68:	4b05      	ldr	r3, [pc, #20]	; (400d80 <vPortSetupTimerInterrupt+0x18>)
  400d6a:	2200      	movs	r2, #0
  400d6c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  400d6e:	4905      	ldr	r1, [pc, #20]	; (400d84 <vPortSetupTimerInterrupt+0x1c>)
  400d70:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400d72:	4905      	ldr	r1, [pc, #20]	; (400d88 <vPortSetupTimerInterrupt+0x20>)
  400d74:	4a05      	ldr	r2, [pc, #20]	; (400d8c <vPortSetupTimerInterrupt+0x24>)
  400d76:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400d78:	2207      	movs	r2, #7
  400d7a:	601a      	str	r2, [r3, #0]
  400d7c:	4770      	bx	lr
  400d7e:	bf00      	nop
  400d80:	e000e010 	.word	0xe000e010
  400d84:	e000e018 	.word	0xe000e018
  400d88:	0003a97f 	.word	0x0003a97f
  400d8c:	e000e014 	.word	0xe000e014

00400d90 <xPortStartScheduler>:
{
  400d90:	b510      	push	{r4, lr}
  400d92:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400d94:	4b2e      	ldr	r3, [pc, #184]	; (400e50 <xPortStartScheduler+0xc0>)
  400d96:	781a      	ldrb	r2, [r3, #0]
  400d98:	b2d2      	uxtb	r2, r2
  400d9a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400d9c:	22ff      	movs	r2, #255	; 0xff
  400d9e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400da0:	781b      	ldrb	r3, [r3, #0]
  400da2:	b2db      	uxtb	r3, r3
  400da4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400da8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400db0:	4a28      	ldr	r2, [pc, #160]	; (400e54 <xPortStartScheduler+0xc4>)
  400db2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400db4:	2207      	movs	r2, #7
  400db6:	4b28      	ldr	r3, [pc, #160]	; (400e58 <xPortStartScheduler+0xc8>)
  400db8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400dba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400dbe:	f013 0f80 	tst.w	r3, #128	; 0x80
  400dc2:	d012      	beq.n	400dea <xPortStartScheduler+0x5a>
  400dc4:	2306      	movs	r3, #6
  400dc6:	e000      	b.n	400dca <xPortStartScheduler+0x3a>
  400dc8:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400dca:	f89d 2003 	ldrb.w	r2, [sp, #3]
  400dce:	0052      	lsls	r2, r2, #1
  400dd0:	b2d2      	uxtb	r2, r2
  400dd2:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400dd6:	f89d 2003 	ldrb.w	r2, [sp, #3]
  400dda:	1e59      	subs	r1, r3, #1
  400ddc:	f012 0f80 	tst.w	r2, #128	; 0x80
  400de0:	d1f2      	bne.n	400dc8 <xPortStartScheduler+0x38>
  400de2:	4a1d      	ldr	r2, [pc, #116]	; (400e58 <xPortStartScheduler+0xc8>)
  400de4:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  400de6:	2b04      	cmp	r3, #4
  400de8:	d00a      	beq.n	400e00 <xPortStartScheduler+0x70>
	__asm volatile
  400dea:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dee:	b672      	cpsid	i
  400df0:	f383 8811 	msr	BASEPRI, r3
  400df4:	f3bf 8f6f 	isb	sy
  400df8:	f3bf 8f4f 	dsb	sy
  400dfc:	b662      	cpsie	i
  400dfe:	e7fe      	b.n	400dfe <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400e00:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400e02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400e06:	4a14      	ldr	r2, [pc, #80]	; (400e58 <xPortStartScheduler+0xc8>)
  400e08:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400e0a:	9b01      	ldr	r3, [sp, #4]
  400e0c:	b2db      	uxtb	r3, r3
  400e0e:	4a10      	ldr	r2, [pc, #64]	; (400e50 <xPortStartScheduler+0xc0>)
  400e10:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400e12:	4b12      	ldr	r3, [pc, #72]	; (400e5c <xPortStartScheduler+0xcc>)
  400e14:	681a      	ldr	r2, [r3, #0]
  400e16:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400e1a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400e1c:	681a      	ldr	r2, [r3, #0]
  400e1e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400e22:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400e24:	4b0e      	ldr	r3, [pc, #56]	; (400e60 <xPortStartScheduler+0xd0>)
  400e26:	4798      	blx	r3
	uxCriticalNesting = 0;
  400e28:	2400      	movs	r4, #0
  400e2a:	4b0e      	ldr	r3, [pc, #56]	; (400e64 <xPortStartScheduler+0xd4>)
  400e2c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  400e2e:	4b0e      	ldr	r3, [pc, #56]	; (400e68 <xPortStartScheduler+0xd8>)
  400e30:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400e32:	4a0e      	ldr	r2, [pc, #56]	; (400e6c <xPortStartScheduler+0xdc>)
  400e34:	6813      	ldr	r3, [r2, #0]
  400e36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400e3a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400e3c:	4b0c      	ldr	r3, [pc, #48]	; (400e70 <xPortStartScheduler+0xe0>)
  400e3e:	4798      	blx	r3
	vTaskSwitchContext();
  400e40:	4b0c      	ldr	r3, [pc, #48]	; (400e74 <xPortStartScheduler+0xe4>)
  400e42:	4798      	blx	r3
	prvTaskExitError();
  400e44:	4b0c      	ldr	r3, [pc, #48]	; (400e78 <xPortStartScheduler+0xe8>)
  400e46:	4798      	blx	r3
}
  400e48:	4620      	mov	r0, r4
  400e4a:	b002      	add	sp, #8
  400e4c:	bd10      	pop	{r4, pc}
  400e4e:	bf00      	nop
  400e50:	e000e400 	.word	0xe000e400
  400e54:	20400a4c 	.word	0x20400a4c
  400e58:	20400a50 	.word	0x20400a50
  400e5c:	e000ed20 	.word	0xe000ed20
  400e60:	00400d69 	.word	0x00400d69
  400e64:	20400008 	.word	0x20400008
  400e68:	00400be5 	.word	0x00400be5
  400e6c:	e000ef34 	.word	0xe000ef34
  400e70:	00400bbd 	.word	0x00400bbd
  400e74:	00401dfd 	.word	0x00401dfd
  400e78:	00400b75 	.word	0x00400b75

00400e7c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  400e7c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400e80:	2b0f      	cmp	r3, #15
  400e82:	d911      	bls.n	400ea8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400e84:	4a12      	ldr	r2, [pc, #72]	; (400ed0 <vPortValidateInterruptPriority+0x54>)
  400e86:	5c9b      	ldrb	r3, [r3, r2]
  400e88:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400e8a:	4a12      	ldr	r2, [pc, #72]	; (400ed4 <vPortValidateInterruptPriority+0x58>)
  400e8c:	7812      	ldrb	r2, [r2, #0]
  400e8e:	429a      	cmp	r2, r3
  400e90:	d90a      	bls.n	400ea8 <vPortValidateInterruptPriority+0x2c>
  400e92:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e96:	b672      	cpsid	i
  400e98:	f383 8811 	msr	BASEPRI, r3
  400e9c:	f3bf 8f6f 	isb	sy
  400ea0:	f3bf 8f4f 	dsb	sy
  400ea4:	b662      	cpsie	i
  400ea6:	e7fe      	b.n	400ea6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400ea8:	4b0b      	ldr	r3, [pc, #44]	; (400ed8 <vPortValidateInterruptPriority+0x5c>)
  400eaa:	681b      	ldr	r3, [r3, #0]
  400eac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400eb0:	4a0a      	ldr	r2, [pc, #40]	; (400edc <vPortValidateInterruptPriority+0x60>)
  400eb2:	6812      	ldr	r2, [r2, #0]
  400eb4:	4293      	cmp	r3, r2
  400eb6:	d90a      	bls.n	400ece <vPortValidateInterruptPriority+0x52>
  400eb8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ebc:	b672      	cpsid	i
  400ebe:	f383 8811 	msr	BASEPRI, r3
  400ec2:	f3bf 8f6f 	isb	sy
  400ec6:	f3bf 8f4f 	dsb	sy
  400eca:	b662      	cpsie	i
  400ecc:	e7fe      	b.n	400ecc <vPortValidateInterruptPriority+0x50>
  400ece:	4770      	bx	lr
  400ed0:	e000e3f0 	.word	0xe000e3f0
  400ed4:	20400a4c 	.word	0x20400a4c
  400ed8:	e000ed0c 	.word	0xe000ed0c
  400edc:	20400a50 	.word	0x20400a50

00400ee0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400ee0:	b510      	push	{r4, lr}
  400ee2:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  400ee4:	4b06      	ldr	r3, [pc, #24]	; (400f00 <pvPortMalloc+0x20>)
  400ee6:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  400ee8:	4620      	mov	r0, r4
  400eea:	4b06      	ldr	r3, [pc, #24]	; (400f04 <pvPortMalloc+0x24>)
  400eec:	4798      	blx	r3
  400eee:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400ef0:	4b05      	ldr	r3, [pc, #20]	; (400f08 <pvPortMalloc+0x28>)
  400ef2:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400ef4:	b10c      	cbz	r4, 400efa <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  400ef6:	4620      	mov	r0, r4
  400ef8:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  400efa:	4b04      	ldr	r3, [pc, #16]	; (400f0c <pvPortMalloc+0x2c>)
  400efc:	4798      	blx	r3
	return pvReturn;
  400efe:	e7fa      	b.n	400ef6 <pvPortMalloc+0x16>
  400f00:	00401b25 	.word	0x00401b25
  400f04:	00402b89 	.word	0x00402b89
  400f08:	00401c89 	.word	0x00401c89
  400f0c:	00402793 	.word	0x00402793

00400f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  400f10:	b148      	cbz	r0, 400f26 <vPortFree+0x16>
{
  400f12:	b510      	push	{r4, lr}
  400f14:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  400f16:	4b04      	ldr	r3, [pc, #16]	; (400f28 <vPortFree+0x18>)
  400f18:	4798      	blx	r3
		{
			free( pv );
  400f1a:	4620      	mov	r0, r4
  400f1c:	4b03      	ldr	r3, [pc, #12]	; (400f2c <vPortFree+0x1c>)
  400f1e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  400f20:	4b03      	ldr	r3, [pc, #12]	; (400f30 <vPortFree+0x20>)
  400f22:	4798      	blx	r3
  400f24:	bd10      	pop	{r4, pc}
  400f26:	4770      	bx	lr
  400f28:	00401b25 	.word	0x00401b25
  400f2c:	00402b99 	.word	0x00402b99
  400f30:	00401c89 	.word	0x00401c89

00400f34 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  400f34:	b510      	push	{r4, lr}
  400f36:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400f38:	4b04      	ldr	r3, [pc, #16]	; (400f4c <prvIsQueueEmpty+0x18>)
  400f3a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400f3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400f3e:	4b04      	ldr	r3, [pc, #16]	; (400f50 <prvIsQueueEmpty+0x1c>)
  400f40:	4798      	blx	r3

	return xReturn;
}
  400f42:	fab4 f084 	clz	r0, r4
  400f46:	0940      	lsrs	r0, r0, #5
  400f48:	bd10      	pop	{r4, pc}
  400f4a:	bf00      	nop
  400f4c:	00400c55 	.word	0x00400c55
  400f50:	00400ca1 	.word	0x00400ca1

00400f54 <prvCopyDataToQueue>:
{
  400f54:	b570      	push	{r4, r5, r6, lr}
  400f56:	4604      	mov	r4, r0
  400f58:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400f5a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400f5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400f5e:	b952      	cbnz	r2, 400f76 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400f60:	6803      	ldr	r3, [r0, #0]
  400f62:	2b00      	cmp	r3, #0
  400f64:	d12a      	bne.n	400fbc <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400f66:	6840      	ldr	r0, [r0, #4]
  400f68:	4b17      	ldr	r3, [pc, #92]	; (400fc8 <prvCopyDataToQueue+0x74>)
  400f6a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400f6c:	2300      	movs	r3, #0
  400f6e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400f70:	3501      	adds	r5, #1
  400f72:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400f74:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400f76:	b96e      	cbnz	r6, 400f94 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400f78:	6880      	ldr	r0, [r0, #8]
  400f7a:	4b14      	ldr	r3, [pc, #80]	; (400fcc <prvCopyDataToQueue+0x78>)
  400f7c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400f7e:	68a3      	ldr	r3, [r4, #8]
  400f80:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400f82:	4413      	add	r3, r2
  400f84:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f86:	6862      	ldr	r2, [r4, #4]
  400f88:	4293      	cmp	r3, r2
  400f8a:	d319      	bcc.n	400fc0 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400f8c:	6823      	ldr	r3, [r4, #0]
  400f8e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400f90:	2000      	movs	r0, #0
  400f92:	e7ed      	b.n	400f70 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f94:	68c0      	ldr	r0, [r0, #12]
  400f96:	4b0d      	ldr	r3, [pc, #52]	; (400fcc <prvCopyDataToQueue+0x78>)
  400f98:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f9c:	425b      	negs	r3, r3
  400f9e:	68e2      	ldr	r2, [r4, #12]
  400fa0:	441a      	add	r2, r3
  400fa2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400fa4:	6821      	ldr	r1, [r4, #0]
  400fa6:	428a      	cmp	r2, r1
  400fa8:	d202      	bcs.n	400fb0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400faa:	6862      	ldr	r2, [r4, #4]
  400fac:	4413      	add	r3, r2
  400fae:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400fb0:	b145      	cbz	r5, 400fc4 <prvCopyDataToQueue+0x70>
  400fb2:	2e02      	cmp	r6, #2
  400fb4:	d106      	bne.n	400fc4 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  400fb6:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  400fb8:	2000      	movs	r0, #0
  400fba:	e7d9      	b.n	400f70 <prvCopyDataToQueue+0x1c>
  400fbc:	2000      	movs	r0, #0
  400fbe:	e7d7      	b.n	400f70 <prvCopyDataToQueue+0x1c>
  400fc0:	2000      	movs	r0, #0
  400fc2:	e7d5      	b.n	400f70 <prvCopyDataToQueue+0x1c>
  400fc4:	2000      	movs	r0, #0
  400fc6:	e7d3      	b.n	400f70 <prvCopyDataToQueue+0x1c>
  400fc8:	004020c1 	.word	0x004020c1
  400fcc:	00403109 	.word	0x00403109

00400fd0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400fd0:	b570      	push	{r4, r5, r6, lr}
  400fd2:	b082      	sub	sp, #8
  400fd4:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400fd6:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400fd8:	b174      	cbz	r4, 400ff8 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400fda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400fde:	429a      	cmp	r2, r3
  400fe0:	d315      	bcc.n	40100e <prvNotifyQueueSetContainer+0x3e>
  400fe2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fe6:	b672      	cpsid	i
  400fe8:	f383 8811 	msr	BASEPRI, r3
  400fec:	f3bf 8f6f 	isb	sy
  400ff0:	f3bf 8f4f 	dsb	sy
  400ff4:	b662      	cpsie	i
  400ff6:	e7fe      	b.n	400ff6 <prvNotifyQueueSetContainer+0x26>
  400ff8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ffc:	b672      	cpsid	i
  400ffe:	f383 8811 	msr	BASEPRI, r3
  401002:	f3bf 8f6f 	isb	sy
  401006:	f3bf 8f4f 	dsb	sy
  40100a:	b662      	cpsie	i
  40100c:	e7fe      	b.n	40100c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40100e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401010:	4293      	cmp	r3, r2
  401012:	d803      	bhi.n	40101c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401014:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401016:	4630      	mov	r0, r6
  401018:	b002      	add	sp, #8
  40101a:	bd70      	pop	{r4, r5, r6, pc}
  40101c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40101e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401022:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401024:	a901      	add	r1, sp, #4
  401026:	4620      	mov	r0, r4
  401028:	4b0a      	ldr	r3, [pc, #40]	; (401054 <prvNotifyQueueSetContainer+0x84>)
  40102a:	4798      	blx	r3
  40102c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40102e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401032:	d10a      	bne.n	40104a <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401034:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401036:	2b00      	cmp	r3, #0
  401038:	d0ed      	beq.n	401016 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40103a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40103e:	4b06      	ldr	r3, [pc, #24]	; (401058 <prvNotifyQueueSetContainer+0x88>)
  401040:	4798      	blx	r3
  401042:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401044:	bf18      	it	ne
  401046:	2601      	movne	r6, #1
  401048:	e7e5      	b.n	401016 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  40104a:	1c6b      	adds	r3, r5, #1
  40104c:	b25b      	sxtb	r3, r3
  40104e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401052:	e7e0      	b.n	401016 <prvNotifyQueueSetContainer+0x46>
  401054:	00400f55 	.word	0x00400f55
  401058:	00401f51 	.word	0x00401f51

0040105c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40105c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40105e:	b172      	cbz	r2, 40107e <prvCopyDataFromQueue+0x22>
{
  401060:	b510      	push	{r4, lr}
  401062:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401064:	68c4      	ldr	r4, [r0, #12]
  401066:	4414      	add	r4, r2
  401068:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40106a:	6840      	ldr	r0, [r0, #4]
  40106c:	4284      	cmp	r4, r0
  40106e:	d301      	bcc.n	401074 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401070:	6818      	ldr	r0, [r3, #0]
  401072:	60d8      	str	r0, [r3, #12]
  401074:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401076:	68d9      	ldr	r1, [r3, #12]
  401078:	4b01      	ldr	r3, [pc, #4]	; (401080 <prvCopyDataFromQueue+0x24>)
  40107a:	4798      	blx	r3
  40107c:	bd10      	pop	{r4, pc}
  40107e:	4770      	bx	lr
  401080:	00403109 	.word	0x00403109

00401084 <prvUnlockQueue>:
{
  401084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401088:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  40108a:	4b23      	ldr	r3, [pc, #140]	; (401118 <prvUnlockQueue+0x94>)
  40108c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  40108e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  401092:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401094:	2c00      	cmp	r4, #0
  401096:	dd19      	ble.n	4010cc <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401098:	4e20      	ldr	r6, [pc, #128]	; (40111c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  40109a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401128 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40109e:	4f20      	ldr	r7, [pc, #128]	; (401120 <prvUnlockQueue+0x9c>)
  4010a0:	e008      	b.n	4010b4 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4010a4:	b193      	cbz	r3, 4010cc <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4010a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4010aa:	47b8      	blx	r7
  4010ac:	b960      	cbnz	r0, 4010c8 <prvUnlockQueue+0x44>
  4010ae:	3c01      	subs	r4, #1
  4010b0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4010b2:	b15c      	cbz	r4, 4010cc <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  4010b4:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d0f3      	beq.n	4010a2 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4010ba:	2100      	movs	r1, #0
  4010bc:	4628      	mov	r0, r5
  4010be:	47b0      	blx	r6
  4010c0:	2800      	cmp	r0, #0
  4010c2:	d0f4      	beq.n	4010ae <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  4010c4:	47c0      	blx	r8
  4010c6:	e7f2      	b.n	4010ae <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  4010c8:	47c0      	blx	r8
  4010ca:	e7f0      	b.n	4010ae <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  4010cc:	23ff      	movs	r3, #255	; 0xff
  4010ce:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  4010d2:	4b14      	ldr	r3, [pc, #80]	; (401124 <prvUnlockQueue+0xa0>)
  4010d4:	4798      	blx	r3
	taskENTER_CRITICAL();
  4010d6:	4b10      	ldr	r3, [pc, #64]	; (401118 <prvUnlockQueue+0x94>)
  4010d8:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  4010da:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  4010de:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4010e0:	2c00      	cmp	r4, #0
  4010e2:	dd12      	ble.n	40110a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010e4:	692b      	ldr	r3, [r5, #16]
  4010e6:	b183      	cbz	r3, 40110a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4010e8:	f105 0710 	add.w	r7, r5, #16
  4010ec:	4e0c      	ldr	r6, [pc, #48]	; (401120 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4010ee:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401128 <prvUnlockQueue+0xa4>
  4010f2:	e004      	b.n	4010fe <prvUnlockQueue+0x7a>
  4010f4:	3c01      	subs	r4, #1
  4010f6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4010f8:	b13c      	cbz	r4, 40110a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010fa:	692b      	ldr	r3, [r5, #16]
  4010fc:	b12b      	cbz	r3, 40110a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4010fe:	4638      	mov	r0, r7
  401100:	47b0      	blx	r6
  401102:	2800      	cmp	r0, #0
  401104:	d0f6      	beq.n	4010f4 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401106:	47c0      	blx	r8
  401108:	e7f4      	b.n	4010f4 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40110a:	23ff      	movs	r3, #255	; 0xff
  40110c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401110:	4b04      	ldr	r3, [pc, #16]	; (401124 <prvUnlockQueue+0xa0>)
  401112:	4798      	blx	r3
  401114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401118:	00400c55 	.word	0x00400c55
  40111c:	00400fd1 	.word	0x00400fd1
  401120:	00401f51 	.word	0x00401f51
  401124:	00400ca1 	.word	0x00400ca1
  401128:	00402095 	.word	0x00402095

0040112c <xQueueGenericReset>:
{
  40112c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40112e:	b330      	cbz	r0, 40117e <xQueueGenericReset+0x52>
  401130:	4604      	mov	r4, r0
  401132:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401134:	4b1d      	ldr	r3, [pc, #116]	; (4011ac <xQueueGenericReset+0x80>)
  401136:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401138:	6822      	ldr	r2, [r4, #0]
  40113a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40113c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40113e:	fb03 f301 	mul.w	r3, r3, r1
  401142:	18d0      	adds	r0, r2, r3
  401144:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401146:	2000      	movs	r0, #0
  401148:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40114a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40114c:	1a5b      	subs	r3, r3, r1
  40114e:	4413      	add	r3, r2
  401150:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  401152:	23ff      	movs	r3, #255	; 0xff
  401154:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  401158:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  40115c:	b9d5      	cbnz	r5, 401194 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40115e:	6923      	ldr	r3, [r4, #16]
  401160:	b1fb      	cbz	r3, 4011a2 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401162:	f104 0010 	add.w	r0, r4, #16
  401166:	4b12      	ldr	r3, [pc, #72]	; (4011b0 <xQueueGenericReset+0x84>)
  401168:	4798      	blx	r3
  40116a:	b1d0      	cbz	r0, 4011a2 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  40116c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401170:	4b10      	ldr	r3, [pc, #64]	; (4011b4 <xQueueGenericReset+0x88>)
  401172:	601a      	str	r2, [r3, #0]
  401174:	f3bf 8f4f 	dsb	sy
  401178:	f3bf 8f6f 	isb	sy
  40117c:	e011      	b.n	4011a2 <xQueueGenericReset+0x76>
  40117e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401182:	b672      	cpsid	i
  401184:	f383 8811 	msr	BASEPRI, r3
  401188:	f3bf 8f6f 	isb	sy
  40118c:	f3bf 8f4f 	dsb	sy
  401190:	b662      	cpsie	i
  401192:	e7fe      	b.n	401192 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401194:	f104 0010 	add.w	r0, r4, #16
  401198:	4d07      	ldr	r5, [pc, #28]	; (4011b8 <xQueueGenericReset+0x8c>)
  40119a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40119c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011a0:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  4011a2:	4b06      	ldr	r3, [pc, #24]	; (4011bc <xQueueGenericReset+0x90>)
  4011a4:	4798      	blx	r3
}
  4011a6:	2001      	movs	r0, #1
  4011a8:	bd38      	pop	{r3, r4, r5, pc}
  4011aa:	bf00      	nop
  4011ac:	00400c55 	.word	0x00400c55
  4011b0:	00401f51 	.word	0x00401f51
  4011b4:	e000ed04 	.word	0xe000ed04
  4011b8:	00400ae5 	.word	0x00400ae5
  4011bc:	00400ca1 	.word	0x00400ca1

004011c0 <xQueueGenericCreate>:
	{
  4011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4011c2:	b950      	cbnz	r0, 4011da <xQueueGenericCreate+0x1a>
  4011c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011c8:	b672      	cpsid	i
  4011ca:	f383 8811 	msr	BASEPRI, r3
  4011ce:	f3bf 8f6f 	isb	sy
  4011d2:	f3bf 8f4f 	dsb	sy
  4011d6:	b662      	cpsie	i
  4011d8:	e7fe      	b.n	4011d8 <xQueueGenericCreate+0x18>
  4011da:	4606      	mov	r6, r0
  4011dc:	4617      	mov	r7, r2
  4011de:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4011e0:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4011e4:	3054      	adds	r0, #84	; 0x54
  4011e6:	4b0b      	ldr	r3, [pc, #44]	; (401214 <xQueueGenericCreate+0x54>)
  4011e8:	4798      	blx	r3
		if( pxNewQueue != NULL )
  4011ea:	4604      	mov	r4, r0
  4011ec:	b178      	cbz	r0, 40120e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  4011ee:	b11d      	cbz	r5, 4011f8 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4011f0:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  4011f4:	6003      	str	r3, [r0, #0]
  4011f6:	e000      	b.n	4011fa <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4011f8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  4011fa:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  4011fc:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4011fe:	2101      	movs	r1, #1
  401200:	4620      	mov	r0, r4
  401202:	4b05      	ldr	r3, [pc, #20]	; (401218 <xQueueGenericCreate+0x58>)
  401204:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401206:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40120a:	2300      	movs	r3, #0
  40120c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40120e:	4620      	mov	r0, r4
  401210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401212:	bf00      	nop
  401214:	00400ee1 	.word	0x00400ee1
  401218:	0040112d 	.word	0x0040112d

0040121c <xQueueGenericSend>:
{
  40121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401220:	b085      	sub	sp, #20
  401222:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401224:	b1b8      	cbz	r0, 401256 <xQueueGenericSend+0x3a>
  401226:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401228:	b301      	cbz	r1, 40126c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40122a:	2b02      	cmp	r3, #2
  40122c:	d02c      	beq.n	401288 <xQueueGenericSend+0x6c>
  40122e:	461e      	mov	r6, r3
  401230:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401232:	4b69      	ldr	r3, [pc, #420]	; (4013d8 <xQueueGenericSend+0x1bc>)
  401234:	4798      	blx	r3
  401236:	2800      	cmp	r0, #0
  401238:	d134      	bne.n	4012a4 <xQueueGenericSend+0x88>
  40123a:	9b01      	ldr	r3, [sp, #4]
  40123c:	2b00      	cmp	r3, #0
  40123e:	d039      	beq.n	4012b4 <xQueueGenericSend+0x98>
  401240:	f04f 0380 	mov.w	r3, #128	; 0x80
  401244:	b672      	cpsid	i
  401246:	f383 8811 	msr	BASEPRI, r3
  40124a:	f3bf 8f6f 	isb	sy
  40124e:	f3bf 8f4f 	dsb	sy
  401252:	b662      	cpsie	i
  401254:	e7fe      	b.n	401254 <xQueueGenericSend+0x38>
  401256:	f04f 0380 	mov.w	r3, #128	; 0x80
  40125a:	b672      	cpsid	i
  40125c:	f383 8811 	msr	BASEPRI, r3
  401260:	f3bf 8f6f 	isb	sy
  401264:	f3bf 8f4f 	dsb	sy
  401268:	b662      	cpsie	i
  40126a:	e7fe      	b.n	40126a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40126c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40126e:	2a00      	cmp	r2, #0
  401270:	d0db      	beq.n	40122a <xQueueGenericSend+0xe>
  401272:	f04f 0380 	mov.w	r3, #128	; 0x80
  401276:	b672      	cpsid	i
  401278:	f383 8811 	msr	BASEPRI, r3
  40127c:	f3bf 8f6f 	isb	sy
  401280:	f3bf 8f4f 	dsb	sy
  401284:	b662      	cpsie	i
  401286:	e7fe      	b.n	401286 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401288:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40128a:	2a01      	cmp	r2, #1
  40128c:	d0cf      	beq.n	40122e <xQueueGenericSend+0x12>
  40128e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401292:	b672      	cpsid	i
  401294:	f383 8811 	msr	BASEPRI, r3
  401298:	f3bf 8f6f 	isb	sy
  40129c:	f3bf 8f4f 	dsb	sy
  4012a0:	b662      	cpsie	i
  4012a2:	e7fe      	b.n	4012a2 <xQueueGenericSend+0x86>
  4012a4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  4012a6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401404 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4012aa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401408 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  4012ae:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4013e4 <xQueueGenericSend+0x1c8>
  4012b2:	e041      	b.n	401338 <xQueueGenericSend+0x11c>
  4012b4:	2500      	movs	r5, #0
  4012b6:	e7f6      	b.n	4012a6 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4012b8:	4632      	mov	r2, r6
  4012ba:	4639      	mov	r1, r7
  4012bc:	4620      	mov	r0, r4
  4012be:	4b47      	ldr	r3, [pc, #284]	; (4013dc <xQueueGenericSend+0x1c0>)
  4012c0:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4012c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012c4:	b193      	cbz	r3, 4012ec <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4012c6:	4631      	mov	r1, r6
  4012c8:	4620      	mov	r0, r4
  4012ca:	4b45      	ldr	r3, [pc, #276]	; (4013e0 <xQueueGenericSend+0x1c4>)
  4012cc:	4798      	blx	r3
  4012ce:	b138      	cbz	r0, 4012e0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4012d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012d4:	4b43      	ldr	r3, [pc, #268]	; (4013e4 <xQueueGenericSend+0x1c8>)
  4012d6:	601a      	str	r2, [r3, #0]
  4012d8:	f3bf 8f4f 	dsb	sy
  4012dc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4012e0:	4b41      	ldr	r3, [pc, #260]	; (4013e8 <xQueueGenericSend+0x1cc>)
  4012e2:	4798      	blx	r3
				return pdPASS;
  4012e4:	2001      	movs	r0, #1
}
  4012e6:	b005      	add	sp, #20
  4012e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4012ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4012ee:	b173      	cbz	r3, 40130e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4012f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012f4:	4b3d      	ldr	r3, [pc, #244]	; (4013ec <xQueueGenericSend+0x1d0>)
  4012f6:	4798      	blx	r3
  4012f8:	2800      	cmp	r0, #0
  4012fa:	d0f1      	beq.n	4012e0 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4012fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401300:	4b38      	ldr	r3, [pc, #224]	; (4013e4 <xQueueGenericSend+0x1c8>)
  401302:	601a      	str	r2, [r3, #0]
  401304:	f3bf 8f4f 	dsb	sy
  401308:	f3bf 8f6f 	isb	sy
  40130c:	e7e8      	b.n	4012e0 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40130e:	2800      	cmp	r0, #0
  401310:	d0e6      	beq.n	4012e0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401316:	4b33      	ldr	r3, [pc, #204]	; (4013e4 <xQueueGenericSend+0x1c8>)
  401318:	601a      	str	r2, [r3, #0]
  40131a:	f3bf 8f4f 	dsb	sy
  40131e:	f3bf 8f6f 	isb	sy
  401322:	e7dd      	b.n	4012e0 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401324:	4b30      	ldr	r3, [pc, #192]	; (4013e8 <xQueueGenericSend+0x1cc>)
  401326:	4798      	blx	r3
					return errQUEUE_FULL;
  401328:	2000      	movs	r0, #0
  40132a:	e7dc      	b.n	4012e6 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40132c:	4620      	mov	r0, r4
  40132e:	4b30      	ldr	r3, [pc, #192]	; (4013f0 <xQueueGenericSend+0x1d4>)
  401330:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401332:	4b30      	ldr	r3, [pc, #192]	; (4013f4 <xQueueGenericSend+0x1d8>)
  401334:	4798      	blx	r3
  401336:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  401338:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40133a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40133c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40133e:	429a      	cmp	r2, r3
  401340:	d3ba      	bcc.n	4012b8 <xQueueGenericSend+0x9c>
  401342:	2e02      	cmp	r6, #2
  401344:	d0b8      	beq.n	4012b8 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  401346:	9b01      	ldr	r3, [sp, #4]
  401348:	2b00      	cmp	r3, #0
  40134a:	d0eb      	beq.n	401324 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  40134c:	b90d      	cbnz	r5, 401352 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40134e:	a802      	add	r0, sp, #8
  401350:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401352:	4b25      	ldr	r3, [pc, #148]	; (4013e8 <xQueueGenericSend+0x1cc>)
  401354:	4798      	blx	r3
		vTaskSuspendAll();
  401356:	4b28      	ldr	r3, [pc, #160]	; (4013f8 <xQueueGenericSend+0x1dc>)
  401358:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40135a:	47c0      	blx	r8
  40135c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401360:	b25b      	sxtb	r3, r3
  401362:	f1b3 3fff 	cmp.w	r3, #4294967295
  401366:	d102      	bne.n	40136e <xQueueGenericSend+0x152>
  401368:	2300      	movs	r3, #0
  40136a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  40136e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401372:	b25b      	sxtb	r3, r3
  401374:	f1b3 3fff 	cmp.w	r3, #4294967295
  401378:	d102      	bne.n	401380 <xQueueGenericSend+0x164>
  40137a:	2300      	movs	r3, #0
  40137c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401380:	4b19      	ldr	r3, [pc, #100]	; (4013e8 <xQueueGenericSend+0x1cc>)
  401382:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401384:	a901      	add	r1, sp, #4
  401386:	a802      	add	r0, sp, #8
  401388:	4b1c      	ldr	r3, [pc, #112]	; (4013fc <xQueueGenericSend+0x1e0>)
  40138a:	4798      	blx	r3
  40138c:	b9e0      	cbnz	r0, 4013c8 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  40138e:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401390:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401394:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401396:	4b14      	ldr	r3, [pc, #80]	; (4013e8 <xQueueGenericSend+0x1cc>)
  401398:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40139a:	45ab      	cmp	fp, r5
  40139c:	d1c6      	bne.n	40132c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40139e:	9901      	ldr	r1, [sp, #4]
  4013a0:	f104 0010 	add.w	r0, r4, #16
  4013a4:	4b16      	ldr	r3, [pc, #88]	; (401400 <xQueueGenericSend+0x1e4>)
  4013a6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4013a8:	4620      	mov	r0, r4
  4013aa:	4b11      	ldr	r3, [pc, #68]	; (4013f0 <xQueueGenericSend+0x1d4>)
  4013ac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4013ae:	4b11      	ldr	r3, [pc, #68]	; (4013f4 <xQueueGenericSend+0x1d8>)
  4013b0:	4798      	blx	r3
  4013b2:	2800      	cmp	r0, #0
  4013b4:	d1bf      	bne.n	401336 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4013b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4013ba:	f8c9 3000 	str.w	r3, [r9]
  4013be:	f3bf 8f4f 	dsb	sy
  4013c2:	f3bf 8f6f 	isb	sy
  4013c6:	e7b6      	b.n	401336 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4013c8:	4620      	mov	r0, r4
  4013ca:	4b09      	ldr	r3, [pc, #36]	; (4013f0 <xQueueGenericSend+0x1d4>)
  4013cc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4013ce:	4b09      	ldr	r3, [pc, #36]	; (4013f4 <xQueueGenericSend+0x1d8>)
  4013d0:	4798      	blx	r3
			return errQUEUE_FULL;
  4013d2:	2000      	movs	r0, #0
  4013d4:	e787      	b.n	4012e6 <xQueueGenericSend+0xca>
  4013d6:	bf00      	nop
  4013d8:	004020a1 	.word	0x004020a1
  4013dc:	00400f55 	.word	0x00400f55
  4013e0:	00400fd1 	.word	0x00400fd1
  4013e4:	e000ed04 	.word	0xe000ed04
  4013e8:	00400ca1 	.word	0x00400ca1
  4013ec:	00401f51 	.word	0x00401f51
  4013f0:	00401085 	.word	0x00401085
  4013f4:	00401c89 	.word	0x00401c89
  4013f8:	00401b25 	.word	0x00401b25
  4013fc:	00402001 	.word	0x00402001
  401400:	00401ecd 	.word	0x00401ecd
  401404:	00400c55 	.word	0x00400c55
  401408:	00401fe9 	.word	0x00401fe9

0040140c <xQueueGenericSendFromISR>:
{
  40140c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401410:	2800      	cmp	r0, #0
  401412:	d039      	beq.n	401488 <xQueueGenericSendFromISR+0x7c>
  401414:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401416:	2900      	cmp	r1, #0
  401418:	d041      	beq.n	40149e <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40141a:	2b02      	cmp	r3, #2
  40141c:	d04d      	beq.n	4014ba <xQueueGenericSendFromISR+0xae>
  40141e:	461f      	mov	r7, r3
  401420:	4690      	mov	r8, r2
  401422:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401424:	4b3a      	ldr	r3, [pc, #232]	; (401510 <xQueueGenericSendFromISR+0x104>)
  401426:	4798      	blx	r3
	__asm volatile
  401428:	f3ef 8611 	mrs	r6, BASEPRI
  40142c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401430:	b672      	cpsid	i
  401432:	f383 8811 	msr	BASEPRI, r3
  401436:	f3bf 8f6f 	isb	sy
  40143a:	f3bf 8f4f 	dsb	sy
  40143e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401440:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401442:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401444:	429a      	cmp	r2, r3
  401446:	d301      	bcc.n	40144c <xQueueGenericSendFromISR+0x40>
  401448:	2f02      	cmp	r7, #2
  40144a:	d158      	bne.n	4014fe <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  40144c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401450:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401452:	463a      	mov	r2, r7
  401454:	4649      	mov	r1, r9
  401456:	4620      	mov	r0, r4
  401458:	4b2e      	ldr	r3, [pc, #184]	; (401514 <xQueueGenericSendFromISR+0x108>)
  40145a:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  40145c:	f1b5 3fff 	cmp.w	r5, #4294967295
  401460:	d147      	bne.n	4014f2 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401462:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401464:	2b00      	cmp	r3, #0
  401466:	d036      	beq.n	4014d6 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401468:	4639      	mov	r1, r7
  40146a:	4620      	mov	r0, r4
  40146c:	4b2a      	ldr	r3, [pc, #168]	; (401518 <xQueueGenericSendFromISR+0x10c>)
  40146e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401470:	f1b8 0f00 	cmp.w	r8, #0
  401474:	d045      	beq.n	401502 <xQueueGenericSendFromISR+0xf6>
  401476:	2800      	cmp	r0, #0
  401478:	d043      	beq.n	401502 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40147a:	2001      	movs	r0, #1
  40147c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  401480:	f386 8811 	msr	BASEPRI, r6
}
  401484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  401488:	f04f 0380 	mov.w	r3, #128	; 0x80
  40148c:	b672      	cpsid	i
  40148e:	f383 8811 	msr	BASEPRI, r3
  401492:	f3bf 8f6f 	isb	sy
  401496:	f3bf 8f4f 	dsb	sy
  40149a:	b662      	cpsie	i
  40149c:	e7fe      	b.n	40149c <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40149e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4014a0:	2800      	cmp	r0, #0
  4014a2:	d0ba      	beq.n	40141a <xQueueGenericSendFromISR+0xe>
  4014a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014a8:	b672      	cpsid	i
  4014aa:	f383 8811 	msr	BASEPRI, r3
  4014ae:	f3bf 8f6f 	isb	sy
  4014b2:	f3bf 8f4f 	dsb	sy
  4014b6:	b662      	cpsie	i
  4014b8:	e7fe      	b.n	4014b8 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4014ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4014bc:	2801      	cmp	r0, #1
  4014be:	d0ae      	beq.n	40141e <xQueueGenericSendFromISR+0x12>
  4014c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014c4:	b672      	cpsid	i
  4014c6:	f383 8811 	msr	BASEPRI, r3
  4014ca:	f3bf 8f6f 	isb	sy
  4014ce:	f3bf 8f4f 	dsb	sy
  4014d2:	b662      	cpsie	i
  4014d4:	e7fe      	b.n	4014d4 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014d8:	b1ab      	cbz	r3, 401506 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014da:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014de:	4b0f      	ldr	r3, [pc, #60]	; (40151c <xQueueGenericSendFromISR+0x110>)
  4014e0:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4014e2:	f1b8 0f00 	cmp.w	r8, #0
  4014e6:	d010      	beq.n	40150a <xQueueGenericSendFromISR+0xfe>
  4014e8:	b178      	cbz	r0, 40150a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4014ea:	2001      	movs	r0, #1
  4014ec:	f8c8 0000 	str.w	r0, [r8]
  4014f0:	e7c6      	b.n	401480 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4014f2:	1c6b      	adds	r3, r5, #1
  4014f4:	b25b      	sxtb	r3, r3
  4014f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  4014fa:	2001      	movs	r0, #1
  4014fc:	e7c0      	b.n	401480 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  4014fe:	2000      	movs	r0, #0
  401500:	e7be      	b.n	401480 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401502:	2001      	movs	r0, #1
  401504:	e7bc      	b.n	401480 <xQueueGenericSendFromISR+0x74>
  401506:	2001      	movs	r0, #1
  401508:	e7ba      	b.n	401480 <xQueueGenericSendFromISR+0x74>
  40150a:	2001      	movs	r0, #1
  40150c:	e7b8      	b.n	401480 <xQueueGenericSendFromISR+0x74>
  40150e:	bf00      	nop
  401510:	00400e7d 	.word	0x00400e7d
  401514:	00400f55 	.word	0x00400f55
  401518:	00400fd1 	.word	0x00400fd1
  40151c:	00401f51 	.word	0x00401f51

00401520 <xQueueReceive>:
{
  401520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401524:	b084      	sub	sp, #16
  401526:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401528:	b190      	cbz	r0, 401550 <xQueueReceive+0x30>
  40152a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40152c:	b1d9      	cbz	r1, 401566 <xQueueReceive+0x46>
  40152e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401530:	4b54      	ldr	r3, [pc, #336]	; (401684 <xQueueReceive+0x164>)
  401532:	4798      	blx	r3
  401534:	bb28      	cbnz	r0, 401582 <xQueueReceive+0x62>
  401536:	9b01      	ldr	r3, [sp, #4]
  401538:	b35b      	cbz	r3, 401592 <xQueueReceive+0x72>
  40153a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40153e:	b672      	cpsid	i
  401540:	f383 8811 	msr	BASEPRI, r3
  401544:	f3bf 8f6f 	isb	sy
  401548:	f3bf 8f4f 	dsb	sy
  40154c:	b662      	cpsie	i
  40154e:	e7fe      	b.n	40154e <xQueueReceive+0x2e>
  401550:	f04f 0380 	mov.w	r3, #128	; 0x80
  401554:	b672      	cpsid	i
  401556:	f383 8811 	msr	BASEPRI, r3
  40155a:	f3bf 8f6f 	isb	sy
  40155e:	f3bf 8f4f 	dsb	sy
  401562:	b662      	cpsie	i
  401564:	e7fe      	b.n	401564 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401566:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401568:	2b00      	cmp	r3, #0
  40156a:	d0e0      	beq.n	40152e <xQueueReceive+0xe>
  40156c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401570:	b672      	cpsid	i
  401572:	f383 8811 	msr	BASEPRI, r3
  401576:	f3bf 8f6f 	isb	sy
  40157a:	f3bf 8f4f 	dsb	sy
  40157e:	b662      	cpsie	i
  401580:	e7fe      	b.n	401580 <xQueueReceive+0x60>
  401582:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401584:	f8df 8128 	ldr.w	r8, [pc, #296]	; 4016b0 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401588:	f8df a128 	ldr.w	sl, [pc, #296]	; 4016b4 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  40158c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401690 <xQueueReceive+0x170>
  401590:	e031      	b.n	4015f6 <xQueueReceive+0xd6>
  401592:	2700      	movs	r7, #0
  401594:	e7f6      	b.n	401584 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401596:	4631      	mov	r1, r6
  401598:	4620      	mov	r0, r4
  40159a:	4b3b      	ldr	r3, [pc, #236]	; (401688 <xQueueReceive+0x168>)
  40159c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  40159e:	3d01      	subs	r5, #1
  4015a0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015a2:	6923      	ldr	r3, [r4, #16]
  4015a4:	b163      	cbz	r3, 4015c0 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015a6:	f104 0010 	add.w	r0, r4, #16
  4015aa:	4b38      	ldr	r3, [pc, #224]	; (40168c <xQueueReceive+0x16c>)
  4015ac:	4798      	blx	r3
  4015ae:	b138      	cbz	r0, 4015c0 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  4015b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015b4:	4b36      	ldr	r3, [pc, #216]	; (401690 <xQueueReceive+0x170>)
  4015b6:	601a      	str	r2, [r3, #0]
  4015b8:	f3bf 8f4f 	dsb	sy
  4015bc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4015c0:	4b34      	ldr	r3, [pc, #208]	; (401694 <xQueueReceive+0x174>)
  4015c2:	4798      	blx	r3
				return pdPASS;
  4015c4:	2001      	movs	r0, #1
}
  4015c6:	b004      	add	sp, #16
  4015c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  4015cc:	4b31      	ldr	r3, [pc, #196]	; (401694 <xQueueReceive+0x174>)
  4015ce:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4015d0:	2000      	movs	r0, #0
  4015d2:	e7f8      	b.n	4015c6 <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4015d4:	a802      	add	r0, sp, #8
  4015d6:	47d0      	blx	sl
  4015d8:	e016      	b.n	401608 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  4015da:	2300      	movs	r3, #0
  4015dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4015e0:	e01d      	b.n	40161e <xQueueReceive+0xfe>
  4015e2:	2300      	movs	r3, #0
  4015e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4015e8:	e01f      	b.n	40162a <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  4015ea:	4620      	mov	r0, r4
  4015ec:	4b2a      	ldr	r3, [pc, #168]	; (401698 <xQueueReceive+0x178>)
  4015ee:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4015f0:	4b2a      	ldr	r3, [pc, #168]	; (40169c <xQueueReceive+0x17c>)
  4015f2:	4798      	blx	r3
  4015f4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4015f6:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4015f8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4015fa:	2d00      	cmp	r5, #0
  4015fc:	d1cb      	bne.n	401596 <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4015fe:	9b01      	ldr	r3, [sp, #4]
  401600:	2b00      	cmp	r3, #0
  401602:	d0e3      	beq.n	4015cc <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401604:	2f00      	cmp	r7, #0
  401606:	d0e5      	beq.n	4015d4 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401608:	4b22      	ldr	r3, [pc, #136]	; (401694 <xQueueReceive+0x174>)
  40160a:	4798      	blx	r3
		vTaskSuspendAll();
  40160c:	4b24      	ldr	r3, [pc, #144]	; (4016a0 <xQueueReceive+0x180>)
  40160e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401610:	47c0      	blx	r8
  401612:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401616:	b25b      	sxtb	r3, r3
  401618:	f1b3 3fff 	cmp.w	r3, #4294967295
  40161c:	d0dd      	beq.n	4015da <xQueueReceive+0xba>
  40161e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401622:	b25b      	sxtb	r3, r3
  401624:	f1b3 3fff 	cmp.w	r3, #4294967295
  401628:	d0db      	beq.n	4015e2 <xQueueReceive+0xc2>
  40162a:	4b1a      	ldr	r3, [pc, #104]	; (401694 <xQueueReceive+0x174>)
  40162c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40162e:	a901      	add	r1, sp, #4
  401630:	a802      	add	r0, sp, #8
  401632:	4b1c      	ldr	r3, [pc, #112]	; (4016a4 <xQueueReceive+0x184>)
  401634:	4798      	blx	r3
  401636:	b9c8      	cbnz	r0, 40166c <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401638:	4620      	mov	r0, r4
  40163a:	4b1b      	ldr	r3, [pc, #108]	; (4016a8 <xQueueReceive+0x188>)
  40163c:	4798      	blx	r3
  40163e:	2800      	cmp	r0, #0
  401640:	d0d3      	beq.n	4015ea <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401642:	9901      	ldr	r1, [sp, #4]
  401644:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401648:	4b18      	ldr	r3, [pc, #96]	; (4016ac <xQueueReceive+0x18c>)
  40164a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40164c:	4620      	mov	r0, r4
  40164e:	4b12      	ldr	r3, [pc, #72]	; (401698 <xQueueReceive+0x178>)
  401650:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401652:	4b12      	ldr	r3, [pc, #72]	; (40169c <xQueueReceive+0x17c>)
  401654:	4798      	blx	r3
  401656:	2800      	cmp	r0, #0
  401658:	d1cc      	bne.n	4015f4 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  40165a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40165e:	f8c9 3000 	str.w	r3, [r9]
  401662:	f3bf 8f4f 	dsb	sy
  401666:	f3bf 8f6f 	isb	sy
  40166a:	e7c3      	b.n	4015f4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  40166c:	4620      	mov	r0, r4
  40166e:	4b0a      	ldr	r3, [pc, #40]	; (401698 <xQueueReceive+0x178>)
  401670:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401672:	4b0a      	ldr	r3, [pc, #40]	; (40169c <xQueueReceive+0x17c>)
  401674:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401676:	4620      	mov	r0, r4
  401678:	4b0b      	ldr	r3, [pc, #44]	; (4016a8 <xQueueReceive+0x188>)
  40167a:	4798      	blx	r3
  40167c:	2800      	cmp	r0, #0
  40167e:	d0b9      	beq.n	4015f4 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  401680:	2000      	movs	r0, #0
  401682:	e7a0      	b.n	4015c6 <xQueueReceive+0xa6>
  401684:	004020a1 	.word	0x004020a1
  401688:	0040105d 	.word	0x0040105d
  40168c:	00401f51 	.word	0x00401f51
  401690:	e000ed04 	.word	0xe000ed04
  401694:	00400ca1 	.word	0x00400ca1
  401698:	00401085 	.word	0x00401085
  40169c:	00401c89 	.word	0x00401c89
  4016a0:	00401b25 	.word	0x00401b25
  4016a4:	00402001 	.word	0x00402001
  4016a8:	00400f35 	.word	0x00400f35
  4016ac:	00401ecd 	.word	0x00401ecd
  4016b0:	00400c55 	.word	0x00400c55
  4016b4:	00401fe9 	.word	0x00401fe9

004016b8 <vQueueAddToRegistry>:
	{
  4016b8:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4016ba:	4b0b      	ldr	r3, [pc, #44]	; (4016e8 <vQueueAddToRegistry+0x30>)
  4016bc:	681b      	ldr	r3, [r3, #0]
  4016be:	b153      	cbz	r3, 4016d6 <vQueueAddToRegistry+0x1e>
  4016c0:	2301      	movs	r3, #1
  4016c2:	4c09      	ldr	r4, [pc, #36]	; (4016e8 <vQueueAddToRegistry+0x30>)
  4016c4:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4016c8:	b132      	cbz	r2, 4016d8 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4016ca:	3301      	adds	r3, #1
  4016cc:	2b08      	cmp	r3, #8
  4016ce:	d1f9      	bne.n	4016c4 <vQueueAddToRegistry+0xc>
	}
  4016d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016d4:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4016d6:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4016d8:	4a03      	ldr	r2, [pc, #12]	; (4016e8 <vQueueAddToRegistry+0x30>)
  4016da:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4016de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4016e2:	6058      	str	r0, [r3, #4]
				break;
  4016e4:	e7f4      	b.n	4016d0 <vQueueAddToRegistry+0x18>
  4016e6:	bf00      	nop
  4016e8:	20400bd4 	.word	0x20400bd4

004016ec <vQueueWaitForMessageRestricted>:
	{
  4016ec:	b570      	push	{r4, r5, r6, lr}
  4016ee:	4604      	mov	r4, r0
  4016f0:	460d      	mov	r5, r1
  4016f2:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4016f4:	4b12      	ldr	r3, [pc, #72]	; (401740 <vQueueWaitForMessageRestricted+0x54>)
  4016f6:	4798      	blx	r3
  4016f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4016fc:	b25b      	sxtb	r3, r3
  4016fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401702:	d00d      	beq.n	401720 <vQueueWaitForMessageRestricted+0x34>
  401704:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401708:	b25b      	sxtb	r3, r3
  40170a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40170e:	d00b      	beq.n	401728 <vQueueWaitForMessageRestricted+0x3c>
  401710:	4b0c      	ldr	r3, [pc, #48]	; (401744 <vQueueWaitForMessageRestricted+0x58>)
  401712:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401714:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401716:	b15b      	cbz	r3, 401730 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401718:	4620      	mov	r0, r4
  40171a:	4b0b      	ldr	r3, [pc, #44]	; (401748 <vQueueWaitForMessageRestricted+0x5c>)
  40171c:	4798      	blx	r3
  40171e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401720:	2300      	movs	r3, #0
  401722:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401726:	e7ed      	b.n	401704 <vQueueWaitForMessageRestricted+0x18>
  401728:	2300      	movs	r3, #0
  40172a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  40172e:	e7ef      	b.n	401710 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401730:	4632      	mov	r2, r6
  401732:	4629      	mov	r1, r5
  401734:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401738:	4b04      	ldr	r3, [pc, #16]	; (40174c <vQueueWaitForMessageRestricted+0x60>)
  40173a:	4798      	blx	r3
  40173c:	e7ec      	b.n	401718 <vQueueWaitForMessageRestricted+0x2c>
  40173e:	bf00      	nop
  401740:	00400c55 	.word	0x00400c55
  401744:	00400ca1 	.word	0x00400ca1
  401748:	00401085 	.word	0x00401085
  40174c:	00401f09 	.word	0x00401f09

00401750 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401750:	4b08      	ldr	r3, [pc, #32]	; (401774 <prvResetNextTaskUnblockTime+0x24>)
  401752:	681b      	ldr	r3, [r3, #0]
  401754:	681b      	ldr	r3, [r3, #0]
  401756:	b13b      	cbz	r3, 401768 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401758:	4b06      	ldr	r3, [pc, #24]	; (401774 <prvResetNextTaskUnblockTime+0x24>)
  40175a:	681b      	ldr	r3, [r3, #0]
  40175c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  40175e:	68db      	ldr	r3, [r3, #12]
  401760:	685a      	ldr	r2, [r3, #4]
  401762:	4b05      	ldr	r3, [pc, #20]	; (401778 <prvResetNextTaskUnblockTime+0x28>)
  401764:	601a      	str	r2, [r3, #0]
  401766:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401768:	f04f 32ff 	mov.w	r2, #4294967295
  40176c:	4b02      	ldr	r3, [pc, #8]	; (401778 <prvResetNextTaskUnblockTime+0x28>)
  40176e:	601a      	str	r2, [r3, #0]
  401770:	4770      	bx	lr
  401772:	bf00      	nop
  401774:	20400a58 	.word	0x20400a58
  401778:	20400b08 	.word	0x20400b08

0040177c <prvIdleTask>:
{
  40177c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40177e:	4d16      	ldr	r5, [pc, #88]	; (4017d8 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
  401780:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4017f0 <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401784:	4f15      	ldr	r7, [pc, #84]	; (4017dc <prvIdleTask+0x60>)
				taskYIELD();
  401786:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4017f4 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40178a:	682b      	ldr	r3, [r5, #0]
  40178c:	b1bb      	cbz	r3, 4017be <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40178e:	4e14      	ldr	r6, [pc, #80]	; (4017e0 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401790:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401792:	68fb      	ldr	r3, [r7, #12]
  401794:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401796:	1d20      	adds	r0, r4, #4
  401798:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  40179a:	4a12      	ldr	r2, [pc, #72]	; (4017e4 <prvIdleTask+0x68>)
  40179c:	6813      	ldr	r3, [r2, #0]
  40179e:	3b01      	subs	r3, #1
  4017a0:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  4017a2:	682b      	ldr	r3, [r5, #0]
  4017a4:	3b01      	subs	r3, #1
  4017a6:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  4017a8:	4b0f      	ldr	r3, [pc, #60]	; (4017e8 <prvIdleTask+0x6c>)
  4017aa:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  4017ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4017ae:	f8df a048 	ldr.w	sl, [pc, #72]	; 4017f8 <prvIdleTask+0x7c>
  4017b2:	47d0      	blx	sl
			vPortFree( pxTCB );
  4017b4:	4620      	mov	r0, r4
  4017b6:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4017b8:	682b      	ldr	r3, [r5, #0]
  4017ba:	2b00      	cmp	r3, #0
  4017bc:	d1e8      	bne.n	401790 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4017be:	4b0b      	ldr	r3, [pc, #44]	; (4017ec <prvIdleTask+0x70>)
  4017c0:	681b      	ldr	r3, [r3, #0]
  4017c2:	2b01      	cmp	r3, #1
  4017c4:	d9e1      	bls.n	40178a <prvIdleTask+0xe>
				taskYIELD();
  4017c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4017ca:	f8c9 3000 	str.w	r3, [r9]
  4017ce:	f3bf 8f4f 	dsb	sy
  4017d2:	f3bf 8f6f 	isb	sy
  4017d6:	e7d8      	b.n	40178a <prvIdleTask+0xe>
  4017d8:	20400ac8 	.word	0x20400ac8
  4017dc:	20400b3c 	.word	0x20400b3c
  4017e0:	00400b4d 	.word	0x00400b4d
  4017e4:	20400ac4 	.word	0x20400ac4
  4017e8:	00400ca1 	.word	0x00400ca1
  4017ec:	20400a60 	.word	0x20400a60
  4017f0:	00400c55 	.word	0x00400c55
  4017f4:	e000ed04 	.word	0xe000ed04
  4017f8:	00400f11 	.word	0x00400f11

004017fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  4017fc:	b570      	push	{r4, r5, r6, lr}
  4017fe:	4604      	mov	r4, r0
  401800:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401802:	4b1c      	ldr	r3, [pc, #112]	; (401874 <prvAddCurrentTaskToDelayedList+0x78>)
  401804:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401806:	4b1c      	ldr	r3, [pc, #112]	; (401878 <prvAddCurrentTaskToDelayedList+0x7c>)
  401808:	6818      	ldr	r0, [r3, #0]
  40180a:	3004      	adds	r0, #4
  40180c:	4b1b      	ldr	r3, [pc, #108]	; (40187c <prvAddCurrentTaskToDelayedList+0x80>)
  40180e:	4798      	blx	r3
  401810:	b948      	cbnz	r0, 401826 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401812:	4b19      	ldr	r3, [pc, #100]	; (401878 <prvAddCurrentTaskToDelayedList+0x7c>)
  401814:	681a      	ldr	r2, [r3, #0]
  401816:	491a      	ldr	r1, [pc, #104]	; (401880 <prvAddCurrentTaskToDelayedList+0x84>)
  401818:	680b      	ldr	r3, [r1, #0]
  40181a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40181c:	2201      	movs	r2, #1
  40181e:	4082      	lsls	r2, r0
  401820:	ea23 0302 	bic.w	r3, r3, r2
  401824:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401826:	f1b4 3fff 	cmp.w	r4, #4294967295
  40182a:	d100      	bne.n	40182e <prvAddCurrentTaskToDelayedList+0x32>
  40182c:	b99e      	cbnz	r6, 401856 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  40182e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401830:	4b11      	ldr	r3, [pc, #68]	; (401878 <prvAddCurrentTaskToDelayedList+0x7c>)
  401832:	681b      	ldr	r3, [r3, #0]
  401834:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401836:	42a5      	cmp	r5, r4
  401838:	d814      	bhi.n	401864 <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40183a:	4b12      	ldr	r3, [pc, #72]	; (401884 <prvAddCurrentTaskToDelayedList+0x88>)
  40183c:	6818      	ldr	r0, [r3, #0]
  40183e:	4b0e      	ldr	r3, [pc, #56]	; (401878 <prvAddCurrentTaskToDelayedList+0x7c>)
  401840:	6819      	ldr	r1, [r3, #0]
  401842:	3104      	adds	r1, #4
  401844:	4b10      	ldr	r3, [pc, #64]	; (401888 <prvAddCurrentTaskToDelayedList+0x8c>)
  401846:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401848:	4b10      	ldr	r3, [pc, #64]	; (40188c <prvAddCurrentTaskToDelayedList+0x90>)
  40184a:	681b      	ldr	r3, [r3, #0]
  40184c:	429c      	cmp	r4, r3
  40184e:	d201      	bcs.n	401854 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401850:	4b0e      	ldr	r3, [pc, #56]	; (40188c <prvAddCurrentTaskToDelayedList+0x90>)
  401852:	601c      	str	r4, [r3, #0]
  401854:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401856:	4b08      	ldr	r3, [pc, #32]	; (401878 <prvAddCurrentTaskToDelayedList+0x7c>)
  401858:	6819      	ldr	r1, [r3, #0]
  40185a:	3104      	adds	r1, #4
  40185c:	480c      	ldr	r0, [pc, #48]	; (401890 <prvAddCurrentTaskToDelayedList+0x94>)
  40185e:	4b0d      	ldr	r3, [pc, #52]	; (401894 <prvAddCurrentTaskToDelayedList+0x98>)
  401860:	4798      	blx	r3
  401862:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401864:	4b0c      	ldr	r3, [pc, #48]	; (401898 <prvAddCurrentTaskToDelayedList+0x9c>)
  401866:	6818      	ldr	r0, [r3, #0]
  401868:	4b03      	ldr	r3, [pc, #12]	; (401878 <prvAddCurrentTaskToDelayedList+0x7c>)
  40186a:	6819      	ldr	r1, [r3, #0]
  40186c:	3104      	adds	r1, #4
  40186e:	4b06      	ldr	r3, [pc, #24]	; (401888 <prvAddCurrentTaskToDelayedList+0x8c>)
  401870:	4798      	blx	r3
  401872:	bd70      	pop	{r4, r5, r6, pc}
  401874:	20400b50 	.word	0x20400b50
  401878:	20400a54 	.word	0x20400a54
  40187c:	00400b4d 	.word	0x00400b4d
  401880:	20400ad8 	.word	0x20400ad8
  401884:	20400a58 	.word	0x20400a58
  401888:	00400b19 	.word	0x00400b19
  40188c:	20400b08 	.word	0x20400b08
  401890:	20400b28 	.word	0x20400b28
  401894:	00400b01 	.word	0x00400b01
  401898:	20400a5c 	.word	0x20400a5c

0040189c <xTaskCreate>:
	{
  40189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018a0:	b083      	sub	sp, #12
  4018a2:	4683      	mov	fp, r0
  4018a4:	460d      	mov	r5, r1
  4018a6:	9301      	str	r3, [sp, #4]
  4018a8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018ac:	0096      	lsls	r6, r2, #2
  4018ae:	4630      	mov	r0, r6
  4018b0:	4b60      	ldr	r3, [pc, #384]	; (401a34 <xTaskCreate+0x198>)
  4018b2:	4798      	blx	r3
			if( pxStack != NULL )
  4018b4:	2800      	cmp	r0, #0
  4018b6:	f000 808d 	beq.w	4019d4 <xTaskCreate+0x138>
  4018ba:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  4018bc:	2058      	movs	r0, #88	; 0x58
  4018be:	4b5d      	ldr	r3, [pc, #372]	; (401a34 <xTaskCreate+0x198>)
  4018c0:	4798      	blx	r3
				if( pxNewTCB != NULL )
  4018c2:	4604      	mov	r4, r0
  4018c4:	2800      	cmp	r0, #0
  4018c6:	f000 8082 	beq.w	4019ce <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  4018ca:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4018cc:	4632      	mov	r2, r6
  4018ce:	21a5      	movs	r1, #165	; 0xa5
  4018d0:	4638      	mov	r0, r7
  4018d2:	4b59      	ldr	r3, [pc, #356]	; (401a38 <xTaskCreate+0x19c>)
  4018d4:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  4018d6:	3e04      	subs	r6, #4
  4018d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018da:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4018dc:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4018e0:	782b      	ldrb	r3, [r5, #0]
  4018e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4018e6:	782b      	ldrb	r3, [r5, #0]
  4018e8:	b163      	cbz	r3, 401904 <xTaskCreate+0x68>
  4018ea:	462b      	mov	r3, r5
  4018ec:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4018f0:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4018f4:	7858      	ldrb	r0, [r3, #1]
  4018f6:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4018fa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  4018fe:	b108      	cbz	r0, 401904 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401900:	428b      	cmp	r3, r1
  401902:	d1f7      	bne.n	4018f4 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401904:	2700      	movs	r7, #0
  401906:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  40190a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40190c:	2d04      	cmp	r5, #4
  40190e:	bf28      	it	cs
  401910:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  401912:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401914:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401916:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401918:	f104 0804 	add.w	r8, r4, #4
  40191c:	4640      	mov	r0, r8
  40191e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 401a8c <xTaskCreate+0x1f0>
  401922:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401924:	f104 0018 	add.w	r0, r4, #24
  401928:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40192a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40192c:	f1c5 0505 	rsb	r5, r5, #5
  401930:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401932:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  401934:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401936:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40193a:	9a01      	ldr	r2, [sp, #4]
  40193c:	4659      	mov	r1, fp
  40193e:	4630      	mov	r0, r6
  401940:	4b3e      	ldr	r3, [pc, #248]	; (401a3c <xTaskCreate+0x1a0>)
  401942:	4798      	blx	r3
  401944:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  401946:	f1ba 0f00 	cmp.w	sl, #0
  40194a:	d001      	beq.n	401950 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40194c:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401950:	4b3b      	ldr	r3, [pc, #236]	; (401a40 <xTaskCreate+0x1a4>)
  401952:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401954:	4a3b      	ldr	r2, [pc, #236]	; (401a44 <xTaskCreate+0x1a8>)
  401956:	6813      	ldr	r3, [r2, #0]
  401958:	3301      	adds	r3, #1
  40195a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  40195c:	4b3a      	ldr	r3, [pc, #232]	; (401a48 <xTaskCreate+0x1ac>)
  40195e:	681b      	ldr	r3, [r3, #0]
  401960:	2b00      	cmp	r3, #0
  401962:	d03a      	beq.n	4019da <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  401964:	4b39      	ldr	r3, [pc, #228]	; (401a4c <xTaskCreate+0x1b0>)
  401966:	681b      	ldr	r3, [r3, #0]
  401968:	b93b      	cbnz	r3, 40197a <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  40196a:	4b37      	ldr	r3, [pc, #220]	; (401a48 <xTaskCreate+0x1ac>)
  40196c:	681b      	ldr	r3, [r3, #0]
  40196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401972:	429a      	cmp	r2, r3
  401974:	d801      	bhi.n	40197a <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  401976:	4b34      	ldr	r3, [pc, #208]	; (401a48 <xTaskCreate+0x1ac>)
  401978:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  40197a:	4a35      	ldr	r2, [pc, #212]	; (401a50 <xTaskCreate+0x1b4>)
  40197c:	6813      	ldr	r3, [r2, #0]
  40197e:	3301      	adds	r3, #1
  401980:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401982:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  401984:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401986:	4a33      	ldr	r2, [pc, #204]	; (401a54 <xTaskCreate+0x1b8>)
  401988:	6811      	ldr	r1, [r2, #0]
  40198a:	2301      	movs	r3, #1
  40198c:	4083      	lsls	r3, r0
  40198e:	430b      	orrs	r3, r1
  401990:	6013      	str	r3, [r2, #0]
  401992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401996:	4641      	mov	r1, r8
  401998:	4b2f      	ldr	r3, [pc, #188]	; (401a58 <xTaskCreate+0x1bc>)
  40199a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40199e:	4b2f      	ldr	r3, [pc, #188]	; (401a5c <xTaskCreate+0x1c0>)
  4019a0:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4019a2:	4b2f      	ldr	r3, [pc, #188]	; (401a60 <xTaskCreate+0x1c4>)
  4019a4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  4019a6:	4b29      	ldr	r3, [pc, #164]	; (401a4c <xTaskCreate+0x1b0>)
  4019a8:	681b      	ldr	r3, [r3, #0]
  4019aa:	2b00      	cmp	r3, #0
  4019ac:	d03b      	beq.n	401a26 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4019ae:	4b26      	ldr	r3, [pc, #152]	; (401a48 <xTaskCreate+0x1ac>)
  4019b0:	681b      	ldr	r3, [r3, #0]
  4019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4019b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4019b6:	429a      	cmp	r2, r3
  4019b8:	d239      	bcs.n	401a2e <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  4019ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019be:	4b29      	ldr	r3, [pc, #164]	; (401a64 <xTaskCreate+0x1c8>)
  4019c0:	601a      	str	r2, [r3, #0]
  4019c2:	f3bf 8f4f 	dsb	sy
  4019c6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4019ca:	2001      	movs	r0, #1
  4019cc:	e02c      	b.n	401a28 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  4019ce:	4638      	mov	r0, r7
  4019d0:	4b25      	ldr	r3, [pc, #148]	; (401a68 <xTaskCreate+0x1cc>)
  4019d2:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4019d4:	f04f 30ff 	mov.w	r0, #4294967295
  4019d8:	e026      	b.n	401a28 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  4019da:	4b1b      	ldr	r3, [pc, #108]	; (401a48 <xTaskCreate+0x1ac>)
  4019dc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4019de:	6813      	ldr	r3, [r2, #0]
  4019e0:	2b01      	cmp	r3, #1
  4019e2:	d1ca      	bne.n	40197a <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4019e4:	4e1c      	ldr	r6, [pc, #112]	; (401a58 <xTaskCreate+0x1bc>)
  4019e6:	4630      	mov	r0, r6
  4019e8:	4d20      	ldr	r5, [pc, #128]	; (401a6c <xTaskCreate+0x1d0>)
  4019ea:	47a8      	blx	r5
  4019ec:	f106 0014 	add.w	r0, r6, #20
  4019f0:	47a8      	blx	r5
  4019f2:	f106 0028 	add.w	r0, r6, #40	; 0x28
  4019f6:	47a8      	blx	r5
  4019f8:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  4019fc:	47a8      	blx	r5
  4019fe:	f106 0050 	add.w	r0, r6, #80	; 0x50
  401a02:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401a04:	4f1a      	ldr	r7, [pc, #104]	; (401a70 <xTaskCreate+0x1d4>)
  401a06:	4638      	mov	r0, r7
  401a08:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401a0a:	4e1a      	ldr	r6, [pc, #104]	; (401a74 <xTaskCreate+0x1d8>)
  401a0c:	4630      	mov	r0, r6
  401a0e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401a10:	4819      	ldr	r0, [pc, #100]	; (401a78 <xTaskCreate+0x1dc>)
  401a12:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401a14:	4819      	ldr	r0, [pc, #100]	; (401a7c <xTaskCreate+0x1e0>)
  401a16:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401a18:	4819      	ldr	r0, [pc, #100]	; (401a80 <xTaskCreate+0x1e4>)
  401a1a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401a1c:	4b19      	ldr	r3, [pc, #100]	; (401a84 <xTaskCreate+0x1e8>)
  401a1e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401a20:	4b19      	ldr	r3, [pc, #100]	; (401a88 <xTaskCreate+0x1ec>)
  401a22:	601e      	str	r6, [r3, #0]
  401a24:	e7a9      	b.n	40197a <xTaskCreate+0xde>
			xReturn = pdPASS;
  401a26:	2001      	movs	r0, #1
	}
  401a28:	b003      	add	sp, #12
  401a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  401a2e:	2001      	movs	r0, #1
		return xReturn;
  401a30:	e7fa      	b.n	401a28 <xTaskCreate+0x18c>
  401a32:	bf00      	nop
  401a34:	00400ee1 	.word	0x00400ee1
  401a38:	0040323d 	.word	0x0040323d
  401a3c:	00400bf9 	.word	0x00400bf9
  401a40:	00400c55 	.word	0x00400c55
  401a44:	20400ac4 	.word	0x20400ac4
  401a48:	20400a54 	.word	0x20400a54
  401a4c:	20400b24 	.word	0x20400b24
  401a50:	20400ad4 	.word	0x20400ad4
  401a54:	20400ad8 	.word	0x20400ad8
  401a58:	20400a60 	.word	0x20400a60
  401a5c:	00400b01 	.word	0x00400b01
  401a60:	00400ca1 	.word	0x00400ca1
  401a64:	e000ed04 	.word	0xe000ed04
  401a68:	00400f11 	.word	0x00400f11
  401a6c:	00400ae5 	.word	0x00400ae5
  401a70:	20400adc 	.word	0x20400adc
  401a74:	20400af0 	.word	0x20400af0
  401a78:	20400b10 	.word	0x20400b10
  401a7c:	20400b3c 	.word	0x20400b3c
  401a80:	20400b28 	.word	0x20400b28
  401a84:	20400a58 	.word	0x20400a58
  401a88:	20400a5c 	.word	0x20400a5c
  401a8c:	00400afb 	.word	0x00400afb

00401a90 <vTaskStartScheduler>:
{
  401a90:	b510      	push	{r4, lr}
  401a92:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  401a94:	4b1a      	ldr	r3, [pc, #104]	; (401b00 <vTaskStartScheduler+0x70>)
  401a96:	9301      	str	r3, [sp, #4]
  401a98:	2300      	movs	r3, #0
  401a9a:	9300      	str	r3, [sp, #0]
  401a9c:	2282      	movs	r2, #130	; 0x82
  401a9e:	4919      	ldr	r1, [pc, #100]	; (401b04 <vTaskStartScheduler+0x74>)
  401aa0:	4819      	ldr	r0, [pc, #100]	; (401b08 <vTaskStartScheduler+0x78>)
  401aa2:	4c1a      	ldr	r4, [pc, #104]	; (401b0c <vTaskStartScheduler+0x7c>)
  401aa4:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401aa6:	2801      	cmp	r0, #1
  401aa8:	d004      	beq.n	401ab4 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401aaa:	f1b0 3fff 	cmp.w	r0, #4294967295
  401aae:	d01c      	beq.n	401aea <vTaskStartScheduler+0x5a>
}
  401ab0:	b002      	add	sp, #8
  401ab2:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401ab4:	4b16      	ldr	r3, [pc, #88]	; (401b10 <vTaskStartScheduler+0x80>)
  401ab6:	4798      	blx	r3
	if( xReturn == pdPASS )
  401ab8:	2801      	cmp	r0, #1
  401aba:	d1f6      	bne.n	401aaa <vTaskStartScheduler+0x1a>
  401abc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac0:	b672      	cpsid	i
  401ac2:	f383 8811 	msr	BASEPRI, r3
  401ac6:	f3bf 8f6f 	isb	sy
  401aca:	f3bf 8f4f 	dsb	sy
  401ace:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401ad0:	f04f 32ff 	mov.w	r2, #4294967295
  401ad4:	4b0f      	ldr	r3, [pc, #60]	; (401b14 <vTaskStartScheduler+0x84>)
  401ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401ad8:	2201      	movs	r2, #1
  401ada:	4b0f      	ldr	r3, [pc, #60]	; (401b18 <vTaskStartScheduler+0x88>)
  401adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401ade:	2200      	movs	r2, #0
  401ae0:	4b0e      	ldr	r3, [pc, #56]	; (401b1c <vTaskStartScheduler+0x8c>)
  401ae2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401ae4:	4b0e      	ldr	r3, [pc, #56]	; (401b20 <vTaskStartScheduler+0x90>)
  401ae6:	4798      	blx	r3
  401ae8:	e7e2      	b.n	401ab0 <vTaskStartScheduler+0x20>
  401aea:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aee:	b672      	cpsid	i
  401af0:	f383 8811 	msr	BASEPRI, r3
  401af4:	f3bf 8f6f 	isb	sy
  401af8:	f3bf 8f4f 	dsb	sy
  401afc:	b662      	cpsie	i
  401afe:	e7fe      	b.n	401afe <vTaskStartScheduler+0x6e>
  401b00:	20400b04 	.word	0x20400b04
  401b04:	00405a98 	.word	0x00405a98
  401b08:	0040177d 	.word	0x0040177d
  401b0c:	0040189d 	.word	0x0040189d
  401b10:	00402239 	.word	0x00402239
  401b14:	20400b08 	.word	0x20400b08
  401b18:	20400b24 	.word	0x20400b24
  401b1c:	20400b50 	.word	0x20400b50
  401b20:	00400d91 	.word	0x00400d91

00401b24 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401b24:	4a02      	ldr	r2, [pc, #8]	; (401b30 <vTaskSuspendAll+0xc>)
  401b26:	6813      	ldr	r3, [r2, #0]
  401b28:	3301      	adds	r3, #1
  401b2a:	6013      	str	r3, [r2, #0]
  401b2c:	4770      	bx	lr
  401b2e:	bf00      	nop
  401b30:	20400ad0 	.word	0x20400ad0

00401b34 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401b34:	4b01      	ldr	r3, [pc, #4]	; (401b3c <xTaskGetTickCount+0x8>)
  401b36:	6818      	ldr	r0, [r3, #0]
}
  401b38:	4770      	bx	lr
  401b3a:	bf00      	nop
  401b3c:	20400b50 	.word	0x20400b50

00401b40 <xTaskIncrementTick>:
{
  401b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b44:	4b41      	ldr	r3, [pc, #260]	; (401c4c <xTaskIncrementTick+0x10c>)
  401b46:	681b      	ldr	r3, [r3, #0]
  401b48:	2b00      	cmp	r3, #0
  401b4a:	d177      	bne.n	401c3c <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401b4c:	4b40      	ldr	r3, [pc, #256]	; (401c50 <xTaskIncrementTick+0x110>)
  401b4e:	681d      	ldr	r5, [r3, #0]
  401b50:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  401b52:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401b54:	b9d5      	cbnz	r5, 401b8c <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  401b56:	4b3f      	ldr	r3, [pc, #252]	; (401c54 <xTaskIncrementTick+0x114>)
  401b58:	681b      	ldr	r3, [r3, #0]
  401b5a:	681b      	ldr	r3, [r3, #0]
  401b5c:	b153      	cbz	r3, 401b74 <xTaskIncrementTick+0x34>
  401b5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b62:	b672      	cpsid	i
  401b64:	f383 8811 	msr	BASEPRI, r3
  401b68:	f3bf 8f6f 	isb	sy
  401b6c:	f3bf 8f4f 	dsb	sy
  401b70:	b662      	cpsie	i
  401b72:	e7fe      	b.n	401b72 <xTaskIncrementTick+0x32>
  401b74:	4a37      	ldr	r2, [pc, #220]	; (401c54 <xTaskIncrementTick+0x114>)
  401b76:	6811      	ldr	r1, [r2, #0]
  401b78:	4b37      	ldr	r3, [pc, #220]	; (401c58 <xTaskIncrementTick+0x118>)
  401b7a:	6818      	ldr	r0, [r3, #0]
  401b7c:	6010      	str	r0, [r2, #0]
  401b7e:	6019      	str	r1, [r3, #0]
  401b80:	4a36      	ldr	r2, [pc, #216]	; (401c5c <xTaskIncrementTick+0x11c>)
  401b82:	6813      	ldr	r3, [r2, #0]
  401b84:	3301      	adds	r3, #1
  401b86:	6013      	str	r3, [r2, #0]
  401b88:	4b35      	ldr	r3, [pc, #212]	; (401c60 <xTaskIncrementTick+0x120>)
  401b8a:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  401b8c:	4b35      	ldr	r3, [pc, #212]	; (401c64 <xTaskIncrementTick+0x124>)
  401b8e:	681b      	ldr	r3, [r3, #0]
  401b90:	429d      	cmp	r5, r3
  401b92:	d218      	bcs.n	401bc6 <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  401b94:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401b96:	4b34      	ldr	r3, [pc, #208]	; (401c68 <xTaskIncrementTick+0x128>)
  401b98:	681b      	ldr	r3, [r3, #0]
  401b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ba0:	009b      	lsls	r3, r3, #2
  401ba2:	4a32      	ldr	r2, [pc, #200]	; (401c6c <xTaskIncrementTick+0x12c>)
  401ba4:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  401ba6:	2b02      	cmp	r3, #2
  401ba8:	bf28      	it	cs
  401baa:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401bac:	4b30      	ldr	r3, [pc, #192]	; (401c70 <xTaskIncrementTick+0x130>)
  401bae:	681b      	ldr	r3, [r3, #0]
  401bb0:	b90b      	cbnz	r3, 401bb6 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  401bb2:	4b30      	ldr	r3, [pc, #192]	; (401c74 <xTaskIncrementTick+0x134>)
  401bb4:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401bb6:	4b30      	ldr	r3, [pc, #192]	; (401c78 <xTaskIncrementTick+0x138>)
  401bb8:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401bba:	2b00      	cmp	r3, #0
}
  401bbc:	bf0c      	ite	eq
  401bbe:	4620      	moveq	r0, r4
  401bc0:	2001      	movne	r0, #1
  401bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bc6:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401bc8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 401c54 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401bcc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 401c84 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  401bd0:	4f2a      	ldr	r7, [pc, #168]	; (401c7c <xTaskIncrementTick+0x13c>)
  401bd2:	e01f      	b.n	401c14 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401bd4:	f04f 32ff 	mov.w	r2, #4294967295
  401bd8:	4b22      	ldr	r3, [pc, #136]	; (401c64 <xTaskIncrementTick+0x124>)
  401bda:	601a      	str	r2, [r3, #0]
					break;
  401bdc:	e7db      	b.n	401b96 <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  401bde:	4a21      	ldr	r2, [pc, #132]	; (401c64 <xTaskIncrementTick+0x124>)
  401be0:	6013      	str	r3, [r2, #0]
						break;
  401be2:	e7d8      	b.n	401b96 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401be4:	f106 0018 	add.w	r0, r6, #24
  401be8:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401bea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  401bec:	683a      	ldr	r2, [r7, #0]
  401bee:	2301      	movs	r3, #1
  401bf0:	4083      	lsls	r3, r0
  401bf2:	4313      	orrs	r3, r2
  401bf4:	603b      	str	r3, [r7, #0]
  401bf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401bfa:	4651      	mov	r1, sl
  401bfc:	4b1b      	ldr	r3, [pc, #108]	; (401c6c <xTaskIncrementTick+0x12c>)
  401bfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c02:	4b1f      	ldr	r3, [pc, #124]	; (401c80 <xTaskIncrementTick+0x140>)
  401c04:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c06:	4b18      	ldr	r3, [pc, #96]	; (401c68 <xTaskIncrementTick+0x128>)
  401c08:	681b      	ldr	r3, [r3, #0]
  401c0a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  401c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  401c0e:	429a      	cmp	r2, r3
  401c10:	bf28      	it	cs
  401c12:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401c14:	f8d9 3000 	ldr.w	r3, [r9]
  401c18:	681b      	ldr	r3, [r3, #0]
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d0da      	beq.n	401bd4 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401c1e:	f8d9 3000 	ldr.w	r3, [r9]
  401c22:	68db      	ldr	r3, [r3, #12]
  401c24:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401c26:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  401c28:	429d      	cmp	r5, r3
  401c2a:	d3d8      	bcc.n	401bde <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401c2c:	f106 0a04 	add.w	sl, r6, #4
  401c30:	4650      	mov	r0, sl
  401c32:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401c34:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  401c36:	2b00      	cmp	r3, #0
  401c38:	d1d4      	bne.n	401be4 <xTaskIncrementTick+0xa4>
  401c3a:	e7d6      	b.n	401bea <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  401c3c:	4a0c      	ldr	r2, [pc, #48]	; (401c70 <xTaskIncrementTick+0x130>)
  401c3e:	6813      	ldr	r3, [r2, #0]
  401c40:	3301      	adds	r3, #1
  401c42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401c44:	4b0b      	ldr	r3, [pc, #44]	; (401c74 <xTaskIncrementTick+0x134>)
  401c46:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401c48:	2400      	movs	r4, #0
  401c4a:	e7b4      	b.n	401bb6 <xTaskIncrementTick+0x76>
  401c4c:	20400ad0 	.word	0x20400ad0
  401c50:	20400b50 	.word	0x20400b50
  401c54:	20400a58 	.word	0x20400a58
  401c58:	20400a5c 	.word	0x20400a5c
  401c5c:	20400b0c 	.word	0x20400b0c
  401c60:	00401751 	.word	0x00401751
  401c64:	20400b08 	.word	0x20400b08
  401c68:	20400a54 	.word	0x20400a54
  401c6c:	20400a60 	.word	0x20400a60
  401c70:	20400acc 	.word	0x20400acc
  401c74:	00402791 	.word	0x00402791
  401c78:	20400b54 	.word	0x20400b54
  401c7c:	20400ad8 	.word	0x20400ad8
  401c80:	00400b01 	.word	0x00400b01
  401c84:	00400b4d 	.word	0x00400b4d

00401c88 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  401c88:	4b36      	ldr	r3, [pc, #216]	; (401d64 <xTaskResumeAll+0xdc>)
  401c8a:	681b      	ldr	r3, [r3, #0]
  401c8c:	b953      	cbnz	r3, 401ca4 <xTaskResumeAll+0x1c>
  401c8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c92:	b672      	cpsid	i
  401c94:	f383 8811 	msr	BASEPRI, r3
  401c98:	f3bf 8f6f 	isb	sy
  401c9c:	f3bf 8f4f 	dsb	sy
  401ca0:	b662      	cpsie	i
  401ca2:	e7fe      	b.n	401ca2 <xTaskResumeAll+0x1a>
{
  401ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  401ca8:	4b2f      	ldr	r3, [pc, #188]	; (401d68 <xTaskResumeAll+0xe0>)
  401caa:	4798      	blx	r3
		--uxSchedulerSuspended;
  401cac:	4b2d      	ldr	r3, [pc, #180]	; (401d64 <xTaskResumeAll+0xdc>)
  401cae:	681a      	ldr	r2, [r3, #0]
  401cb0:	3a01      	subs	r2, #1
  401cb2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401cb4:	681b      	ldr	r3, [r3, #0]
  401cb6:	2b00      	cmp	r3, #0
  401cb8:	d150      	bne.n	401d5c <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401cba:	4b2c      	ldr	r3, [pc, #176]	; (401d6c <xTaskResumeAll+0xe4>)
  401cbc:	681b      	ldr	r3, [r3, #0]
  401cbe:	b92b      	cbnz	r3, 401ccc <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  401cc0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401cc2:	4b2b      	ldr	r3, [pc, #172]	; (401d70 <xTaskResumeAll+0xe8>)
  401cc4:	4798      	blx	r3
}
  401cc6:	4620      	mov	r0, r4
  401cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ccc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cce:	4f29      	ldr	r7, [pc, #164]	; (401d74 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cd0:	4e29      	ldr	r6, [pc, #164]	; (401d78 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  401cd2:	4d2a      	ldr	r5, [pc, #168]	; (401d7c <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cd4:	683b      	ldr	r3, [r7, #0]
  401cd6:	b303      	cbz	r3, 401d1a <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401cd8:	68fb      	ldr	r3, [r7, #12]
  401cda:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cdc:	f104 0018 	add.w	r0, r4, #24
  401ce0:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401ce2:	f104 0804 	add.w	r8, r4, #4
  401ce6:	4640      	mov	r0, r8
  401ce8:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401cea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401cec:	682a      	ldr	r2, [r5, #0]
  401cee:	2301      	movs	r3, #1
  401cf0:	4083      	lsls	r3, r0
  401cf2:	4313      	orrs	r3, r2
  401cf4:	602b      	str	r3, [r5, #0]
  401cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401cfa:	4641      	mov	r1, r8
  401cfc:	4b20      	ldr	r3, [pc, #128]	; (401d80 <xTaskResumeAll+0xf8>)
  401cfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d02:	4b20      	ldr	r3, [pc, #128]	; (401d84 <xTaskResumeAll+0xfc>)
  401d04:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401d06:	4b20      	ldr	r3, [pc, #128]	; (401d88 <xTaskResumeAll+0x100>)
  401d08:	681b      	ldr	r3, [r3, #0]
  401d0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d0e:	429a      	cmp	r2, r3
  401d10:	d3e0      	bcc.n	401cd4 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  401d12:	2201      	movs	r2, #1
  401d14:	4b1d      	ldr	r3, [pc, #116]	; (401d8c <xTaskResumeAll+0x104>)
  401d16:	601a      	str	r2, [r3, #0]
  401d18:	e7dc      	b.n	401cd4 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  401d1a:	b10c      	cbz	r4, 401d20 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  401d1c:	4b1c      	ldr	r3, [pc, #112]	; (401d90 <xTaskResumeAll+0x108>)
  401d1e:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  401d20:	4b1c      	ldr	r3, [pc, #112]	; (401d94 <xTaskResumeAll+0x10c>)
  401d22:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  401d24:	b16c      	cbz	r4, 401d42 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  401d26:	4f1c      	ldr	r7, [pc, #112]	; (401d98 <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  401d28:	4e18      	ldr	r6, [pc, #96]	; (401d8c <xTaskResumeAll+0x104>)
  401d2a:	2501      	movs	r5, #1
  401d2c:	e001      	b.n	401d32 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  401d2e:	3c01      	subs	r4, #1
  401d30:	d004      	beq.n	401d3c <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  401d32:	47b8      	blx	r7
  401d34:	2800      	cmp	r0, #0
  401d36:	d0fa      	beq.n	401d2e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  401d38:	6035      	str	r5, [r6, #0]
  401d3a:	e7f8      	b.n	401d2e <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  401d3c:	2200      	movs	r2, #0
  401d3e:	4b15      	ldr	r3, [pc, #84]	; (401d94 <xTaskResumeAll+0x10c>)
  401d40:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  401d42:	4b12      	ldr	r3, [pc, #72]	; (401d8c <xTaskResumeAll+0x104>)
  401d44:	681b      	ldr	r3, [r3, #0]
  401d46:	b15b      	cbz	r3, 401d60 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  401d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d4c:	4b13      	ldr	r3, [pc, #76]	; (401d9c <xTaskResumeAll+0x114>)
  401d4e:	601a      	str	r2, [r3, #0]
  401d50:	f3bf 8f4f 	dsb	sy
  401d54:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401d58:	2401      	movs	r4, #1
  401d5a:	e7b2      	b.n	401cc2 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  401d5c:	2400      	movs	r4, #0
  401d5e:	e7b0      	b.n	401cc2 <xTaskResumeAll+0x3a>
  401d60:	2400      	movs	r4, #0
  401d62:	e7ae      	b.n	401cc2 <xTaskResumeAll+0x3a>
  401d64:	20400ad0 	.word	0x20400ad0
  401d68:	00400c55 	.word	0x00400c55
  401d6c:	20400ac4 	.word	0x20400ac4
  401d70:	00400ca1 	.word	0x00400ca1
  401d74:	20400b10 	.word	0x20400b10
  401d78:	00400b4d 	.word	0x00400b4d
  401d7c:	20400ad8 	.word	0x20400ad8
  401d80:	20400a60 	.word	0x20400a60
  401d84:	00400b01 	.word	0x00400b01
  401d88:	20400a54 	.word	0x20400a54
  401d8c:	20400b54 	.word	0x20400b54
  401d90:	00401751 	.word	0x00401751
  401d94:	20400acc 	.word	0x20400acc
  401d98:	00401b41 	.word	0x00401b41
  401d9c:	e000ed04 	.word	0xe000ed04

00401da0 <vTaskDelay>:
	{
  401da0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401da2:	b1b8      	cbz	r0, 401dd4 <vTaskDelay+0x34>
  401da4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  401da6:	4b10      	ldr	r3, [pc, #64]	; (401de8 <vTaskDelay+0x48>)
  401da8:	681b      	ldr	r3, [r3, #0]
  401daa:	b153      	cbz	r3, 401dc2 <vTaskDelay+0x22>
  401dac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401db0:	b672      	cpsid	i
  401db2:	f383 8811 	msr	BASEPRI, r3
  401db6:	f3bf 8f6f 	isb	sy
  401dba:	f3bf 8f4f 	dsb	sy
  401dbe:	b662      	cpsie	i
  401dc0:	e7fe      	b.n	401dc0 <vTaskDelay+0x20>
			vTaskSuspendAll();
  401dc2:	4b0a      	ldr	r3, [pc, #40]	; (401dec <vTaskDelay+0x4c>)
  401dc4:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401dc6:	2100      	movs	r1, #0
  401dc8:	4620      	mov	r0, r4
  401dca:	4b09      	ldr	r3, [pc, #36]	; (401df0 <vTaskDelay+0x50>)
  401dcc:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401dce:	4b09      	ldr	r3, [pc, #36]	; (401df4 <vTaskDelay+0x54>)
  401dd0:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401dd2:	b938      	cbnz	r0, 401de4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  401dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401dd8:	4b07      	ldr	r3, [pc, #28]	; (401df8 <vTaskDelay+0x58>)
  401dda:	601a      	str	r2, [r3, #0]
  401ddc:	f3bf 8f4f 	dsb	sy
  401de0:	f3bf 8f6f 	isb	sy
  401de4:	bd10      	pop	{r4, pc}
  401de6:	bf00      	nop
  401de8:	20400ad0 	.word	0x20400ad0
  401dec:	00401b25 	.word	0x00401b25
  401df0:	004017fd 	.word	0x004017fd
  401df4:	00401c89 	.word	0x00401c89
  401df8:	e000ed04 	.word	0xe000ed04

00401dfc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401dfc:	4b2d      	ldr	r3, [pc, #180]	; (401eb4 <vTaskSwitchContext+0xb8>)
  401dfe:	681b      	ldr	r3, [r3, #0]
  401e00:	2b00      	cmp	r3, #0
  401e02:	d12c      	bne.n	401e5e <vTaskSwitchContext+0x62>
{
  401e04:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401e06:	2200      	movs	r2, #0
  401e08:	4b2b      	ldr	r3, [pc, #172]	; (401eb8 <vTaskSwitchContext+0xbc>)
  401e0a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401e0c:	4b2b      	ldr	r3, [pc, #172]	; (401ebc <vTaskSwitchContext+0xc0>)
  401e0e:	681b      	ldr	r3, [r3, #0]
  401e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e12:	681a      	ldr	r2, [r3, #0]
  401e14:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401e18:	d103      	bne.n	401e22 <vTaskSwitchContext+0x26>
  401e1a:	685a      	ldr	r2, [r3, #4]
  401e1c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401e20:	d021      	beq.n	401e66 <vTaskSwitchContext+0x6a>
  401e22:	4b26      	ldr	r3, [pc, #152]	; (401ebc <vTaskSwitchContext+0xc0>)
  401e24:	6818      	ldr	r0, [r3, #0]
  401e26:	6819      	ldr	r1, [r3, #0]
  401e28:	3134      	adds	r1, #52	; 0x34
  401e2a:	4b25      	ldr	r3, [pc, #148]	; (401ec0 <vTaskSwitchContext+0xc4>)
  401e2c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e2e:	4b25      	ldr	r3, [pc, #148]	; (401ec4 <vTaskSwitchContext+0xc8>)
  401e30:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  401e32:	fab3 f383 	clz	r3, r3
  401e36:	b2db      	uxtb	r3, r3
  401e38:	f1c3 031f 	rsb	r3, r3, #31
  401e3c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401e40:	0092      	lsls	r2, r2, #2
  401e42:	4921      	ldr	r1, [pc, #132]	; (401ec8 <vTaskSwitchContext+0xcc>)
  401e44:	588a      	ldr	r2, [r1, r2]
  401e46:	b9ba      	cbnz	r2, 401e78 <vTaskSwitchContext+0x7c>
	__asm volatile
  401e48:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e4c:	b672      	cpsid	i
  401e4e:	f383 8811 	msr	BASEPRI, r3
  401e52:	f3bf 8f6f 	isb	sy
  401e56:	f3bf 8f4f 	dsb	sy
  401e5a:	b662      	cpsie	i
  401e5c:	e7fe      	b.n	401e5c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401e5e:	2201      	movs	r2, #1
  401e60:	4b15      	ldr	r3, [pc, #84]	; (401eb8 <vTaskSwitchContext+0xbc>)
  401e62:	601a      	str	r2, [r3, #0]
  401e64:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401e66:	689a      	ldr	r2, [r3, #8]
  401e68:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401e6c:	d1d9      	bne.n	401e22 <vTaskSwitchContext+0x26>
  401e6e:	68db      	ldr	r3, [r3, #12]
  401e70:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401e74:	d1d5      	bne.n	401e22 <vTaskSwitchContext+0x26>
  401e76:	e7da      	b.n	401e2e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e78:	4a13      	ldr	r2, [pc, #76]	; (401ec8 <vTaskSwitchContext+0xcc>)
  401e7a:	0099      	lsls	r1, r3, #2
  401e7c:	18c8      	adds	r0, r1, r3
  401e7e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401e82:	6844      	ldr	r4, [r0, #4]
  401e84:	6864      	ldr	r4, [r4, #4]
  401e86:	6044      	str	r4, [r0, #4]
  401e88:	4419      	add	r1, r3
  401e8a:	4602      	mov	r2, r0
  401e8c:	3208      	adds	r2, #8
  401e8e:	4294      	cmp	r4, r2
  401e90:	d009      	beq.n	401ea6 <vTaskSwitchContext+0xaa>
  401e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e96:	4a0c      	ldr	r2, [pc, #48]	; (401ec8 <vTaskSwitchContext+0xcc>)
  401e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401e9c:	685b      	ldr	r3, [r3, #4]
  401e9e:	68da      	ldr	r2, [r3, #12]
  401ea0:	4b06      	ldr	r3, [pc, #24]	; (401ebc <vTaskSwitchContext+0xc0>)
  401ea2:	601a      	str	r2, [r3, #0]
  401ea4:	bd10      	pop	{r4, pc}
  401ea6:	6860      	ldr	r0, [r4, #4]
  401ea8:	4a07      	ldr	r2, [pc, #28]	; (401ec8 <vTaskSwitchContext+0xcc>)
  401eaa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401eae:	6050      	str	r0, [r2, #4]
  401eb0:	e7ef      	b.n	401e92 <vTaskSwitchContext+0x96>
  401eb2:	bf00      	nop
  401eb4:	20400ad0 	.word	0x20400ad0
  401eb8:	20400b54 	.word	0x20400b54
  401ebc:	20400a54 	.word	0x20400a54
  401ec0:	00402779 	.word	0x00402779
  401ec4:	20400ad8 	.word	0x20400ad8
  401ec8:	20400a60 	.word	0x20400a60

00401ecc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  401ecc:	b950      	cbnz	r0, 401ee4 <vTaskPlaceOnEventList+0x18>
  401ece:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ed2:	b672      	cpsid	i
  401ed4:	f383 8811 	msr	BASEPRI, r3
  401ed8:	f3bf 8f6f 	isb	sy
  401edc:	f3bf 8f4f 	dsb	sy
  401ee0:	b662      	cpsie	i
  401ee2:	e7fe      	b.n	401ee2 <vTaskPlaceOnEventList+0x16>
{
  401ee4:	b510      	push	{r4, lr}
  401ee6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401ee8:	4b04      	ldr	r3, [pc, #16]	; (401efc <vTaskPlaceOnEventList+0x30>)
  401eea:	6819      	ldr	r1, [r3, #0]
  401eec:	3118      	adds	r1, #24
  401eee:	4b04      	ldr	r3, [pc, #16]	; (401f00 <vTaskPlaceOnEventList+0x34>)
  401ef0:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401ef2:	2101      	movs	r1, #1
  401ef4:	4620      	mov	r0, r4
  401ef6:	4b03      	ldr	r3, [pc, #12]	; (401f04 <vTaskPlaceOnEventList+0x38>)
  401ef8:	4798      	blx	r3
  401efa:	bd10      	pop	{r4, pc}
  401efc:	20400a54 	.word	0x20400a54
  401f00:	00400b19 	.word	0x00400b19
  401f04:	004017fd 	.word	0x004017fd

00401f08 <vTaskPlaceOnEventListRestricted>:
	{
  401f08:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  401f0a:	b178      	cbz	r0, 401f2c <vTaskPlaceOnEventListRestricted+0x24>
  401f0c:	4614      	mov	r4, r2
  401f0e:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f10:	4b0c      	ldr	r3, [pc, #48]	; (401f44 <vTaskPlaceOnEventListRestricted+0x3c>)
  401f12:	6819      	ldr	r1, [r3, #0]
  401f14:	3118      	adds	r1, #24
  401f16:	4b0c      	ldr	r3, [pc, #48]	; (401f48 <vTaskPlaceOnEventListRestricted+0x40>)
  401f18:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  401f1a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401f1c:	4621      	mov	r1, r4
  401f1e:	bf0c      	ite	eq
  401f20:	4628      	moveq	r0, r5
  401f22:	f04f 30ff 	movne.w	r0, #4294967295
  401f26:	4b09      	ldr	r3, [pc, #36]	; (401f4c <vTaskPlaceOnEventListRestricted+0x44>)
  401f28:	4798      	blx	r3
  401f2a:	bd38      	pop	{r3, r4, r5, pc}
  401f2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f30:	b672      	cpsid	i
  401f32:	f383 8811 	msr	BASEPRI, r3
  401f36:	f3bf 8f6f 	isb	sy
  401f3a:	f3bf 8f4f 	dsb	sy
  401f3e:	b662      	cpsie	i
  401f40:	e7fe      	b.n	401f40 <vTaskPlaceOnEventListRestricted+0x38>
  401f42:	bf00      	nop
  401f44:	20400a54 	.word	0x20400a54
  401f48:	00400b01 	.word	0x00400b01
  401f4c:	004017fd 	.word	0x004017fd

00401f50 <xTaskRemoveFromEventList>:
{
  401f50:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401f52:	68c3      	ldr	r3, [r0, #12]
  401f54:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401f56:	b324      	cbz	r4, 401fa2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401f58:	f104 0518 	add.w	r5, r4, #24
  401f5c:	4628      	mov	r0, r5
  401f5e:	4b1a      	ldr	r3, [pc, #104]	; (401fc8 <xTaskRemoveFromEventList+0x78>)
  401f60:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401f62:	4b1a      	ldr	r3, [pc, #104]	; (401fcc <xTaskRemoveFromEventList+0x7c>)
  401f64:	681b      	ldr	r3, [r3, #0]
  401f66:	bb3b      	cbnz	r3, 401fb8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  401f68:	1d25      	adds	r5, r4, #4
  401f6a:	4628      	mov	r0, r5
  401f6c:	4b16      	ldr	r3, [pc, #88]	; (401fc8 <xTaskRemoveFromEventList+0x78>)
  401f6e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401f70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f72:	4a17      	ldr	r2, [pc, #92]	; (401fd0 <xTaskRemoveFromEventList+0x80>)
  401f74:	6811      	ldr	r1, [r2, #0]
  401f76:	2301      	movs	r3, #1
  401f78:	4083      	lsls	r3, r0
  401f7a:	430b      	orrs	r3, r1
  401f7c:	6013      	str	r3, [r2, #0]
  401f7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f82:	4629      	mov	r1, r5
  401f84:	4b13      	ldr	r3, [pc, #76]	; (401fd4 <xTaskRemoveFromEventList+0x84>)
  401f86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f8a:	4b13      	ldr	r3, [pc, #76]	; (401fd8 <xTaskRemoveFromEventList+0x88>)
  401f8c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401f8e:	4b13      	ldr	r3, [pc, #76]	; (401fdc <xTaskRemoveFromEventList+0x8c>)
  401f90:	681b      	ldr	r3, [r3, #0]
  401f92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f96:	429a      	cmp	r2, r3
  401f98:	d913      	bls.n	401fc2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401f9a:	2001      	movs	r0, #1
  401f9c:	4b10      	ldr	r3, [pc, #64]	; (401fe0 <xTaskRemoveFromEventList+0x90>)
  401f9e:	6018      	str	r0, [r3, #0]
  401fa0:	bd38      	pop	{r3, r4, r5, pc}
  401fa2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fa6:	b672      	cpsid	i
  401fa8:	f383 8811 	msr	BASEPRI, r3
  401fac:	f3bf 8f6f 	isb	sy
  401fb0:	f3bf 8f4f 	dsb	sy
  401fb4:	b662      	cpsie	i
  401fb6:	e7fe      	b.n	401fb6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401fb8:	4629      	mov	r1, r5
  401fba:	480a      	ldr	r0, [pc, #40]	; (401fe4 <xTaskRemoveFromEventList+0x94>)
  401fbc:	4b06      	ldr	r3, [pc, #24]	; (401fd8 <xTaskRemoveFromEventList+0x88>)
  401fbe:	4798      	blx	r3
  401fc0:	e7e5      	b.n	401f8e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401fc2:	2000      	movs	r0, #0
}
  401fc4:	bd38      	pop	{r3, r4, r5, pc}
  401fc6:	bf00      	nop
  401fc8:	00400b4d 	.word	0x00400b4d
  401fcc:	20400ad0 	.word	0x20400ad0
  401fd0:	20400ad8 	.word	0x20400ad8
  401fd4:	20400a60 	.word	0x20400a60
  401fd8:	00400b01 	.word	0x00400b01
  401fdc:	20400a54 	.word	0x20400a54
  401fe0:	20400b54 	.word	0x20400b54
  401fe4:	20400b10 	.word	0x20400b10

00401fe8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401fe8:	4b03      	ldr	r3, [pc, #12]	; (401ff8 <vTaskInternalSetTimeOutState+0x10>)
  401fea:	681b      	ldr	r3, [r3, #0]
  401fec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401fee:	4b03      	ldr	r3, [pc, #12]	; (401ffc <vTaskInternalSetTimeOutState+0x14>)
  401ff0:	681b      	ldr	r3, [r3, #0]
  401ff2:	6043      	str	r3, [r0, #4]
  401ff4:	4770      	bx	lr
  401ff6:	bf00      	nop
  401ff8:	20400b0c 	.word	0x20400b0c
  401ffc:	20400b50 	.word	0x20400b50

00402000 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  402000:	b1a8      	cbz	r0, 40202e <xTaskCheckForTimeOut+0x2e>
{
  402002:	b570      	push	{r4, r5, r6, lr}
  402004:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  402006:	b1e9      	cbz	r1, 402044 <xTaskCheckForTimeOut+0x44>
  402008:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  40200a:	4b1d      	ldr	r3, [pc, #116]	; (402080 <xTaskCheckForTimeOut+0x80>)
  40200c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40200e:	4b1d      	ldr	r3, [pc, #116]	; (402084 <xTaskCheckForTimeOut+0x84>)
  402010:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402012:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  402014:	6823      	ldr	r3, [r4, #0]
  402016:	f1b3 3fff 	cmp.w	r3, #4294967295
  40201a:	d02f      	beq.n	40207c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40201c:	481a      	ldr	r0, [pc, #104]	; (402088 <xTaskCheckForTimeOut+0x88>)
  40201e:	6800      	ldr	r0, [r0, #0]
  402020:	682e      	ldr	r6, [r5, #0]
  402022:	4286      	cmp	r6, r0
  402024:	d019      	beq.n	40205a <xTaskCheckForTimeOut+0x5a>
  402026:	428a      	cmp	r2, r1
  402028:	d317      	bcc.n	40205a <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  40202a:	2401      	movs	r4, #1
  40202c:	e01b      	b.n	402066 <xTaskCheckForTimeOut+0x66>
  40202e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402032:	b672      	cpsid	i
  402034:	f383 8811 	msr	BASEPRI, r3
  402038:	f3bf 8f6f 	isb	sy
  40203c:	f3bf 8f4f 	dsb	sy
  402040:	b662      	cpsie	i
  402042:	e7fe      	b.n	402042 <xTaskCheckForTimeOut+0x42>
  402044:	f04f 0380 	mov.w	r3, #128	; 0x80
  402048:	b672      	cpsid	i
  40204a:	f383 8811 	msr	BASEPRI, r3
  40204e:	f3bf 8f6f 	isb	sy
  402052:	f3bf 8f4f 	dsb	sy
  402056:	b662      	cpsie	i
  402058:	e7fe      	b.n	402058 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40205a:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  40205c:	429a      	cmp	r2, r3
  40205e:	d306      	bcc.n	40206e <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  402060:	2300      	movs	r3, #0
  402062:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  402064:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  402066:	4b09      	ldr	r3, [pc, #36]	; (40208c <xTaskCheckForTimeOut+0x8c>)
  402068:	4798      	blx	r3
}
  40206a:	4620      	mov	r0, r4
  40206c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  40206e:	1a9b      	subs	r3, r3, r2
  402070:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  402072:	4628      	mov	r0, r5
  402074:	4b06      	ldr	r3, [pc, #24]	; (402090 <xTaskCheckForTimeOut+0x90>)
  402076:	4798      	blx	r3
			xReturn = pdFALSE;
  402078:	2400      	movs	r4, #0
  40207a:	e7f4      	b.n	402066 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  40207c:	2400      	movs	r4, #0
  40207e:	e7f2      	b.n	402066 <xTaskCheckForTimeOut+0x66>
  402080:	00400c55 	.word	0x00400c55
  402084:	20400b50 	.word	0x20400b50
  402088:	20400b0c 	.word	0x20400b0c
  40208c:	00400ca1 	.word	0x00400ca1
  402090:	00401fe9 	.word	0x00401fe9

00402094 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402094:	2201      	movs	r2, #1
  402096:	4b01      	ldr	r3, [pc, #4]	; (40209c <vTaskMissedYield+0x8>)
  402098:	601a      	str	r2, [r3, #0]
  40209a:	4770      	bx	lr
  40209c:	20400b54 	.word	0x20400b54

004020a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  4020a0:	4b05      	ldr	r3, [pc, #20]	; (4020b8 <xTaskGetSchedulerState+0x18>)
  4020a2:	681b      	ldr	r3, [r3, #0]
  4020a4:	b133      	cbz	r3, 4020b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4020a6:	4b05      	ldr	r3, [pc, #20]	; (4020bc <xTaskGetSchedulerState+0x1c>)
  4020a8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  4020aa:	2b00      	cmp	r3, #0
  4020ac:	bf0c      	ite	eq
  4020ae:	2002      	moveq	r0, #2
  4020b0:	2000      	movne	r0, #0
  4020b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4020b4:	2001      	movs	r0, #1
	}
  4020b6:	4770      	bx	lr
  4020b8:	20400b24 	.word	0x20400b24
  4020bc:	20400ad0 	.word	0x20400ad0

004020c0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  4020c0:	2800      	cmp	r0, #0
  4020c2:	d04d      	beq.n	402160 <xTaskPriorityDisinherit+0xa0>
	{
  4020c4:	b538      	push	{r3, r4, r5, lr}
  4020c6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  4020c8:	4a27      	ldr	r2, [pc, #156]	; (402168 <xTaskPriorityDisinherit+0xa8>)
  4020ca:	6812      	ldr	r2, [r2, #0]
  4020cc:	4290      	cmp	r0, r2
  4020ce:	d00a      	beq.n	4020e6 <xTaskPriorityDisinherit+0x26>
  4020d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d4:	b672      	cpsid	i
  4020d6:	f383 8811 	msr	BASEPRI, r3
  4020da:	f3bf 8f6f 	isb	sy
  4020de:	f3bf 8f4f 	dsb	sy
  4020e2:	b662      	cpsie	i
  4020e4:	e7fe      	b.n	4020e4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  4020e6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4020e8:	b952      	cbnz	r2, 402100 <xTaskPriorityDisinherit+0x40>
  4020ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ee:	b672      	cpsid	i
  4020f0:	f383 8811 	msr	BASEPRI, r3
  4020f4:	f3bf 8f6f 	isb	sy
  4020f8:	f3bf 8f4f 	dsb	sy
  4020fc:	b662      	cpsie	i
  4020fe:	e7fe      	b.n	4020fe <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402100:	3a01      	subs	r2, #1
  402102:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402104:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402106:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402108:	4288      	cmp	r0, r1
  40210a:	d02b      	beq.n	402164 <xTaskPriorityDisinherit+0xa4>
  40210c:	bb52      	cbnz	r2, 402164 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40210e:	1d25      	adds	r5, r4, #4
  402110:	4628      	mov	r0, r5
  402112:	4b16      	ldr	r3, [pc, #88]	; (40216c <xTaskPriorityDisinherit+0xac>)
  402114:	4798      	blx	r3
  402116:	b968      	cbnz	r0, 402134 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402118:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40211a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40211e:	009b      	lsls	r3, r3, #2
  402120:	4a13      	ldr	r2, [pc, #76]	; (402170 <xTaskPriorityDisinherit+0xb0>)
  402122:	58d3      	ldr	r3, [r2, r3]
  402124:	b933      	cbnz	r3, 402134 <xTaskPriorityDisinherit+0x74>
  402126:	4813      	ldr	r0, [pc, #76]	; (402174 <xTaskPriorityDisinherit+0xb4>)
  402128:	6803      	ldr	r3, [r0, #0]
  40212a:	2201      	movs	r2, #1
  40212c:	408a      	lsls	r2, r1
  40212e:	ea23 0302 	bic.w	r3, r3, r2
  402132:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402134:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402136:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402138:	f1c0 0305 	rsb	r3, r0, #5
  40213c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40213e:	4a0d      	ldr	r2, [pc, #52]	; (402174 <xTaskPriorityDisinherit+0xb4>)
  402140:	6811      	ldr	r1, [r2, #0]
  402142:	2401      	movs	r4, #1
  402144:	fa04 f300 	lsl.w	r3, r4, r0
  402148:	430b      	orrs	r3, r1
  40214a:	6013      	str	r3, [r2, #0]
  40214c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402150:	4629      	mov	r1, r5
  402152:	4b07      	ldr	r3, [pc, #28]	; (402170 <xTaskPriorityDisinherit+0xb0>)
  402154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402158:	4b07      	ldr	r3, [pc, #28]	; (402178 <xTaskPriorityDisinherit+0xb8>)
  40215a:	4798      	blx	r3
					xReturn = pdTRUE;
  40215c:	4620      	mov	r0, r4
  40215e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402160:	2000      	movs	r0, #0
  402162:	4770      	bx	lr
  402164:	2000      	movs	r0, #0
	}
  402166:	bd38      	pop	{r3, r4, r5, pc}
  402168:	20400a54 	.word	0x20400a54
  40216c:	00400b4d 	.word	0x00400b4d
  402170:	20400a60 	.word	0x20400a60
  402174:	20400ad8 	.word	0x20400ad8
  402178:	00400b01 	.word	0x00400b01

0040217c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40217c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40217e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402180:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402182:	4291      	cmp	r1, r2
  402184:	d80c      	bhi.n	4021a0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402186:	1ad2      	subs	r2, r2, r3
  402188:	6983      	ldr	r3, [r0, #24]
  40218a:	429a      	cmp	r2, r3
  40218c:	d301      	bcc.n	402192 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40218e:	2001      	movs	r0, #1
  402190:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402192:	1d01      	adds	r1, r0, #4
  402194:	4b09      	ldr	r3, [pc, #36]	; (4021bc <prvInsertTimerInActiveList+0x40>)
  402196:	6818      	ldr	r0, [r3, #0]
  402198:	4b09      	ldr	r3, [pc, #36]	; (4021c0 <prvInsertTimerInActiveList+0x44>)
  40219a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40219c:	2000      	movs	r0, #0
  40219e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4021a0:	429a      	cmp	r2, r3
  4021a2:	d203      	bcs.n	4021ac <prvInsertTimerInActiveList+0x30>
  4021a4:	4299      	cmp	r1, r3
  4021a6:	d301      	bcc.n	4021ac <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4021a8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4021aa:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4021ac:	1d01      	adds	r1, r0, #4
  4021ae:	4b05      	ldr	r3, [pc, #20]	; (4021c4 <prvInsertTimerInActiveList+0x48>)
  4021b0:	6818      	ldr	r0, [r3, #0]
  4021b2:	4b03      	ldr	r3, [pc, #12]	; (4021c0 <prvInsertTimerInActiveList+0x44>)
  4021b4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4021b6:	2000      	movs	r0, #0
  4021b8:	bd08      	pop	{r3, pc}
  4021ba:	bf00      	nop
  4021bc:	20400b5c 	.word	0x20400b5c
  4021c0:	00400b19 	.word	0x00400b19
  4021c4:	20400b58 	.word	0x20400b58

004021c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4021c8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4021ca:	4b10      	ldr	r3, [pc, #64]	; (40220c <prvCheckForValidListAndQueue+0x44>)
  4021cc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4021ce:	4b10      	ldr	r3, [pc, #64]	; (402210 <prvCheckForValidListAndQueue+0x48>)
  4021d0:	681b      	ldr	r3, [r3, #0]
  4021d2:	b113      	cbz	r3, 4021da <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4021d4:	4b0f      	ldr	r3, [pc, #60]	; (402214 <prvCheckForValidListAndQueue+0x4c>)
  4021d6:	4798      	blx	r3
  4021d8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4021da:	4d0f      	ldr	r5, [pc, #60]	; (402218 <prvCheckForValidListAndQueue+0x50>)
  4021dc:	4628      	mov	r0, r5
  4021de:	4e0f      	ldr	r6, [pc, #60]	; (40221c <prvCheckForValidListAndQueue+0x54>)
  4021e0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4021e2:	4c0f      	ldr	r4, [pc, #60]	; (402220 <prvCheckForValidListAndQueue+0x58>)
  4021e4:	4620      	mov	r0, r4
  4021e6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4021e8:	4b0e      	ldr	r3, [pc, #56]	; (402224 <prvCheckForValidListAndQueue+0x5c>)
  4021ea:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4021ec:	4b0e      	ldr	r3, [pc, #56]	; (402228 <prvCheckForValidListAndQueue+0x60>)
  4021ee:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4021f0:	2200      	movs	r2, #0
  4021f2:	2110      	movs	r1, #16
  4021f4:	2005      	movs	r0, #5
  4021f6:	4b0d      	ldr	r3, [pc, #52]	; (40222c <prvCheckForValidListAndQueue+0x64>)
  4021f8:	4798      	blx	r3
  4021fa:	4b05      	ldr	r3, [pc, #20]	; (402210 <prvCheckForValidListAndQueue+0x48>)
  4021fc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  4021fe:	2800      	cmp	r0, #0
  402200:	d0e8      	beq.n	4021d4 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402202:	490b      	ldr	r1, [pc, #44]	; (402230 <prvCheckForValidListAndQueue+0x68>)
  402204:	4b0b      	ldr	r3, [pc, #44]	; (402234 <prvCheckForValidListAndQueue+0x6c>)
  402206:	4798      	blx	r3
  402208:	e7e4      	b.n	4021d4 <prvCheckForValidListAndQueue+0xc>
  40220a:	bf00      	nop
  40220c:	00400c55 	.word	0x00400c55
  402210:	20400b8c 	.word	0x20400b8c
  402214:	00400ca1 	.word	0x00400ca1
  402218:	20400b60 	.word	0x20400b60
  40221c:	00400ae5 	.word	0x00400ae5
  402220:	20400b74 	.word	0x20400b74
  402224:	20400b58 	.word	0x20400b58
  402228:	20400b5c 	.word	0x20400b5c
  40222c:	004011c1 	.word	0x004011c1
  402230:	00405aa0 	.word	0x00405aa0
  402234:	004016b9 	.word	0x004016b9

00402238 <xTimerCreateTimerTask>:
{
  402238:	b510      	push	{r4, lr}
  40223a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  40223c:	4b0e      	ldr	r3, [pc, #56]	; (402278 <xTimerCreateTimerTask+0x40>)
  40223e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402240:	4b0e      	ldr	r3, [pc, #56]	; (40227c <xTimerCreateTimerTask+0x44>)
  402242:	681b      	ldr	r3, [r3, #0]
  402244:	b16b      	cbz	r3, 402262 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  402246:	4b0e      	ldr	r3, [pc, #56]	; (402280 <xTimerCreateTimerTask+0x48>)
  402248:	9301      	str	r3, [sp, #4]
  40224a:	2304      	movs	r3, #4
  40224c:	9300      	str	r3, [sp, #0]
  40224e:	2300      	movs	r3, #0
  402250:	f44f 7282 	mov.w	r2, #260	; 0x104
  402254:	490b      	ldr	r1, [pc, #44]	; (402284 <xTimerCreateTimerTask+0x4c>)
  402256:	480c      	ldr	r0, [pc, #48]	; (402288 <xTimerCreateTimerTask+0x50>)
  402258:	4c0c      	ldr	r4, [pc, #48]	; (40228c <xTimerCreateTimerTask+0x54>)
  40225a:	47a0      	blx	r4
	configASSERT( xReturn );
  40225c:	b108      	cbz	r0, 402262 <xTimerCreateTimerTask+0x2a>
}
  40225e:	b002      	add	sp, #8
  402260:	bd10      	pop	{r4, pc}
  402262:	f04f 0380 	mov.w	r3, #128	; 0x80
  402266:	b672      	cpsid	i
  402268:	f383 8811 	msr	BASEPRI, r3
  40226c:	f3bf 8f6f 	isb	sy
  402270:	f3bf 8f4f 	dsb	sy
  402274:	b662      	cpsie	i
  402276:	e7fe      	b.n	402276 <xTimerCreateTimerTask+0x3e>
  402278:	004021c9 	.word	0x004021c9
  40227c:	20400b8c 	.word	0x20400b8c
  402280:	20400b90 	.word	0x20400b90
  402284:	00405aa8 	.word	0x00405aa8
  402288:	004023b9 	.word	0x004023b9
  40228c:	0040189d 	.word	0x0040189d

00402290 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402290:	b1d8      	cbz	r0, 4022ca <xTimerGenericCommand+0x3a>
{
  402292:	b530      	push	{r4, r5, lr}
  402294:	b085      	sub	sp, #20
  402296:	4615      	mov	r5, r2
  402298:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40229a:	4a15      	ldr	r2, [pc, #84]	; (4022f0 <xTimerGenericCommand+0x60>)
  40229c:	6810      	ldr	r0, [r2, #0]
  40229e:	b320      	cbz	r0, 4022ea <xTimerGenericCommand+0x5a>
  4022a0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4022a2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4022a4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4022a6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4022a8:	2905      	cmp	r1, #5
  4022aa:	dc19      	bgt.n	4022e0 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4022ac:	4b11      	ldr	r3, [pc, #68]	; (4022f4 <xTimerGenericCommand+0x64>)
  4022ae:	4798      	blx	r3
  4022b0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4022b2:	f04f 0300 	mov.w	r3, #0
  4022b6:	bf0c      	ite	eq
  4022b8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4022ba:	461a      	movne	r2, r3
  4022bc:	4669      	mov	r1, sp
  4022be:	480c      	ldr	r0, [pc, #48]	; (4022f0 <xTimerGenericCommand+0x60>)
  4022c0:	6800      	ldr	r0, [r0, #0]
  4022c2:	4c0d      	ldr	r4, [pc, #52]	; (4022f8 <xTimerGenericCommand+0x68>)
  4022c4:	47a0      	blx	r4
}
  4022c6:	b005      	add	sp, #20
  4022c8:	bd30      	pop	{r4, r5, pc}
  4022ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ce:	b672      	cpsid	i
  4022d0:	f383 8811 	msr	BASEPRI, r3
  4022d4:	f3bf 8f6f 	isb	sy
  4022d8:	f3bf 8f4f 	dsb	sy
  4022dc:	b662      	cpsie	i
  4022de:	e7fe      	b.n	4022de <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4022e0:	2300      	movs	r3, #0
  4022e2:	4669      	mov	r1, sp
  4022e4:	4c05      	ldr	r4, [pc, #20]	; (4022fc <xTimerGenericCommand+0x6c>)
  4022e6:	47a0      	blx	r4
  4022e8:	e7ed      	b.n	4022c6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4022ea:	2000      	movs	r0, #0
	return xReturn;
  4022ec:	e7eb      	b.n	4022c6 <xTimerGenericCommand+0x36>
  4022ee:	bf00      	nop
  4022f0:	20400b8c 	.word	0x20400b8c
  4022f4:	004020a1 	.word	0x004020a1
  4022f8:	0040121d 	.word	0x0040121d
  4022fc:	0040140d 	.word	0x0040140d

00402300 <prvSampleTimeNow>:
{
  402300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402304:	b082      	sub	sp, #8
  402306:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402308:	4b24      	ldr	r3, [pc, #144]	; (40239c <prvSampleTimeNow+0x9c>)
  40230a:	4798      	blx	r3
  40230c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40230e:	4b24      	ldr	r3, [pc, #144]	; (4023a0 <prvSampleTimeNow+0xa0>)
  402310:	681b      	ldr	r3, [r3, #0]
  402312:	4298      	cmp	r0, r3
  402314:	d31b      	bcc.n	40234e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402316:	2300      	movs	r3, #0
  402318:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  40231c:	4b20      	ldr	r3, [pc, #128]	; (4023a0 <prvSampleTimeNow+0xa0>)
  40231e:	601f      	str	r7, [r3, #0]
}
  402320:	4638      	mov	r0, r7
  402322:	b002      	add	sp, #8
  402324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402328:	2100      	movs	r1, #0
  40232a:	9100      	str	r1, [sp, #0]
  40232c:	460b      	mov	r3, r1
  40232e:	4652      	mov	r2, sl
  402330:	4620      	mov	r0, r4
  402332:	4c1c      	ldr	r4, [pc, #112]	; (4023a4 <prvSampleTimeNow+0xa4>)
  402334:	47a0      	blx	r4
				configASSERT( xResult );
  402336:	b960      	cbnz	r0, 402352 <prvSampleTimeNow+0x52>
  402338:	f04f 0380 	mov.w	r3, #128	; 0x80
  40233c:	b672      	cpsid	i
  40233e:	f383 8811 	msr	BASEPRI, r3
  402342:	f3bf 8f6f 	isb	sy
  402346:	f3bf 8f4f 	dsb	sy
  40234a:	b662      	cpsie	i
  40234c:	e7fe      	b.n	40234c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40234e:	4d16      	ldr	r5, [pc, #88]	; (4023a8 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402350:	4e16      	ldr	r6, [pc, #88]	; (4023ac <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402352:	682b      	ldr	r3, [r5, #0]
  402354:	681a      	ldr	r2, [r3, #0]
  402356:	b1c2      	cbz	r2, 40238a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402358:	68db      	ldr	r3, [r3, #12]
  40235a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40235e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402360:	f104 0904 	add.w	r9, r4, #4
  402364:	4648      	mov	r0, r9
  402366:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402368:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40236a:	4620      	mov	r0, r4
  40236c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40236e:	69e3      	ldr	r3, [r4, #28]
  402370:	2b01      	cmp	r3, #1
  402372:	d1ee      	bne.n	402352 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402374:	69a3      	ldr	r3, [r4, #24]
  402376:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402378:	459a      	cmp	sl, r3
  40237a:	d2d5      	bcs.n	402328 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40237c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40237e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402380:	4649      	mov	r1, r9
  402382:	6828      	ldr	r0, [r5, #0]
  402384:	4b0a      	ldr	r3, [pc, #40]	; (4023b0 <prvSampleTimeNow+0xb0>)
  402386:	4798      	blx	r3
  402388:	e7e3      	b.n	402352 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40238a:	4a0a      	ldr	r2, [pc, #40]	; (4023b4 <prvSampleTimeNow+0xb4>)
  40238c:	6810      	ldr	r0, [r2, #0]
  40238e:	4906      	ldr	r1, [pc, #24]	; (4023a8 <prvSampleTimeNow+0xa8>)
  402390:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402392:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402394:	2301      	movs	r3, #1
  402396:	f8c8 3000 	str.w	r3, [r8]
  40239a:	e7bf      	b.n	40231c <prvSampleTimeNow+0x1c>
  40239c:	00401b35 	.word	0x00401b35
  4023a0:	20400b88 	.word	0x20400b88
  4023a4:	00402291 	.word	0x00402291
  4023a8:	20400b58 	.word	0x20400b58
  4023ac:	00400b4d 	.word	0x00400b4d
  4023b0:	00400b19 	.word	0x00400b19
  4023b4:	20400b5c 	.word	0x20400b5c

004023b8 <prvTimerTask>:
{
  4023b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4023bc:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4023be:	4e75      	ldr	r6, [pc, #468]	; (402594 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4023c0:	4f75      	ldr	r7, [pc, #468]	; (402598 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4023c2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4025c0 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4023c6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4025c4 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4023ca:	6833      	ldr	r3, [r6, #0]
  4023cc:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4023ce:	2a00      	cmp	r2, #0
  4023d0:	f000 80ce 	beq.w	402570 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023d4:	68db      	ldr	r3, [r3, #12]
  4023d6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4023d8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4023da:	a804      	add	r0, sp, #16
  4023dc:	4b6f      	ldr	r3, [pc, #444]	; (40259c <prvTimerTask+0x1e4>)
  4023de:	4798      	blx	r3
  4023e0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4023e2:	9b04      	ldr	r3, [sp, #16]
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	d144      	bne.n	402472 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4023e8:	42a0      	cmp	r0, r4
  4023ea:	d212      	bcs.n	402412 <prvTimerTask+0x5a>
  4023ec:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4023ee:	1b61      	subs	r1, r4, r5
  4023f0:	4b6b      	ldr	r3, [pc, #428]	; (4025a0 <prvTimerTask+0x1e8>)
  4023f2:	6818      	ldr	r0, [r3, #0]
  4023f4:	4b6b      	ldr	r3, [pc, #428]	; (4025a4 <prvTimerTask+0x1ec>)
  4023f6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4023f8:	4b6b      	ldr	r3, [pc, #428]	; (4025a8 <prvTimerTask+0x1f0>)
  4023fa:	4798      	blx	r3
  4023fc:	2800      	cmp	r0, #0
  4023fe:	d13a      	bne.n	402476 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402400:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402404:	f8c9 3000 	str.w	r3, [r9]
  402408:	f3bf 8f4f 	dsb	sy
  40240c:	f3bf 8f6f 	isb	sy
  402410:	e031      	b.n	402476 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402412:	4b65      	ldr	r3, [pc, #404]	; (4025a8 <prvTimerTask+0x1f0>)
  402414:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402416:	6833      	ldr	r3, [r6, #0]
  402418:	68db      	ldr	r3, [r3, #12]
  40241a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40241e:	f10a 0004 	add.w	r0, sl, #4
  402422:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402424:	f8da 301c 	ldr.w	r3, [sl, #28]
  402428:	2b01      	cmp	r3, #1
  40242a:	d004      	beq.n	402436 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40242c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402430:	4650      	mov	r0, sl
  402432:	4798      	blx	r3
  402434:	e01f      	b.n	402476 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  402436:	f8da 1018 	ldr.w	r1, [sl, #24]
  40243a:	4623      	mov	r3, r4
  40243c:	462a      	mov	r2, r5
  40243e:	4421      	add	r1, r4
  402440:	4650      	mov	r0, sl
  402442:	4d5a      	ldr	r5, [pc, #360]	; (4025ac <prvTimerTask+0x1f4>)
  402444:	47a8      	blx	r5
  402446:	2800      	cmp	r0, #0
  402448:	d0f0      	beq.n	40242c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40244a:	2100      	movs	r1, #0
  40244c:	9100      	str	r1, [sp, #0]
  40244e:	460b      	mov	r3, r1
  402450:	4622      	mov	r2, r4
  402452:	4650      	mov	r0, sl
  402454:	4c56      	ldr	r4, [pc, #344]	; (4025b0 <prvTimerTask+0x1f8>)
  402456:	47a0      	blx	r4
			configASSERT( xResult );
  402458:	2800      	cmp	r0, #0
  40245a:	d1e7      	bne.n	40242c <prvTimerTask+0x74>
  40245c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402460:	b672      	cpsid	i
  402462:	f383 8811 	msr	BASEPRI, r3
  402466:	f3bf 8f6f 	isb	sy
  40246a:	f3bf 8f4f 	dsb	sy
  40246e:	b662      	cpsie	i
  402470:	e7fe      	b.n	402470 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402472:	4b4d      	ldr	r3, [pc, #308]	; (4025a8 <prvTimerTask+0x1f0>)
  402474:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402476:	4d4a      	ldr	r5, [pc, #296]	; (4025a0 <prvTimerTask+0x1e8>)
  402478:	4c4e      	ldr	r4, [pc, #312]	; (4025b4 <prvTimerTask+0x1fc>)
  40247a:	e006      	b.n	40248a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40247c:	9907      	ldr	r1, [sp, #28]
  40247e:	9806      	ldr	r0, [sp, #24]
  402480:	9b05      	ldr	r3, [sp, #20]
  402482:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402484:	9b04      	ldr	r3, [sp, #16]
  402486:	2b00      	cmp	r3, #0
  402488:	da08      	bge.n	40249c <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40248a:	2200      	movs	r2, #0
  40248c:	a904      	add	r1, sp, #16
  40248e:	6828      	ldr	r0, [r5, #0]
  402490:	47a0      	blx	r4
  402492:	2800      	cmp	r0, #0
  402494:	d099      	beq.n	4023ca <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402496:	9b04      	ldr	r3, [sp, #16]
  402498:	2b00      	cmp	r3, #0
  40249a:	dbef      	blt.n	40247c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40249c:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  4024a0:	f8da 3014 	ldr.w	r3, [sl, #20]
  4024a4:	b113      	cbz	r3, 4024ac <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4024a6:	f10a 0004 	add.w	r0, sl, #4
  4024aa:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4024ac:	a803      	add	r0, sp, #12
  4024ae:	4b3b      	ldr	r3, [pc, #236]	; (40259c <prvTimerTask+0x1e4>)
  4024b0:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4024b2:	9b04      	ldr	r3, [sp, #16]
  4024b4:	2b09      	cmp	r3, #9
  4024b6:	d8e8      	bhi.n	40248a <prvTimerTask+0xd2>
  4024b8:	a201      	add	r2, pc, #4	; (adr r2, 4024c0 <prvTimerTask+0x108>)
  4024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4024be:	bf00      	nop
  4024c0:	004024e9 	.word	0x004024e9
  4024c4:	004024e9 	.word	0x004024e9
  4024c8:	004024e9 	.word	0x004024e9
  4024cc:	0040248b 	.word	0x0040248b
  4024d0:	0040253d 	.word	0x0040253d
  4024d4:	00402569 	.word	0x00402569
  4024d8:	004024e9 	.word	0x004024e9
  4024dc:	004024e9 	.word	0x004024e9
  4024e0:	0040248b 	.word	0x0040248b
  4024e4:	0040253d 	.word	0x0040253d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  4024e8:	9c05      	ldr	r4, [sp, #20]
  4024ea:	f8da 1018 	ldr.w	r1, [sl, #24]
  4024ee:	4623      	mov	r3, r4
  4024f0:	4602      	mov	r2, r0
  4024f2:	4421      	add	r1, r4
  4024f4:	4650      	mov	r0, sl
  4024f6:	4c2d      	ldr	r4, [pc, #180]	; (4025ac <prvTimerTask+0x1f4>)
  4024f8:	47a0      	blx	r4
  4024fa:	2800      	cmp	r0, #0
  4024fc:	d0bc      	beq.n	402478 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4024fe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402502:	4650      	mov	r0, sl
  402504:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402506:	f8da 301c 	ldr.w	r3, [sl, #28]
  40250a:	2b01      	cmp	r3, #1
  40250c:	d1b4      	bne.n	402478 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40250e:	f8da 2018 	ldr.w	r2, [sl, #24]
  402512:	2100      	movs	r1, #0
  402514:	9100      	str	r1, [sp, #0]
  402516:	460b      	mov	r3, r1
  402518:	9805      	ldr	r0, [sp, #20]
  40251a:	4402      	add	r2, r0
  40251c:	4650      	mov	r0, sl
  40251e:	4c24      	ldr	r4, [pc, #144]	; (4025b0 <prvTimerTask+0x1f8>)
  402520:	47a0      	blx	r4
							configASSERT( xResult );
  402522:	2800      	cmp	r0, #0
  402524:	d1a8      	bne.n	402478 <prvTimerTask+0xc0>
  402526:	f04f 0380 	mov.w	r3, #128	; 0x80
  40252a:	b672      	cpsid	i
  40252c:	f383 8811 	msr	BASEPRI, r3
  402530:	f3bf 8f6f 	isb	sy
  402534:	f3bf 8f4f 	dsb	sy
  402538:	b662      	cpsie	i
  40253a:	e7fe      	b.n	40253a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40253c:	9905      	ldr	r1, [sp, #20]
  40253e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402542:	b131      	cbz	r1, 402552 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402544:	4603      	mov	r3, r0
  402546:	4602      	mov	r2, r0
  402548:	4401      	add	r1, r0
  40254a:	4650      	mov	r0, sl
  40254c:	4c17      	ldr	r4, [pc, #92]	; (4025ac <prvTimerTask+0x1f4>)
  40254e:	47a0      	blx	r4
  402550:	e792      	b.n	402478 <prvTimerTask+0xc0>
  402552:	f04f 0380 	mov.w	r3, #128	; 0x80
  402556:	b672      	cpsid	i
  402558:	f383 8811 	msr	BASEPRI, r3
  40255c:	f3bf 8f6f 	isb	sy
  402560:	f3bf 8f4f 	dsb	sy
  402564:	b662      	cpsie	i
  402566:	e7fe      	b.n	402566 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  402568:	4650      	mov	r0, sl
  40256a:	4b13      	ldr	r3, [pc, #76]	; (4025b8 <prvTimerTask+0x200>)
  40256c:	4798      	blx	r3
  40256e:	e783      	b.n	402478 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402570:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402572:	a804      	add	r0, sp, #16
  402574:	4b09      	ldr	r3, [pc, #36]	; (40259c <prvTimerTask+0x1e4>)
  402576:	4798      	blx	r3
  402578:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40257a:	9b04      	ldr	r3, [sp, #16]
  40257c:	2b00      	cmp	r3, #0
  40257e:	f47f af78 	bne.w	402472 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402582:	4b0e      	ldr	r3, [pc, #56]	; (4025bc <prvTimerTask+0x204>)
  402584:	681b      	ldr	r3, [r3, #0]
  402586:	681a      	ldr	r2, [r3, #0]
  402588:	fab2 f282 	clz	r2, r2
  40258c:	0952      	lsrs	r2, r2, #5
  40258e:	2400      	movs	r4, #0
  402590:	e72d      	b.n	4023ee <prvTimerTask+0x36>
  402592:	bf00      	nop
  402594:	20400b58 	.word	0x20400b58
  402598:	00401b25 	.word	0x00401b25
  40259c:	00402301 	.word	0x00402301
  4025a0:	20400b8c 	.word	0x20400b8c
  4025a4:	004016ed 	.word	0x004016ed
  4025a8:	00401c89 	.word	0x00401c89
  4025ac:	0040217d 	.word	0x0040217d
  4025b0:	00402291 	.word	0x00402291
  4025b4:	00401521 	.word	0x00401521
  4025b8:	00400f11 	.word	0x00400f11
  4025bc:	20400b5c 	.word	0x20400b5c
  4025c0:	e000ed04 	.word	0xe000ed04
  4025c4:	00400b4d 	.word	0x00400b4d

004025c8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4025c8:	b570      	push	{r4, r5, r6, lr}
  4025ca:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4025cc:	4b2a      	ldr	r3, [pc, #168]	; (402678 <usart_serial_putchar+0xb0>)
  4025ce:	4298      	cmp	r0, r3
  4025d0:	d013      	beq.n	4025fa <usart_serial_putchar+0x32>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4025d2:	4b2a      	ldr	r3, [pc, #168]	; (40267c <usart_serial_putchar+0xb4>)
  4025d4:	4298      	cmp	r0, r3
  4025d6:	d019      	beq.n	40260c <usart_serial_putchar+0x44>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4025d8:	4b29      	ldr	r3, [pc, #164]	; (402680 <usart_serial_putchar+0xb8>)
  4025da:	4298      	cmp	r0, r3
  4025dc:	d01f      	beq.n	40261e <usart_serial_putchar+0x56>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4025de:	4b29      	ldr	r3, [pc, #164]	; (402684 <usart_serial_putchar+0xbc>)
  4025e0:	4298      	cmp	r0, r3
  4025e2:	d025      	beq.n	402630 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4025e4:	4b28      	ldr	r3, [pc, #160]	; (402688 <usart_serial_putchar+0xc0>)
  4025e6:	4298      	cmp	r0, r3
  4025e8:	d02b      	beq.n	402642 <usart_serial_putchar+0x7a>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4025ea:	4b28      	ldr	r3, [pc, #160]	; (40268c <usart_serial_putchar+0xc4>)
  4025ec:	4298      	cmp	r0, r3
  4025ee:	d031      	beq.n	402654 <usart_serial_putchar+0x8c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4025f0:	4b27      	ldr	r3, [pc, #156]	; (402690 <usart_serial_putchar+0xc8>)
  4025f2:	4298      	cmp	r0, r3
  4025f4:	d037      	beq.n	402666 <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4025f6:	2000      	movs	r0, #0
}
  4025f8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4025fa:	461e      	mov	r6, r3
  4025fc:	4d25      	ldr	r5, [pc, #148]	; (402694 <usart_serial_putchar+0xcc>)
  4025fe:	4621      	mov	r1, r4
  402600:	4630      	mov	r0, r6
  402602:	47a8      	blx	r5
  402604:	2800      	cmp	r0, #0
  402606:	d1fa      	bne.n	4025fe <usart_serial_putchar+0x36>
		return 1;
  402608:	2001      	movs	r0, #1
  40260a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40260c:	461e      	mov	r6, r3
  40260e:	4d21      	ldr	r5, [pc, #132]	; (402694 <usart_serial_putchar+0xcc>)
  402610:	4621      	mov	r1, r4
  402612:	4630      	mov	r0, r6
  402614:	47a8      	blx	r5
  402616:	2800      	cmp	r0, #0
  402618:	d1fa      	bne.n	402610 <usart_serial_putchar+0x48>
		return 1;
  40261a:	2001      	movs	r0, #1
  40261c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40261e:	461e      	mov	r6, r3
  402620:	4d1c      	ldr	r5, [pc, #112]	; (402694 <usart_serial_putchar+0xcc>)
  402622:	4621      	mov	r1, r4
  402624:	4630      	mov	r0, r6
  402626:	47a8      	blx	r5
  402628:	2800      	cmp	r0, #0
  40262a:	d1fa      	bne.n	402622 <usart_serial_putchar+0x5a>
		return 1;
  40262c:	2001      	movs	r0, #1
  40262e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402630:	461e      	mov	r6, r3
  402632:	4d18      	ldr	r5, [pc, #96]	; (402694 <usart_serial_putchar+0xcc>)
  402634:	4621      	mov	r1, r4
  402636:	4630      	mov	r0, r6
  402638:	47a8      	blx	r5
  40263a:	2800      	cmp	r0, #0
  40263c:	d1fa      	bne.n	402634 <usart_serial_putchar+0x6c>
		return 1;
  40263e:	2001      	movs	r0, #1
  402640:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402642:	461e      	mov	r6, r3
  402644:	4d14      	ldr	r5, [pc, #80]	; (402698 <usart_serial_putchar+0xd0>)
  402646:	4621      	mov	r1, r4
  402648:	4630      	mov	r0, r6
  40264a:	47a8      	blx	r5
  40264c:	2800      	cmp	r0, #0
  40264e:	d1fa      	bne.n	402646 <usart_serial_putchar+0x7e>
		return 1;
  402650:	2001      	movs	r0, #1
  402652:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402654:	461e      	mov	r6, r3
  402656:	4d10      	ldr	r5, [pc, #64]	; (402698 <usart_serial_putchar+0xd0>)
  402658:	4621      	mov	r1, r4
  40265a:	4630      	mov	r0, r6
  40265c:	47a8      	blx	r5
  40265e:	2800      	cmp	r0, #0
  402660:	d1fa      	bne.n	402658 <usart_serial_putchar+0x90>
		return 1;
  402662:	2001      	movs	r0, #1
  402664:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402666:	461e      	mov	r6, r3
  402668:	4d0b      	ldr	r5, [pc, #44]	; (402698 <usart_serial_putchar+0xd0>)
  40266a:	4621      	mov	r1, r4
  40266c:	4630      	mov	r0, r6
  40266e:	47a8      	blx	r5
  402670:	2800      	cmp	r0, #0
  402672:	d1fa      	bne.n	40266a <usart_serial_putchar+0xa2>
		return 1;
  402674:	2001      	movs	r0, #1
  402676:	bd70      	pop	{r4, r5, r6, pc}
  402678:	400e0800 	.word	0x400e0800
  40267c:	400e0a00 	.word	0x400e0a00
  402680:	400e1a00 	.word	0x400e1a00
  402684:	400e1c00 	.word	0x400e1c00
  402688:	40024000 	.word	0x40024000
  40268c:	40028000 	.word	0x40028000
  402690:	4002c000 	.word	0x4002c000
  402694:	004006fd 	.word	0x004006fd
  402698:	00400805 	.word	0x00400805

0040269c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40269c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40269e:	b083      	sub	sp, #12
  4026a0:	4605      	mov	r5, r0
  4026a2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4026a4:	2300      	movs	r3, #0
  4026a6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4026a8:	4b2a      	ldr	r3, [pc, #168]	; (402754 <usart_serial_getchar+0xb8>)
  4026aa:	4298      	cmp	r0, r3
  4026ac:	d013      	beq.n	4026d6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4026ae:	4b2a      	ldr	r3, [pc, #168]	; (402758 <usart_serial_getchar+0xbc>)
  4026b0:	4298      	cmp	r0, r3
  4026b2:	d018      	beq.n	4026e6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4026b4:	4b29      	ldr	r3, [pc, #164]	; (40275c <usart_serial_getchar+0xc0>)
  4026b6:	4298      	cmp	r0, r3
  4026b8:	d01d      	beq.n	4026f6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4026ba:	4b29      	ldr	r3, [pc, #164]	; (402760 <usart_serial_getchar+0xc4>)
  4026bc:	429d      	cmp	r5, r3
  4026be:	d022      	beq.n	402706 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4026c0:	4b28      	ldr	r3, [pc, #160]	; (402764 <usart_serial_getchar+0xc8>)
  4026c2:	429d      	cmp	r5, r3
  4026c4:	d027      	beq.n	402716 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4026c6:	4b28      	ldr	r3, [pc, #160]	; (402768 <usart_serial_getchar+0xcc>)
  4026c8:	429d      	cmp	r5, r3
  4026ca:	d02e      	beq.n	40272a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4026cc:	4b27      	ldr	r3, [pc, #156]	; (40276c <usart_serial_getchar+0xd0>)
  4026ce:	429d      	cmp	r5, r3
  4026d0:	d035      	beq.n	40273e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4026d2:	b003      	add	sp, #12
  4026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4026d6:	461f      	mov	r7, r3
  4026d8:	4e25      	ldr	r6, [pc, #148]	; (402770 <usart_serial_getchar+0xd4>)
  4026da:	4621      	mov	r1, r4
  4026dc:	4638      	mov	r0, r7
  4026de:	47b0      	blx	r6
  4026e0:	2800      	cmp	r0, #0
  4026e2:	d1fa      	bne.n	4026da <usart_serial_getchar+0x3e>
  4026e4:	e7e9      	b.n	4026ba <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4026e6:	461f      	mov	r7, r3
  4026e8:	4e21      	ldr	r6, [pc, #132]	; (402770 <usart_serial_getchar+0xd4>)
  4026ea:	4621      	mov	r1, r4
  4026ec:	4638      	mov	r0, r7
  4026ee:	47b0      	blx	r6
  4026f0:	2800      	cmp	r0, #0
  4026f2:	d1fa      	bne.n	4026ea <usart_serial_getchar+0x4e>
  4026f4:	e7e4      	b.n	4026c0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4026f6:	461f      	mov	r7, r3
  4026f8:	4e1d      	ldr	r6, [pc, #116]	; (402770 <usart_serial_getchar+0xd4>)
  4026fa:	4621      	mov	r1, r4
  4026fc:	4638      	mov	r0, r7
  4026fe:	47b0      	blx	r6
  402700:	2800      	cmp	r0, #0
  402702:	d1fa      	bne.n	4026fa <usart_serial_getchar+0x5e>
  402704:	e7df      	b.n	4026c6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402706:	461f      	mov	r7, r3
  402708:	4e19      	ldr	r6, [pc, #100]	; (402770 <usart_serial_getchar+0xd4>)
  40270a:	4621      	mov	r1, r4
  40270c:	4638      	mov	r0, r7
  40270e:	47b0      	blx	r6
  402710:	2800      	cmp	r0, #0
  402712:	d1fa      	bne.n	40270a <usart_serial_getchar+0x6e>
  402714:	e7da      	b.n	4026cc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402716:	461e      	mov	r6, r3
  402718:	4d16      	ldr	r5, [pc, #88]	; (402774 <usart_serial_getchar+0xd8>)
  40271a:	a901      	add	r1, sp, #4
  40271c:	4630      	mov	r0, r6
  40271e:	47a8      	blx	r5
  402720:	2800      	cmp	r0, #0
  402722:	d1fa      	bne.n	40271a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402724:	9b01      	ldr	r3, [sp, #4]
  402726:	7023      	strb	r3, [r4, #0]
  402728:	e7d3      	b.n	4026d2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40272a:	461e      	mov	r6, r3
  40272c:	4d11      	ldr	r5, [pc, #68]	; (402774 <usart_serial_getchar+0xd8>)
  40272e:	a901      	add	r1, sp, #4
  402730:	4630      	mov	r0, r6
  402732:	47a8      	blx	r5
  402734:	2800      	cmp	r0, #0
  402736:	d1fa      	bne.n	40272e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402738:	9b01      	ldr	r3, [sp, #4]
  40273a:	7023      	strb	r3, [r4, #0]
  40273c:	e7c9      	b.n	4026d2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40273e:	461e      	mov	r6, r3
  402740:	4d0c      	ldr	r5, [pc, #48]	; (402774 <usart_serial_getchar+0xd8>)
  402742:	a901      	add	r1, sp, #4
  402744:	4630      	mov	r0, r6
  402746:	47a8      	blx	r5
  402748:	2800      	cmp	r0, #0
  40274a:	d1fa      	bne.n	402742 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40274c:	9b01      	ldr	r3, [sp, #4]
  40274e:	7023      	strb	r3, [r4, #0]
}
  402750:	e7bf      	b.n	4026d2 <usart_serial_getchar+0x36>
  402752:	bf00      	nop
  402754:	400e0800 	.word	0x400e0800
  402758:	400e0a00 	.word	0x400e0a00
  40275c:	400e1a00 	.word	0x400e1a00
  402760:	400e1c00 	.word	0x400e1c00
  402764:	40024000 	.word	0x40024000
  402768:	40028000 	.word	0x40028000
  40276c:	4002c000 	.word	0x4002c000
  402770:	0040070f 	.word	0x0040070f
  402774:	0040081b 	.word	0x0040081b

00402778 <vApplicationStackOverflowHook>:

/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
                                          signed char *pcTaskName) {
  402778:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40277a:	460a      	mov	r2, r1
  40277c:	4601      	mov	r1, r0
  40277e:	4802      	ldr	r0, [pc, #8]	; (402788 <vApplicationStackOverflowHook+0x10>)
  402780:	4b02      	ldr	r3, [pc, #8]	; (40278c <vApplicationStackOverflowHook+0x14>)
  402782:	4798      	blx	r3
  402784:	e7fe      	b.n	402784 <vApplicationStackOverflowHook+0xc>
  402786:	bf00      	nop
  402788:	00405b74 	.word	0x00405b74
  40278c:	00402b61 	.word	0x00402b61

00402790 <vApplicationTickHook>:
}

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void) {
  402790:	4770      	bx	lr

00402792 <vApplicationMallocFailedHook>:
  402792:	f04f 0380 	mov.w	r3, #128	; 0x80
  402796:	b672      	cpsid	i
  402798:	f383 8811 	msr	BASEPRI, r3
  40279c:	f3bf 8f6f 	isb	sy
  4027a0:	f3bf 8f4f 	dsb	sy
  4027a4:	b662      	cpsie	i
  4027a6:	e7fe      	b.n	4027a6 <vApplicationMallocFailedHook+0x14>

004027a8 <lidar_getMeasure>:
  }
  *(pstring + i + 1) = 0x00;
  return (i);
}

int lidar_getMeasure(void) {
  4027a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027ac:	b084      	sub	sp, #16
  4027ae:	271f      	movs	r7, #31

  int numCharsRead = 0;
  uint8_t lastChar = 0x00;
  4027b0:	f04f 0800 	mov.w	r8, #0
	uint32_t val = 0;
  4027b4:	46c1      	mov	r9, r8
		while (usart_read(p_usart, &val));
  4027b6:	4e29      	ldr	r6, [pc, #164]	; (40285c <lidar_getMeasure+0xb4>)
  4027b8:	4d29      	ldr	r5, [pc, #164]	; (402860 <lidar_getMeasure+0xb8>)
  4027ba:	e002      	b.n	4027c2 <lidar_getMeasure+0x1a>
      // Break to begin frame
      break;

    } else {
      // We have not seen two 0x59's in a row -- store the current character and continue reading.
      lastChar = curChar;
  4027bc:	4698      	mov	r8, r3
      numCharsRead++;
    }

    // Error detection:  If we read more than X characters without finding a frame header, then it's likely there is an issue with
    // the Serial connection, and we should timeout and throw an error.
    if (numCharsRead > TFMINI_MAXBYTESBEFOREHEADER) {
  4027be:	3f01      	subs	r7, #1
  4027c0:	d017      	beq.n	4027f2 <lidar_getMeasure+0x4a>
	uint32_t val = 0;
  4027c2:	ac04      	add	r4, sp, #16
  4027c4:	f844 9d0c 	str.w	r9, [r4, #-12]!
		while (usart_read(p_usart, &val));
  4027c8:	4621      	mov	r1, r4
  4027ca:	4630      	mov	r0, r6
  4027cc:	47a8      	blx	r5
  4027ce:	2800      	cmp	r0, #0
  4027d0:	d1fa      	bne.n	4027c8 <lidar_getMeasure+0x20>
		*data = (uint8_t)(val & 0xFF);
  4027d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if ((lastChar == 0x59) && (curChar == 0x59)) {
  4027d6:	2b59      	cmp	r3, #89	; 0x59
  4027d8:	d1f0      	bne.n	4027bc <lidar_getMeasure+0x14>
  4027da:	f1b8 0f59 	cmp.w	r8, #89	; 0x59
  4027de:	d1ed      	bne.n	4027bc <lidar_getMeasure+0x14>
  4027e0:	f10d 0807 	add.w	r8, sp, #7
  4027e4:	2700      	movs	r7, #0
  4027e6:	f04f 0ab2 	mov.w	sl, #178	; 0xb2
	uint32_t val = 0;
  4027ea:	46b9      	mov	r9, r7
		while (usart_read(p_usart, &val));
  4027ec:	4e1b      	ldr	r6, [pc, #108]	; (40285c <lidar_getMeasure+0xb4>)
  4027ee:	4d1c      	ldr	r5, [pc, #112]	; (402860 <lidar_getMeasure+0xb8>)
  4027f0:	e00e      	b.n	402810 <lidar_getMeasure+0x68>
      state = ERROR_SERIAL_NOHEADER;
      distance = -1;
      strength = -1;
      if (TFMINI_DEBUGMODE == 1) {
        printf("ERROR: no header");
  4027f2:	481c      	ldr	r0, [pc, #112]	; (402864 <lidar_getMeasure+0xbc>)
  4027f4:	4b1c      	ldr	r3, [pc, #112]	; (402868 <lidar_getMeasure+0xc0>)
  4027f6:	4798      	blx	r3
      }
      return -1;
  4027f8:	f04f 34ff 	mov.w	r4, #4294967295
  // state = MEASUREMENT_OK;

  // Return success
  printf("%d\n", dist);
  return dist;
}
  4027fc:	4620      	mov	r0, r4
  4027fe:	b004      	add	sp, #16
  402800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      checksum += frame[i];
  402804:	4453      	add	r3, sl
  402806:	fa5f fa83 	uxtb.w	sl, r3
  for (int i = 0; i < TFMINI_FRAME_SIZE; i++) {
  40280a:	3701      	adds	r7, #1
  40280c:	2f07      	cmp	r7, #7
  40280e:	d00e      	beq.n	40282e <lidar_getMeasure+0x86>
	uint32_t val = 0;
  402810:	ac04      	add	r4, sp, #16
  402812:	f844 9d0c 	str.w	r9, [r4, #-12]!
		while (usart_read(p_usart, &val));
  402816:	4621      	mov	r1, r4
  402818:	4630      	mov	r0, r6
  40281a:	47a8      	blx	r5
  40281c:	2800      	cmp	r0, #0
  40281e:	d1fa      	bne.n	402816 <lidar_getMeasure+0x6e>
		*data = (uint8_t)(val & 0xFF);
  402820:	f89d 3004 	ldrb.w	r3, [sp, #4]
    frame[i] = curChar;
  402824:	f808 3f01 	strb.w	r3, [r8, #1]!
    if (i < TFMINI_FRAME_SIZE - 2) {
  402828:	2f04      	cmp	r7, #4
  40282a:	ddeb      	ble.n	402804 <lidar_getMeasure+0x5c>
  40282c:	e7ed      	b.n	40280a <lidar_getMeasure+0x62>
  if (checksum != checksumByte) {
  40282e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  402832:	4553      	cmp	r3, sl
  402834:	d10b      	bne.n	40284e <lidar_getMeasure+0xa6>
  uint16_t dist = (frame[1] << 8) + frame[0];
  402836:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40283a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  40283e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  printf("%d\n", dist);
  402842:	b2a4      	uxth	r4, r4
  402844:	4621      	mov	r1, r4
  402846:	4809      	ldr	r0, [pc, #36]	; (40286c <lidar_getMeasure+0xc4>)
  402848:	4b07      	ldr	r3, [pc, #28]	; (402868 <lidar_getMeasure+0xc0>)
  40284a:	4798      	blx	r3
  return dist;
  40284c:	e7d6      	b.n	4027fc <lidar_getMeasure+0x54>
      printf("ERROR: bad checksum");
  40284e:	4808      	ldr	r0, [pc, #32]	; (402870 <lidar_getMeasure+0xc8>)
  402850:	4b05      	ldr	r3, [pc, #20]	; (402868 <lidar_getMeasure+0xc0>)
  402852:	4798      	blx	r3
    return -1;
  402854:	f04f 34ff 	mov.w	r4, #4294967295
  402858:	e7d0      	b.n	4027fc <lidar_getMeasure+0x54>
  40285a:	bf00      	nop
  40285c:	40024000 	.word	0x40024000
  402860:	0040081b 	.word	0x0040081b
  402864:	00405ab0 	.word	0x00405ab0
  402868:	00402b61 	.word	0x00402b61
  40286c:	00405ad8 	.word	0x00405ad8
  402870:	00405ac4 	.word	0x00405ac4

00402874 <usart_put_char>:

void usart_put_char(Usart *usart, unsigned char n) {
  402874:	b570      	push	{r4, r5, r6, lr}
  402876:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402878:	4b26      	ldr	r3, [pc, #152]	; (402914 <usart_put_char+0xa0>)
  40287a:	4298      	cmp	r0, r3
  40287c:	d012      	beq.n	4028a4 <usart_put_char+0x30>
	if (UART1 == (Uart*)p_usart) {
  40287e:	4b26      	ldr	r3, [pc, #152]	; (402918 <usart_put_char+0xa4>)
  402880:	4298      	cmp	r0, r3
  402882:	d017      	beq.n	4028b4 <usart_put_char+0x40>
	if (UART2 == (Uart*)p_usart) {
  402884:	4b25      	ldr	r3, [pc, #148]	; (40291c <usart_put_char+0xa8>)
  402886:	4298      	cmp	r0, r3
  402888:	d01c      	beq.n	4028c4 <usart_put_char+0x50>
	if (UART3 == (Uart*)p_usart) {
  40288a:	4b25      	ldr	r3, [pc, #148]	; (402920 <usart_put_char+0xac>)
  40288c:	4298      	cmp	r0, r3
  40288e:	d021      	beq.n	4028d4 <usart_put_char+0x60>
	if (USART0 == p_usart) {
  402890:	4b24      	ldr	r3, [pc, #144]	; (402924 <usart_put_char+0xb0>)
  402892:	4298      	cmp	r0, r3
  402894:	d026      	beq.n	4028e4 <usart_put_char+0x70>
	if (USART1 == p_usart) {
  402896:	4b24      	ldr	r3, [pc, #144]	; (402928 <usart_put_char+0xb4>)
  402898:	4298      	cmp	r0, r3
  40289a:	d02b      	beq.n	4028f4 <usart_put_char+0x80>
	if (USART2 == p_usart) {
  40289c:	4b23      	ldr	r3, [pc, #140]	; (40292c <usart_put_char+0xb8>)
  40289e:	4298      	cmp	r0, r3
  4028a0:	d030      	beq.n	402904 <usart_put_char+0x90>
  4028a2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4028a4:	461e      	mov	r6, r3
  4028a6:	4d22      	ldr	r5, [pc, #136]	; (402930 <usart_put_char+0xbc>)
  4028a8:	4621      	mov	r1, r4
  4028aa:	4630      	mov	r0, r6
  4028ac:	47a8      	blx	r5
  4028ae:	2800      	cmp	r0, #0
  4028b0:	d1fa      	bne.n	4028a8 <usart_put_char+0x34>
  4028b2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4028b4:	461e      	mov	r6, r3
  4028b6:	4d1e      	ldr	r5, [pc, #120]	; (402930 <usart_put_char+0xbc>)
  4028b8:	4621      	mov	r1, r4
  4028ba:	4630      	mov	r0, r6
  4028bc:	47a8      	blx	r5
  4028be:	2800      	cmp	r0, #0
  4028c0:	d1fa      	bne.n	4028b8 <usart_put_char+0x44>
  4028c2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4028c4:	461e      	mov	r6, r3
  4028c6:	4d1a      	ldr	r5, [pc, #104]	; (402930 <usart_put_char+0xbc>)
  4028c8:	4621      	mov	r1, r4
  4028ca:	4630      	mov	r0, r6
  4028cc:	47a8      	blx	r5
  4028ce:	2800      	cmp	r0, #0
  4028d0:	d1fa      	bne.n	4028c8 <usart_put_char+0x54>
  4028d2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4028d4:	461e      	mov	r6, r3
  4028d6:	4d16      	ldr	r5, [pc, #88]	; (402930 <usart_put_char+0xbc>)
  4028d8:	4621      	mov	r1, r4
  4028da:	4630      	mov	r0, r6
  4028dc:	47a8      	blx	r5
  4028de:	2800      	cmp	r0, #0
  4028e0:	d1fa      	bne.n	4028d8 <usart_put_char+0x64>
  4028e2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4028e4:	461e      	mov	r6, r3
  4028e6:	4d13      	ldr	r5, [pc, #76]	; (402934 <usart_put_char+0xc0>)
  4028e8:	4621      	mov	r1, r4
  4028ea:	4630      	mov	r0, r6
  4028ec:	47a8      	blx	r5
  4028ee:	2800      	cmp	r0, #0
  4028f0:	d1fa      	bne.n	4028e8 <usart_put_char+0x74>
  4028f2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4028f4:	461e      	mov	r6, r3
  4028f6:	4d0f      	ldr	r5, [pc, #60]	; (402934 <usart_put_char+0xc0>)
  4028f8:	4621      	mov	r1, r4
  4028fa:	4630      	mov	r0, r6
  4028fc:	47a8      	blx	r5
  4028fe:	2800      	cmp	r0, #0
  402900:	d1fa      	bne.n	4028f8 <usart_put_char+0x84>
  402902:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402904:	461e      	mov	r6, r3
  402906:	4d0b      	ldr	r5, [pc, #44]	; (402934 <usart_put_char+0xc0>)
  402908:	4621      	mov	r1, r4
  40290a:	4630      	mov	r0, r6
  40290c:	47a8      	blx	r5
  40290e:	2800      	cmp	r0, #0
  402910:	d1fa      	bne.n	402908 <usart_put_char+0x94>
  402912:	e7c6      	b.n	4028a2 <usart_put_char+0x2e>
  402914:	400e0800 	.word	0x400e0800
  402918:	400e0a00 	.word	0x400e0a00
  40291c:	400e1a00 	.word	0x400e1a00
  402920:	400e1c00 	.word	0x400e1c00
  402924:	40024000 	.word	0x40024000
  402928:	40028000 	.word	0x40028000
  40292c:	4002c000 	.word	0x4002c000
  402930:	004006fd 	.word	0x004006fd
  402934:	00400805 	.word	0x00400805

00402938 <task_lidar>:
  usart_serial_putchar(usart, n);
}

static void task_lidar(void *pvParameters) {
  402938:	b500      	push	{lr}
  40293a:	b087      	sub	sp, #28
  40293c:	200b      	movs	r0, #11
  40293e:	4c24      	ldr	r4, [pc, #144]	; (4029d0 <task_lidar+0x98>)
  402940:	47a0      	blx	r4
  pio_set_peripheral(PIOB, PIO_PERIPH_C, PIO_PB0);
  402942:	4e24      	ldr	r6, [pc, #144]	; (4029d4 <task_lidar+0x9c>)
  402944:	2201      	movs	r2, #1
  402946:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40294a:	4630      	mov	r0, r6
  40294c:	4d22      	ldr	r5, [pc, #136]	; (4029d8 <task_lidar+0xa0>)
  40294e:	47a8      	blx	r5
  pio_set_peripheral(PIOB, PIO_PERIPH_C, PIO_PB1);
  402950:	2202      	movs	r2, #2
  402952:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402956:	4630      	mov	r0, r6
  402958:	47a8      	blx	r5
  const sam_usart_opt_t usart_settings = {
  40295a:	2600      	movs	r6, #0
  40295c:	9603      	str	r6, [sp, #12]
  40295e:	9604      	str	r6, [sp, #16]
  402960:	9605      	str	r6, [sp, #20]
  402962:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402966:	9300      	str	r3, [sp, #0]
  402968:	23c0      	movs	r3, #192	; 0xc0
  40296a:	9301      	str	r3, [sp, #4]
  40296c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402970:	9302      	str	r3, [sp, #8]
  402972:	200d      	movs	r0, #13
  402974:	47a0      	blx	r4
  usart_init_rs232(USART0, &usart_settings, sysclk_get_peripheral_hz());
  402976:	4c19      	ldr	r4, [pc, #100]	; (4029dc <task_lidar+0xa4>)
  402978:	4a19      	ldr	r2, [pc, #100]	; (4029e0 <task_lidar+0xa8>)
  40297a:	4669      	mov	r1, sp
  40297c:	4620      	mov	r0, r4
  40297e:	4b19      	ldr	r3, [pc, #100]	; (4029e4 <task_lidar+0xac>)
  402980:	4798      	blx	r3
  usart_enable_tx(USART0);
  402982:	4620      	mov	r0, r4
  402984:	4b18      	ldr	r3, [pc, #96]	; (4029e8 <task_lidar+0xb0>)
  402986:	4798      	blx	r3
  usart_enable_rx(USART0);
  402988:	4620      	mov	r0, r4
  40298a:	4b18      	ldr	r3, [pc, #96]	; (4029ec <task_lidar+0xb4>)
  40298c:	4798      	blx	r3
  // UNUSED(pvParameters);
  configure_USART0();

  usart_put_char(USART0, 66);
  40298e:	2142      	movs	r1, #66	; 0x42
  402990:	4620      	mov	r0, r4
  402992:	4d17      	ldr	r5, [pc, #92]	; (4029f0 <task_lidar+0xb8>)
  402994:	47a8      	blx	r5
  usart_put_char(USART0, 87);
  402996:	2157      	movs	r1, #87	; 0x57
  402998:	4620      	mov	r0, r4
  40299a:	47a8      	blx	r5
  usart_put_char(USART0, 2);
  40299c:	2102      	movs	r1, #2
  40299e:	4620      	mov	r0, r4
  4029a0:	47a8      	blx	r5
  usart_put_char(USART0, 0);
  4029a2:	4631      	mov	r1, r6
  4029a4:	4620      	mov	r0, r4
  4029a6:	47a8      	blx	r5
  usart_put_char(USART0, 0);
  4029a8:	4631      	mov	r1, r6
  4029aa:	4620      	mov	r0, r4
  4029ac:	47a8      	blx	r5
  usart_put_char(USART0, 0);
  4029ae:	4631      	mov	r1, r6
  4029b0:	4620      	mov	r0, r4
  4029b2:	47a8      	blx	r5
  usart_put_char(USART0, 1);
  4029b4:	2101      	movs	r1, #1
  4029b6:	4620      	mov	r0, r4
  4029b8:	47a8      	blx	r5
  usart_put_char(USART0, 6);
  4029ba:	2106      	movs	r1, #6
  4029bc:	4620      	mov	r0, r4
  4029be:	47a8      	blx	r5

  for (;;) {
    lidar_getMeasure();
  4029c0:	4e0c      	ldr	r6, [pc, #48]	; (4029f4 <task_lidar+0xbc>)
    vTaskDelay(10);
  4029c2:	250a      	movs	r5, #10
  4029c4:	4c0c      	ldr	r4, [pc, #48]	; (4029f8 <task_lidar+0xc0>)
    lidar_getMeasure();
  4029c6:	47b0      	blx	r6
    vTaskDelay(10);
  4029c8:	4628      	mov	r0, r5
  4029ca:	47a0      	blx	r4
  4029cc:	e7fb      	b.n	4029c6 <task_lidar+0x8e>
  4029ce:	bf00      	nop
  4029d0:	004006dd 	.word	0x004006dd
  4029d4:	400e1000 	.word	0x400e1000
  4029d8:	0040046d 	.word	0x0040046d
  4029dc:	40024000 	.word	0x40024000
  4029e0:	08f0d180 	.word	0x08f0d180
  4029e4:	004007a5 	.word	0x004007a5
  4029e8:	004007f9 	.word	0x004007f9
  4029ec:	004007ff 	.word	0x004007ff
  4029f0:	00402875 	.word	0x00402875
  4029f4:	004027a9 	.word	0x004027a9
  4029f8:	00401da1 	.word	0x00401da1

004029fc <main>:
  }
}

int main(void) {
  4029fc:	b500      	push	{lr}
  4029fe:	b089      	sub	sp, #36	; 0x24
  /* Initialize the SAM system */
  sysclk_init();
  402a00:	4b27      	ldr	r3, [pc, #156]	; (402aa0 <main+0xa4>)
  402a02:	4798      	blx	r3
  board_init();
  402a04:	4b27      	ldr	r3, [pc, #156]	; (402aa4 <main+0xa8>)
  402a06:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402a08:	4d27      	ldr	r5, [pc, #156]	; (402aa8 <main+0xac>)
  402a0a:	4b28      	ldr	r3, [pc, #160]	; (402aac <main+0xb0>)
  402a0c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402a0e:	4a28      	ldr	r2, [pc, #160]	; (402ab0 <main+0xb4>)
  402a10:	4b28      	ldr	r3, [pc, #160]	; (402ab4 <main+0xb8>)
  402a12:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402a14:	4a28      	ldr	r2, [pc, #160]	; (402ab8 <main+0xbc>)
  402a16:	4b29      	ldr	r3, [pc, #164]	; (402abc <main+0xc0>)
  402a18:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402a1a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402a1e:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  402a20:	23c0      	movs	r3, #192	; 0xc0
  402a22:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  402a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402a28:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  402a2a:	2400      	movs	r4, #0
  402a2c:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402a2e:	9406      	str	r4, [sp, #24]
  402a30:	200e      	movs	r0, #14
  402a32:	4b23      	ldr	r3, [pc, #140]	; (402ac0 <main+0xc4>)
  402a34:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402a36:	4a23      	ldr	r2, [pc, #140]	; (402ac4 <main+0xc8>)
  402a38:	a902      	add	r1, sp, #8
  402a3a:	4628      	mov	r0, r5
  402a3c:	4b22      	ldr	r3, [pc, #136]	; (402ac8 <main+0xcc>)
  402a3e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402a40:	4628      	mov	r0, r5
  402a42:	4b22      	ldr	r3, [pc, #136]	; (402acc <main+0xd0>)
  402a44:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402a46:	4628      	mov	r0, r5
  402a48:	4b21      	ldr	r3, [pc, #132]	; (402ad0 <main+0xd4>)
  402a4a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402a4c:	4e21      	ldr	r6, [pc, #132]	; (402ad4 <main+0xd8>)
  402a4e:	6833      	ldr	r3, [r6, #0]
  402a50:	4621      	mov	r1, r4
  402a52:	6898      	ldr	r0, [r3, #8]
  402a54:	4d20      	ldr	r5, [pc, #128]	; (402ad8 <main+0xdc>)
  402a56:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402a58:	6833      	ldr	r3, [r6, #0]
  402a5a:	4621      	mov	r1, r4
  402a5c:	6858      	ldr	r0, [r3, #4]
  402a5e:	47a8      	blx	r5
  setbuf(stdout, NULL);
  402a60:	6833      	ldr	r3, [r6, #0]
  402a62:	4621      	mov	r1, r4
  402a64:	6898      	ldr	r0, [r3, #8]
  402a66:	47a8      	blx	r5

  /* Initialize the console uart */
  configure_console();

  /* Output demo information. */
  printf("COMECANDO\n\r");
  402a68:	481c      	ldr	r0, [pc, #112]	; (402adc <main+0xe0>)
  402a6a:	4d1d      	ldr	r5, [pc, #116]	; (402ae0 <main+0xe4>)
  402a6c:	47a8      	blx	r5
  printf("-- Freertos Example --\n\r");
  402a6e:	481d      	ldr	r0, [pc, #116]	; (402ae4 <main+0xe8>)
  402a70:	47a8      	blx	r5
  printf("-- %s\n\r", BOARD_NAME);
  402a72:	491d      	ldr	r1, [pc, #116]	; (402ae8 <main+0xec>)
  402a74:	481d      	ldr	r0, [pc, #116]	; (402aec <main+0xf0>)
  402a76:	47a8      	blx	r5
  printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  402a78:	4a1d      	ldr	r2, [pc, #116]	; (402af0 <main+0xf4>)
  402a7a:	491e      	ldr	r1, [pc, #120]	; (402af4 <main+0xf8>)
  402a7c:	481e      	ldr	r0, [pc, #120]	; (402af8 <main+0xfc>)
  402a7e:	47a8      	blx	r5
  //                 TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
  //   printf("Failed to create Monitor task\r\n");
  // }

  /* Create task to make led blink */
  if (xTaskCreate(task_lidar, "lidar", TASK_LED_STACK_SIZE, NULL,
  402a80:	9401      	str	r4, [sp, #4]
  402a82:	9400      	str	r4, [sp, #0]
  402a84:	4623      	mov	r3, r4
  402a86:	f44f 7200 	mov.w	r2, #512	; 0x200
  402a8a:	491c      	ldr	r1, [pc, #112]	; (402afc <main+0x100>)
  402a8c:	481c      	ldr	r0, [pc, #112]	; (402b00 <main+0x104>)
  402a8e:	4c1d      	ldr	r4, [pc, #116]	; (402b04 <main+0x108>)
  402a90:	47a0      	blx	r4
  402a92:	2801      	cmp	r0, #1
  402a94:	d001      	beq.n	402a9a <main+0x9e>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create test lidar task\r\n");
  402a96:	481c      	ldr	r0, [pc, #112]	; (402b08 <main+0x10c>)
  402a98:	47a8      	blx	r5
  //                 TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  //   printf("Failed to create test led task\r\n");
  // }

  /* Start the scheduler. */
  vTaskStartScheduler();
  402a9a:	4b1c      	ldr	r3, [pc, #112]	; (402b0c <main+0x110>)
  402a9c:	4798      	blx	r3
  402a9e:	e7fe      	b.n	402a9e <main+0xa2>
  402aa0:	004001d5 	.word	0x004001d5
  402aa4:	004002d5 	.word	0x004002d5
  402aa8:	40028000 	.word	0x40028000
  402aac:	20400bd0 	.word	0x20400bd0
  402ab0:	004025c9 	.word	0x004025c9
  402ab4:	20400bcc 	.word	0x20400bcc
  402ab8:	0040269d 	.word	0x0040269d
  402abc:	20400bc8 	.word	0x20400bc8
  402ac0:	004006dd 	.word	0x004006dd
  402ac4:	08f0d180 	.word	0x08f0d180
  402ac8:	004007a5 	.word	0x004007a5
  402acc:	004007f9 	.word	0x004007f9
  402ad0:	004007ff 	.word	0x004007ff
  402ad4:	2040000c 	.word	0x2040000c
  402ad8:	00403315 	.word	0x00403315
  402adc:	00405adc 	.word	0x00405adc
  402ae0:	00402b61 	.word	0x00402b61
  402ae4:	00405ae8 	.word	0x00405ae8
  402ae8:	00405b04 	.word	0x00405b04
  402aec:	00405b10 	.word	0x00405b10
  402af0:	00405b18 	.word	0x00405b18
  402af4:	00405b24 	.word	0x00405b24
  402af8:	00405b30 	.word	0x00405b30
  402afc:	00405b48 	.word	0x00405b48
  402b00:	00402939 	.word	0x00402939
  402b04:	0040189d 	.word	0x0040189d
  402b08:	00405b50 	.word	0x00405b50
  402b0c:	00401a91 	.word	0x00401a91

00402b10 <__libc_init_array>:
  402b10:	b570      	push	{r4, r5, r6, lr}
  402b12:	4e0f      	ldr	r6, [pc, #60]	; (402b50 <__libc_init_array+0x40>)
  402b14:	4d0f      	ldr	r5, [pc, #60]	; (402b54 <__libc_init_array+0x44>)
  402b16:	1b76      	subs	r6, r6, r5
  402b18:	10b6      	asrs	r6, r6, #2
  402b1a:	bf18      	it	ne
  402b1c:	2400      	movne	r4, #0
  402b1e:	d005      	beq.n	402b2c <__libc_init_array+0x1c>
  402b20:	3401      	adds	r4, #1
  402b22:	f855 3b04 	ldr.w	r3, [r5], #4
  402b26:	4798      	blx	r3
  402b28:	42a6      	cmp	r6, r4
  402b2a:	d1f9      	bne.n	402b20 <__libc_init_array+0x10>
  402b2c:	4e0a      	ldr	r6, [pc, #40]	; (402b58 <__libc_init_array+0x48>)
  402b2e:	4d0b      	ldr	r5, [pc, #44]	; (402b5c <__libc_init_array+0x4c>)
  402b30:	1b76      	subs	r6, r6, r5
  402b32:	f003 f8df 	bl	405cf4 <_init>
  402b36:	10b6      	asrs	r6, r6, #2
  402b38:	bf18      	it	ne
  402b3a:	2400      	movne	r4, #0
  402b3c:	d006      	beq.n	402b4c <__libc_init_array+0x3c>
  402b3e:	3401      	adds	r4, #1
  402b40:	f855 3b04 	ldr.w	r3, [r5], #4
  402b44:	4798      	blx	r3
  402b46:	42a6      	cmp	r6, r4
  402b48:	d1f9      	bne.n	402b3e <__libc_init_array+0x2e>
  402b4a:	bd70      	pop	{r4, r5, r6, pc}
  402b4c:	bd70      	pop	{r4, r5, r6, pc}
  402b4e:	bf00      	nop
  402b50:	00405d00 	.word	0x00405d00
  402b54:	00405d00 	.word	0x00405d00
  402b58:	00405d08 	.word	0x00405d08
  402b5c:	00405d00 	.word	0x00405d00

00402b60 <iprintf>:
  402b60:	b40f      	push	{r0, r1, r2, r3}
  402b62:	b500      	push	{lr}
  402b64:	4907      	ldr	r1, [pc, #28]	; (402b84 <iprintf+0x24>)
  402b66:	b083      	sub	sp, #12
  402b68:	ab04      	add	r3, sp, #16
  402b6a:	6808      	ldr	r0, [r1, #0]
  402b6c:	f853 2b04 	ldr.w	r2, [r3], #4
  402b70:	6881      	ldr	r1, [r0, #8]
  402b72:	9301      	str	r3, [sp, #4]
  402b74:	f000 fd52 	bl	40361c <_vfiprintf_r>
  402b78:	b003      	add	sp, #12
  402b7a:	f85d eb04 	ldr.w	lr, [sp], #4
  402b7e:	b004      	add	sp, #16
  402b80:	4770      	bx	lr
  402b82:	bf00      	nop
  402b84:	2040000c 	.word	0x2040000c

00402b88 <malloc>:
  402b88:	4b02      	ldr	r3, [pc, #8]	; (402b94 <malloc+0xc>)
  402b8a:	4601      	mov	r1, r0
  402b8c:	6818      	ldr	r0, [r3, #0]
  402b8e:	f000 b80b 	b.w	402ba8 <_malloc_r>
  402b92:	bf00      	nop
  402b94:	2040000c 	.word	0x2040000c

00402b98 <free>:
  402b98:	4b02      	ldr	r3, [pc, #8]	; (402ba4 <free+0xc>)
  402b9a:	4601      	mov	r1, r0
  402b9c:	6818      	ldr	r0, [r3, #0]
  402b9e:	f001 be59 	b.w	404854 <_free_r>
  402ba2:	bf00      	nop
  402ba4:	2040000c 	.word	0x2040000c

00402ba8 <_malloc_r>:
  402ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bac:	f101 060b 	add.w	r6, r1, #11
  402bb0:	2e16      	cmp	r6, #22
  402bb2:	b083      	sub	sp, #12
  402bb4:	4605      	mov	r5, r0
  402bb6:	f240 809e 	bls.w	402cf6 <_malloc_r+0x14e>
  402bba:	f036 0607 	bics.w	r6, r6, #7
  402bbe:	f100 80bd 	bmi.w	402d3c <_malloc_r+0x194>
  402bc2:	42b1      	cmp	r1, r6
  402bc4:	f200 80ba 	bhi.w	402d3c <_malloc_r+0x194>
  402bc8:	f000 fb86 	bl	4032d8 <__malloc_lock>
  402bcc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402bd0:	f0c0 8293 	bcc.w	4030fa <_malloc_r+0x552>
  402bd4:	0a73      	lsrs	r3, r6, #9
  402bd6:	f000 80b8 	beq.w	402d4a <_malloc_r+0x1a2>
  402bda:	2b04      	cmp	r3, #4
  402bdc:	f200 8179 	bhi.w	402ed2 <_malloc_r+0x32a>
  402be0:	09b3      	lsrs	r3, r6, #6
  402be2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402be6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402bea:	00c3      	lsls	r3, r0, #3
  402bec:	4fbf      	ldr	r7, [pc, #764]	; (402eec <_malloc_r+0x344>)
  402bee:	443b      	add	r3, r7
  402bf0:	f1a3 0108 	sub.w	r1, r3, #8
  402bf4:	685c      	ldr	r4, [r3, #4]
  402bf6:	42a1      	cmp	r1, r4
  402bf8:	d106      	bne.n	402c08 <_malloc_r+0x60>
  402bfa:	e00c      	b.n	402c16 <_malloc_r+0x6e>
  402bfc:	2a00      	cmp	r2, #0
  402bfe:	f280 80aa 	bge.w	402d56 <_malloc_r+0x1ae>
  402c02:	68e4      	ldr	r4, [r4, #12]
  402c04:	42a1      	cmp	r1, r4
  402c06:	d006      	beq.n	402c16 <_malloc_r+0x6e>
  402c08:	6863      	ldr	r3, [r4, #4]
  402c0a:	f023 0303 	bic.w	r3, r3, #3
  402c0e:	1b9a      	subs	r2, r3, r6
  402c10:	2a0f      	cmp	r2, #15
  402c12:	ddf3      	ble.n	402bfc <_malloc_r+0x54>
  402c14:	4670      	mov	r0, lr
  402c16:	693c      	ldr	r4, [r7, #16]
  402c18:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402f00 <_malloc_r+0x358>
  402c1c:	4574      	cmp	r4, lr
  402c1e:	f000 81ab 	beq.w	402f78 <_malloc_r+0x3d0>
  402c22:	6863      	ldr	r3, [r4, #4]
  402c24:	f023 0303 	bic.w	r3, r3, #3
  402c28:	1b9a      	subs	r2, r3, r6
  402c2a:	2a0f      	cmp	r2, #15
  402c2c:	f300 8190 	bgt.w	402f50 <_malloc_r+0x3a8>
  402c30:	2a00      	cmp	r2, #0
  402c32:	f8c7 e014 	str.w	lr, [r7, #20]
  402c36:	f8c7 e010 	str.w	lr, [r7, #16]
  402c3a:	f280 809d 	bge.w	402d78 <_malloc_r+0x1d0>
  402c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c42:	f080 8161 	bcs.w	402f08 <_malloc_r+0x360>
  402c46:	08db      	lsrs	r3, r3, #3
  402c48:	f103 0c01 	add.w	ip, r3, #1
  402c4c:	1099      	asrs	r1, r3, #2
  402c4e:	687a      	ldr	r2, [r7, #4]
  402c50:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402c54:	f8c4 8008 	str.w	r8, [r4, #8]
  402c58:	2301      	movs	r3, #1
  402c5a:	408b      	lsls	r3, r1
  402c5c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402c60:	4313      	orrs	r3, r2
  402c62:	3908      	subs	r1, #8
  402c64:	60e1      	str	r1, [r4, #12]
  402c66:	607b      	str	r3, [r7, #4]
  402c68:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402c6c:	f8c8 400c 	str.w	r4, [r8, #12]
  402c70:	1082      	asrs	r2, r0, #2
  402c72:	2401      	movs	r4, #1
  402c74:	4094      	lsls	r4, r2
  402c76:	429c      	cmp	r4, r3
  402c78:	f200 808b 	bhi.w	402d92 <_malloc_r+0x1ea>
  402c7c:	421c      	tst	r4, r3
  402c7e:	d106      	bne.n	402c8e <_malloc_r+0xe6>
  402c80:	f020 0003 	bic.w	r0, r0, #3
  402c84:	0064      	lsls	r4, r4, #1
  402c86:	421c      	tst	r4, r3
  402c88:	f100 0004 	add.w	r0, r0, #4
  402c8c:	d0fa      	beq.n	402c84 <_malloc_r+0xdc>
  402c8e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402c92:	46cc      	mov	ip, r9
  402c94:	4680      	mov	r8, r0
  402c96:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402c9a:	459c      	cmp	ip, r3
  402c9c:	d107      	bne.n	402cae <_malloc_r+0x106>
  402c9e:	e16d      	b.n	402f7c <_malloc_r+0x3d4>
  402ca0:	2a00      	cmp	r2, #0
  402ca2:	f280 817b 	bge.w	402f9c <_malloc_r+0x3f4>
  402ca6:	68db      	ldr	r3, [r3, #12]
  402ca8:	459c      	cmp	ip, r3
  402caa:	f000 8167 	beq.w	402f7c <_malloc_r+0x3d4>
  402cae:	6859      	ldr	r1, [r3, #4]
  402cb0:	f021 0103 	bic.w	r1, r1, #3
  402cb4:	1b8a      	subs	r2, r1, r6
  402cb6:	2a0f      	cmp	r2, #15
  402cb8:	ddf2      	ble.n	402ca0 <_malloc_r+0xf8>
  402cba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402cbe:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402cc2:	9300      	str	r3, [sp, #0]
  402cc4:	199c      	adds	r4, r3, r6
  402cc6:	4628      	mov	r0, r5
  402cc8:	f046 0601 	orr.w	r6, r6, #1
  402ccc:	f042 0501 	orr.w	r5, r2, #1
  402cd0:	605e      	str	r6, [r3, #4]
  402cd2:	f8c8 c00c 	str.w	ip, [r8, #12]
  402cd6:	f8cc 8008 	str.w	r8, [ip, #8]
  402cda:	617c      	str	r4, [r7, #20]
  402cdc:	613c      	str	r4, [r7, #16]
  402cde:	f8c4 e00c 	str.w	lr, [r4, #12]
  402ce2:	f8c4 e008 	str.w	lr, [r4, #8]
  402ce6:	6065      	str	r5, [r4, #4]
  402ce8:	505a      	str	r2, [r3, r1]
  402cea:	f000 fafb 	bl	4032e4 <__malloc_unlock>
  402cee:	9b00      	ldr	r3, [sp, #0]
  402cf0:	f103 0408 	add.w	r4, r3, #8
  402cf4:	e01e      	b.n	402d34 <_malloc_r+0x18c>
  402cf6:	2910      	cmp	r1, #16
  402cf8:	d820      	bhi.n	402d3c <_malloc_r+0x194>
  402cfa:	f000 faed 	bl	4032d8 <__malloc_lock>
  402cfe:	2610      	movs	r6, #16
  402d00:	2318      	movs	r3, #24
  402d02:	2002      	movs	r0, #2
  402d04:	4f79      	ldr	r7, [pc, #484]	; (402eec <_malloc_r+0x344>)
  402d06:	443b      	add	r3, r7
  402d08:	f1a3 0208 	sub.w	r2, r3, #8
  402d0c:	685c      	ldr	r4, [r3, #4]
  402d0e:	4294      	cmp	r4, r2
  402d10:	f000 813d 	beq.w	402f8e <_malloc_r+0x3e6>
  402d14:	6863      	ldr	r3, [r4, #4]
  402d16:	68e1      	ldr	r1, [r4, #12]
  402d18:	68a6      	ldr	r6, [r4, #8]
  402d1a:	f023 0303 	bic.w	r3, r3, #3
  402d1e:	4423      	add	r3, r4
  402d20:	4628      	mov	r0, r5
  402d22:	685a      	ldr	r2, [r3, #4]
  402d24:	60f1      	str	r1, [r6, #12]
  402d26:	f042 0201 	orr.w	r2, r2, #1
  402d2a:	608e      	str	r6, [r1, #8]
  402d2c:	605a      	str	r2, [r3, #4]
  402d2e:	f000 fad9 	bl	4032e4 <__malloc_unlock>
  402d32:	3408      	adds	r4, #8
  402d34:	4620      	mov	r0, r4
  402d36:	b003      	add	sp, #12
  402d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d3c:	2400      	movs	r4, #0
  402d3e:	230c      	movs	r3, #12
  402d40:	4620      	mov	r0, r4
  402d42:	602b      	str	r3, [r5, #0]
  402d44:	b003      	add	sp, #12
  402d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d4a:	2040      	movs	r0, #64	; 0x40
  402d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
  402d50:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402d54:	e74a      	b.n	402bec <_malloc_r+0x44>
  402d56:	4423      	add	r3, r4
  402d58:	68e1      	ldr	r1, [r4, #12]
  402d5a:	685a      	ldr	r2, [r3, #4]
  402d5c:	68a6      	ldr	r6, [r4, #8]
  402d5e:	f042 0201 	orr.w	r2, r2, #1
  402d62:	60f1      	str	r1, [r6, #12]
  402d64:	4628      	mov	r0, r5
  402d66:	608e      	str	r6, [r1, #8]
  402d68:	605a      	str	r2, [r3, #4]
  402d6a:	f000 fabb 	bl	4032e4 <__malloc_unlock>
  402d6e:	3408      	adds	r4, #8
  402d70:	4620      	mov	r0, r4
  402d72:	b003      	add	sp, #12
  402d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d78:	4423      	add	r3, r4
  402d7a:	4628      	mov	r0, r5
  402d7c:	685a      	ldr	r2, [r3, #4]
  402d7e:	f042 0201 	orr.w	r2, r2, #1
  402d82:	605a      	str	r2, [r3, #4]
  402d84:	f000 faae 	bl	4032e4 <__malloc_unlock>
  402d88:	3408      	adds	r4, #8
  402d8a:	4620      	mov	r0, r4
  402d8c:	b003      	add	sp, #12
  402d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d92:	68bc      	ldr	r4, [r7, #8]
  402d94:	6863      	ldr	r3, [r4, #4]
  402d96:	f023 0803 	bic.w	r8, r3, #3
  402d9a:	45b0      	cmp	r8, r6
  402d9c:	d304      	bcc.n	402da8 <_malloc_r+0x200>
  402d9e:	eba8 0306 	sub.w	r3, r8, r6
  402da2:	2b0f      	cmp	r3, #15
  402da4:	f300 8085 	bgt.w	402eb2 <_malloc_r+0x30a>
  402da8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402f04 <_malloc_r+0x35c>
  402dac:	4b50      	ldr	r3, [pc, #320]	; (402ef0 <_malloc_r+0x348>)
  402dae:	f8d9 2000 	ldr.w	r2, [r9]
  402db2:	681b      	ldr	r3, [r3, #0]
  402db4:	3201      	adds	r2, #1
  402db6:	4433      	add	r3, r6
  402db8:	eb04 0a08 	add.w	sl, r4, r8
  402dbc:	f000 8155 	beq.w	40306a <_malloc_r+0x4c2>
  402dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402dc4:	330f      	adds	r3, #15
  402dc6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402dca:	f02b 0b0f 	bic.w	fp, fp, #15
  402dce:	4659      	mov	r1, fp
  402dd0:	4628      	mov	r0, r5
  402dd2:	f000 fa8d 	bl	4032f0 <_sbrk_r>
  402dd6:	1c41      	adds	r1, r0, #1
  402dd8:	4602      	mov	r2, r0
  402dda:	f000 80fc 	beq.w	402fd6 <_malloc_r+0x42e>
  402dde:	4582      	cmp	sl, r0
  402de0:	f200 80f7 	bhi.w	402fd2 <_malloc_r+0x42a>
  402de4:	4b43      	ldr	r3, [pc, #268]	; (402ef4 <_malloc_r+0x34c>)
  402de6:	6819      	ldr	r1, [r3, #0]
  402de8:	4459      	add	r1, fp
  402dea:	6019      	str	r1, [r3, #0]
  402dec:	f000 814d 	beq.w	40308a <_malloc_r+0x4e2>
  402df0:	f8d9 0000 	ldr.w	r0, [r9]
  402df4:	3001      	adds	r0, #1
  402df6:	bf1b      	ittet	ne
  402df8:	eba2 0a0a 	subne.w	sl, r2, sl
  402dfc:	4451      	addne	r1, sl
  402dfe:	f8c9 2000 	streq.w	r2, [r9]
  402e02:	6019      	strne	r1, [r3, #0]
  402e04:	f012 0107 	ands.w	r1, r2, #7
  402e08:	f000 8115 	beq.w	403036 <_malloc_r+0x48e>
  402e0c:	f1c1 0008 	rsb	r0, r1, #8
  402e10:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402e14:	4402      	add	r2, r0
  402e16:	3108      	adds	r1, #8
  402e18:	eb02 090b 	add.w	r9, r2, fp
  402e1c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402e20:	eba1 0909 	sub.w	r9, r1, r9
  402e24:	4649      	mov	r1, r9
  402e26:	4628      	mov	r0, r5
  402e28:	9301      	str	r3, [sp, #4]
  402e2a:	9200      	str	r2, [sp, #0]
  402e2c:	f000 fa60 	bl	4032f0 <_sbrk_r>
  402e30:	1c43      	adds	r3, r0, #1
  402e32:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402e36:	f000 8143 	beq.w	4030c0 <_malloc_r+0x518>
  402e3a:	1a80      	subs	r0, r0, r2
  402e3c:	4448      	add	r0, r9
  402e3e:	f040 0001 	orr.w	r0, r0, #1
  402e42:	6819      	ldr	r1, [r3, #0]
  402e44:	60ba      	str	r2, [r7, #8]
  402e46:	4449      	add	r1, r9
  402e48:	42bc      	cmp	r4, r7
  402e4a:	6050      	str	r0, [r2, #4]
  402e4c:	6019      	str	r1, [r3, #0]
  402e4e:	d017      	beq.n	402e80 <_malloc_r+0x2d8>
  402e50:	f1b8 0f0f 	cmp.w	r8, #15
  402e54:	f240 80fb 	bls.w	40304e <_malloc_r+0x4a6>
  402e58:	6860      	ldr	r0, [r4, #4]
  402e5a:	f1a8 020c 	sub.w	r2, r8, #12
  402e5e:	f022 0207 	bic.w	r2, r2, #7
  402e62:	eb04 0e02 	add.w	lr, r4, r2
  402e66:	f000 0001 	and.w	r0, r0, #1
  402e6a:	f04f 0c05 	mov.w	ip, #5
  402e6e:	4310      	orrs	r0, r2
  402e70:	2a0f      	cmp	r2, #15
  402e72:	6060      	str	r0, [r4, #4]
  402e74:	f8ce c004 	str.w	ip, [lr, #4]
  402e78:	f8ce c008 	str.w	ip, [lr, #8]
  402e7c:	f200 8117 	bhi.w	4030ae <_malloc_r+0x506>
  402e80:	4b1d      	ldr	r3, [pc, #116]	; (402ef8 <_malloc_r+0x350>)
  402e82:	68bc      	ldr	r4, [r7, #8]
  402e84:	681a      	ldr	r2, [r3, #0]
  402e86:	4291      	cmp	r1, r2
  402e88:	bf88      	it	hi
  402e8a:	6019      	strhi	r1, [r3, #0]
  402e8c:	4b1b      	ldr	r3, [pc, #108]	; (402efc <_malloc_r+0x354>)
  402e8e:	681a      	ldr	r2, [r3, #0]
  402e90:	4291      	cmp	r1, r2
  402e92:	6862      	ldr	r2, [r4, #4]
  402e94:	bf88      	it	hi
  402e96:	6019      	strhi	r1, [r3, #0]
  402e98:	f022 0203 	bic.w	r2, r2, #3
  402e9c:	4296      	cmp	r6, r2
  402e9e:	eba2 0306 	sub.w	r3, r2, r6
  402ea2:	d801      	bhi.n	402ea8 <_malloc_r+0x300>
  402ea4:	2b0f      	cmp	r3, #15
  402ea6:	dc04      	bgt.n	402eb2 <_malloc_r+0x30a>
  402ea8:	4628      	mov	r0, r5
  402eaa:	f000 fa1b 	bl	4032e4 <__malloc_unlock>
  402eae:	2400      	movs	r4, #0
  402eb0:	e740      	b.n	402d34 <_malloc_r+0x18c>
  402eb2:	19a2      	adds	r2, r4, r6
  402eb4:	f043 0301 	orr.w	r3, r3, #1
  402eb8:	f046 0601 	orr.w	r6, r6, #1
  402ebc:	6066      	str	r6, [r4, #4]
  402ebe:	4628      	mov	r0, r5
  402ec0:	60ba      	str	r2, [r7, #8]
  402ec2:	6053      	str	r3, [r2, #4]
  402ec4:	f000 fa0e 	bl	4032e4 <__malloc_unlock>
  402ec8:	3408      	adds	r4, #8
  402eca:	4620      	mov	r0, r4
  402ecc:	b003      	add	sp, #12
  402ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ed2:	2b14      	cmp	r3, #20
  402ed4:	d971      	bls.n	402fba <_malloc_r+0x412>
  402ed6:	2b54      	cmp	r3, #84	; 0x54
  402ed8:	f200 80a3 	bhi.w	403022 <_malloc_r+0x47a>
  402edc:	0b33      	lsrs	r3, r6, #12
  402ede:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402ee2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402ee6:	00c3      	lsls	r3, r0, #3
  402ee8:	e680      	b.n	402bec <_malloc_r+0x44>
  402eea:	bf00      	nop
  402eec:	20400438 	.word	0x20400438
  402ef0:	20400bc4 	.word	0x20400bc4
  402ef4:	20400b94 	.word	0x20400b94
  402ef8:	20400bbc 	.word	0x20400bbc
  402efc:	20400bc0 	.word	0x20400bc0
  402f00:	20400440 	.word	0x20400440
  402f04:	20400840 	.word	0x20400840
  402f08:	0a5a      	lsrs	r2, r3, #9
  402f0a:	2a04      	cmp	r2, #4
  402f0c:	d95b      	bls.n	402fc6 <_malloc_r+0x41e>
  402f0e:	2a14      	cmp	r2, #20
  402f10:	f200 80ae 	bhi.w	403070 <_malloc_r+0x4c8>
  402f14:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402f18:	00c9      	lsls	r1, r1, #3
  402f1a:	325b      	adds	r2, #91	; 0x5b
  402f1c:	eb07 0c01 	add.w	ip, r7, r1
  402f20:	5879      	ldr	r1, [r7, r1]
  402f22:	f1ac 0c08 	sub.w	ip, ip, #8
  402f26:	458c      	cmp	ip, r1
  402f28:	f000 8088 	beq.w	40303c <_malloc_r+0x494>
  402f2c:	684a      	ldr	r2, [r1, #4]
  402f2e:	f022 0203 	bic.w	r2, r2, #3
  402f32:	4293      	cmp	r3, r2
  402f34:	d273      	bcs.n	40301e <_malloc_r+0x476>
  402f36:	6889      	ldr	r1, [r1, #8]
  402f38:	458c      	cmp	ip, r1
  402f3a:	d1f7      	bne.n	402f2c <_malloc_r+0x384>
  402f3c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402f40:	687b      	ldr	r3, [r7, #4]
  402f42:	60e2      	str	r2, [r4, #12]
  402f44:	f8c4 c008 	str.w	ip, [r4, #8]
  402f48:	6094      	str	r4, [r2, #8]
  402f4a:	f8cc 400c 	str.w	r4, [ip, #12]
  402f4e:	e68f      	b.n	402c70 <_malloc_r+0xc8>
  402f50:	19a1      	adds	r1, r4, r6
  402f52:	f046 0c01 	orr.w	ip, r6, #1
  402f56:	f042 0601 	orr.w	r6, r2, #1
  402f5a:	f8c4 c004 	str.w	ip, [r4, #4]
  402f5e:	4628      	mov	r0, r5
  402f60:	6179      	str	r1, [r7, #20]
  402f62:	6139      	str	r1, [r7, #16]
  402f64:	f8c1 e00c 	str.w	lr, [r1, #12]
  402f68:	f8c1 e008 	str.w	lr, [r1, #8]
  402f6c:	604e      	str	r6, [r1, #4]
  402f6e:	50e2      	str	r2, [r4, r3]
  402f70:	f000 f9b8 	bl	4032e4 <__malloc_unlock>
  402f74:	3408      	adds	r4, #8
  402f76:	e6dd      	b.n	402d34 <_malloc_r+0x18c>
  402f78:	687b      	ldr	r3, [r7, #4]
  402f7a:	e679      	b.n	402c70 <_malloc_r+0xc8>
  402f7c:	f108 0801 	add.w	r8, r8, #1
  402f80:	f018 0f03 	tst.w	r8, #3
  402f84:	f10c 0c08 	add.w	ip, ip, #8
  402f88:	f47f ae85 	bne.w	402c96 <_malloc_r+0xee>
  402f8c:	e02d      	b.n	402fea <_malloc_r+0x442>
  402f8e:	68dc      	ldr	r4, [r3, #12]
  402f90:	42a3      	cmp	r3, r4
  402f92:	bf08      	it	eq
  402f94:	3002      	addeq	r0, #2
  402f96:	f43f ae3e 	beq.w	402c16 <_malloc_r+0x6e>
  402f9a:	e6bb      	b.n	402d14 <_malloc_r+0x16c>
  402f9c:	4419      	add	r1, r3
  402f9e:	461c      	mov	r4, r3
  402fa0:	684a      	ldr	r2, [r1, #4]
  402fa2:	68db      	ldr	r3, [r3, #12]
  402fa4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402fa8:	f042 0201 	orr.w	r2, r2, #1
  402fac:	604a      	str	r2, [r1, #4]
  402fae:	4628      	mov	r0, r5
  402fb0:	60f3      	str	r3, [r6, #12]
  402fb2:	609e      	str	r6, [r3, #8]
  402fb4:	f000 f996 	bl	4032e4 <__malloc_unlock>
  402fb8:	e6bc      	b.n	402d34 <_malloc_r+0x18c>
  402fba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402fbe:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402fc2:	00c3      	lsls	r3, r0, #3
  402fc4:	e612      	b.n	402bec <_malloc_r+0x44>
  402fc6:	099a      	lsrs	r2, r3, #6
  402fc8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402fcc:	00c9      	lsls	r1, r1, #3
  402fce:	3238      	adds	r2, #56	; 0x38
  402fd0:	e7a4      	b.n	402f1c <_malloc_r+0x374>
  402fd2:	42bc      	cmp	r4, r7
  402fd4:	d054      	beq.n	403080 <_malloc_r+0x4d8>
  402fd6:	68bc      	ldr	r4, [r7, #8]
  402fd8:	6862      	ldr	r2, [r4, #4]
  402fda:	f022 0203 	bic.w	r2, r2, #3
  402fde:	e75d      	b.n	402e9c <_malloc_r+0x2f4>
  402fe0:	f859 3908 	ldr.w	r3, [r9], #-8
  402fe4:	4599      	cmp	r9, r3
  402fe6:	f040 8086 	bne.w	4030f6 <_malloc_r+0x54e>
  402fea:	f010 0f03 	tst.w	r0, #3
  402fee:	f100 30ff 	add.w	r0, r0, #4294967295
  402ff2:	d1f5      	bne.n	402fe0 <_malloc_r+0x438>
  402ff4:	687b      	ldr	r3, [r7, #4]
  402ff6:	ea23 0304 	bic.w	r3, r3, r4
  402ffa:	607b      	str	r3, [r7, #4]
  402ffc:	0064      	lsls	r4, r4, #1
  402ffe:	429c      	cmp	r4, r3
  403000:	f63f aec7 	bhi.w	402d92 <_malloc_r+0x1ea>
  403004:	2c00      	cmp	r4, #0
  403006:	f43f aec4 	beq.w	402d92 <_malloc_r+0x1ea>
  40300a:	421c      	tst	r4, r3
  40300c:	4640      	mov	r0, r8
  40300e:	f47f ae3e 	bne.w	402c8e <_malloc_r+0xe6>
  403012:	0064      	lsls	r4, r4, #1
  403014:	421c      	tst	r4, r3
  403016:	f100 0004 	add.w	r0, r0, #4
  40301a:	d0fa      	beq.n	403012 <_malloc_r+0x46a>
  40301c:	e637      	b.n	402c8e <_malloc_r+0xe6>
  40301e:	468c      	mov	ip, r1
  403020:	e78c      	b.n	402f3c <_malloc_r+0x394>
  403022:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403026:	d815      	bhi.n	403054 <_malloc_r+0x4ac>
  403028:	0bf3      	lsrs	r3, r6, #15
  40302a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40302e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403032:	00c3      	lsls	r3, r0, #3
  403034:	e5da      	b.n	402bec <_malloc_r+0x44>
  403036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40303a:	e6ed      	b.n	402e18 <_malloc_r+0x270>
  40303c:	687b      	ldr	r3, [r7, #4]
  40303e:	1092      	asrs	r2, r2, #2
  403040:	2101      	movs	r1, #1
  403042:	fa01 f202 	lsl.w	r2, r1, r2
  403046:	4313      	orrs	r3, r2
  403048:	607b      	str	r3, [r7, #4]
  40304a:	4662      	mov	r2, ip
  40304c:	e779      	b.n	402f42 <_malloc_r+0x39a>
  40304e:	2301      	movs	r3, #1
  403050:	6053      	str	r3, [r2, #4]
  403052:	e729      	b.n	402ea8 <_malloc_r+0x300>
  403054:	f240 5254 	movw	r2, #1364	; 0x554
  403058:	4293      	cmp	r3, r2
  40305a:	d822      	bhi.n	4030a2 <_malloc_r+0x4fa>
  40305c:	0cb3      	lsrs	r3, r6, #18
  40305e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403062:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403066:	00c3      	lsls	r3, r0, #3
  403068:	e5c0      	b.n	402bec <_malloc_r+0x44>
  40306a:	f103 0b10 	add.w	fp, r3, #16
  40306e:	e6ae      	b.n	402dce <_malloc_r+0x226>
  403070:	2a54      	cmp	r2, #84	; 0x54
  403072:	d829      	bhi.n	4030c8 <_malloc_r+0x520>
  403074:	0b1a      	lsrs	r2, r3, #12
  403076:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40307a:	00c9      	lsls	r1, r1, #3
  40307c:	326e      	adds	r2, #110	; 0x6e
  40307e:	e74d      	b.n	402f1c <_malloc_r+0x374>
  403080:	4b20      	ldr	r3, [pc, #128]	; (403104 <_malloc_r+0x55c>)
  403082:	6819      	ldr	r1, [r3, #0]
  403084:	4459      	add	r1, fp
  403086:	6019      	str	r1, [r3, #0]
  403088:	e6b2      	b.n	402df0 <_malloc_r+0x248>
  40308a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40308e:	2800      	cmp	r0, #0
  403090:	f47f aeae 	bne.w	402df0 <_malloc_r+0x248>
  403094:	eb08 030b 	add.w	r3, r8, fp
  403098:	68ba      	ldr	r2, [r7, #8]
  40309a:	f043 0301 	orr.w	r3, r3, #1
  40309e:	6053      	str	r3, [r2, #4]
  4030a0:	e6ee      	b.n	402e80 <_malloc_r+0x2d8>
  4030a2:	207f      	movs	r0, #127	; 0x7f
  4030a4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4030a8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4030ac:	e59e      	b.n	402bec <_malloc_r+0x44>
  4030ae:	f104 0108 	add.w	r1, r4, #8
  4030b2:	4628      	mov	r0, r5
  4030b4:	9300      	str	r3, [sp, #0]
  4030b6:	f001 fbcd 	bl	404854 <_free_r>
  4030ba:	9b00      	ldr	r3, [sp, #0]
  4030bc:	6819      	ldr	r1, [r3, #0]
  4030be:	e6df      	b.n	402e80 <_malloc_r+0x2d8>
  4030c0:	2001      	movs	r0, #1
  4030c2:	f04f 0900 	mov.w	r9, #0
  4030c6:	e6bc      	b.n	402e42 <_malloc_r+0x29a>
  4030c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4030cc:	d805      	bhi.n	4030da <_malloc_r+0x532>
  4030ce:	0bda      	lsrs	r2, r3, #15
  4030d0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4030d4:	00c9      	lsls	r1, r1, #3
  4030d6:	3277      	adds	r2, #119	; 0x77
  4030d8:	e720      	b.n	402f1c <_malloc_r+0x374>
  4030da:	f240 5154 	movw	r1, #1364	; 0x554
  4030de:	428a      	cmp	r2, r1
  4030e0:	d805      	bhi.n	4030ee <_malloc_r+0x546>
  4030e2:	0c9a      	lsrs	r2, r3, #18
  4030e4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4030e8:	00c9      	lsls	r1, r1, #3
  4030ea:	327c      	adds	r2, #124	; 0x7c
  4030ec:	e716      	b.n	402f1c <_malloc_r+0x374>
  4030ee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4030f2:	227e      	movs	r2, #126	; 0x7e
  4030f4:	e712      	b.n	402f1c <_malloc_r+0x374>
  4030f6:	687b      	ldr	r3, [r7, #4]
  4030f8:	e780      	b.n	402ffc <_malloc_r+0x454>
  4030fa:	08f0      	lsrs	r0, r6, #3
  4030fc:	f106 0308 	add.w	r3, r6, #8
  403100:	e600      	b.n	402d04 <_malloc_r+0x15c>
  403102:	bf00      	nop
  403104:	20400b94 	.word	0x20400b94

00403108 <memcpy>:
  403108:	4684      	mov	ip, r0
  40310a:	ea41 0300 	orr.w	r3, r1, r0
  40310e:	f013 0303 	ands.w	r3, r3, #3
  403112:	d16d      	bne.n	4031f0 <memcpy+0xe8>
  403114:	3a40      	subs	r2, #64	; 0x40
  403116:	d341      	bcc.n	40319c <memcpy+0x94>
  403118:	f851 3b04 	ldr.w	r3, [r1], #4
  40311c:	f840 3b04 	str.w	r3, [r0], #4
  403120:	f851 3b04 	ldr.w	r3, [r1], #4
  403124:	f840 3b04 	str.w	r3, [r0], #4
  403128:	f851 3b04 	ldr.w	r3, [r1], #4
  40312c:	f840 3b04 	str.w	r3, [r0], #4
  403130:	f851 3b04 	ldr.w	r3, [r1], #4
  403134:	f840 3b04 	str.w	r3, [r0], #4
  403138:	f851 3b04 	ldr.w	r3, [r1], #4
  40313c:	f840 3b04 	str.w	r3, [r0], #4
  403140:	f851 3b04 	ldr.w	r3, [r1], #4
  403144:	f840 3b04 	str.w	r3, [r0], #4
  403148:	f851 3b04 	ldr.w	r3, [r1], #4
  40314c:	f840 3b04 	str.w	r3, [r0], #4
  403150:	f851 3b04 	ldr.w	r3, [r1], #4
  403154:	f840 3b04 	str.w	r3, [r0], #4
  403158:	f851 3b04 	ldr.w	r3, [r1], #4
  40315c:	f840 3b04 	str.w	r3, [r0], #4
  403160:	f851 3b04 	ldr.w	r3, [r1], #4
  403164:	f840 3b04 	str.w	r3, [r0], #4
  403168:	f851 3b04 	ldr.w	r3, [r1], #4
  40316c:	f840 3b04 	str.w	r3, [r0], #4
  403170:	f851 3b04 	ldr.w	r3, [r1], #4
  403174:	f840 3b04 	str.w	r3, [r0], #4
  403178:	f851 3b04 	ldr.w	r3, [r1], #4
  40317c:	f840 3b04 	str.w	r3, [r0], #4
  403180:	f851 3b04 	ldr.w	r3, [r1], #4
  403184:	f840 3b04 	str.w	r3, [r0], #4
  403188:	f851 3b04 	ldr.w	r3, [r1], #4
  40318c:	f840 3b04 	str.w	r3, [r0], #4
  403190:	f851 3b04 	ldr.w	r3, [r1], #4
  403194:	f840 3b04 	str.w	r3, [r0], #4
  403198:	3a40      	subs	r2, #64	; 0x40
  40319a:	d2bd      	bcs.n	403118 <memcpy+0x10>
  40319c:	3230      	adds	r2, #48	; 0x30
  40319e:	d311      	bcc.n	4031c4 <memcpy+0xbc>
  4031a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a4:	f840 3b04 	str.w	r3, [r0], #4
  4031a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ac:	f840 3b04 	str.w	r3, [r0], #4
  4031b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031b4:	f840 3b04 	str.w	r3, [r0], #4
  4031b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031bc:	f840 3b04 	str.w	r3, [r0], #4
  4031c0:	3a10      	subs	r2, #16
  4031c2:	d2ed      	bcs.n	4031a0 <memcpy+0x98>
  4031c4:	320c      	adds	r2, #12
  4031c6:	d305      	bcc.n	4031d4 <memcpy+0xcc>
  4031c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031cc:	f840 3b04 	str.w	r3, [r0], #4
  4031d0:	3a04      	subs	r2, #4
  4031d2:	d2f9      	bcs.n	4031c8 <memcpy+0xc0>
  4031d4:	3204      	adds	r2, #4
  4031d6:	d008      	beq.n	4031ea <memcpy+0xe2>
  4031d8:	07d2      	lsls	r2, r2, #31
  4031da:	bf1c      	itt	ne
  4031dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4031e0:	f800 3b01 	strbne.w	r3, [r0], #1
  4031e4:	d301      	bcc.n	4031ea <memcpy+0xe2>
  4031e6:	880b      	ldrh	r3, [r1, #0]
  4031e8:	8003      	strh	r3, [r0, #0]
  4031ea:	4660      	mov	r0, ip
  4031ec:	4770      	bx	lr
  4031ee:	bf00      	nop
  4031f0:	2a08      	cmp	r2, #8
  4031f2:	d313      	bcc.n	40321c <memcpy+0x114>
  4031f4:	078b      	lsls	r3, r1, #30
  4031f6:	d08d      	beq.n	403114 <memcpy+0xc>
  4031f8:	f010 0303 	ands.w	r3, r0, #3
  4031fc:	d08a      	beq.n	403114 <memcpy+0xc>
  4031fe:	f1c3 0304 	rsb	r3, r3, #4
  403202:	1ad2      	subs	r2, r2, r3
  403204:	07db      	lsls	r3, r3, #31
  403206:	bf1c      	itt	ne
  403208:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40320c:	f800 3b01 	strbne.w	r3, [r0], #1
  403210:	d380      	bcc.n	403114 <memcpy+0xc>
  403212:	f831 3b02 	ldrh.w	r3, [r1], #2
  403216:	f820 3b02 	strh.w	r3, [r0], #2
  40321a:	e77b      	b.n	403114 <memcpy+0xc>
  40321c:	3a04      	subs	r2, #4
  40321e:	d3d9      	bcc.n	4031d4 <memcpy+0xcc>
  403220:	3a01      	subs	r2, #1
  403222:	f811 3b01 	ldrb.w	r3, [r1], #1
  403226:	f800 3b01 	strb.w	r3, [r0], #1
  40322a:	d2f9      	bcs.n	403220 <memcpy+0x118>
  40322c:	780b      	ldrb	r3, [r1, #0]
  40322e:	7003      	strb	r3, [r0, #0]
  403230:	784b      	ldrb	r3, [r1, #1]
  403232:	7043      	strb	r3, [r0, #1]
  403234:	788b      	ldrb	r3, [r1, #2]
  403236:	7083      	strb	r3, [r0, #2]
  403238:	4660      	mov	r0, ip
  40323a:	4770      	bx	lr

0040323c <memset>:
  40323c:	b470      	push	{r4, r5, r6}
  40323e:	0786      	lsls	r6, r0, #30
  403240:	d046      	beq.n	4032d0 <memset+0x94>
  403242:	1e54      	subs	r4, r2, #1
  403244:	2a00      	cmp	r2, #0
  403246:	d041      	beq.n	4032cc <memset+0x90>
  403248:	b2ca      	uxtb	r2, r1
  40324a:	4603      	mov	r3, r0
  40324c:	e002      	b.n	403254 <memset+0x18>
  40324e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403252:	d33b      	bcc.n	4032cc <memset+0x90>
  403254:	f803 2b01 	strb.w	r2, [r3], #1
  403258:	079d      	lsls	r5, r3, #30
  40325a:	d1f8      	bne.n	40324e <memset+0x12>
  40325c:	2c03      	cmp	r4, #3
  40325e:	d92e      	bls.n	4032be <memset+0x82>
  403260:	b2cd      	uxtb	r5, r1
  403262:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403266:	2c0f      	cmp	r4, #15
  403268:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40326c:	d919      	bls.n	4032a2 <memset+0x66>
  40326e:	f103 0210 	add.w	r2, r3, #16
  403272:	4626      	mov	r6, r4
  403274:	3e10      	subs	r6, #16
  403276:	2e0f      	cmp	r6, #15
  403278:	f842 5c10 	str.w	r5, [r2, #-16]
  40327c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403280:	f842 5c08 	str.w	r5, [r2, #-8]
  403284:	f842 5c04 	str.w	r5, [r2, #-4]
  403288:	f102 0210 	add.w	r2, r2, #16
  40328c:	d8f2      	bhi.n	403274 <memset+0x38>
  40328e:	f1a4 0210 	sub.w	r2, r4, #16
  403292:	f022 020f 	bic.w	r2, r2, #15
  403296:	f004 040f 	and.w	r4, r4, #15
  40329a:	3210      	adds	r2, #16
  40329c:	2c03      	cmp	r4, #3
  40329e:	4413      	add	r3, r2
  4032a0:	d90d      	bls.n	4032be <memset+0x82>
  4032a2:	461e      	mov	r6, r3
  4032a4:	4622      	mov	r2, r4
  4032a6:	3a04      	subs	r2, #4
  4032a8:	2a03      	cmp	r2, #3
  4032aa:	f846 5b04 	str.w	r5, [r6], #4
  4032ae:	d8fa      	bhi.n	4032a6 <memset+0x6a>
  4032b0:	1f22      	subs	r2, r4, #4
  4032b2:	f022 0203 	bic.w	r2, r2, #3
  4032b6:	3204      	adds	r2, #4
  4032b8:	4413      	add	r3, r2
  4032ba:	f004 0403 	and.w	r4, r4, #3
  4032be:	b12c      	cbz	r4, 4032cc <memset+0x90>
  4032c0:	b2c9      	uxtb	r1, r1
  4032c2:	441c      	add	r4, r3
  4032c4:	f803 1b01 	strb.w	r1, [r3], #1
  4032c8:	429c      	cmp	r4, r3
  4032ca:	d1fb      	bne.n	4032c4 <memset+0x88>
  4032cc:	bc70      	pop	{r4, r5, r6}
  4032ce:	4770      	bx	lr
  4032d0:	4614      	mov	r4, r2
  4032d2:	4603      	mov	r3, r0
  4032d4:	e7c2      	b.n	40325c <memset+0x20>
  4032d6:	bf00      	nop

004032d8 <__malloc_lock>:
  4032d8:	4801      	ldr	r0, [pc, #4]	; (4032e0 <__malloc_lock+0x8>)
  4032da:	f001 bd55 	b.w	404d88 <__retarget_lock_acquire_recursive>
  4032de:	bf00      	nop
  4032e0:	20400c24 	.word	0x20400c24

004032e4 <__malloc_unlock>:
  4032e4:	4801      	ldr	r0, [pc, #4]	; (4032ec <__malloc_unlock+0x8>)
  4032e6:	f001 bd51 	b.w	404d8c <__retarget_lock_release_recursive>
  4032ea:	bf00      	nop
  4032ec:	20400c24 	.word	0x20400c24

004032f0 <_sbrk_r>:
  4032f0:	b538      	push	{r3, r4, r5, lr}
  4032f2:	4c07      	ldr	r4, [pc, #28]	; (403310 <_sbrk_r+0x20>)
  4032f4:	2300      	movs	r3, #0
  4032f6:	4605      	mov	r5, r0
  4032f8:	4608      	mov	r0, r1
  4032fa:	6023      	str	r3, [r4, #0]
  4032fc:	f7fd fbca 	bl	400a94 <_sbrk>
  403300:	1c43      	adds	r3, r0, #1
  403302:	d000      	beq.n	403306 <_sbrk_r+0x16>
  403304:	bd38      	pop	{r3, r4, r5, pc}
  403306:	6823      	ldr	r3, [r4, #0]
  403308:	2b00      	cmp	r3, #0
  40330a:	d0fb      	beq.n	403304 <_sbrk_r+0x14>
  40330c:	602b      	str	r3, [r5, #0]
  40330e:	bd38      	pop	{r3, r4, r5, pc}
  403310:	20400c38 	.word	0x20400c38

00403314 <setbuf>:
  403314:	2900      	cmp	r1, #0
  403316:	bf0c      	ite	eq
  403318:	2202      	moveq	r2, #2
  40331a:	2200      	movne	r2, #0
  40331c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403320:	f000 b800 	b.w	403324 <setvbuf>

00403324 <setvbuf>:
  403324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403328:	4c61      	ldr	r4, [pc, #388]	; (4034b0 <setvbuf+0x18c>)
  40332a:	6825      	ldr	r5, [r4, #0]
  40332c:	b083      	sub	sp, #12
  40332e:	4604      	mov	r4, r0
  403330:	460f      	mov	r7, r1
  403332:	4690      	mov	r8, r2
  403334:	461e      	mov	r6, r3
  403336:	b115      	cbz	r5, 40333e <setvbuf+0x1a>
  403338:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40333a:	2b00      	cmp	r3, #0
  40333c:	d064      	beq.n	403408 <setvbuf+0xe4>
  40333e:	f1b8 0f02 	cmp.w	r8, #2
  403342:	d006      	beq.n	403352 <setvbuf+0x2e>
  403344:	f1b8 0f01 	cmp.w	r8, #1
  403348:	f200 809f 	bhi.w	40348a <setvbuf+0x166>
  40334c:	2e00      	cmp	r6, #0
  40334e:	f2c0 809c 	blt.w	40348a <setvbuf+0x166>
  403352:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403354:	07d8      	lsls	r0, r3, #31
  403356:	d534      	bpl.n	4033c2 <setvbuf+0x9e>
  403358:	4621      	mov	r1, r4
  40335a:	4628      	mov	r0, r5
  40335c:	f001 f8fc 	bl	404558 <_fflush_r>
  403360:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403362:	b141      	cbz	r1, 403376 <setvbuf+0x52>
  403364:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403368:	4299      	cmp	r1, r3
  40336a:	d002      	beq.n	403372 <setvbuf+0x4e>
  40336c:	4628      	mov	r0, r5
  40336e:	f001 fa71 	bl	404854 <_free_r>
  403372:	2300      	movs	r3, #0
  403374:	6323      	str	r3, [r4, #48]	; 0x30
  403376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40337a:	2200      	movs	r2, #0
  40337c:	61a2      	str	r2, [r4, #24]
  40337e:	6062      	str	r2, [r4, #4]
  403380:	061a      	lsls	r2, r3, #24
  403382:	d43a      	bmi.n	4033fa <setvbuf+0xd6>
  403384:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403388:	f023 0303 	bic.w	r3, r3, #3
  40338c:	f1b8 0f02 	cmp.w	r8, #2
  403390:	81a3      	strh	r3, [r4, #12]
  403392:	d01d      	beq.n	4033d0 <setvbuf+0xac>
  403394:	ab01      	add	r3, sp, #4
  403396:	466a      	mov	r2, sp
  403398:	4621      	mov	r1, r4
  40339a:	4628      	mov	r0, r5
  40339c:	f001 fcf8 	bl	404d90 <__swhatbuf_r>
  4033a0:	89a3      	ldrh	r3, [r4, #12]
  4033a2:	4318      	orrs	r0, r3
  4033a4:	81a0      	strh	r0, [r4, #12]
  4033a6:	2e00      	cmp	r6, #0
  4033a8:	d132      	bne.n	403410 <setvbuf+0xec>
  4033aa:	9e00      	ldr	r6, [sp, #0]
  4033ac:	4630      	mov	r0, r6
  4033ae:	f7ff fbeb 	bl	402b88 <malloc>
  4033b2:	4607      	mov	r7, r0
  4033b4:	2800      	cmp	r0, #0
  4033b6:	d06b      	beq.n	403490 <setvbuf+0x16c>
  4033b8:	89a3      	ldrh	r3, [r4, #12]
  4033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4033be:	81a3      	strh	r3, [r4, #12]
  4033c0:	e028      	b.n	403414 <setvbuf+0xf0>
  4033c2:	89a3      	ldrh	r3, [r4, #12]
  4033c4:	0599      	lsls	r1, r3, #22
  4033c6:	d4c7      	bmi.n	403358 <setvbuf+0x34>
  4033c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4033ca:	f001 fcdd 	bl	404d88 <__retarget_lock_acquire_recursive>
  4033ce:	e7c3      	b.n	403358 <setvbuf+0x34>
  4033d0:	2500      	movs	r5, #0
  4033d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4033d4:	2600      	movs	r6, #0
  4033d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4033da:	f043 0302 	orr.w	r3, r3, #2
  4033de:	2001      	movs	r0, #1
  4033e0:	60a6      	str	r6, [r4, #8]
  4033e2:	07ce      	lsls	r6, r1, #31
  4033e4:	81a3      	strh	r3, [r4, #12]
  4033e6:	6022      	str	r2, [r4, #0]
  4033e8:	6122      	str	r2, [r4, #16]
  4033ea:	6160      	str	r0, [r4, #20]
  4033ec:	d401      	bmi.n	4033f2 <setvbuf+0xce>
  4033ee:	0598      	lsls	r0, r3, #22
  4033f0:	d53e      	bpl.n	403470 <setvbuf+0x14c>
  4033f2:	4628      	mov	r0, r5
  4033f4:	b003      	add	sp, #12
  4033f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4033fa:	6921      	ldr	r1, [r4, #16]
  4033fc:	4628      	mov	r0, r5
  4033fe:	f001 fa29 	bl	404854 <_free_r>
  403402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403406:	e7bd      	b.n	403384 <setvbuf+0x60>
  403408:	4628      	mov	r0, r5
  40340a:	f001 f8fd 	bl	404608 <__sinit>
  40340e:	e796      	b.n	40333e <setvbuf+0x1a>
  403410:	2f00      	cmp	r7, #0
  403412:	d0cb      	beq.n	4033ac <setvbuf+0x88>
  403414:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403416:	2b00      	cmp	r3, #0
  403418:	d033      	beq.n	403482 <setvbuf+0x15e>
  40341a:	9b00      	ldr	r3, [sp, #0]
  40341c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403420:	6027      	str	r7, [r4, #0]
  403422:	429e      	cmp	r6, r3
  403424:	bf1c      	itt	ne
  403426:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40342a:	81a2      	strhne	r2, [r4, #12]
  40342c:	f1b8 0f01 	cmp.w	r8, #1
  403430:	bf04      	itt	eq
  403432:	f042 0201 	orreq.w	r2, r2, #1
  403436:	81a2      	strheq	r2, [r4, #12]
  403438:	b292      	uxth	r2, r2
  40343a:	f012 0308 	ands.w	r3, r2, #8
  40343e:	6127      	str	r7, [r4, #16]
  403440:	6166      	str	r6, [r4, #20]
  403442:	d00e      	beq.n	403462 <setvbuf+0x13e>
  403444:	07d1      	lsls	r1, r2, #31
  403446:	d51a      	bpl.n	40347e <setvbuf+0x15a>
  403448:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40344a:	4276      	negs	r6, r6
  40344c:	2300      	movs	r3, #0
  40344e:	f015 0501 	ands.w	r5, r5, #1
  403452:	61a6      	str	r6, [r4, #24]
  403454:	60a3      	str	r3, [r4, #8]
  403456:	d009      	beq.n	40346c <setvbuf+0x148>
  403458:	2500      	movs	r5, #0
  40345a:	4628      	mov	r0, r5
  40345c:	b003      	add	sp, #12
  40345e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403462:	60a3      	str	r3, [r4, #8]
  403464:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403466:	f015 0501 	ands.w	r5, r5, #1
  40346a:	d1f5      	bne.n	403458 <setvbuf+0x134>
  40346c:	0593      	lsls	r3, r2, #22
  40346e:	d4c0      	bmi.n	4033f2 <setvbuf+0xce>
  403470:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403472:	f001 fc8b 	bl	404d8c <__retarget_lock_release_recursive>
  403476:	4628      	mov	r0, r5
  403478:	b003      	add	sp, #12
  40347a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40347e:	60a6      	str	r6, [r4, #8]
  403480:	e7f0      	b.n	403464 <setvbuf+0x140>
  403482:	4628      	mov	r0, r5
  403484:	f001 f8c0 	bl	404608 <__sinit>
  403488:	e7c7      	b.n	40341a <setvbuf+0xf6>
  40348a:	f04f 35ff 	mov.w	r5, #4294967295
  40348e:	e7b0      	b.n	4033f2 <setvbuf+0xce>
  403490:	f8dd 9000 	ldr.w	r9, [sp]
  403494:	45b1      	cmp	r9, r6
  403496:	d004      	beq.n	4034a2 <setvbuf+0x17e>
  403498:	4648      	mov	r0, r9
  40349a:	f7ff fb75 	bl	402b88 <malloc>
  40349e:	4607      	mov	r7, r0
  4034a0:	b920      	cbnz	r0, 4034ac <setvbuf+0x188>
  4034a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034a6:	f04f 35ff 	mov.w	r5, #4294967295
  4034aa:	e792      	b.n	4033d2 <setvbuf+0xae>
  4034ac:	464e      	mov	r6, r9
  4034ae:	e783      	b.n	4033b8 <setvbuf+0x94>
  4034b0:	2040000c 	.word	0x2040000c
	...

004034c0 <strlen>:
  4034c0:	f890 f000 	pld	[r0]
  4034c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4034c8:	f020 0107 	bic.w	r1, r0, #7
  4034cc:	f06f 0c00 	mvn.w	ip, #0
  4034d0:	f010 0407 	ands.w	r4, r0, #7
  4034d4:	f891 f020 	pld	[r1, #32]
  4034d8:	f040 8049 	bne.w	40356e <strlen+0xae>
  4034dc:	f04f 0400 	mov.w	r4, #0
  4034e0:	f06f 0007 	mvn.w	r0, #7
  4034e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4034e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4034ec:	f100 0008 	add.w	r0, r0, #8
  4034f0:	fa82 f24c 	uadd8	r2, r2, ip
  4034f4:	faa4 f28c 	sel	r2, r4, ip
  4034f8:	fa83 f34c 	uadd8	r3, r3, ip
  4034fc:	faa2 f38c 	sel	r3, r2, ip
  403500:	bb4b      	cbnz	r3, 403556 <strlen+0x96>
  403502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403506:	fa82 f24c 	uadd8	r2, r2, ip
  40350a:	f100 0008 	add.w	r0, r0, #8
  40350e:	faa4 f28c 	sel	r2, r4, ip
  403512:	fa83 f34c 	uadd8	r3, r3, ip
  403516:	faa2 f38c 	sel	r3, r2, ip
  40351a:	b9e3      	cbnz	r3, 403556 <strlen+0x96>
  40351c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403520:	fa82 f24c 	uadd8	r2, r2, ip
  403524:	f100 0008 	add.w	r0, r0, #8
  403528:	faa4 f28c 	sel	r2, r4, ip
  40352c:	fa83 f34c 	uadd8	r3, r3, ip
  403530:	faa2 f38c 	sel	r3, r2, ip
  403534:	b97b      	cbnz	r3, 403556 <strlen+0x96>
  403536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40353a:	f101 0120 	add.w	r1, r1, #32
  40353e:	fa82 f24c 	uadd8	r2, r2, ip
  403542:	f100 0008 	add.w	r0, r0, #8
  403546:	faa4 f28c 	sel	r2, r4, ip
  40354a:	fa83 f34c 	uadd8	r3, r3, ip
  40354e:	faa2 f38c 	sel	r3, r2, ip
  403552:	2b00      	cmp	r3, #0
  403554:	d0c6      	beq.n	4034e4 <strlen+0x24>
  403556:	2a00      	cmp	r2, #0
  403558:	bf04      	itt	eq
  40355a:	3004      	addeq	r0, #4
  40355c:	461a      	moveq	r2, r3
  40355e:	ba12      	rev	r2, r2
  403560:	fab2 f282 	clz	r2, r2
  403564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40356c:	4770      	bx	lr
  40356e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403572:	f004 0503 	and.w	r5, r4, #3
  403576:	f1c4 0000 	rsb	r0, r4, #0
  40357a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40357e:	f014 0f04 	tst.w	r4, #4
  403582:	f891 f040 	pld	[r1, #64]	; 0x40
  403586:	fa0c f505 	lsl.w	r5, ip, r5
  40358a:	ea62 0205 	orn	r2, r2, r5
  40358e:	bf1c      	itt	ne
  403590:	ea63 0305 	ornne	r3, r3, r5
  403594:	4662      	movne	r2, ip
  403596:	f04f 0400 	mov.w	r4, #0
  40359a:	e7a9      	b.n	4034f0 <strlen+0x30>

0040359c <__sprint_r.part.0>:
  40359c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4035a2:	049c      	lsls	r4, r3, #18
  4035a4:	4693      	mov	fp, r2
  4035a6:	d52f      	bpl.n	403608 <__sprint_r.part.0+0x6c>
  4035a8:	6893      	ldr	r3, [r2, #8]
  4035aa:	6812      	ldr	r2, [r2, #0]
  4035ac:	b353      	cbz	r3, 403604 <__sprint_r.part.0+0x68>
  4035ae:	460e      	mov	r6, r1
  4035b0:	4607      	mov	r7, r0
  4035b2:	f102 0908 	add.w	r9, r2, #8
  4035b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4035ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4035be:	d017      	beq.n	4035f0 <__sprint_r.part.0+0x54>
  4035c0:	3d04      	subs	r5, #4
  4035c2:	2400      	movs	r4, #0
  4035c4:	e001      	b.n	4035ca <__sprint_r.part.0+0x2e>
  4035c6:	45a0      	cmp	r8, r4
  4035c8:	d010      	beq.n	4035ec <__sprint_r.part.0+0x50>
  4035ca:	4632      	mov	r2, r6
  4035cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4035d0:	4638      	mov	r0, r7
  4035d2:	f001 f8bb 	bl	40474c <_fputwc_r>
  4035d6:	1c43      	adds	r3, r0, #1
  4035d8:	f104 0401 	add.w	r4, r4, #1
  4035dc:	d1f3      	bne.n	4035c6 <__sprint_r.part.0+0x2a>
  4035de:	2300      	movs	r3, #0
  4035e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4035e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4035e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4035f0:	f02a 0a03 	bic.w	sl, sl, #3
  4035f4:	eba3 030a 	sub.w	r3, r3, sl
  4035f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4035fc:	f109 0908 	add.w	r9, r9, #8
  403600:	2b00      	cmp	r3, #0
  403602:	d1d8      	bne.n	4035b6 <__sprint_r.part.0+0x1a>
  403604:	2000      	movs	r0, #0
  403606:	e7ea      	b.n	4035de <__sprint_r.part.0+0x42>
  403608:	f001 fa0a 	bl	404a20 <__sfvwrite_r>
  40360c:	2300      	movs	r3, #0
  40360e:	f8cb 3008 	str.w	r3, [fp, #8]
  403612:	f8cb 3004 	str.w	r3, [fp, #4]
  403616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40361a:	bf00      	nop

0040361c <_vfiprintf_r>:
  40361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403620:	b0ad      	sub	sp, #180	; 0xb4
  403622:	461d      	mov	r5, r3
  403624:	468b      	mov	fp, r1
  403626:	4690      	mov	r8, r2
  403628:	9307      	str	r3, [sp, #28]
  40362a:	9006      	str	r0, [sp, #24]
  40362c:	b118      	cbz	r0, 403636 <_vfiprintf_r+0x1a>
  40362e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403630:	2b00      	cmp	r3, #0
  403632:	f000 80f3 	beq.w	40381c <_vfiprintf_r+0x200>
  403636:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40363a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40363e:	07df      	lsls	r7, r3, #31
  403640:	b281      	uxth	r1, r0
  403642:	d402      	bmi.n	40364a <_vfiprintf_r+0x2e>
  403644:	058e      	lsls	r6, r1, #22
  403646:	f140 80fc 	bpl.w	403842 <_vfiprintf_r+0x226>
  40364a:	048c      	lsls	r4, r1, #18
  40364c:	d40a      	bmi.n	403664 <_vfiprintf_r+0x48>
  40364e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403652:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40365a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40365e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403662:	b289      	uxth	r1, r1
  403664:	0708      	lsls	r0, r1, #28
  403666:	f140 80b3 	bpl.w	4037d0 <_vfiprintf_r+0x1b4>
  40366a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40366e:	2b00      	cmp	r3, #0
  403670:	f000 80ae 	beq.w	4037d0 <_vfiprintf_r+0x1b4>
  403674:	f001 031a 	and.w	r3, r1, #26
  403678:	2b0a      	cmp	r3, #10
  40367a:	f000 80b5 	beq.w	4037e8 <_vfiprintf_r+0x1cc>
  40367e:	2300      	movs	r3, #0
  403680:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403684:	930b      	str	r3, [sp, #44]	; 0x2c
  403686:	9311      	str	r3, [sp, #68]	; 0x44
  403688:	9310      	str	r3, [sp, #64]	; 0x40
  40368a:	9303      	str	r3, [sp, #12]
  40368c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403690:	46ca      	mov	sl, r9
  403692:	f8cd b010 	str.w	fp, [sp, #16]
  403696:	f898 3000 	ldrb.w	r3, [r8]
  40369a:	4644      	mov	r4, r8
  40369c:	b1fb      	cbz	r3, 4036de <_vfiprintf_r+0xc2>
  40369e:	2b25      	cmp	r3, #37	; 0x25
  4036a0:	d102      	bne.n	4036a8 <_vfiprintf_r+0x8c>
  4036a2:	e01c      	b.n	4036de <_vfiprintf_r+0xc2>
  4036a4:	2b25      	cmp	r3, #37	; 0x25
  4036a6:	d003      	beq.n	4036b0 <_vfiprintf_r+0x94>
  4036a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4036ac:	2b00      	cmp	r3, #0
  4036ae:	d1f9      	bne.n	4036a4 <_vfiprintf_r+0x88>
  4036b0:	eba4 0508 	sub.w	r5, r4, r8
  4036b4:	b19d      	cbz	r5, 4036de <_vfiprintf_r+0xc2>
  4036b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4036b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4036ba:	f8ca 8000 	str.w	r8, [sl]
  4036be:	3301      	adds	r3, #1
  4036c0:	442a      	add	r2, r5
  4036c2:	2b07      	cmp	r3, #7
  4036c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4036c8:	9211      	str	r2, [sp, #68]	; 0x44
  4036ca:	9310      	str	r3, [sp, #64]	; 0x40
  4036cc:	dd7a      	ble.n	4037c4 <_vfiprintf_r+0x1a8>
  4036ce:	2a00      	cmp	r2, #0
  4036d0:	f040 84b0 	bne.w	404034 <_vfiprintf_r+0xa18>
  4036d4:	9b03      	ldr	r3, [sp, #12]
  4036d6:	9210      	str	r2, [sp, #64]	; 0x40
  4036d8:	442b      	add	r3, r5
  4036da:	46ca      	mov	sl, r9
  4036dc:	9303      	str	r3, [sp, #12]
  4036de:	7823      	ldrb	r3, [r4, #0]
  4036e0:	2b00      	cmp	r3, #0
  4036e2:	f000 83e0 	beq.w	403ea6 <_vfiprintf_r+0x88a>
  4036e6:	2000      	movs	r0, #0
  4036e8:	f04f 0300 	mov.w	r3, #0
  4036ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4036f0:	f104 0801 	add.w	r8, r4, #1
  4036f4:	7862      	ldrb	r2, [r4, #1]
  4036f6:	4605      	mov	r5, r0
  4036f8:	4606      	mov	r6, r0
  4036fa:	4603      	mov	r3, r0
  4036fc:	f04f 34ff 	mov.w	r4, #4294967295
  403700:	f108 0801 	add.w	r8, r8, #1
  403704:	f1a2 0120 	sub.w	r1, r2, #32
  403708:	2958      	cmp	r1, #88	; 0x58
  40370a:	f200 82de 	bhi.w	403cca <_vfiprintf_r+0x6ae>
  40370e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403712:	0221      	.short	0x0221
  403714:	02dc02dc 	.word	0x02dc02dc
  403718:	02dc0229 	.word	0x02dc0229
  40371c:	02dc02dc 	.word	0x02dc02dc
  403720:	02dc02dc 	.word	0x02dc02dc
  403724:	028902dc 	.word	0x028902dc
  403728:	02dc0295 	.word	0x02dc0295
  40372c:	02bd00a2 	.word	0x02bd00a2
  403730:	019f02dc 	.word	0x019f02dc
  403734:	01a401a4 	.word	0x01a401a4
  403738:	01a401a4 	.word	0x01a401a4
  40373c:	01a401a4 	.word	0x01a401a4
  403740:	01a401a4 	.word	0x01a401a4
  403744:	02dc01a4 	.word	0x02dc01a4
  403748:	02dc02dc 	.word	0x02dc02dc
  40374c:	02dc02dc 	.word	0x02dc02dc
  403750:	02dc02dc 	.word	0x02dc02dc
  403754:	02dc02dc 	.word	0x02dc02dc
  403758:	01b202dc 	.word	0x01b202dc
  40375c:	02dc02dc 	.word	0x02dc02dc
  403760:	02dc02dc 	.word	0x02dc02dc
  403764:	02dc02dc 	.word	0x02dc02dc
  403768:	02dc02dc 	.word	0x02dc02dc
  40376c:	02dc02dc 	.word	0x02dc02dc
  403770:	02dc0197 	.word	0x02dc0197
  403774:	02dc02dc 	.word	0x02dc02dc
  403778:	02dc02dc 	.word	0x02dc02dc
  40377c:	02dc019b 	.word	0x02dc019b
  403780:	025302dc 	.word	0x025302dc
  403784:	02dc02dc 	.word	0x02dc02dc
  403788:	02dc02dc 	.word	0x02dc02dc
  40378c:	02dc02dc 	.word	0x02dc02dc
  403790:	02dc02dc 	.word	0x02dc02dc
  403794:	02dc02dc 	.word	0x02dc02dc
  403798:	021b025a 	.word	0x021b025a
  40379c:	02dc02dc 	.word	0x02dc02dc
  4037a0:	026e02dc 	.word	0x026e02dc
  4037a4:	02dc021b 	.word	0x02dc021b
  4037a8:	027302dc 	.word	0x027302dc
  4037ac:	01f502dc 	.word	0x01f502dc
  4037b0:	02090182 	.word	0x02090182
  4037b4:	02dc02d7 	.word	0x02dc02d7
  4037b8:	02dc029a 	.word	0x02dc029a
  4037bc:	02dc00a7 	.word	0x02dc00a7
  4037c0:	022e02dc 	.word	0x022e02dc
  4037c4:	f10a 0a08 	add.w	sl, sl, #8
  4037c8:	9b03      	ldr	r3, [sp, #12]
  4037ca:	442b      	add	r3, r5
  4037cc:	9303      	str	r3, [sp, #12]
  4037ce:	e786      	b.n	4036de <_vfiprintf_r+0xc2>
  4037d0:	4659      	mov	r1, fp
  4037d2:	9806      	ldr	r0, [sp, #24]
  4037d4:	f000 fdac 	bl	404330 <__swsetup_r>
  4037d8:	bb18      	cbnz	r0, 403822 <_vfiprintf_r+0x206>
  4037da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4037de:	f001 031a 	and.w	r3, r1, #26
  4037e2:	2b0a      	cmp	r3, #10
  4037e4:	f47f af4b 	bne.w	40367e <_vfiprintf_r+0x62>
  4037e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4037ec:	2b00      	cmp	r3, #0
  4037ee:	f6ff af46 	blt.w	40367e <_vfiprintf_r+0x62>
  4037f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4037f6:	07db      	lsls	r3, r3, #31
  4037f8:	d405      	bmi.n	403806 <_vfiprintf_r+0x1ea>
  4037fa:	058f      	lsls	r7, r1, #22
  4037fc:	d403      	bmi.n	403806 <_vfiprintf_r+0x1ea>
  4037fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403802:	f001 fac3 	bl	404d8c <__retarget_lock_release_recursive>
  403806:	462b      	mov	r3, r5
  403808:	4642      	mov	r2, r8
  40380a:	4659      	mov	r1, fp
  40380c:	9806      	ldr	r0, [sp, #24]
  40380e:	f000 fd4d 	bl	4042ac <__sbprintf>
  403812:	9003      	str	r0, [sp, #12]
  403814:	9803      	ldr	r0, [sp, #12]
  403816:	b02d      	add	sp, #180	; 0xb4
  403818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40381c:	f000 fef4 	bl	404608 <__sinit>
  403820:	e709      	b.n	403636 <_vfiprintf_r+0x1a>
  403822:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403826:	07d9      	lsls	r1, r3, #31
  403828:	d404      	bmi.n	403834 <_vfiprintf_r+0x218>
  40382a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40382e:	059a      	lsls	r2, r3, #22
  403830:	f140 84aa 	bpl.w	404188 <_vfiprintf_r+0xb6c>
  403834:	f04f 33ff 	mov.w	r3, #4294967295
  403838:	9303      	str	r3, [sp, #12]
  40383a:	9803      	ldr	r0, [sp, #12]
  40383c:	b02d      	add	sp, #180	; 0xb4
  40383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403842:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403846:	f001 fa9f 	bl	404d88 <__retarget_lock_acquire_recursive>
  40384a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40384e:	b281      	uxth	r1, r0
  403850:	e6fb      	b.n	40364a <_vfiprintf_r+0x2e>
  403852:	4276      	negs	r6, r6
  403854:	9207      	str	r2, [sp, #28]
  403856:	f043 0304 	orr.w	r3, r3, #4
  40385a:	f898 2000 	ldrb.w	r2, [r8]
  40385e:	e74f      	b.n	403700 <_vfiprintf_r+0xe4>
  403860:	9608      	str	r6, [sp, #32]
  403862:	069e      	lsls	r6, r3, #26
  403864:	f100 8450 	bmi.w	404108 <_vfiprintf_r+0xaec>
  403868:	9907      	ldr	r1, [sp, #28]
  40386a:	06dd      	lsls	r5, r3, #27
  40386c:	460a      	mov	r2, r1
  40386e:	f100 83ef 	bmi.w	404050 <_vfiprintf_r+0xa34>
  403872:	0658      	lsls	r0, r3, #25
  403874:	f140 83ec 	bpl.w	404050 <_vfiprintf_r+0xa34>
  403878:	880e      	ldrh	r6, [r1, #0]
  40387a:	3104      	adds	r1, #4
  40387c:	2700      	movs	r7, #0
  40387e:	2201      	movs	r2, #1
  403880:	9107      	str	r1, [sp, #28]
  403882:	f04f 0100 	mov.w	r1, #0
  403886:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40388a:	2500      	movs	r5, #0
  40388c:	1c61      	adds	r1, r4, #1
  40388e:	f000 8116 	beq.w	403abe <_vfiprintf_r+0x4a2>
  403892:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403896:	9102      	str	r1, [sp, #8]
  403898:	ea56 0107 	orrs.w	r1, r6, r7
  40389c:	f040 8114 	bne.w	403ac8 <_vfiprintf_r+0x4ac>
  4038a0:	2c00      	cmp	r4, #0
  4038a2:	f040 835c 	bne.w	403f5e <_vfiprintf_r+0x942>
  4038a6:	2a00      	cmp	r2, #0
  4038a8:	f040 83b7 	bne.w	40401a <_vfiprintf_r+0x9fe>
  4038ac:	f013 0301 	ands.w	r3, r3, #1
  4038b0:	9305      	str	r3, [sp, #20]
  4038b2:	f000 8457 	beq.w	404164 <_vfiprintf_r+0xb48>
  4038b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4038ba:	2330      	movs	r3, #48	; 0x30
  4038bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4038c0:	9b05      	ldr	r3, [sp, #20]
  4038c2:	42a3      	cmp	r3, r4
  4038c4:	bfb8      	it	lt
  4038c6:	4623      	movlt	r3, r4
  4038c8:	9301      	str	r3, [sp, #4]
  4038ca:	b10d      	cbz	r5, 4038d0 <_vfiprintf_r+0x2b4>
  4038cc:	3301      	adds	r3, #1
  4038ce:	9301      	str	r3, [sp, #4]
  4038d0:	9b02      	ldr	r3, [sp, #8]
  4038d2:	f013 0302 	ands.w	r3, r3, #2
  4038d6:	9309      	str	r3, [sp, #36]	; 0x24
  4038d8:	d002      	beq.n	4038e0 <_vfiprintf_r+0x2c4>
  4038da:	9b01      	ldr	r3, [sp, #4]
  4038dc:	3302      	adds	r3, #2
  4038de:	9301      	str	r3, [sp, #4]
  4038e0:	9b02      	ldr	r3, [sp, #8]
  4038e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4038e6:	930a      	str	r3, [sp, #40]	; 0x28
  4038e8:	f040 8217 	bne.w	403d1a <_vfiprintf_r+0x6fe>
  4038ec:	9b08      	ldr	r3, [sp, #32]
  4038ee:	9a01      	ldr	r2, [sp, #4]
  4038f0:	1a9d      	subs	r5, r3, r2
  4038f2:	2d00      	cmp	r5, #0
  4038f4:	f340 8211 	ble.w	403d1a <_vfiprintf_r+0x6fe>
  4038f8:	2d10      	cmp	r5, #16
  4038fa:	f340 8490 	ble.w	40421e <_vfiprintf_r+0xc02>
  4038fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403900:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403902:	4ec4      	ldr	r6, [pc, #784]	; (403c14 <_vfiprintf_r+0x5f8>)
  403904:	46d6      	mov	lr, sl
  403906:	2710      	movs	r7, #16
  403908:	46a2      	mov	sl, r4
  40390a:	4619      	mov	r1, r3
  40390c:	9c06      	ldr	r4, [sp, #24]
  40390e:	e007      	b.n	403920 <_vfiprintf_r+0x304>
  403910:	f101 0c02 	add.w	ip, r1, #2
  403914:	f10e 0e08 	add.w	lr, lr, #8
  403918:	4601      	mov	r1, r0
  40391a:	3d10      	subs	r5, #16
  40391c:	2d10      	cmp	r5, #16
  40391e:	dd11      	ble.n	403944 <_vfiprintf_r+0x328>
  403920:	1c48      	adds	r0, r1, #1
  403922:	3210      	adds	r2, #16
  403924:	2807      	cmp	r0, #7
  403926:	9211      	str	r2, [sp, #68]	; 0x44
  403928:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40392c:	9010      	str	r0, [sp, #64]	; 0x40
  40392e:	ddef      	ble.n	403910 <_vfiprintf_r+0x2f4>
  403930:	2a00      	cmp	r2, #0
  403932:	f040 81e4 	bne.w	403cfe <_vfiprintf_r+0x6e2>
  403936:	3d10      	subs	r5, #16
  403938:	2d10      	cmp	r5, #16
  40393a:	4611      	mov	r1, r2
  40393c:	f04f 0c01 	mov.w	ip, #1
  403940:	46ce      	mov	lr, r9
  403942:	dced      	bgt.n	403920 <_vfiprintf_r+0x304>
  403944:	4654      	mov	r4, sl
  403946:	4661      	mov	r1, ip
  403948:	46f2      	mov	sl, lr
  40394a:	442a      	add	r2, r5
  40394c:	2907      	cmp	r1, #7
  40394e:	9211      	str	r2, [sp, #68]	; 0x44
  403950:	f8ca 6000 	str.w	r6, [sl]
  403954:	f8ca 5004 	str.w	r5, [sl, #4]
  403958:	9110      	str	r1, [sp, #64]	; 0x40
  40395a:	f300 82ec 	bgt.w	403f36 <_vfiprintf_r+0x91a>
  40395e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403962:	f10a 0a08 	add.w	sl, sl, #8
  403966:	1c48      	adds	r0, r1, #1
  403968:	2d00      	cmp	r5, #0
  40396a:	f040 81de 	bne.w	403d2a <_vfiprintf_r+0x70e>
  40396e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403970:	2b00      	cmp	r3, #0
  403972:	f000 81f8 	beq.w	403d66 <_vfiprintf_r+0x74a>
  403976:	3202      	adds	r2, #2
  403978:	a90e      	add	r1, sp, #56	; 0x38
  40397a:	2302      	movs	r3, #2
  40397c:	2807      	cmp	r0, #7
  40397e:	9211      	str	r2, [sp, #68]	; 0x44
  403980:	9010      	str	r0, [sp, #64]	; 0x40
  403982:	e88a 000a 	stmia.w	sl, {r1, r3}
  403986:	f340 81ea 	ble.w	403d5e <_vfiprintf_r+0x742>
  40398a:	2a00      	cmp	r2, #0
  40398c:	f040 838c 	bne.w	4040a8 <_vfiprintf_r+0xa8c>
  403990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403992:	2b80      	cmp	r3, #128	; 0x80
  403994:	f04f 0001 	mov.w	r0, #1
  403998:	4611      	mov	r1, r2
  40399a:	46ca      	mov	sl, r9
  40399c:	f040 81e7 	bne.w	403d6e <_vfiprintf_r+0x752>
  4039a0:	9b08      	ldr	r3, [sp, #32]
  4039a2:	9d01      	ldr	r5, [sp, #4]
  4039a4:	1b5e      	subs	r6, r3, r5
  4039a6:	2e00      	cmp	r6, #0
  4039a8:	f340 81e1 	ble.w	403d6e <_vfiprintf_r+0x752>
  4039ac:	2e10      	cmp	r6, #16
  4039ae:	4d9a      	ldr	r5, [pc, #616]	; (403c18 <_vfiprintf_r+0x5fc>)
  4039b0:	f340 8450 	ble.w	404254 <_vfiprintf_r+0xc38>
  4039b4:	46d4      	mov	ip, sl
  4039b6:	2710      	movs	r7, #16
  4039b8:	46a2      	mov	sl, r4
  4039ba:	9c06      	ldr	r4, [sp, #24]
  4039bc:	e007      	b.n	4039ce <_vfiprintf_r+0x3b2>
  4039be:	f101 0e02 	add.w	lr, r1, #2
  4039c2:	f10c 0c08 	add.w	ip, ip, #8
  4039c6:	4601      	mov	r1, r0
  4039c8:	3e10      	subs	r6, #16
  4039ca:	2e10      	cmp	r6, #16
  4039cc:	dd11      	ble.n	4039f2 <_vfiprintf_r+0x3d6>
  4039ce:	1c48      	adds	r0, r1, #1
  4039d0:	3210      	adds	r2, #16
  4039d2:	2807      	cmp	r0, #7
  4039d4:	9211      	str	r2, [sp, #68]	; 0x44
  4039d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4039da:	9010      	str	r0, [sp, #64]	; 0x40
  4039dc:	ddef      	ble.n	4039be <_vfiprintf_r+0x3a2>
  4039de:	2a00      	cmp	r2, #0
  4039e0:	f040 829d 	bne.w	403f1e <_vfiprintf_r+0x902>
  4039e4:	3e10      	subs	r6, #16
  4039e6:	2e10      	cmp	r6, #16
  4039e8:	f04f 0e01 	mov.w	lr, #1
  4039ec:	4611      	mov	r1, r2
  4039ee:	46cc      	mov	ip, r9
  4039f0:	dced      	bgt.n	4039ce <_vfiprintf_r+0x3b2>
  4039f2:	4654      	mov	r4, sl
  4039f4:	46e2      	mov	sl, ip
  4039f6:	4432      	add	r2, r6
  4039f8:	f1be 0f07 	cmp.w	lr, #7
  4039fc:	9211      	str	r2, [sp, #68]	; 0x44
  4039fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  403a02:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403a06:	f300 8369 	bgt.w	4040dc <_vfiprintf_r+0xac0>
  403a0a:	f10a 0a08 	add.w	sl, sl, #8
  403a0e:	f10e 0001 	add.w	r0, lr, #1
  403a12:	4671      	mov	r1, lr
  403a14:	e1ab      	b.n	403d6e <_vfiprintf_r+0x752>
  403a16:	9608      	str	r6, [sp, #32]
  403a18:	f013 0220 	ands.w	r2, r3, #32
  403a1c:	f040 838c 	bne.w	404138 <_vfiprintf_r+0xb1c>
  403a20:	f013 0110 	ands.w	r1, r3, #16
  403a24:	f040 831a 	bne.w	40405c <_vfiprintf_r+0xa40>
  403a28:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  403a2c:	f000 8316 	beq.w	40405c <_vfiprintf_r+0xa40>
  403a30:	9807      	ldr	r0, [sp, #28]
  403a32:	460a      	mov	r2, r1
  403a34:	4601      	mov	r1, r0
  403a36:	3104      	adds	r1, #4
  403a38:	8806      	ldrh	r6, [r0, #0]
  403a3a:	9107      	str	r1, [sp, #28]
  403a3c:	2700      	movs	r7, #0
  403a3e:	e720      	b.n	403882 <_vfiprintf_r+0x266>
  403a40:	9608      	str	r6, [sp, #32]
  403a42:	f043 0310 	orr.w	r3, r3, #16
  403a46:	e7e7      	b.n	403a18 <_vfiprintf_r+0x3fc>
  403a48:	9608      	str	r6, [sp, #32]
  403a4a:	f043 0310 	orr.w	r3, r3, #16
  403a4e:	e708      	b.n	403862 <_vfiprintf_r+0x246>
  403a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403a54:	f898 2000 	ldrb.w	r2, [r8]
  403a58:	e652      	b.n	403700 <_vfiprintf_r+0xe4>
  403a5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403a5e:	2600      	movs	r6, #0
  403a60:	f818 2b01 	ldrb.w	r2, [r8], #1
  403a64:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403a68:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  403a6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403a70:	2909      	cmp	r1, #9
  403a72:	d9f5      	bls.n	403a60 <_vfiprintf_r+0x444>
  403a74:	e646      	b.n	403704 <_vfiprintf_r+0xe8>
  403a76:	9608      	str	r6, [sp, #32]
  403a78:	2800      	cmp	r0, #0
  403a7a:	f040 8408 	bne.w	40428e <_vfiprintf_r+0xc72>
  403a7e:	f043 0310 	orr.w	r3, r3, #16
  403a82:	069e      	lsls	r6, r3, #26
  403a84:	f100 834c 	bmi.w	404120 <_vfiprintf_r+0xb04>
  403a88:	06dd      	lsls	r5, r3, #27
  403a8a:	f100 82f3 	bmi.w	404074 <_vfiprintf_r+0xa58>
  403a8e:	0658      	lsls	r0, r3, #25
  403a90:	f140 82f0 	bpl.w	404074 <_vfiprintf_r+0xa58>
  403a94:	9d07      	ldr	r5, [sp, #28]
  403a96:	f9b5 6000 	ldrsh.w	r6, [r5]
  403a9a:	462a      	mov	r2, r5
  403a9c:	17f7      	asrs	r7, r6, #31
  403a9e:	3204      	adds	r2, #4
  403aa0:	4630      	mov	r0, r6
  403aa2:	4639      	mov	r1, r7
  403aa4:	9207      	str	r2, [sp, #28]
  403aa6:	2800      	cmp	r0, #0
  403aa8:	f171 0200 	sbcs.w	r2, r1, #0
  403aac:	f2c0 835d 	blt.w	40416a <_vfiprintf_r+0xb4e>
  403ab0:	1c61      	adds	r1, r4, #1
  403ab2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403ab6:	f04f 0201 	mov.w	r2, #1
  403aba:	f47f aeea 	bne.w	403892 <_vfiprintf_r+0x276>
  403abe:	ea56 0107 	orrs.w	r1, r6, r7
  403ac2:	f000 824d 	beq.w	403f60 <_vfiprintf_r+0x944>
  403ac6:	9302      	str	r3, [sp, #8]
  403ac8:	2a01      	cmp	r2, #1
  403aca:	f000 828c 	beq.w	403fe6 <_vfiprintf_r+0x9ca>
  403ace:	2a02      	cmp	r2, #2
  403ad0:	f040 825c 	bne.w	403f8c <_vfiprintf_r+0x970>
  403ad4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403ad6:	46cb      	mov	fp, r9
  403ad8:	0933      	lsrs	r3, r6, #4
  403ada:	f006 010f 	and.w	r1, r6, #15
  403ade:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403ae2:	093a      	lsrs	r2, r7, #4
  403ae4:	461e      	mov	r6, r3
  403ae6:	4617      	mov	r7, r2
  403ae8:	5c43      	ldrb	r3, [r0, r1]
  403aea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  403aee:	ea56 0307 	orrs.w	r3, r6, r7
  403af2:	d1f1      	bne.n	403ad8 <_vfiprintf_r+0x4bc>
  403af4:	eba9 030b 	sub.w	r3, r9, fp
  403af8:	9305      	str	r3, [sp, #20]
  403afa:	e6e1      	b.n	4038c0 <_vfiprintf_r+0x2a4>
  403afc:	2800      	cmp	r0, #0
  403afe:	f040 83c0 	bne.w	404282 <_vfiprintf_r+0xc66>
  403b02:	0699      	lsls	r1, r3, #26
  403b04:	f100 8367 	bmi.w	4041d6 <_vfiprintf_r+0xbba>
  403b08:	06da      	lsls	r2, r3, #27
  403b0a:	f100 80f1 	bmi.w	403cf0 <_vfiprintf_r+0x6d4>
  403b0e:	065b      	lsls	r3, r3, #25
  403b10:	f140 80ee 	bpl.w	403cf0 <_vfiprintf_r+0x6d4>
  403b14:	9a07      	ldr	r2, [sp, #28]
  403b16:	6813      	ldr	r3, [r2, #0]
  403b18:	3204      	adds	r2, #4
  403b1a:	9207      	str	r2, [sp, #28]
  403b1c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403b20:	801a      	strh	r2, [r3, #0]
  403b22:	e5b8      	b.n	403696 <_vfiprintf_r+0x7a>
  403b24:	9807      	ldr	r0, [sp, #28]
  403b26:	4a3d      	ldr	r2, [pc, #244]	; (403c1c <_vfiprintf_r+0x600>)
  403b28:	9608      	str	r6, [sp, #32]
  403b2a:	920b      	str	r2, [sp, #44]	; 0x2c
  403b2c:	6806      	ldr	r6, [r0, #0]
  403b2e:	2278      	movs	r2, #120	; 0x78
  403b30:	2130      	movs	r1, #48	; 0x30
  403b32:	3004      	adds	r0, #4
  403b34:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403b38:	f043 0302 	orr.w	r3, r3, #2
  403b3c:	9007      	str	r0, [sp, #28]
  403b3e:	2700      	movs	r7, #0
  403b40:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403b44:	2202      	movs	r2, #2
  403b46:	e69c      	b.n	403882 <_vfiprintf_r+0x266>
  403b48:	9608      	str	r6, [sp, #32]
  403b4a:	2800      	cmp	r0, #0
  403b4c:	d099      	beq.n	403a82 <_vfiprintf_r+0x466>
  403b4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403b52:	e796      	b.n	403a82 <_vfiprintf_r+0x466>
  403b54:	f898 2000 	ldrb.w	r2, [r8]
  403b58:	2d00      	cmp	r5, #0
  403b5a:	f47f add1 	bne.w	403700 <_vfiprintf_r+0xe4>
  403b5e:	2001      	movs	r0, #1
  403b60:	2520      	movs	r5, #32
  403b62:	e5cd      	b.n	403700 <_vfiprintf_r+0xe4>
  403b64:	f043 0301 	orr.w	r3, r3, #1
  403b68:	f898 2000 	ldrb.w	r2, [r8]
  403b6c:	e5c8      	b.n	403700 <_vfiprintf_r+0xe4>
  403b6e:	9608      	str	r6, [sp, #32]
  403b70:	2800      	cmp	r0, #0
  403b72:	f040 8393 	bne.w	40429c <_vfiprintf_r+0xc80>
  403b76:	4929      	ldr	r1, [pc, #164]	; (403c1c <_vfiprintf_r+0x600>)
  403b78:	910b      	str	r1, [sp, #44]	; 0x2c
  403b7a:	069f      	lsls	r7, r3, #26
  403b7c:	f100 82e8 	bmi.w	404150 <_vfiprintf_r+0xb34>
  403b80:	9807      	ldr	r0, [sp, #28]
  403b82:	06de      	lsls	r6, r3, #27
  403b84:	4601      	mov	r1, r0
  403b86:	f100 8270 	bmi.w	40406a <_vfiprintf_r+0xa4e>
  403b8a:	065d      	lsls	r5, r3, #25
  403b8c:	f140 826d 	bpl.w	40406a <_vfiprintf_r+0xa4e>
  403b90:	3104      	adds	r1, #4
  403b92:	8806      	ldrh	r6, [r0, #0]
  403b94:	9107      	str	r1, [sp, #28]
  403b96:	2700      	movs	r7, #0
  403b98:	07d8      	lsls	r0, r3, #31
  403b9a:	f140 8222 	bpl.w	403fe2 <_vfiprintf_r+0x9c6>
  403b9e:	ea56 0107 	orrs.w	r1, r6, r7
  403ba2:	f000 821e 	beq.w	403fe2 <_vfiprintf_r+0x9c6>
  403ba6:	2130      	movs	r1, #48	; 0x30
  403ba8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403bac:	f043 0302 	orr.w	r3, r3, #2
  403bb0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403bb4:	2202      	movs	r2, #2
  403bb6:	e664      	b.n	403882 <_vfiprintf_r+0x266>
  403bb8:	9608      	str	r6, [sp, #32]
  403bba:	2800      	cmp	r0, #0
  403bbc:	f040 836b 	bne.w	404296 <_vfiprintf_r+0xc7a>
  403bc0:	4917      	ldr	r1, [pc, #92]	; (403c20 <_vfiprintf_r+0x604>)
  403bc2:	910b      	str	r1, [sp, #44]	; 0x2c
  403bc4:	e7d9      	b.n	403b7a <_vfiprintf_r+0x55e>
  403bc6:	9907      	ldr	r1, [sp, #28]
  403bc8:	9608      	str	r6, [sp, #32]
  403bca:	680a      	ldr	r2, [r1, #0]
  403bcc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403bd0:	f04f 0000 	mov.w	r0, #0
  403bd4:	460a      	mov	r2, r1
  403bd6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  403bda:	3204      	adds	r2, #4
  403bdc:	2001      	movs	r0, #1
  403bde:	9001      	str	r0, [sp, #4]
  403be0:	9207      	str	r2, [sp, #28]
  403be2:	9005      	str	r0, [sp, #20]
  403be4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403be8:	9302      	str	r3, [sp, #8]
  403bea:	2400      	movs	r4, #0
  403bec:	e670      	b.n	4038d0 <_vfiprintf_r+0x2b4>
  403bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403bf2:	f898 2000 	ldrb.w	r2, [r8]
  403bf6:	e583      	b.n	403700 <_vfiprintf_r+0xe4>
  403bf8:	f898 2000 	ldrb.w	r2, [r8]
  403bfc:	2a6c      	cmp	r2, #108	; 0x6c
  403bfe:	bf03      	ittte	eq
  403c00:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403c04:	f043 0320 	orreq.w	r3, r3, #32
  403c08:	f108 0801 	addeq.w	r8, r8, #1
  403c0c:	f043 0310 	orrne.w	r3, r3, #16
  403c10:	e576      	b.n	403700 <_vfiprintf_r+0xe4>
  403c12:	bf00      	nop
  403c14:	00405bc0 	.word	0x00405bc0
  403c18:	00405bd0 	.word	0x00405bd0
  403c1c:	00405ba4 	.word	0x00405ba4
  403c20:	00405b90 	.word	0x00405b90
  403c24:	9907      	ldr	r1, [sp, #28]
  403c26:	680e      	ldr	r6, [r1, #0]
  403c28:	460a      	mov	r2, r1
  403c2a:	2e00      	cmp	r6, #0
  403c2c:	f102 0204 	add.w	r2, r2, #4
  403c30:	f6ff ae0f 	blt.w	403852 <_vfiprintf_r+0x236>
  403c34:	9207      	str	r2, [sp, #28]
  403c36:	f898 2000 	ldrb.w	r2, [r8]
  403c3a:	e561      	b.n	403700 <_vfiprintf_r+0xe4>
  403c3c:	f898 2000 	ldrb.w	r2, [r8]
  403c40:	2001      	movs	r0, #1
  403c42:	252b      	movs	r5, #43	; 0x2b
  403c44:	e55c      	b.n	403700 <_vfiprintf_r+0xe4>
  403c46:	9907      	ldr	r1, [sp, #28]
  403c48:	9608      	str	r6, [sp, #32]
  403c4a:	f8d1 b000 	ldr.w	fp, [r1]
  403c4e:	f04f 0200 	mov.w	r2, #0
  403c52:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403c56:	1d0e      	adds	r6, r1, #4
  403c58:	f1bb 0f00 	cmp.w	fp, #0
  403c5c:	f000 82e5 	beq.w	40422a <_vfiprintf_r+0xc0e>
  403c60:	1c67      	adds	r7, r4, #1
  403c62:	f000 82c4 	beq.w	4041ee <_vfiprintf_r+0xbd2>
  403c66:	4622      	mov	r2, r4
  403c68:	2100      	movs	r1, #0
  403c6a:	4658      	mov	r0, fp
  403c6c:	9301      	str	r3, [sp, #4]
  403c6e:	f001 f91f 	bl	404eb0 <memchr>
  403c72:	9b01      	ldr	r3, [sp, #4]
  403c74:	2800      	cmp	r0, #0
  403c76:	f000 82e5 	beq.w	404244 <_vfiprintf_r+0xc28>
  403c7a:	eba0 020b 	sub.w	r2, r0, fp
  403c7e:	9205      	str	r2, [sp, #20]
  403c80:	9607      	str	r6, [sp, #28]
  403c82:	9302      	str	r3, [sp, #8]
  403c84:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403c88:	2400      	movs	r4, #0
  403c8a:	e619      	b.n	4038c0 <_vfiprintf_r+0x2a4>
  403c8c:	f898 2000 	ldrb.w	r2, [r8]
  403c90:	2a2a      	cmp	r2, #42	; 0x2a
  403c92:	f108 0701 	add.w	r7, r8, #1
  403c96:	f000 82e9 	beq.w	40426c <_vfiprintf_r+0xc50>
  403c9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403c9e:	2909      	cmp	r1, #9
  403ca0:	46b8      	mov	r8, r7
  403ca2:	f04f 0400 	mov.w	r4, #0
  403ca6:	f63f ad2d 	bhi.w	403704 <_vfiprintf_r+0xe8>
  403caa:	f818 2b01 	ldrb.w	r2, [r8], #1
  403cae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403cb2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403cb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403cba:	2909      	cmp	r1, #9
  403cbc:	d9f5      	bls.n	403caa <_vfiprintf_r+0x68e>
  403cbe:	e521      	b.n	403704 <_vfiprintf_r+0xe8>
  403cc0:	f043 0320 	orr.w	r3, r3, #32
  403cc4:	f898 2000 	ldrb.w	r2, [r8]
  403cc8:	e51a      	b.n	403700 <_vfiprintf_r+0xe4>
  403cca:	9608      	str	r6, [sp, #32]
  403ccc:	2800      	cmp	r0, #0
  403cce:	f040 82db 	bne.w	404288 <_vfiprintf_r+0xc6c>
  403cd2:	2a00      	cmp	r2, #0
  403cd4:	f000 80e7 	beq.w	403ea6 <_vfiprintf_r+0x88a>
  403cd8:	2101      	movs	r1, #1
  403cda:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403cde:	f04f 0200 	mov.w	r2, #0
  403ce2:	9101      	str	r1, [sp, #4]
  403ce4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403ce8:	9105      	str	r1, [sp, #20]
  403cea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403cee:	e77b      	b.n	403be8 <_vfiprintf_r+0x5cc>
  403cf0:	9a07      	ldr	r2, [sp, #28]
  403cf2:	6813      	ldr	r3, [r2, #0]
  403cf4:	3204      	adds	r2, #4
  403cf6:	9207      	str	r2, [sp, #28]
  403cf8:	9a03      	ldr	r2, [sp, #12]
  403cfa:	601a      	str	r2, [r3, #0]
  403cfc:	e4cb      	b.n	403696 <_vfiprintf_r+0x7a>
  403cfe:	aa0f      	add	r2, sp, #60	; 0x3c
  403d00:	9904      	ldr	r1, [sp, #16]
  403d02:	4620      	mov	r0, r4
  403d04:	f7ff fc4a 	bl	40359c <__sprint_r.part.0>
  403d08:	2800      	cmp	r0, #0
  403d0a:	f040 8139 	bne.w	403f80 <_vfiprintf_r+0x964>
  403d0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d12:	f101 0c01 	add.w	ip, r1, #1
  403d16:	46ce      	mov	lr, r9
  403d18:	e5ff      	b.n	40391a <_vfiprintf_r+0x2fe>
  403d1a:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d1e:	1c48      	adds	r0, r1, #1
  403d20:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403d24:	2d00      	cmp	r5, #0
  403d26:	f43f ae22 	beq.w	40396e <_vfiprintf_r+0x352>
  403d2a:	3201      	adds	r2, #1
  403d2c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403d30:	2101      	movs	r1, #1
  403d32:	2807      	cmp	r0, #7
  403d34:	9211      	str	r2, [sp, #68]	; 0x44
  403d36:	9010      	str	r0, [sp, #64]	; 0x40
  403d38:	f8ca 5000 	str.w	r5, [sl]
  403d3c:	f8ca 1004 	str.w	r1, [sl, #4]
  403d40:	f340 8108 	ble.w	403f54 <_vfiprintf_r+0x938>
  403d44:	2a00      	cmp	r2, #0
  403d46:	f040 81bc 	bne.w	4040c2 <_vfiprintf_r+0xaa6>
  403d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d4c:	2b00      	cmp	r3, #0
  403d4e:	f43f ae1f 	beq.w	403990 <_vfiprintf_r+0x374>
  403d52:	ab0e      	add	r3, sp, #56	; 0x38
  403d54:	2202      	movs	r2, #2
  403d56:	4608      	mov	r0, r1
  403d58:	931c      	str	r3, [sp, #112]	; 0x70
  403d5a:	921d      	str	r2, [sp, #116]	; 0x74
  403d5c:	46ca      	mov	sl, r9
  403d5e:	4601      	mov	r1, r0
  403d60:	f10a 0a08 	add.w	sl, sl, #8
  403d64:	3001      	adds	r0, #1
  403d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d68:	2b80      	cmp	r3, #128	; 0x80
  403d6a:	f43f ae19 	beq.w	4039a0 <_vfiprintf_r+0x384>
  403d6e:	9b05      	ldr	r3, [sp, #20]
  403d70:	1ae4      	subs	r4, r4, r3
  403d72:	2c00      	cmp	r4, #0
  403d74:	dd2e      	ble.n	403dd4 <_vfiprintf_r+0x7b8>
  403d76:	2c10      	cmp	r4, #16
  403d78:	4db3      	ldr	r5, [pc, #716]	; (404048 <_vfiprintf_r+0xa2c>)
  403d7a:	dd1e      	ble.n	403dba <_vfiprintf_r+0x79e>
  403d7c:	46d6      	mov	lr, sl
  403d7e:	2610      	movs	r6, #16
  403d80:	9f06      	ldr	r7, [sp, #24]
  403d82:	f8dd a010 	ldr.w	sl, [sp, #16]
  403d86:	e006      	b.n	403d96 <_vfiprintf_r+0x77a>
  403d88:	1c88      	adds	r0, r1, #2
  403d8a:	f10e 0e08 	add.w	lr, lr, #8
  403d8e:	4619      	mov	r1, r3
  403d90:	3c10      	subs	r4, #16
  403d92:	2c10      	cmp	r4, #16
  403d94:	dd10      	ble.n	403db8 <_vfiprintf_r+0x79c>
  403d96:	1c4b      	adds	r3, r1, #1
  403d98:	3210      	adds	r2, #16
  403d9a:	2b07      	cmp	r3, #7
  403d9c:	9211      	str	r2, [sp, #68]	; 0x44
  403d9e:	e88e 0060 	stmia.w	lr, {r5, r6}
  403da2:	9310      	str	r3, [sp, #64]	; 0x40
  403da4:	ddf0      	ble.n	403d88 <_vfiprintf_r+0x76c>
  403da6:	2a00      	cmp	r2, #0
  403da8:	d165      	bne.n	403e76 <_vfiprintf_r+0x85a>
  403daa:	3c10      	subs	r4, #16
  403dac:	2c10      	cmp	r4, #16
  403dae:	f04f 0001 	mov.w	r0, #1
  403db2:	4611      	mov	r1, r2
  403db4:	46ce      	mov	lr, r9
  403db6:	dcee      	bgt.n	403d96 <_vfiprintf_r+0x77a>
  403db8:	46f2      	mov	sl, lr
  403dba:	4422      	add	r2, r4
  403dbc:	2807      	cmp	r0, #7
  403dbe:	9211      	str	r2, [sp, #68]	; 0x44
  403dc0:	f8ca 5000 	str.w	r5, [sl]
  403dc4:	f8ca 4004 	str.w	r4, [sl, #4]
  403dc8:	9010      	str	r0, [sp, #64]	; 0x40
  403dca:	f300 8085 	bgt.w	403ed8 <_vfiprintf_r+0x8bc>
  403dce:	f10a 0a08 	add.w	sl, sl, #8
  403dd2:	3001      	adds	r0, #1
  403dd4:	9905      	ldr	r1, [sp, #20]
  403dd6:	f8ca b000 	str.w	fp, [sl]
  403dda:	440a      	add	r2, r1
  403ddc:	2807      	cmp	r0, #7
  403dde:	9211      	str	r2, [sp, #68]	; 0x44
  403de0:	f8ca 1004 	str.w	r1, [sl, #4]
  403de4:	9010      	str	r0, [sp, #64]	; 0x40
  403de6:	f340 8082 	ble.w	403eee <_vfiprintf_r+0x8d2>
  403dea:	2a00      	cmp	r2, #0
  403dec:	f040 8118 	bne.w	404020 <_vfiprintf_r+0xa04>
  403df0:	9b02      	ldr	r3, [sp, #8]
  403df2:	9210      	str	r2, [sp, #64]	; 0x40
  403df4:	0758      	lsls	r0, r3, #29
  403df6:	d535      	bpl.n	403e64 <_vfiprintf_r+0x848>
  403df8:	9b08      	ldr	r3, [sp, #32]
  403dfa:	9901      	ldr	r1, [sp, #4]
  403dfc:	1a5c      	subs	r4, r3, r1
  403dfe:	2c00      	cmp	r4, #0
  403e00:	f340 80e7 	ble.w	403fd2 <_vfiprintf_r+0x9b6>
  403e04:	46ca      	mov	sl, r9
  403e06:	2c10      	cmp	r4, #16
  403e08:	f340 8218 	ble.w	40423c <_vfiprintf_r+0xc20>
  403e0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e0e:	4e8f      	ldr	r6, [pc, #572]	; (40404c <_vfiprintf_r+0xa30>)
  403e10:	9f06      	ldr	r7, [sp, #24]
  403e12:	f8dd b010 	ldr.w	fp, [sp, #16]
  403e16:	2510      	movs	r5, #16
  403e18:	e006      	b.n	403e28 <_vfiprintf_r+0x80c>
  403e1a:	1c88      	adds	r0, r1, #2
  403e1c:	f10a 0a08 	add.w	sl, sl, #8
  403e20:	4619      	mov	r1, r3
  403e22:	3c10      	subs	r4, #16
  403e24:	2c10      	cmp	r4, #16
  403e26:	dd11      	ble.n	403e4c <_vfiprintf_r+0x830>
  403e28:	1c4b      	adds	r3, r1, #1
  403e2a:	3210      	adds	r2, #16
  403e2c:	2b07      	cmp	r3, #7
  403e2e:	9211      	str	r2, [sp, #68]	; 0x44
  403e30:	f8ca 6000 	str.w	r6, [sl]
  403e34:	f8ca 5004 	str.w	r5, [sl, #4]
  403e38:	9310      	str	r3, [sp, #64]	; 0x40
  403e3a:	ddee      	ble.n	403e1a <_vfiprintf_r+0x7fe>
  403e3c:	bb42      	cbnz	r2, 403e90 <_vfiprintf_r+0x874>
  403e3e:	3c10      	subs	r4, #16
  403e40:	2c10      	cmp	r4, #16
  403e42:	f04f 0001 	mov.w	r0, #1
  403e46:	4611      	mov	r1, r2
  403e48:	46ca      	mov	sl, r9
  403e4a:	dced      	bgt.n	403e28 <_vfiprintf_r+0x80c>
  403e4c:	4422      	add	r2, r4
  403e4e:	2807      	cmp	r0, #7
  403e50:	9211      	str	r2, [sp, #68]	; 0x44
  403e52:	f8ca 6000 	str.w	r6, [sl]
  403e56:	f8ca 4004 	str.w	r4, [sl, #4]
  403e5a:	9010      	str	r0, [sp, #64]	; 0x40
  403e5c:	dd51      	ble.n	403f02 <_vfiprintf_r+0x8e6>
  403e5e:	2a00      	cmp	r2, #0
  403e60:	f040 819b 	bne.w	40419a <_vfiprintf_r+0xb7e>
  403e64:	9b03      	ldr	r3, [sp, #12]
  403e66:	9a08      	ldr	r2, [sp, #32]
  403e68:	9901      	ldr	r1, [sp, #4]
  403e6a:	428a      	cmp	r2, r1
  403e6c:	bfac      	ite	ge
  403e6e:	189b      	addge	r3, r3, r2
  403e70:	185b      	addlt	r3, r3, r1
  403e72:	9303      	str	r3, [sp, #12]
  403e74:	e04e      	b.n	403f14 <_vfiprintf_r+0x8f8>
  403e76:	aa0f      	add	r2, sp, #60	; 0x3c
  403e78:	4651      	mov	r1, sl
  403e7a:	4638      	mov	r0, r7
  403e7c:	f7ff fb8e 	bl	40359c <__sprint_r.part.0>
  403e80:	2800      	cmp	r0, #0
  403e82:	f040 813f 	bne.w	404104 <_vfiprintf_r+0xae8>
  403e86:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e8a:	1c48      	adds	r0, r1, #1
  403e8c:	46ce      	mov	lr, r9
  403e8e:	e77f      	b.n	403d90 <_vfiprintf_r+0x774>
  403e90:	aa0f      	add	r2, sp, #60	; 0x3c
  403e92:	4659      	mov	r1, fp
  403e94:	4638      	mov	r0, r7
  403e96:	f7ff fb81 	bl	40359c <__sprint_r.part.0>
  403e9a:	b960      	cbnz	r0, 403eb6 <_vfiprintf_r+0x89a>
  403e9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ea0:	1c48      	adds	r0, r1, #1
  403ea2:	46ca      	mov	sl, r9
  403ea4:	e7bd      	b.n	403e22 <_vfiprintf_r+0x806>
  403ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403ea8:	f8dd b010 	ldr.w	fp, [sp, #16]
  403eac:	2b00      	cmp	r3, #0
  403eae:	f040 81d4 	bne.w	40425a <_vfiprintf_r+0xc3e>
  403eb2:	2300      	movs	r3, #0
  403eb4:	9310      	str	r3, [sp, #64]	; 0x40
  403eb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403eba:	f013 0f01 	tst.w	r3, #1
  403ebe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403ec2:	d102      	bne.n	403eca <_vfiprintf_r+0x8ae>
  403ec4:	059a      	lsls	r2, r3, #22
  403ec6:	f140 80de 	bpl.w	404086 <_vfiprintf_r+0xa6a>
  403eca:	065b      	lsls	r3, r3, #25
  403ecc:	f53f acb2 	bmi.w	403834 <_vfiprintf_r+0x218>
  403ed0:	9803      	ldr	r0, [sp, #12]
  403ed2:	b02d      	add	sp, #180	; 0xb4
  403ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ed8:	2a00      	cmp	r2, #0
  403eda:	f040 8106 	bne.w	4040ea <_vfiprintf_r+0xace>
  403ede:	9a05      	ldr	r2, [sp, #20]
  403ee0:	921d      	str	r2, [sp, #116]	; 0x74
  403ee2:	2301      	movs	r3, #1
  403ee4:	9211      	str	r2, [sp, #68]	; 0x44
  403ee6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  403eea:	9310      	str	r3, [sp, #64]	; 0x40
  403eec:	46ca      	mov	sl, r9
  403eee:	f10a 0a08 	add.w	sl, sl, #8
  403ef2:	9b02      	ldr	r3, [sp, #8]
  403ef4:	0759      	lsls	r1, r3, #29
  403ef6:	d504      	bpl.n	403f02 <_vfiprintf_r+0x8e6>
  403ef8:	9b08      	ldr	r3, [sp, #32]
  403efa:	9901      	ldr	r1, [sp, #4]
  403efc:	1a5c      	subs	r4, r3, r1
  403efe:	2c00      	cmp	r4, #0
  403f00:	dc81      	bgt.n	403e06 <_vfiprintf_r+0x7ea>
  403f02:	9b03      	ldr	r3, [sp, #12]
  403f04:	9908      	ldr	r1, [sp, #32]
  403f06:	9801      	ldr	r0, [sp, #4]
  403f08:	4281      	cmp	r1, r0
  403f0a:	bfac      	ite	ge
  403f0c:	185b      	addge	r3, r3, r1
  403f0e:	181b      	addlt	r3, r3, r0
  403f10:	9303      	str	r3, [sp, #12]
  403f12:	bb72      	cbnz	r2, 403f72 <_vfiprintf_r+0x956>
  403f14:	2300      	movs	r3, #0
  403f16:	9310      	str	r3, [sp, #64]	; 0x40
  403f18:	46ca      	mov	sl, r9
  403f1a:	f7ff bbbc 	b.w	403696 <_vfiprintf_r+0x7a>
  403f1e:	aa0f      	add	r2, sp, #60	; 0x3c
  403f20:	9904      	ldr	r1, [sp, #16]
  403f22:	4620      	mov	r0, r4
  403f24:	f7ff fb3a 	bl	40359c <__sprint_r.part.0>
  403f28:	bb50      	cbnz	r0, 403f80 <_vfiprintf_r+0x964>
  403f2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f2e:	f101 0e01 	add.w	lr, r1, #1
  403f32:	46cc      	mov	ip, r9
  403f34:	e548      	b.n	4039c8 <_vfiprintf_r+0x3ac>
  403f36:	2a00      	cmp	r2, #0
  403f38:	f040 8140 	bne.w	4041bc <_vfiprintf_r+0xba0>
  403f3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403f40:	2900      	cmp	r1, #0
  403f42:	f000 811b 	beq.w	40417c <_vfiprintf_r+0xb60>
  403f46:	2201      	movs	r2, #1
  403f48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  403f4c:	4610      	mov	r0, r2
  403f4e:	921d      	str	r2, [sp, #116]	; 0x74
  403f50:	911c      	str	r1, [sp, #112]	; 0x70
  403f52:	46ca      	mov	sl, r9
  403f54:	4601      	mov	r1, r0
  403f56:	f10a 0a08 	add.w	sl, sl, #8
  403f5a:	3001      	adds	r0, #1
  403f5c:	e507      	b.n	40396e <_vfiprintf_r+0x352>
  403f5e:	9b02      	ldr	r3, [sp, #8]
  403f60:	2a01      	cmp	r2, #1
  403f62:	f000 8098 	beq.w	404096 <_vfiprintf_r+0xa7a>
  403f66:	2a02      	cmp	r2, #2
  403f68:	d10d      	bne.n	403f86 <_vfiprintf_r+0x96a>
  403f6a:	9302      	str	r3, [sp, #8]
  403f6c:	2600      	movs	r6, #0
  403f6e:	2700      	movs	r7, #0
  403f70:	e5b0      	b.n	403ad4 <_vfiprintf_r+0x4b8>
  403f72:	aa0f      	add	r2, sp, #60	; 0x3c
  403f74:	9904      	ldr	r1, [sp, #16]
  403f76:	9806      	ldr	r0, [sp, #24]
  403f78:	f7ff fb10 	bl	40359c <__sprint_r.part.0>
  403f7c:	2800      	cmp	r0, #0
  403f7e:	d0c9      	beq.n	403f14 <_vfiprintf_r+0x8f8>
  403f80:	f8dd b010 	ldr.w	fp, [sp, #16]
  403f84:	e797      	b.n	403eb6 <_vfiprintf_r+0x89a>
  403f86:	9302      	str	r3, [sp, #8]
  403f88:	2600      	movs	r6, #0
  403f8a:	2700      	movs	r7, #0
  403f8c:	4649      	mov	r1, r9
  403f8e:	e000      	b.n	403f92 <_vfiprintf_r+0x976>
  403f90:	4659      	mov	r1, fp
  403f92:	08f2      	lsrs	r2, r6, #3
  403f94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403f98:	08f8      	lsrs	r0, r7, #3
  403f9a:	f006 0307 	and.w	r3, r6, #7
  403f9e:	4607      	mov	r7, r0
  403fa0:	4616      	mov	r6, r2
  403fa2:	3330      	adds	r3, #48	; 0x30
  403fa4:	ea56 0207 	orrs.w	r2, r6, r7
  403fa8:	f801 3c01 	strb.w	r3, [r1, #-1]
  403fac:	f101 3bff 	add.w	fp, r1, #4294967295
  403fb0:	d1ee      	bne.n	403f90 <_vfiprintf_r+0x974>
  403fb2:	9a02      	ldr	r2, [sp, #8]
  403fb4:	07d6      	lsls	r6, r2, #31
  403fb6:	f57f ad9d 	bpl.w	403af4 <_vfiprintf_r+0x4d8>
  403fba:	2b30      	cmp	r3, #48	; 0x30
  403fbc:	f43f ad9a 	beq.w	403af4 <_vfiprintf_r+0x4d8>
  403fc0:	3902      	subs	r1, #2
  403fc2:	2330      	movs	r3, #48	; 0x30
  403fc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403fc8:	eba9 0301 	sub.w	r3, r9, r1
  403fcc:	9305      	str	r3, [sp, #20]
  403fce:	468b      	mov	fp, r1
  403fd0:	e476      	b.n	4038c0 <_vfiprintf_r+0x2a4>
  403fd2:	9b03      	ldr	r3, [sp, #12]
  403fd4:	9a08      	ldr	r2, [sp, #32]
  403fd6:	428a      	cmp	r2, r1
  403fd8:	bfac      	ite	ge
  403fda:	189b      	addge	r3, r3, r2
  403fdc:	185b      	addlt	r3, r3, r1
  403fde:	9303      	str	r3, [sp, #12]
  403fe0:	e798      	b.n	403f14 <_vfiprintf_r+0x8f8>
  403fe2:	2202      	movs	r2, #2
  403fe4:	e44d      	b.n	403882 <_vfiprintf_r+0x266>
  403fe6:	2f00      	cmp	r7, #0
  403fe8:	bf08      	it	eq
  403fea:	2e0a      	cmpeq	r6, #10
  403fec:	d352      	bcc.n	404094 <_vfiprintf_r+0xa78>
  403fee:	46cb      	mov	fp, r9
  403ff0:	4630      	mov	r0, r6
  403ff2:	4639      	mov	r1, r7
  403ff4:	220a      	movs	r2, #10
  403ff6:	2300      	movs	r3, #0
  403ff8:	f001 fbc6 	bl	405788 <__aeabi_uldivmod>
  403ffc:	3230      	adds	r2, #48	; 0x30
  403ffe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404002:	4630      	mov	r0, r6
  404004:	4639      	mov	r1, r7
  404006:	2300      	movs	r3, #0
  404008:	220a      	movs	r2, #10
  40400a:	f001 fbbd 	bl	405788 <__aeabi_uldivmod>
  40400e:	4606      	mov	r6, r0
  404010:	460f      	mov	r7, r1
  404012:	ea56 0307 	orrs.w	r3, r6, r7
  404016:	d1eb      	bne.n	403ff0 <_vfiprintf_r+0x9d4>
  404018:	e56c      	b.n	403af4 <_vfiprintf_r+0x4d8>
  40401a:	9405      	str	r4, [sp, #20]
  40401c:	46cb      	mov	fp, r9
  40401e:	e44f      	b.n	4038c0 <_vfiprintf_r+0x2a4>
  404020:	aa0f      	add	r2, sp, #60	; 0x3c
  404022:	9904      	ldr	r1, [sp, #16]
  404024:	9806      	ldr	r0, [sp, #24]
  404026:	f7ff fab9 	bl	40359c <__sprint_r.part.0>
  40402a:	2800      	cmp	r0, #0
  40402c:	d1a8      	bne.n	403f80 <_vfiprintf_r+0x964>
  40402e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404030:	46ca      	mov	sl, r9
  404032:	e75e      	b.n	403ef2 <_vfiprintf_r+0x8d6>
  404034:	aa0f      	add	r2, sp, #60	; 0x3c
  404036:	9904      	ldr	r1, [sp, #16]
  404038:	9806      	ldr	r0, [sp, #24]
  40403a:	f7ff faaf 	bl	40359c <__sprint_r.part.0>
  40403e:	2800      	cmp	r0, #0
  404040:	d19e      	bne.n	403f80 <_vfiprintf_r+0x964>
  404042:	46ca      	mov	sl, r9
  404044:	f7ff bbc0 	b.w	4037c8 <_vfiprintf_r+0x1ac>
  404048:	00405bd0 	.word	0x00405bd0
  40404c:	00405bc0 	.word	0x00405bc0
  404050:	3104      	adds	r1, #4
  404052:	6816      	ldr	r6, [r2, #0]
  404054:	9107      	str	r1, [sp, #28]
  404056:	2201      	movs	r2, #1
  404058:	2700      	movs	r7, #0
  40405a:	e412      	b.n	403882 <_vfiprintf_r+0x266>
  40405c:	9807      	ldr	r0, [sp, #28]
  40405e:	4601      	mov	r1, r0
  404060:	3104      	adds	r1, #4
  404062:	6806      	ldr	r6, [r0, #0]
  404064:	9107      	str	r1, [sp, #28]
  404066:	2700      	movs	r7, #0
  404068:	e40b      	b.n	403882 <_vfiprintf_r+0x266>
  40406a:	680e      	ldr	r6, [r1, #0]
  40406c:	3104      	adds	r1, #4
  40406e:	9107      	str	r1, [sp, #28]
  404070:	2700      	movs	r7, #0
  404072:	e591      	b.n	403b98 <_vfiprintf_r+0x57c>
  404074:	9907      	ldr	r1, [sp, #28]
  404076:	680e      	ldr	r6, [r1, #0]
  404078:	460a      	mov	r2, r1
  40407a:	17f7      	asrs	r7, r6, #31
  40407c:	3204      	adds	r2, #4
  40407e:	9207      	str	r2, [sp, #28]
  404080:	4630      	mov	r0, r6
  404082:	4639      	mov	r1, r7
  404084:	e50f      	b.n	403aa6 <_vfiprintf_r+0x48a>
  404086:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40408a:	f000 fe7f 	bl	404d8c <__retarget_lock_release_recursive>
  40408e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404092:	e71a      	b.n	403eca <_vfiprintf_r+0x8ae>
  404094:	9b02      	ldr	r3, [sp, #8]
  404096:	9302      	str	r3, [sp, #8]
  404098:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40409c:	3630      	adds	r6, #48	; 0x30
  40409e:	2301      	movs	r3, #1
  4040a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4040a4:	9305      	str	r3, [sp, #20]
  4040a6:	e40b      	b.n	4038c0 <_vfiprintf_r+0x2a4>
  4040a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4040aa:	9904      	ldr	r1, [sp, #16]
  4040ac:	9806      	ldr	r0, [sp, #24]
  4040ae:	f7ff fa75 	bl	40359c <__sprint_r.part.0>
  4040b2:	2800      	cmp	r0, #0
  4040b4:	f47f af64 	bne.w	403f80 <_vfiprintf_r+0x964>
  4040b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4040ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4040bc:	1c48      	adds	r0, r1, #1
  4040be:	46ca      	mov	sl, r9
  4040c0:	e651      	b.n	403d66 <_vfiprintf_r+0x74a>
  4040c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4040c4:	9904      	ldr	r1, [sp, #16]
  4040c6:	9806      	ldr	r0, [sp, #24]
  4040c8:	f7ff fa68 	bl	40359c <__sprint_r.part.0>
  4040cc:	2800      	cmp	r0, #0
  4040ce:	f47f af57 	bne.w	403f80 <_vfiprintf_r+0x964>
  4040d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4040d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4040d6:	1c48      	adds	r0, r1, #1
  4040d8:	46ca      	mov	sl, r9
  4040da:	e448      	b.n	40396e <_vfiprintf_r+0x352>
  4040dc:	2a00      	cmp	r2, #0
  4040de:	f040 8091 	bne.w	404204 <_vfiprintf_r+0xbe8>
  4040e2:	2001      	movs	r0, #1
  4040e4:	4611      	mov	r1, r2
  4040e6:	46ca      	mov	sl, r9
  4040e8:	e641      	b.n	403d6e <_vfiprintf_r+0x752>
  4040ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4040ec:	9904      	ldr	r1, [sp, #16]
  4040ee:	9806      	ldr	r0, [sp, #24]
  4040f0:	f7ff fa54 	bl	40359c <__sprint_r.part.0>
  4040f4:	2800      	cmp	r0, #0
  4040f6:	f47f af43 	bne.w	403f80 <_vfiprintf_r+0x964>
  4040fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  4040fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4040fe:	3001      	adds	r0, #1
  404100:	46ca      	mov	sl, r9
  404102:	e667      	b.n	403dd4 <_vfiprintf_r+0x7b8>
  404104:	46d3      	mov	fp, sl
  404106:	e6d6      	b.n	403eb6 <_vfiprintf_r+0x89a>
  404108:	9e07      	ldr	r6, [sp, #28]
  40410a:	3607      	adds	r6, #7
  40410c:	f026 0207 	bic.w	r2, r6, #7
  404110:	f102 0108 	add.w	r1, r2, #8
  404114:	e9d2 6700 	ldrd	r6, r7, [r2]
  404118:	9107      	str	r1, [sp, #28]
  40411a:	2201      	movs	r2, #1
  40411c:	f7ff bbb1 	b.w	403882 <_vfiprintf_r+0x266>
  404120:	9e07      	ldr	r6, [sp, #28]
  404122:	3607      	adds	r6, #7
  404124:	f026 0607 	bic.w	r6, r6, #7
  404128:	e9d6 0100 	ldrd	r0, r1, [r6]
  40412c:	f106 0208 	add.w	r2, r6, #8
  404130:	9207      	str	r2, [sp, #28]
  404132:	4606      	mov	r6, r0
  404134:	460f      	mov	r7, r1
  404136:	e4b6      	b.n	403aa6 <_vfiprintf_r+0x48a>
  404138:	9e07      	ldr	r6, [sp, #28]
  40413a:	3607      	adds	r6, #7
  40413c:	f026 0207 	bic.w	r2, r6, #7
  404140:	f102 0108 	add.w	r1, r2, #8
  404144:	e9d2 6700 	ldrd	r6, r7, [r2]
  404148:	9107      	str	r1, [sp, #28]
  40414a:	2200      	movs	r2, #0
  40414c:	f7ff bb99 	b.w	403882 <_vfiprintf_r+0x266>
  404150:	9e07      	ldr	r6, [sp, #28]
  404152:	3607      	adds	r6, #7
  404154:	f026 0107 	bic.w	r1, r6, #7
  404158:	f101 0008 	add.w	r0, r1, #8
  40415c:	9007      	str	r0, [sp, #28]
  40415e:	e9d1 6700 	ldrd	r6, r7, [r1]
  404162:	e519      	b.n	403b98 <_vfiprintf_r+0x57c>
  404164:	46cb      	mov	fp, r9
  404166:	f7ff bbab 	b.w	4038c0 <_vfiprintf_r+0x2a4>
  40416a:	252d      	movs	r5, #45	; 0x2d
  40416c:	4276      	negs	r6, r6
  40416e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404172:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404176:	2201      	movs	r2, #1
  404178:	f7ff bb88 	b.w	40388c <_vfiprintf_r+0x270>
  40417c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40417e:	b9b3      	cbnz	r3, 4041ae <_vfiprintf_r+0xb92>
  404180:	4611      	mov	r1, r2
  404182:	2001      	movs	r0, #1
  404184:	46ca      	mov	sl, r9
  404186:	e5f2      	b.n	403d6e <_vfiprintf_r+0x752>
  404188:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40418c:	f000 fdfe 	bl	404d8c <__retarget_lock_release_recursive>
  404190:	f04f 33ff 	mov.w	r3, #4294967295
  404194:	9303      	str	r3, [sp, #12]
  404196:	f7ff bb50 	b.w	40383a <_vfiprintf_r+0x21e>
  40419a:	aa0f      	add	r2, sp, #60	; 0x3c
  40419c:	9904      	ldr	r1, [sp, #16]
  40419e:	9806      	ldr	r0, [sp, #24]
  4041a0:	f7ff f9fc 	bl	40359c <__sprint_r.part.0>
  4041a4:	2800      	cmp	r0, #0
  4041a6:	f47f aeeb 	bne.w	403f80 <_vfiprintf_r+0x964>
  4041aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041ac:	e6a9      	b.n	403f02 <_vfiprintf_r+0x8e6>
  4041ae:	ab0e      	add	r3, sp, #56	; 0x38
  4041b0:	2202      	movs	r2, #2
  4041b2:	931c      	str	r3, [sp, #112]	; 0x70
  4041b4:	921d      	str	r2, [sp, #116]	; 0x74
  4041b6:	2001      	movs	r0, #1
  4041b8:	46ca      	mov	sl, r9
  4041ba:	e5d0      	b.n	403d5e <_vfiprintf_r+0x742>
  4041bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4041be:	9904      	ldr	r1, [sp, #16]
  4041c0:	9806      	ldr	r0, [sp, #24]
  4041c2:	f7ff f9eb 	bl	40359c <__sprint_r.part.0>
  4041c6:	2800      	cmp	r0, #0
  4041c8:	f47f aeda 	bne.w	403f80 <_vfiprintf_r+0x964>
  4041cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4041ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041d0:	1c48      	adds	r0, r1, #1
  4041d2:	46ca      	mov	sl, r9
  4041d4:	e5a4      	b.n	403d20 <_vfiprintf_r+0x704>
  4041d6:	9a07      	ldr	r2, [sp, #28]
  4041d8:	9903      	ldr	r1, [sp, #12]
  4041da:	6813      	ldr	r3, [r2, #0]
  4041dc:	17cd      	asrs	r5, r1, #31
  4041de:	4608      	mov	r0, r1
  4041e0:	3204      	adds	r2, #4
  4041e2:	4629      	mov	r1, r5
  4041e4:	9207      	str	r2, [sp, #28]
  4041e6:	e9c3 0100 	strd	r0, r1, [r3]
  4041ea:	f7ff ba54 	b.w	403696 <_vfiprintf_r+0x7a>
  4041ee:	4658      	mov	r0, fp
  4041f0:	9607      	str	r6, [sp, #28]
  4041f2:	9302      	str	r3, [sp, #8]
  4041f4:	f7ff f964 	bl	4034c0 <strlen>
  4041f8:	2400      	movs	r4, #0
  4041fa:	9005      	str	r0, [sp, #20]
  4041fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404200:	f7ff bb5e 	b.w	4038c0 <_vfiprintf_r+0x2a4>
  404204:	aa0f      	add	r2, sp, #60	; 0x3c
  404206:	9904      	ldr	r1, [sp, #16]
  404208:	9806      	ldr	r0, [sp, #24]
  40420a:	f7ff f9c7 	bl	40359c <__sprint_r.part.0>
  40420e:	2800      	cmp	r0, #0
  404210:	f47f aeb6 	bne.w	403f80 <_vfiprintf_r+0x964>
  404214:	9910      	ldr	r1, [sp, #64]	; 0x40
  404216:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404218:	1c48      	adds	r0, r1, #1
  40421a:	46ca      	mov	sl, r9
  40421c:	e5a7      	b.n	403d6e <_vfiprintf_r+0x752>
  40421e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404220:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404222:	4e20      	ldr	r6, [pc, #128]	; (4042a4 <_vfiprintf_r+0xc88>)
  404224:	3101      	adds	r1, #1
  404226:	f7ff bb90 	b.w	40394a <_vfiprintf_r+0x32e>
  40422a:	2c06      	cmp	r4, #6
  40422c:	bf28      	it	cs
  40422e:	2406      	movcs	r4, #6
  404230:	9405      	str	r4, [sp, #20]
  404232:	9607      	str	r6, [sp, #28]
  404234:	9401      	str	r4, [sp, #4]
  404236:	f8df b070 	ldr.w	fp, [pc, #112]	; 4042a8 <_vfiprintf_r+0xc8c>
  40423a:	e4d5      	b.n	403be8 <_vfiprintf_r+0x5cc>
  40423c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40423e:	4e19      	ldr	r6, [pc, #100]	; (4042a4 <_vfiprintf_r+0xc88>)
  404240:	3001      	adds	r0, #1
  404242:	e603      	b.n	403e4c <_vfiprintf_r+0x830>
  404244:	9405      	str	r4, [sp, #20]
  404246:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40424a:	9607      	str	r6, [sp, #28]
  40424c:	9302      	str	r3, [sp, #8]
  40424e:	4604      	mov	r4, r0
  404250:	f7ff bb36 	b.w	4038c0 <_vfiprintf_r+0x2a4>
  404254:	4686      	mov	lr, r0
  404256:	f7ff bbce 	b.w	4039f6 <_vfiprintf_r+0x3da>
  40425a:	9806      	ldr	r0, [sp, #24]
  40425c:	aa0f      	add	r2, sp, #60	; 0x3c
  40425e:	4659      	mov	r1, fp
  404260:	f7ff f99c 	bl	40359c <__sprint_r.part.0>
  404264:	2800      	cmp	r0, #0
  404266:	f43f ae24 	beq.w	403eb2 <_vfiprintf_r+0x896>
  40426a:	e624      	b.n	403eb6 <_vfiprintf_r+0x89a>
  40426c:	9907      	ldr	r1, [sp, #28]
  40426e:	f898 2001 	ldrb.w	r2, [r8, #1]
  404272:	680c      	ldr	r4, [r1, #0]
  404274:	3104      	adds	r1, #4
  404276:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40427a:	46b8      	mov	r8, r7
  40427c:	9107      	str	r1, [sp, #28]
  40427e:	f7ff ba3f 	b.w	403700 <_vfiprintf_r+0xe4>
  404282:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404286:	e43c      	b.n	403b02 <_vfiprintf_r+0x4e6>
  404288:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40428c:	e521      	b.n	403cd2 <_vfiprintf_r+0x6b6>
  40428e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404292:	f7ff bbf4 	b.w	403a7e <_vfiprintf_r+0x462>
  404296:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40429a:	e491      	b.n	403bc0 <_vfiprintf_r+0x5a4>
  40429c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4042a0:	e469      	b.n	403b76 <_vfiprintf_r+0x55a>
  4042a2:	bf00      	nop
  4042a4:	00405bc0 	.word	0x00405bc0
  4042a8:	00405bb8 	.word	0x00405bb8

004042ac <__sbprintf>:
  4042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042b0:	460c      	mov	r4, r1
  4042b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4042b6:	8989      	ldrh	r1, [r1, #12]
  4042b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4042ba:	89e5      	ldrh	r5, [r4, #14]
  4042bc:	9619      	str	r6, [sp, #100]	; 0x64
  4042be:	f021 0102 	bic.w	r1, r1, #2
  4042c2:	4606      	mov	r6, r0
  4042c4:	69e0      	ldr	r0, [r4, #28]
  4042c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4042ca:	4617      	mov	r7, r2
  4042cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4042d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4042d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4042d6:	4698      	mov	r8, r3
  4042d8:	ad1a      	add	r5, sp, #104	; 0x68
  4042da:	2300      	movs	r3, #0
  4042dc:	9007      	str	r0, [sp, #28]
  4042de:	a816      	add	r0, sp, #88	; 0x58
  4042e0:	9209      	str	r2, [sp, #36]	; 0x24
  4042e2:	9306      	str	r3, [sp, #24]
  4042e4:	9500      	str	r5, [sp, #0]
  4042e6:	9504      	str	r5, [sp, #16]
  4042e8:	9102      	str	r1, [sp, #8]
  4042ea:	9105      	str	r1, [sp, #20]
  4042ec:	f000 fd48 	bl	404d80 <__retarget_lock_init_recursive>
  4042f0:	4643      	mov	r3, r8
  4042f2:	463a      	mov	r2, r7
  4042f4:	4669      	mov	r1, sp
  4042f6:	4630      	mov	r0, r6
  4042f8:	f7ff f990 	bl	40361c <_vfiprintf_r>
  4042fc:	1e05      	subs	r5, r0, #0
  4042fe:	db07      	blt.n	404310 <__sbprintf+0x64>
  404300:	4630      	mov	r0, r6
  404302:	4669      	mov	r1, sp
  404304:	f000 f928 	bl	404558 <_fflush_r>
  404308:	2800      	cmp	r0, #0
  40430a:	bf18      	it	ne
  40430c:	f04f 35ff 	movne.w	r5, #4294967295
  404310:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404314:	065b      	lsls	r3, r3, #25
  404316:	d503      	bpl.n	404320 <__sbprintf+0x74>
  404318:	89a3      	ldrh	r3, [r4, #12]
  40431a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40431e:	81a3      	strh	r3, [r4, #12]
  404320:	9816      	ldr	r0, [sp, #88]	; 0x58
  404322:	f000 fd2f 	bl	404d84 <__retarget_lock_close_recursive>
  404326:	4628      	mov	r0, r5
  404328:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404330 <__swsetup_r>:
  404330:	b538      	push	{r3, r4, r5, lr}
  404332:	4b30      	ldr	r3, [pc, #192]	; (4043f4 <__swsetup_r+0xc4>)
  404334:	681b      	ldr	r3, [r3, #0]
  404336:	4605      	mov	r5, r0
  404338:	460c      	mov	r4, r1
  40433a:	b113      	cbz	r3, 404342 <__swsetup_r+0x12>
  40433c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40433e:	2a00      	cmp	r2, #0
  404340:	d038      	beq.n	4043b4 <__swsetup_r+0x84>
  404342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404346:	b293      	uxth	r3, r2
  404348:	0718      	lsls	r0, r3, #28
  40434a:	d50c      	bpl.n	404366 <__swsetup_r+0x36>
  40434c:	6920      	ldr	r0, [r4, #16]
  40434e:	b1a8      	cbz	r0, 40437c <__swsetup_r+0x4c>
  404350:	f013 0201 	ands.w	r2, r3, #1
  404354:	d01e      	beq.n	404394 <__swsetup_r+0x64>
  404356:	6963      	ldr	r3, [r4, #20]
  404358:	2200      	movs	r2, #0
  40435a:	425b      	negs	r3, r3
  40435c:	61a3      	str	r3, [r4, #24]
  40435e:	60a2      	str	r2, [r4, #8]
  404360:	b1f0      	cbz	r0, 4043a0 <__swsetup_r+0x70>
  404362:	2000      	movs	r0, #0
  404364:	bd38      	pop	{r3, r4, r5, pc}
  404366:	06d9      	lsls	r1, r3, #27
  404368:	d53c      	bpl.n	4043e4 <__swsetup_r+0xb4>
  40436a:	0758      	lsls	r0, r3, #29
  40436c:	d426      	bmi.n	4043bc <__swsetup_r+0x8c>
  40436e:	6920      	ldr	r0, [r4, #16]
  404370:	f042 0308 	orr.w	r3, r2, #8
  404374:	81a3      	strh	r3, [r4, #12]
  404376:	b29b      	uxth	r3, r3
  404378:	2800      	cmp	r0, #0
  40437a:	d1e9      	bne.n	404350 <__swsetup_r+0x20>
  40437c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404380:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404384:	d0e4      	beq.n	404350 <__swsetup_r+0x20>
  404386:	4628      	mov	r0, r5
  404388:	4621      	mov	r1, r4
  40438a:	f000 fd2f 	bl	404dec <__smakebuf_r>
  40438e:	89a3      	ldrh	r3, [r4, #12]
  404390:	6920      	ldr	r0, [r4, #16]
  404392:	e7dd      	b.n	404350 <__swsetup_r+0x20>
  404394:	0799      	lsls	r1, r3, #30
  404396:	bf58      	it	pl
  404398:	6962      	ldrpl	r2, [r4, #20]
  40439a:	60a2      	str	r2, [r4, #8]
  40439c:	2800      	cmp	r0, #0
  40439e:	d1e0      	bne.n	404362 <__swsetup_r+0x32>
  4043a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043a4:	061a      	lsls	r2, r3, #24
  4043a6:	d5dd      	bpl.n	404364 <__swsetup_r+0x34>
  4043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4043ac:	81a3      	strh	r3, [r4, #12]
  4043ae:	f04f 30ff 	mov.w	r0, #4294967295
  4043b2:	bd38      	pop	{r3, r4, r5, pc}
  4043b4:	4618      	mov	r0, r3
  4043b6:	f000 f927 	bl	404608 <__sinit>
  4043ba:	e7c2      	b.n	404342 <__swsetup_r+0x12>
  4043bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4043be:	b151      	cbz	r1, 4043d6 <__swsetup_r+0xa6>
  4043c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4043c4:	4299      	cmp	r1, r3
  4043c6:	d004      	beq.n	4043d2 <__swsetup_r+0xa2>
  4043c8:	4628      	mov	r0, r5
  4043ca:	f000 fa43 	bl	404854 <_free_r>
  4043ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043d2:	2300      	movs	r3, #0
  4043d4:	6323      	str	r3, [r4, #48]	; 0x30
  4043d6:	2300      	movs	r3, #0
  4043d8:	6920      	ldr	r0, [r4, #16]
  4043da:	6063      	str	r3, [r4, #4]
  4043dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4043e0:	6020      	str	r0, [r4, #0]
  4043e2:	e7c5      	b.n	404370 <__swsetup_r+0x40>
  4043e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4043e8:	2309      	movs	r3, #9
  4043ea:	602b      	str	r3, [r5, #0]
  4043ec:	f04f 30ff 	mov.w	r0, #4294967295
  4043f0:	81a2      	strh	r2, [r4, #12]
  4043f2:	bd38      	pop	{r3, r4, r5, pc}
  4043f4:	2040000c 	.word	0x2040000c

004043f8 <register_fini>:
  4043f8:	4b02      	ldr	r3, [pc, #8]	; (404404 <register_fini+0xc>)
  4043fa:	b113      	cbz	r3, 404402 <register_fini+0xa>
  4043fc:	4802      	ldr	r0, [pc, #8]	; (404408 <register_fini+0x10>)
  4043fe:	f000 b805 	b.w	40440c <atexit>
  404402:	4770      	bx	lr
  404404:	00000000 	.word	0x00000000
  404408:	00404679 	.word	0x00404679

0040440c <atexit>:
  40440c:	2300      	movs	r3, #0
  40440e:	4601      	mov	r1, r0
  404410:	461a      	mov	r2, r3
  404412:	4618      	mov	r0, r3
  404414:	f001 b890 	b.w	405538 <__register_exitproc>

00404418 <__sflush_r>:
  404418:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40441c:	b29a      	uxth	r2, r3
  40441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404422:	460d      	mov	r5, r1
  404424:	0711      	lsls	r1, r2, #28
  404426:	4680      	mov	r8, r0
  404428:	d43a      	bmi.n	4044a0 <__sflush_r+0x88>
  40442a:	686a      	ldr	r2, [r5, #4]
  40442c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404430:	2a00      	cmp	r2, #0
  404432:	81ab      	strh	r3, [r5, #12]
  404434:	dd6f      	ble.n	404516 <__sflush_r+0xfe>
  404436:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404438:	2c00      	cmp	r4, #0
  40443a:	d049      	beq.n	4044d0 <__sflush_r+0xb8>
  40443c:	2200      	movs	r2, #0
  40443e:	b29b      	uxth	r3, r3
  404440:	f8d8 6000 	ldr.w	r6, [r8]
  404444:	f8c8 2000 	str.w	r2, [r8]
  404448:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40444c:	d067      	beq.n	40451e <__sflush_r+0x106>
  40444e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404450:	075f      	lsls	r7, r3, #29
  404452:	d505      	bpl.n	404460 <__sflush_r+0x48>
  404454:	6869      	ldr	r1, [r5, #4]
  404456:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404458:	1a52      	subs	r2, r2, r1
  40445a:	b10b      	cbz	r3, 404460 <__sflush_r+0x48>
  40445c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40445e:	1ad2      	subs	r2, r2, r3
  404460:	2300      	movs	r3, #0
  404462:	69e9      	ldr	r1, [r5, #28]
  404464:	4640      	mov	r0, r8
  404466:	47a0      	blx	r4
  404468:	1c44      	adds	r4, r0, #1
  40446a:	d03c      	beq.n	4044e6 <__sflush_r+0xce>
  40446c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404470:	692a      	ldr	r2, [r5, #16]
  404472:	602a      	str	r2, [r5, #0]
  404474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404478:	2200      	movs	r2, #0
  40447a:	81ab      	strh	r3, [r5, #12]
  40447c:	04db      	lsls	r3, r3, #19
  40447e:	606a      	str	r2, [r5, #4]
  404480:	d447      	bmi.n	404512 <__sflush_r+0xfa>
  404482:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404484:	f8c8 6000 	str.w	r6, [r8]
  404488:	b311      	cbz	r1, 4044d0 <__sflush_r+0xb8>
  40448a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40448e:	4299      	cmp	r1, r3
  404490:	d002      	beq.n	404498 <__sflush_r+0x80>
  404492:	4640      	mov	r0, r8
  404494:	f000 f9de 	bl	404854 <_free_r>
  404498:	2000      	movs	r0, #0
  40449a:	6328      	str	r0, [r5, #48]	; 0x30
  40449c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4044a0:	692e      	ldr	r6, [r5, #16]
  4044a2:	b1ae      	cbz	r6, 4044d0 <__sflush_r+0xb8>
  4044a4:	682c      	ldr	r4, [r5, #0]
  4044a6:	602e      	str	r6, [r5, #0]
  4044a8:	0791      	lsls	r1, r2, #30
  4044aa:	bf0c      	ite	eq
  4044ac:	696b      	ldreq	r3, [r5, #20]
  4044ae:	2300      	movne	r3, #0
  4044b0:	1ba4      	subs	r4, r4, r6
  4044b2:	60ab      	str	r3, [r5, #8]
  4044b4:	e00a      	b.n	4044cc <__sflush_r+0xb4>
  4044b6:	4623      	mov	r3, r4
  4044b8:	4632      	mov	r2, r6
  4044ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4044bc:	69e9      	ldr	r1, [r5, #28]
  4044be:	4640      	mov	r0, r8
  4044c0:	47b8      	blx	r7
  4044c2:	2800      	cmp	r0, #0
  4044c4:	eba4 0400 	sub.w	r4, r4, r0
  4044c8:	4406      	add	r6, r0
  4044ca:	dd04      	ble.n	4044d6 <__sflush_r+0xbe>
  4044cc:	2c00      	cmp	r4, #0
  4044ce:	dcf2      	bgt.n	4044b6 <__sflush_r+0x9e>
  4044d0:	2000      	movs	r0, #0
  4044d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4044d6:	89ab      	ldrh	r3, [r5, #12]
  4044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4044dc:	81ab      	strh	r3, [r5, #12]
  4044de:	f04f 30ff 	mov.w	r0, #4294967295
  4044e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4044e6:	f8d8 4000 	ldr.w	r4, [r8]
  4044ea:	2c1d      	cmp	r4, #29
  4044ec:	d8f3      	bhi.n	4044d6 <__sflush_r+0xbe>
  4044ee:	4b19      	ldr	r3, [pc, #100]	; (404554 <__sflush_r+0x13c>)
  4044f0:	40e3      	lsrs	r3, r4
  4044f2:	43db      	mvns	r3, r3
  4044f4:	f013 0301 	ands.w	r3, r3, #1
  4044f8:	d1ed      	bne.n	4044d6 <__sflush_r+0xbe>
  4044fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4044fe:	606b      	str	r3, [r5, #4]
  404500:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404504:	6929      	ldr	r1, [r5, #16]
  404506:	81ab      	strh	r3, [r5, #12]
  404508:	04da      	lsls	r2, r3, #19
  40450a:	6029      	str	r1, [r5, #0]
  40450c:	d5b9      	bpl.n	404482 <__sflush_r+0x6a>
  40450e:	2c00      	cmp	r4, #0
  404510:	d1b7      	bne.n	404482 <__sflush_r+0x6a>
  404512:	6528      	str	r0, [r5, #80]	; 0x50
  404514:	e7b5      	b.n	404482 <__sflush_r+0x6a>
  404516:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404518:	2a00      	cmp	r2, #0
  40451a:	dc8c      	bgt.n	404436 <__sflush_r+0x1e>
  40451c:	e7d8      	b.n	4044d0 <__sflush_r+0xb8>
  40451e:	2301      	movs	r3, #1
  404520:	69e9      	ldr	r1, [r5, #28]
  404522:	4640      	mov	r0, r8
  404524:	47a0      	blx	r4
  404526:	1c43      	adds	r3, r0, #1
  404528:	4602      	mov	r2, r0
  40452a:	d002      	beq.n	404532 <__sflush_r+0x11a>
  40452c:	89ab      	ldrh	r3, [r5, #12]
  40452e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404530:	e78e      	b.n	404450 <__sflush_r+0x38>
  404532:	f8d8 3000 	ldr.w	r3, [r8]
  404536:	2b00      	cmp	r3, #0
  404538:	d0f8      	beq.n	40452c <__sflush_r+0x114>
  40453a:	2b1d      	cmp	r3, #29
  40453c:	d001      	beq.n	404542 <__sflush_r+0x12a>
  40453e:	2b16      	cmp	r3, #22
  404540:	d102      	bne.n	404548 <__sflush_r+0x130>
  404542:	f8c8 6000 	str.w	r6, [r8]
  404546:	e7c3      	b.n	4044d0 <__sflush_r+0xb8>
  404548:	89ab      	ldrh	r3, [r5, #12]
  40454a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40454e:	81ab      	strh	r3, [r5, #12]
  404550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404554:	20400001 	.word	0x20400001

00404558 <_fflush_r>:
  404558:	b538      	push	{r3, r4, r5, lr}
  40455a:	460d      	mov	r5, r1
  40455c:	4604      	mov	r4, r0
  40455e:	b108      	cbz	r0, 404564 <_fflush_r+0xc>
  404560:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404562:	b1bb      	cbz	r3, 404594 <_fflush_r+0x3c>
  404564:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404568:	b188      	cbz	r0, 40458e <_fflush_r+0x36>
  40456a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40456c:	07db      	lsls	r3, r3, #31
  40456e:	d401      	bmi.n	404574 <_fflush_r+0x1c>
  404570:	0581      	lsls	r1, r0, #22
  404572:	d517      	bpl.n	4045a4 <_fflush_r+0x4c>
  404574:	4620      	mov	r0, r4
  404576:	4629      	mov	r1, r5
  404578:	f7ff ff4e 	bl	404418 <__sflush_r>
  40457c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40457e:	07da      	lsls	r2, r3, #31
  404580:	4604      	mov	r4, r0
  404582:	d402      	bmi.n	40458a <_fflush_r+0x32>
  404584:	89ab      	ldrh	r3, [r5, #12]
  404586:	059b      	lsls	r3, r3, #22
  404588:	d507      	bpl.n	40459a <_fflush_r+0x42>
  40458a:	4620      	mov	r0, r4
  40458c:	bd38      	pop	{r3, r4, r5, pc}
  40458e:	4604      	mov	r4, r0
  404590:	4620      	mov	r0, r4
  404592:	bd38      	pop	{r3, r4, r5, pc}
  404594:	f000 f838 	bl	404608 <__sinit>
  404598:	e7e4      	b.n	404564 <_fflush_r+0xc>
  40459a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40459c:	f000 fbf6 	bl	404d8c <__retarget_lock_release_recursive>
  4045a0:	4620      	mov	r0, r4
  4045a2:	bd38      	pop	{r3, r4, r5, pc}
  4045a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4045a6:	f000 fbef 	bl	404d88 <__retarget_lock_acquire_recursive>
  4045aa:	e7e3      	b.n	404574 <_fflush_r+0x1c>

004045ac <_cleanup_r>:
  4045ac:	4901      	ldr	r1, [pc, #4]	; (4045b4 <_cleanup_r+0x8>)
  4045ae:	f000 bbaf 	b.w	404d10 <_fwalk_reent>
  4045b2:	bf00      	nop
  4045b4:	00405621 	.word	0x00405621

004045b8 <std.isra.0>:
  4045b8:	b510      	push	{r4, lr}
  4045ba:	2300      	movs	r3, #0
  4045bc:	4604      	mov	r4, r0
  4045be:	8181      	strh	r1, [r0, #12]
  4045c0:	81c2      	strh	r2, [r0, #14]
  4045c2:	6003      	str	r3, [r0, #0]
  4045c4:	6043      	str	r3, [r0, #4]
  4045c6:	6083      	str	r3, [r0, #8]
  4045c8:	6643      	str	r3, [r0, #100]	; 0x64
  4045ca:	6103      	str	r3, [r0, #16]
  4045cc:	6143      	str	r3, [r0, #20]
  4045ce:	6183      	str	r3, [r0, #24]
  4045d0:	4619      	mov	r1, r3
  4045d2:	2208      	movs	r2, #8
  4045d4:	305c      	adds	r0, #92	; 0x5c
  4045d6:	f7fe fe31 	bl	40323c <memset>
  4045da:	4807      	ldr	r0, [pc, #28]	; (4045f8 <std.isra.0+0x40>)
  4045dc:	4907      	ldr	r1, [pc, #28]	; (4045fc <std.isra.0+0x44>)
  4045de:	4a08      	ldr	r2, [pc, #32]	; (404600 <std.isra.0+0x48>)
  4045e0:	4b08      	ldr	r3, [pc, #32]	; (404604 <std.isra.0+0x4c>)
  4045e2:	6220      	str	r0, [r4, #32]
  4045e4:	61e4      	str	r4, [r4, #28]
  4045e6:	6261      	str	r1, [r4, #36]	; 0x24
  4045e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4045ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4045ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4045f4:	f000 bbc4 	b.w	404d80 <__retarget_lock_init_recursive>
  4045f8:	00405365 	.word	0x00405365
  4045fc:	00405389 	.word	0x00405389
  404600:	004053c5 	.word	0x004053c5
  404604:	004053e5 	.word	0x004053e5

00404608 <__sinit>:
  404608:	b510      	push	{r4, lr}
  40460a:	4604      	mov	r4, r0
  40460c:	4812      	ldr	r0, [pc, #72]	; (404658 <__sinit+0x50>)
  40460e:	f000 fbbb 	bl	404d88 <__retarget_lock_acquire_recursive>
  404612:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404614:	b9d2      	cbnz	r2, 40464c <__sinit+0x44>
  404616:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40461a:	4810      	ldr	r0, [pc, #64]	; (40465c <__sinit+0x54>)
  40461c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404620:	2103      	movs	r1, #3
  404622:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404626:	63e0      	str	r0, [r4, #60]	; 0x3c
  404628:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40462c:	6860      	ldr	r0, [r4, #4]
  40462e:	2104      	movs	r1, #4
  404630:	f7ff ffc2 	bl	4045b8 <std.isra.0>
  404634:	2201      	movs	r2, #1
  404636:	2109      	movs	r1, #9
  404638:	68a0      	ldr	r0, [r4, #8]
  40463a:	f7ff ffbd 	bl	4045b8 <std.isra.0>
  40463e:	2202      	movs	r2, #2
  404640:	2112      	movs	r1, #18
  404642:	68e0      	ldr	r0, [r4, #12]
  404644:	f7ff ffb8 	bl	4045b8 <std.isra.0>
  404648:	2301      	movs	r3, #1
  40464a:	63a3      	str	r3, [r4, #56]	; 0x38
  40464c:	4802      	ldr	r0, [pc, #8]	; (404658 <__sinit+0x50>)
  40464e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404652:	f000 bb9b 	b.w	404d8c <__retarget_lock_release_recursive>
  404656:	bf00      	nop
  404658:	20400c20 	.word	0x20400c20
  40465c:	004045ad 	.word	0x004045ad

00404660 <__sfp_lock_acquire>:
  404660:	4801      	ldr	r0, [pc, #4]	; (404668 <__sfp_lock_acquire+0x8>)
  404662:	f000 bb91 	b.w	404d88 <__retarget_lock_acquire_recursive>
  404666:	bf00      	nop
  404668:	20400c34 	.word	0x20400c34

0040466c <__sfp_lock_release>:
  40466c:	4801      	ldr	r0, [pc, #4]	; (404674 <__sfp_lock_release+0x8>)
  40466e:	f000 bb8d 	b.w	404d8c <__retarget_lock_release_recursive>
  404672:	bf00      	nop
  404674:	20400c34 	.word	0x20400c34

00404678 <__libc_fini_array>:
  404678:	b538      	push	{r3, r4, r5, lr}
  40467a:	4c0a      	ldr	r4, [pc, #40]	; (4046a4 <__libc_fini_array+0x2c>)
  40467c:	4d0a      	ldr	r5, [pc, #40]	; (4046a8 <__libc_fini_array+0x30>)
  40467e:	1b64      	subs	r4, r4, r5
  404680:	10a4      	asrs	r4, r4, #2
  404682:	d00a      	beq.n	40469a <__libc_fini_array+0x22>
  404684:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404688:	3b01      	subs	r3, #1
  40468a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40468e:	3c01      	subs	r4, #1
  404690:	f855 3904 	ldr.w	r3, [r5], #-4
  404694:	4798      	blx	r3
  404696:	2c00      	cmp	r4, #0
  404698:	d1f9      	bne.n	40468e <__libc_fini_array+0x16>
  40469a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40469e:	f001 bb33 	b.w	405d08 <_fini>
  4046a2:	bf00      	nop
  4046a4:	00405d18 	.word	0x00405d18
  4046a8:	00405d14 	.word	0x00405d14

004046ac <__fputwc>:
  4046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4046b0:	b082      	sub	sp, #8
  4046b2:	4680      	mov	r8, r0
  4046b4:	4689      	mov	r9, r1
  4046b6:	4614      	mov	r4, r2
  4046b8:	f000 fb54 	bl	404d64 <__locale_mb_cur_max>
  4046bc:	2801      	cmp	r0, #1
  4046be:	d036      	beq.n	40472e <__fputwc+0x82>
  4046c0:	464a      	mov	r2, r9
  4046c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4046c6:	a901      	add	r1, sp, #4
  4046c8:	4640      	mov	r0, r8
  4046ca:	f000 fee7 	bl	40549c <_wcrtomb_r>
  4046ce:	1c42      	adds	r2, r0, #1
  4046d0:	4606      	mov	r6, r0
  4046d2:	d025      	beq.n	404720 <__fputwc+0x74>
  4046d4:	b3a8      	cbz	r0, 404742 <__fputwc+0x96>
  4046d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4046da:	2500      	movs	r5, #0
  4046dc:	f10d 0a04 	add.w	sl, sp, #4
  4046e0:	e009      	b.n	4046f6 <__fputwc+0x4a>
  4046e2:	6823      	ldr	r3, [r4, #0]
  4046e4:	1c5a      	adds	r2, r3, #1
  4046e6:	6022      	str	r2, [r4, #0]
  4046e8:	f883 e000 	strb.w	lr, [r3]
  4046ec:	3501      	adds	r5, #1
  4046ee:	42b5      	cmp	r5, r6
  4046f0:	d227      	bcs.n	404742 <__fputwc+0x96>
  4046f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4046f6:	68a3      	ldr	r3, [r4, #8]
  4046f8:	3b01      	subs	r3, #1
  4046fa:	2b00      	cmp	r3, #0
  4046fc:	60a3      	str	r3, [r4, #8]
  4046fe:	daf0      	bge.n	4046e2 <__fputwc+0x36>
  404700:	69a7      	ldr	r7, [r4, #24]
  404702:	42bb      	cmp	r3, r7
  404704:	4671      	mov	r1, lr
  404706:	4622      	mov	r2, r4
  404708:	4640      	mov	r0, r8
  40470a:	db02      	blt.n	404712 <__fputwc+0x66>
  40470c:	f1be 0f0a 	cmp.w	lr, #10
  404710:	d1e7      	bne.n	4046e2 <__fputwc+0x36>
  404712:	f000 fe6b 	bl	4053ec <__swbuf_r>
  404716:	1c43      	adds	r3, r0, #1
  404718:	d1e8      	bne.n	4046ec <__fputwc+0x40>
  40471a:	b002      	add	sp, #8
  40471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404720:	89a3      	ldrh	r3, [r4, #12]
  404722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404726:	81a3      	strh	r3, [r4, #12]
  404728:	b002      	add	sp, #8
  40472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40472e:	f109 33ff 	add.w	r3, r9, #4294967295
  404732:	2bfe      	cmp	r3, #254	; 0xfe
  404734:	d8c4      	bhi.n	4046c0 <__fputwc+0x14>
  404736:	fa5f fe89 	uxtb.w	lr, r9
  40473a:	4606      	mov	r6, r0
  40473c:	f88d e004 	strb.w	lr, [sp, #4]
  404740:	e7cb      	b.n	4046da <__fputwc+0x2e>
  404742:	4648      	mov	r0, r9
  404744:	b002      	add	sp, #8
  404746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40474a:	bf00      	nop

0040474c <_fputwc_r>:
  40474c:	b530      	push	{r4, r5, lr}
  40474e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404750:	f013 0f01 	tst.w	r3, #1
  404754:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404758:	4614      	mov	r4, r2
  40475a:	b083      	sub	sp, #12
  40475c:	4605      	mov	r5, r0
  40475e:	b29a      	uxth	r2, r3
  404760:	d101      	bne.n	404766 <_fputwc_r+0x1a>
  404762:	0590      	lsls	r0, r2, #22
  404764:	d51c      	bpl.n	4047a0 <_fputwc_r+0x54>
  404766:	0490      	lsls	r0, r2, #18
  404768:	d406      	bmi.n	404778 <_fputwc_r+0x2c>
  40476a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40476c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404774:	81a3      	strh	r3, [r4, #12]
  404776:	6662      	str	r2, [r4, #100]	; 0x64
  404778:	4628      	mov	r0, r5
  40477a:	4622      	mov	r2, r4
  40477c:	f7ff ff96 	bl	4046ac <__fputwc>
  404780:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404782:	07da      	lsls	r2, r3, #31
  404784:	4605      	mov	r5, r0
  404786:	d402      	bmi.n	40478e <_fputwc_r+0x42>
  404788:	89a3      	ldrh	r3, [r4, #12]
  40478a:	059b      	lsls	r3, r3, #22
  40478c:	d502      	bpl.n	404794 <_fputwc_r+0x48>
  40478e:	4628      	mov	r0, r5
  404790:	b003      	add	sp, #12
  404792:	bd30      	pop	{r4, r5, pc}
  404794:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404796:	f000 faf9 	bl	404d8c <__retarget_lock_release_recursive>
  40479a:	4628      	mov	r0, r5
  40479c:	b003      	add	sp, #12
  40479e:	bd30      	pop	{r4, r5, pc}
  4047a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047a2:	9101      	str	r1, [sp, #4]
  4047a4:	f000 faf0 	bl	404d88 <__retarget_lock_acquire_recursive>
  4047a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ac:	9901      	ldr	r1, [sp, #4]
  4047ae:	b29a      	uxth	r2, r3
  4047b0:	e7d9      	b.n	404766 <_fputwc_r+0x1a>
  4047b2:	bf00      	nop

004047b4 <_malloc_trim_r>:
  4047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4047b6:	4f24      	ldr	r7, [pc, #144]	; (404848 <_malloc_trim_r+0x94>)
  4047b8:	460c      	mov	r4, r1
  4047ba:	4606      	mov	r6, r0
  4047bc:	f7fe fd8c 	bl	4032d8 <__malloc_lock>
  4047c0:	68bb      	ldr	r3, [r7, #8]
  4047c2:	685d      	ldr	r5, [r3, #4]
  4047c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4047c8:	310f      	adds	r1, #15
  4047ca:	f025 0503 	bic.w	r5, r5, #3
  4047ce:	4429      	add	r1, r5
  4047d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4047d4:	f021 010f 	bic.w	r1, r1, #15
  4047d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4047dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4047e0:	db07      	blt.n	4047f2 <_malloc_trim_r+0x3e>
  4047e2:	2100      	movs	r1, #0
  4047e4:	4630      	mov	r0, r6
  4047e6:	f7fe fd83 	bl	4032f0 <_sbrk_r>
  4047ea:	68bb      	ldr	r3, [r7, #8]
  4047ec:	442b      	add	r3, r5
  4047ee:	4298      	cmp	r0, r3
  4047f0:	d004      	beq.n	4047fc <_malloc_trim_r+0x48>
  4047f2:	4630      	mov	r0, r6
  4047f4:	f7fe fd76 	bl	4032e4 <__malloc_unlock>
  4047f8:	2000      	movs	r0, #0
  4047fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047fc:	4261      	negs	r1, r4
  4047fe:	4630      	mov	r0, r6
  404800:	f7fe fd76 	bl	4032f0 <_sbrk_r>
  404804:	3001      	adds	r0, #1
  404806:	d00d      	beq.n	404824 <_malloc_trim_r+0x70>
  404808:	4b10      	ldr	r3, [pc, #64]	; (40484c <_malloc_trim_r+0x98>)
  40480a:	68ba      	ldr	r2, [r7, #8]
  40480c:	6819      	ldr	r1, [r3, #0]
  40480e:	1b2d      	subs	r5, r5, r4
  404810:	f045 0501 	orr.w	r5, r5, #1
  404814:	4630      	mov	r0, r6
  404816:	1b09      	subs	r1, r1, r4
  404818:	6055      	str	r5, [r2, #4]
  40481a:	6019      	str	r1, [r3, #0]
  40481c:	f7fe fd62 	bl	4032e4 <__malloc_unlock>
  404820:	2001      	movs	r0, #1
  404822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404824:	2100      	movs	r1, #0
  404826:	4630      	mov	r0, r6
  404828:	f7fe fd62 	bl	4032f0 <_sbrk_r>
  40482c:	68ba      	ldr	r2, [r7, #8]
  40482e:	1a83      	subs	r3, r0, r2
  404830:	2b0f      	cmp	r3, #15
  404832:	ddde      	ble.n	4047f2 <_malloc_trim_r+0x3e>
  404834:	4c06      	ldr	r4, [pc, #24]	; (404850 <_malloc_trim_r+0x9c>)
  404836:	4905      	ldr	r1, [pc, #20]	; (40484c <_malloc_trim_r+0x98>)
  404838:	6824      	ldr	r4, [r4, #0]
  40483a:	f043 0301 	orr.w	r3, r3, #1
  40483e:	1b00      	subs	r0, r0, r4
  404840:	6053      	str	r3, [r2, #4]
  404842:	6008      	str	r0, [r1, #0]
  404844:	e7d5      	b.n	4047f2 <_malloc_trim_r+0x3e>
  404846:	bf00      	nop
  404848:	20400438 	.word	0x20400438
  40484c:	20400b94 	.word	0x20400b94
  404850:	20400840 	.word	0x20400840

00404854 <_free_r>:
  404854:	2900      	cmp	r1, #0
  404856:	d044      	beq.n	4048e2 <_free_r+0x8e>
  404858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40485c:	460d      	mov	r5, r1
  40485e:	4680      	mov	r8, r0
  404860:	f7fe fd3a 	bl	4032d8 <__malloc_lock>
  404864:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404868:	4969      	ldr	r1, [pc, #420]	; (404a10 <_free_r+0x1bc>)
  40486a:	f027 0301 	bic.w	r3, r7, #1
  40486e:	f1a5 0408 	sub.w	r4, r5, #8
  404872:	18e2      	adds	r2, r4, r3
  404874:	688e      	ldr	r6, [r1, #8]
  404876:	6850      	ldr	r0, [r2, #4]
  404878:	42b2      	cmp	r2, r6
  40487a:	f020 0003 	bic.w	r0, r0, #3
  40487e:	d05e      	beq.n	40493e <_free_r+0xea>
  404880:	07fe      	lsls	r6, r7, #31
  404882:	6050      	str	r0, [r2, #4]
  404884:	d40b      	bmi.n	40489e <_free_r+0x4a>
  404886:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40488a:	1be4      	subs	r4, r4, r7
  40488c:	f101 0e08 	add.w	lr, r1, #8
  404890:	68a5      	ldr	r5, [r4, #8]
  404892:	4575      	cmp	r5, lr
  404894:	443b      	add	r3, r7
  404896:	d06d      	beq.n	404974 <_free_r+0x120>
  404898:	68e7      	ldr	r7, [r4, #12]
  40489a:	60ef      	str	r7, [r5, #12]
  40489c:	60bd      	str	r5, [r7, #8]
  40489e:	1815      	adds	r5, r2, r0
  4048a0:	686d      	ldr	r5, [r5, #4]
  4048a2:	07ed      	lsls	r5, r5, #31
  4048a4:	d53e      	bpl.n	404924 <_free_r+0xd0>
  4048a6:	f043 0201 	orr.w	r2, r3, #1
  4048aa:	6062      	str	r2, [r4, #4]
  4048ac:	50e3      	str	r3, [r4, r3]
  4048ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4048b2:	d217      	bcs.n	4048e4 <_free_r+0x90>
  4048b4:	08db      	lsrs	r3, r3, #3
  4048b6:	1c58      	adds	r0, r3, #1
  4048b8:	109a      	asrs	r2, r3, #2
  4048ba:	684d      	ldr	r5, [r1, #4]
  4048bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4048c0:	60a7      	str	r7, [r4, #8]
  4048c2:	2301      	movs	r3, #1
  4048c4:	4093      	lsls	r3, r2
  4048c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4048ca:	432b      	orrs	r3, r5
  4048cc:	3a08      	subs	r2, #8
  4048ce:	60e2      	str	r2, [r4, #12]
  4048d0:	604b      	str	r3, [r1, #4]
  4048d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4048d6:	60fc      	str	r4, [r7, #12]
  4048d8:	4640      	mov	r0, r8
  4048da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4048de:	f7fe bd01 	b.w	4032e4 <__malloc_unlock>
  4048e2:	4770      	bx	lr
  4048e4:	0a5a      	lsrs	r2, r3, #9
  4048e6:	2a04      	cmp	r2, #4
  4048e8:	d852      	bhi.n	404990 <_free_r+0x13c>
  4048ea:	099a      	lsrs	r2, r3, #6
  4048ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4048f0:	00ff      	lsls	r7, r7, #3
  4048f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4048f6:	19c8      	adds	r0, r1, r7
  4048f8:	59ca      	ldr	r2, [r1, r7]
  4048fa:	3808      	subs	r0, #8
  4048fc:	4290      	cmp	r0, r2
  4048fe:	d04f      	beq.n	4049a0 <_free_r+0x14c>
  404900:	6851      	ldr	r1, [r2, #4]
  404902:	f021 0103 	bic.w	r1, r1, #3
  404906:	428b      	cmp	r3, r1
  404908:	d232      	bcs.n	404970 <_free_r+0x11c>
  40490a:	6892      	ldr	r2, [r2, #8]
  40490c:	4290      	cmp	r0, r2
  40490e:	d1f7      	bne.n	404900 <_free_r+0xac>
  404910:	68c3      	ldr	r3, [r0, #12]
  404912:	60a0      	str	r0, [r4, #8]
  404914:	60e3      	str	r3, [r4, #12]
  404916:	609c      	str	r4, [r3, #8]
  404918:	60c4      	str	r4, [r0, #12]
  40491a:	4640      	mov	r0, r8
  40491c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404920:	f7fe bce0 	b.w	4032e4 <__malloc_unlock>
  404924:	6895      	ldr	r5, [r2, #8]
  404926:	4f3b      	ldr	r7, [pc, #236]	; (404a14 <_free_r+0x1c0>)
  404928:	42bd      	cmp	r5, r7
  40492a:	4403      	add	r3, r0
  40492c:	d040      	beq.n	4049b0 <_free_r+0x15c>
  40492e:	68d0      	ldr	r0, [r2, #12]
  404930:	60e8      	str	r0, [r5, #12]
  404932:	f043 0201 	orr.w	r2, r3, #1
  404936:	6085      	str	r5, [r0, #8]
  404938:	6062      	str	r2, [r4, #4]
  40493a:	50e3      	str	r3, [r4, r3]
  40493c:	e7b7      	b.n	4048ae <_free_r+0x5a>
  40493e:	07ff      	lsls	r7, r7, #31
  404940:	4403      	add	r3, r0
  404942:	d407      	bmi.n	404954 <_free_r+0x100>
  404944:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404948:	1aa4      	subs	r4, r4, r2
  40494a:	4413      	add	r3, r2
  40494c:	68a0      	ldr	r0, [r4, #8]
  40494e:	68e2      	ldr	r2, [r4, #12]
  404950:	60c2      	str	r2, [r0, #12]
  404952:	6090      	str	r0, [r2, #8]
  404954:	4a30      	ldr	r2, [pc, #192]	; (404a18 <_free_r+0x1c4>)
  404956:	6812      	ldr	r2, [r2, #0]
  404958:	f043 0001 	orr.w	r0, r3, #1
  40495c:	4293      	cmp	r3, r2
  40495e:	6060      	str	r0, [r4, #4]
  404960:	608c      	str	r4, [r1, #8]
  404962:	d3b9      	bcc.n	4048d8 <_free_r+0x84>
  404964:	4b2d      	ldr	r3, [pc, #180]	; (404a1c <_free_r+0x1c8>)
  404966:	4640      	mov	r0, r8
  404968:	6819      	ldr	r1, [r3, #0]
  40496a:	f7ff ff23 	bl	4047b4 <_malloc_trim_r>
  40496e:	e7b3      	b.n	4048d8 <_free_r+0x84>
  404970:	4610      	mov	r0, r2
  404972:	e7cd      	b.n	404910 <_free_r+0xbc>
  404974:	1811      	adds	r1, r2, r0
  404976:	6849      	ldr	r1, [r1, #4]
  404978:	07c9      	lsls	r1, r1, #31
  40497a:	d444      	bmi.n	404a06 <_free_r+0x1b2>
  40497c:	6891      	ldr	r1, [r2, #8]
  40497e:	68d2      	ldr	r2, [r2, #12]
  404980:	60ca      	str	r2, [r1, #12]
  404982:	4403      	add	r3, r0
  404984:	f043 0001 	orr.w	r0, r3, #1
  404988:	6091      	str	r1, [r2, #8]
  40498a:	6060      	str	r0, [r4, #4]
  40498c:	50e3      	str	r3, [r4, r3]
  40498e:	e7a3      	b.n	4048d8 <_free_r+0x84>
  404990:	2a14      	cmp	r2, #20
  404992:	d816      	bhi.n	4049c2 <_free_r+0x16e>
  404994:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404998:	00ff      	lsls	r7, r7, #3
  40499a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40499e:	e7aa      	b.n	4048f6 <_free_r+0xa2>
  4049a0:	10aa      	asrs	r2, r5, #2
  4049a2:	2301      	movs	r3, #1
  4049a4:	684d      	ldr	r5, [r1, #4]
  4049a6:	4093      	lsls	r3, r2
  4049a8:	432b      	orrs	r3, r5
  4049aa:	604b      	str	r3, [r1, #4]
  4049ac:	4603      	mov	r3, r0
  4049ae:	e7b0      	b.n	404912 <_free_r+0xbe>
  4049b0:	f043 0201 	orr.w	r2, r3, #1
  4049b4:	614c      	str	r4, [r1, #20]
  4049b6:	610c      	str	r4, [r1, #16]
  4049b8:	60e5      	str	r5, [r4, #12]
  4049ba:	60a5      	str	r5, [r4, #8]
  4049bc:	6062      	str	r2, [r4, #4]
  4049be:	50e3      	str	r3, [r4, r3]
  4049c0:	e78a      	b.n	4048d8 <_free_r+0x84>
  4049c2:	2a54      	cmp	r2, #84	; 0x54
  4049c4:	d806      	bhi.n	4049d4 <_free_r+0x180>
  4049c6:	0b1a      	lsrs	r2, r3, #12
  4049c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4049cc:	00ff      	lsls	r7, r7, #3
  4049ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4049d2:	e790      	b.n	4048f6 <_free_r+0xa2>
  4049d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4049d8:	d806      	bhi.n	4049e8 <_free_r+0x194>
  4049da:	0bda      	lsrs	r2, r3, #15
  4049dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4049e0:	00ff      	lsls	r7, r7, #3
  4049e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4049e6:	e786      	b.n	4048f6 <_free_r+0xa2>
  4049e8:	f240 5054 	movw	r0, #1364	; 0x554
  4049ec:	4282      	cmp	r2, r0
  4049ee:	d806      	bhi.n	4049fe <_free_r+0x1aa>
  4049f0:	0c9a      	lsrs	r2, r3, #18
  4049f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4049f6:	00ff      	lsls	r7, r7, #3
  4049f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4049fc:	e77b      	b.n	4048f6 <_free_r+0xa2>
  4049fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404a02:	257e      	movs	r5, #126	; 0x7e
  404a04:	e777      	b.n	4048f6 <_free_r+0xa2>
  404a06:	f043 0101 	orr.w	r1, r3, #1
  404a0a:	6061      	str	r1, [r4, #4]
  404a0c:	6013      	str	r3, [r2, #0]
  404a0e:	e763      	b.n	4048d8 <_free_r+0x84>
  404a10:	20400438 	.word	0x20400438
  404a14:	20400440 	.word	0x20400440
  404a18:	20400844 	.word	0x20400844
  404a1c:	20400bc4 	.word	0x20400bc4

00404a20 <__sfvwrite_r>:
  404a20:	6893      	ldr	r3, [r2, #8]
  404a22:	2b00      	cmp	r3, #0
  404a24:	d073      	beq.n	404b0e <__sfvwrite_r+0xee>
  404a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a2a:	898b      	ldrh	r3, [r1, #12]
  404a2c:	b083      	sub	sp, #12
  404a2e:	460c      	mov	r4, r1
  404a30:	0719      	lsls	r1, r3, #28
  404a32:	9000      	str	r0, [sp, #0]
  404a34:	4616      	mov	r6, r2
  404a36:	d526      	bpl.n	404a86 <__sfvwrite_r+0x66>
  404a38:	6922      	ldr	r2, [r4, #16]
  404a3a:	b322      	cbz	r2, 404a86 <__sfvwrite_r+0x66>
  404a3c:	f013 0002 	ands.w	r0, r3, #2
  404a40:	6835      	ldr	r5, [r6, #0]
  404a42:	d02c      	beq.n	404a9e <__sfvwrite_r+0x7e>
  404a44:	f04f 0900 	mov.w	r9, #0
  404a48:	4fb0      	ldr	r7, [pc, #704]	; (404d0c <__sfvwrite_r+0x2ec>)
  404a4a:	46c8      	mov	r8, r9
  404a4c:	46b2      	mov	sl, r6
  404a4e:	45b8      	cmp	r8, r7
  404a50:	4643      	mov	r3, r8
  404a52:	464a      	mov	r2, r9
  404a54:	bf28      	it	cs
  404a56:	463b      	movcs	r3, r7
  404a58:	9800      	ldr	r0, [sp, #0]
  404a5a:	f1b8 0f00 	cmp.w	r8, #0
  404a5e:	d050      	beq.n	404b02 <__sfvwrite_r+0xe2>
  404a60:	69e1      	ldr	r1, [r4, #28]
  404a62:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404a64:	47b0      	blx	r6
  404a66:	2800      	cmp	r0, #0
  404a68:	dd58      	ble.n	404b1c <__sfvwrite_r+0xfc>
  404a6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  404a6e:	1a1b      	subs	r3, r3, r0
  404a70:	4481      	add	r9, r0
  404a72:	eba8 0800 	sub.w	r8, r8, r0
  404a76:	f8ca 3008 	str.w	r3, [sl, #8]
  404a7a:	2b00      	cmp	r3, #0
  404a7c:	d1e7      	bne.n	404a4e <__sfvwrite_r+0x2e>
  404a7e:	2000      	movs	r0, #0
  404a80:	b003      	add	sp, #12
  404a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a86:	4621      	mov	r1, r4
  404a88:	9800      	ldr	r0, [sp, #0]
  404a8a:	f7ff fc51 	bl	404330 <__swsetup_r>
  404a8e:	2800      	cmp	r0, #0
  404a90:	f040 8133 	bne.w	404cfa <__sfvwrite_r+0x2da>
  404a94:	89a3      	ldrh	r3, [r4, #12]
  404a96:	6835      	ldr	r5, [r6, #0]
  404a98:	f013 0002 	ands.w	r0, r3, #2
  404a9c:	d1d2      	bne.n	404a44 <__sfvwrite_r+0x24>
  404a9e:	f013 0901 	ands.w	r9, r3, #1
  404aa2:	d145      	bne.n	404b30 <__sfvwrite_r+0x110>
  404aa4:	464f      	mov	r7, r9
  404aa6:	9601      	str	r6, [sp, #4]
  404aa8:	b337      	cbz	r7, 404af8 <__sfvwrite_r+0xd8>
  404aaa:	059a      	lsls	r2, r3, #22
  404aac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404ab0:	f140 8083 	bpl.w	404bba <__sfvwrite_r+0x19a>
  404ab4:	4547      	cmp	r7, r8
  404ab6:	46c3      	mov	fp, r8
  404ab8:	f0c0 80ab 	bcc.w	404c12 <__sfvwrite_r+0x1f2>
  404abc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404ac0:	f040 80ac 	bne.w	404c1c <__sfvwrite_r+0x1fc>
  404ac4:	6820      	ldr	r0, [r4, #0]
  404ac6:	46ba      	mov	sl, r7
  404ac8:	465a      	mov	r2, fp
  404aca:	4649      	mov	r1, r9
  404acc:	f000 fa40 	bl	404f50 <memmove>
  404ad0:	68a2      	ldr	r2, [r4, #8]
  404ad2:	6823      	ldr	r3, [r4, #0]
  404ad4:	eba2 0208 	sub.w	r2, r2, r8
  404ad8:	445b      	add	r3, fp
  404ada:	60a2      	str	r2, [r4, #8]
  404adc:	6023      	str	r3, [r4, #0]
  404ade:	9a01      	ldr	r2, [sp, #4]
  404ae0:	6893      	ldr	r3, [r2, #8]
  404ae2:	eba3 030a 	sub.w	r3, r3, sl
  404ae6:	44d1      	add	r9, sl
  404ae8:	eba7 070a 	sub.w	r7, r7, sl
  404aec:	6093      	str	r3, [r2, #8]
  404aee:	2b00      	cmp	r3, #0
  404af0:	d0c5      	beq.n	404a7e <__sfvwrite_r+0x5e>
  404af2:	89a3      	ldrh	r3, [r4, #12]
  404af4:	2f00      	cmp	r7, #0
  404af6:	d1d8      	bne.n	404aaa <__sfvwrite_r+0x8a>
  404af8:	f8d5 9000 	ldr.w	r9, [r5]
  404afc:	686f      	ldr	r7, [r5, #4]
  404afe:	3508      	adds	r5, #8
  404b00:	e7d2      	b.n	404aa8 <__sfvwrite_r+0x88>
  404b02:	f8d5 9000 	ldr.w	r9, [r5]
  404b06:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404b0a:	3508      	adds	r5, #8
  404b0c:	e79f      	b.n	404a4e <__sfvwrite_r+0x2e>
  404b0e:	2000      	movs	r0, #0
  404b10:	4770      	bx	lr
  404b12:	4621      	mov	r1, r4
  404b14:	9800      	ldr	r0, [sp, #0]
  404b16:	f7ff fd1f 	bl	404558 <_fflush_r>
  404b1a:	b370      	cbz	r0, 404b7a <__sfvwrite_r+0x15a>
  404b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b24:	f04f 30ff 	mov.w	r0, #4294967295
  404b28:	81a3      	strh	r3, [r4, #12]
  404b2a:	b003      	add	sp, #12
  404b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b30:	4681      	mov	r9, r0
  404b32:	4633      	mov	r3, r6
  404b34:	464e      	mov	r6, r9
  404b36:	46a8      	mov	r8, r5
  404b38:	469a      	mov	sl, r3
  404b3a:	464d      	mov	r5, r9
  404b3c:	b34e      	cbz	r6, 404b92 <__sfvwrite_r+0x172>
  404b3e:	b380      	cbz	r0, 404ba2 <__sfvwrite_r+0x182>
  404b40:	6820      	ldr	r0, [r4, #0]
  404b42:	6923      	ldr	r3, [r4, #16]
  404b44:	6962      	ldr	r2, [r4, #20]
  404b46:	45b1      	cmp	r9, r6
  404b48:	46cb      	mov	fp, r9
  404b4a:	bf28      	it	cs
  404b4c:	46b3      	movcs	fp, r6
  404b4e:	4298      	cmp	r0, r3
  404b50:	465f      	mov	r7, fp
  404b52:	d904      	bls.n	404b5e <__sfvwrite_r+0x13e>
  404b54:	68a3      	ldr	r3, [r4, #8]
  404b56:	4413      	add	r3, r2
  404b58:	459b      	cmp	fp, r3
  404b5a:	f300 80a6 	bgt.w	404caa <__sfvwrite_r+0x28a>
  404b5e:	4593      	cmp	fp, r2
  404b60:	db4b      	blt.n	404bfa <__sfvwrite_r+0x1da>
  404b62:	4613      	mov	r3, r2
  404b64:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404b66:	69e1      	ldr	r1, [r4, #28]
  404b68:	9800      	ldr	r0, [sp, #0]
  404b6a:	462a      	mov	r2, r5
  404b6c:	47b8      	blx	r7
  404b6e:	1e07      	subs	r7, r0, #0
  404b70:	ddd4      	ble.n	404b1c <__sfvwrite_r+0xfc>
  404b72:	ebb9 0907 	subs.w	r9, r9, r7
  404b76:	d0cc      	beq.n	404b12 <__sfvwrite_r+0xf2>
  404b78:	2001      	movs	r0, #1
  404b7a:	f8da 3008 	ldr.w	r3, [sl, #8]
  404b7e:	1bdb      	subs	r3, r3, r7
  404b80:	443d      	add	r5, r7
  404b82:	1bf6      	subs	r6, r6, r7
  404b84:	f8ca 3008 	str.w	r3, [sl, #8]
  404b88:	2b00      	cmp	r3, #0
  404b8a:	f43f af78 	beq.w	404a7e <__sfvwrite_r+0x5e>
  404b8e:	2e00      	cmp	r6, #0
  404b90:	d1d5      	bne.n	404b3e <__sfvwrite_r+0x11e>
  404b92:	f108 0308 	add.w	r3, r8, #8
  404b96:	e913 0060 	ldmdb	r3, {r5, r6}
  404b9a:	4698      	mov	r8, r3
  404b9c:	3308      	adds	r3, #8
  404b9e:	2e00      	cmp	r6, #0
  404ba0:	d0f9      	beq.n	404b96 <__sfvwrite_r+0x176>
  404ba2:	4632      	mov	r2, r6
  404ba4:	210a      	movs	r1, #10
  404ba6:	4628      	mov	r0, r5
  404ba8:	f000 f982 	bl	404eb0 <memchr>
  404bac:	2800      	cmp	r0, #0
  404bae:	f000 80a1 	beq.w	404cf4 <__sfvwrite_r+0x2d4>
  404bb2:	3001      	adds	r0, #1
  404bb4:	eba0 0905 	sub.w	r9, r0, r5
  404bb8:	e7c2      	b.n	404b40 <__sfvwrite_r+0x120>
  404bba:	6820      	ldr	r0, [r4, #0]
  404bbc:	6923      	ldr	r3, [r4, #16]
  404bbe:	4298      	cmp	r0, r3
  404bc0:	d802      	bhi.n	404bc8 <__sfvwrite_r+0x1a8>
  404bc2:	6963      	ldr	r3, [r4, #20]
  404bc4:	429f      	cmp	r7, r3
  404bc6:	d25d      	bcs.n	404c84 <__sfvwrite_r+0x264>
  404bc8:	45b8      	cmp	r8, r7
  404bca:	bf28      	it	cs
  404bcc:	46b8      	movcs	r8, r7
  404bce:	4642      	mov	r2, r8
  404bd0:	4649      	mov	r1, r9
  404bd2:	f000 f9bd 	bl	404f50 <memmove>
  404bd6:	68a3      	ldr	r3, [r4, #8]
  404bd8:	6822      	ldr	r2, [r4, #0]
  404bda:	eba3 0308 	sub.w	r3, r3, r8
  404bde:	4442      	add	r2, r8
  404be0:	60a3      	str	r3, [r4, #8]
  404be2:	6022      	str	r2, [r4, #0]
  404be4:	b10b      	cbz	r3, 404bea <__sfvwrite_r+0x1ca>
  404be6:	46c2      	mov	sl, r8
  404be8:	e779      	b.n	404ade <__sfvwrite_r+0xbe>
  404bea:	4621      	mov	r1, r4
  404bec:	9800      	ldr	r0, [sp, #0]
  404bee:	f7ff fcb3 	bl	404558 <_fflush_r>
  404bf2:	2800      	cmp	r0, #0
  404bf4:	d192      	bne.n	404b1c <__sfvwrite_r+0xfc>
  404bf6:	46c2      	mov	sl, r8
  404bf8:	e771      	b.n	404ade <__sfvwrite_r+0xbe>
  404bfa:	465a      	mov	r2, fp
  404bfc:	4629      	mov	r1, r5
  404bfe:	f000 f9a7 	bl	404f50 <memmove>
  404c02:	68a2      	ldr	r2, [r4, #8]
  404c04:	6823      	ldr	r3, [r4, #0]
  404c06:	eba2 020b 	sub.w	r2, r2, fp
  404c0a:	445b      	add	r3, fp
  404c0c:	60a2      	str	r2, [r4, #8]
  404c0e:	6023      	str	r3, [r4, #0]
  404c10:	e7af      	b.n	404b72 <__sfvwrite_r+0x152>
  404c12:	6820      	ldr	r0, [r4, #0]
  404c14:	46b8      	mov	r8, r7
  404c16:	46ba      	mov	sl, r7
  404c18:	46bb      	mov	fp, r7
  404c1a:	e755      	b.n	404ac8 <__sfvwrite_r+0xa8>
  404c1c:	6962      	ldr	r2, [r4, #20]
  404c1e:	6820      	ldr	r0, [r4, #0]
  404c20:	6921      	ldr	r1, [r4, #16]
  404c22:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404c26:	eba0 0a01 	sub.w	sl, r0, r1
  404c2a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404c2e:	f10a 0001 	add.w	r0, sl, #1
  404c32:	ea4f 0868 	mov.w	r8, r8, asr #1
  404c36:	4438      	add	r0, r7
  404c38:	4540      	cmp	r0, r8
  404c3a:	4642      	mov	r2, r8
  404c3c:	bf84      	itt	hi
  404c3e:	4680      	movhi	r8, r0
  404c40:	4642      	movhi	r2, r8
  404c42:	055b      	lsls	r3, r3, #21
  404c44:	d544      	bpl.n	404cd0 <__sfvwrite_r+0x2b0>
  404c46:	4611      	mov	r1, r2
  404c48:	9800      	ldr	r0, [sp, #0]
  404c4a:	f7fd ffad 	bl	402ba8 <_malloc_r>
  404c4e:	4683      	mov	fp, r0
  404c50:	2800      	cmp	r0, #0
  404c52:	d055      	beq.n	404d00 <__sfvwrite_r+0x2e0>
  404c54:	4652      	mov	r2, sl
  404c56:	6921      	ldr	r1, [r4, #16]
  404c58:	f7fe fa56 	bl	403108 <memcpy>
  404c5c:	89a3      	ldrh	r3, [r4, #12]
  404c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404c66:	81a3      	strh	r3, [r4, #12]
  404c68:	eb0b 000a 	add.w	r0, fp, sl
  404c6c:	eba8 030a 	sub.w	r3, r8, sl
  404c70:	f8c4 b010 	str.w	fp, [r4, #16]
  404c74:	f8c4 8014 	str.w	r8, [r4, #20]
  404c78:	6020      	str	r0, [r4, #0]
  404c7a:	60a3      	str	r3, [r4, #8]
  404c7c:	46b8      	mov	r8, r7
  404c7e:	46ba      	mov	sl, r7
  404c80:	46bb      	mov	fp, r7
  404c82:	e721      	b.n	404ac8 <__sfvwrite_r+0xa8>
  404c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404c88:	42b9      	cmp	r1, r7
  404c8a:	bf28      	it	cs
  404c8c:	4639      	movcs	r1, r7
  404c8e:	464a      	mov	r2, r9
  404c90:	fb91 f1f3 	sdiv	r1, r1, r3
  404c94:	9800      	ldr	r0, [sp, #0]
  404c96:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404c98:	fb03 f301 	mul.w	r3, r3, r1
  404c9c:	69e1      	ldr	r1, [r4, #28]
  404c9e:	47b0      	blx	r6
  404ca0:	f1b0 0a00 	subs.w	sl, r0, #0
  404ca4:	f73f af1b 	bgt.w	404ade <__sfvwrite_r+0xbe>
  404ca8:	e738      	b.n	404b1c <__sfvwrite_r+0xfc>
  404caa:	461a      	mov	r2, r3
  404cac:	4629      	mov	r1, r5
  404cae:	9301      	str	r3, [sp, #4]
  404cb0:	f000 f94e 	bl	404f50 <memmove>
  404cb4:	6822      	ldr	r2, [r4, #0]
  404cb6:	9b01      	ldr	r3, [sp, #4]
  404cb8:	9800      	ldr	r0, [sp, #0]
  404cba:	441a      	add	r2, r3
  404cbc:	6022      	str	r2, [r4, #0]
  404cbe:	4621      	mov	r1, r4
  404cc0:	f7ff fc4a 	bl	404558 <_fflush_r>
  404cc4:	9b01      	ldr	r3, [sp, #4]
  404cc6:	2800      	cmp	r0, #0
  404cc8:	f47f af28 	bne.w	404b1c <__sfvwrite_r+0xfc>
  404ccc:	461f      	mov	r7, r3
  404cce:	e750      	b.n	404b72 <__sfvwrite_r+0x152>
  404cd0:	9800      	ldr	r0, [sp, #0]
  404cd2:	f000 f9a1 	bl	405018 <_realloc_r>
  404cd6:	4683      	mov	fp, r0
  404cd8:	2800      	cmp	r0, #0
  404cda:	d1c5      	bne.n	404c68 <__sfvwrite_r+0x248>
  404cdc:	9d00      	ldr	r5, [sp, #0]
  404cde:	6921      	ldr	r1, [r4, #16]
  404ce0:	4628      	mov	r0, r5
  404ce2:	f7ff fdb7 	bl	404854 <_free_r>
  404ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404cea:	220c      	movs	r2, #12
  404cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404cf0:	602a      	str	r2, [r5, #0]
  404cf2:	e715      	b.n	404b20 <__sfvwrite_r+0x100>
  404cf4:	f106 0901 	add.w	r9, r6, #1
  404cf8:	e722      	b.n	404b40 <__sfvwrite_r+0x120>
  404cfa:	f04f 30ff 	mov.w	r0, #4294967295
  404cfe:	e6bf      	b.n	404a80 <__sfvwrite_r+0x60>
  404d00:	9a00      	ldr	r2, [sp, #0]
  404d02:	230c      	movs	r3, #12
  404d04:	6013      	str	r3, [r2, #0]
  404d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d0a:	e709      	b.n	404b20 <__sfvwrite_r+0x100>
  404d0c:	7ffffc00 	.word	0x7ffffc00

00404d10 <_fwalk_reent>:
  404d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404d14:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404d18:	d01f      	beq.n	404d5a <_fwalk_reent+0x4a>
  404d1a:	4688      	mov	r8, r1
  404d1c:	4606      	mov	r6, r0
  404d1e:	f04f 0900 	mov.w	r9, #0
  404d22:	687d      	ldr	r5, [r7, #4]
  404d24:	68bc      	ldr	r4, [r7, #8]
  404d26:	3d01      	subs	r5, #1
  404d28:	d411      	bmi.n	404d4e <_fwalk_reent+0x3e>
  404d2a:	89a3      	ldrh	r3, [r4, #12]
  404d2c:	2b01      	cmp	r3, #1
  404d2e:	f105 35ff 	add.w	r5, r5, #4294967295
  404d32:	d908      	bls.n	404d46 <_fwalk_reent+0x36>
  404d34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404d38:	3301      	adds	r3, #1
  404d3a:	4621      	mov	r1, r4
  404d3c:	4630      	mov	r0, r6
  404d3e:	d002      	beq.n	404d46 <_fwalk_reent+0x36>
  404d40:	47c0      	blx	r8
  404d42:	ea49 0900 	orr.w	r9, r9, r0
  404d46:	1c6b      	adds	r3, r5, #1
  404d48:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404d4c:	d1ed      	bne.n	404d2a <_fwalk_reent+0x1a>
  404d4e:	683f      	ldr	r7, [r7, #0]
  404d50:	2f00      	cmp	r7, #0
  404d52:	d1e6      	bne.n	404d22 <_fwalk_reent+0x12>
  404d54:	4648      	mov	r0, r9
  404d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d5a:	46b9      	mov	r9, r7
  404d5c:	4648      	mov	r0, r9
  404d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d62:	bf00      	nop

00404d64 <__locale_mb_cur_max>:
  404d64:	4b04      	ldr	r3, [pc, #16]	; (404d78 <__locale_mb_cur_max+0x14>)
  404d66:	4a05      	ldr	r2, [pc, #20]	; (404d7c <__locale_mb_cur_max+0x18>)
  404d68:	681b      	ldr	r3, [r3, #0]
  404d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404d6c:	2b00      	cmp	r3, #0
  404d6e:	bf08      	it	eq
  404d70:	4613      	moveq	r3, r2
  404d72:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404d76:	4770      	bx	lr
  404d78:	2040000c 	.word	0x2040000c
  404d7c:	2040084c 	.word	0x2040084c

00404d80 <__retarget_lock_init_recursive>:
  404d80:	4770      	bx	lr
  404d82:	bf00      	nop

00404d84 <__retarget_lock_close_recursive>:
  404d84:	4770      	bx	lr
  404d86:	bf00      	nop

00404d88 <__retarget_lock_acquire_recursive>:
  404d88:	4770      	bx	lr
  404d8a:	bf00      	nop

00404d8c <__retarget_lock_release_recursive>:
  404d8c:	4770      	bx	lr
  404d8e:	bf00      	nop

00404d90 <__swhatbuf_r>:
  404d90:	b570      	push	{r4, r5, r6, lr}
  404d92:	460c      	mov	r4, r1
  404d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d98:	2900      	cmp	r1, #0
  404d9a:	b090      	sub	sp, #64	; 0x40
  404d9c:	4615      	mov	r5, r2
  404d9e:	461e      	mov	r6, r3
  404da0:	db14      	blt.n	404dcc <__swhatbuf_r+0x3c>
  404da2:	aa01      	add	r2, sp, #4
  404da4:	f000 fc9e 	bl	4056e4 <_fstat_r>
  404da8:	2800      	cmp	r0, #0
  404daa:	db0f      	blt.n	404dcc <__swhatbuf_r+0x3c>
  404dac:	9a02      	ldr	r2, [sp, #8]
  404dae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404db2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404db6:	fab2 f282 	clz	r2, r2
  404dba:	0952      	lsrs	r2, r2, #5
  404dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404dc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404dc4:	6032      	str	r2, [r6, #0]
  404dc6:	602b      	str	r3, [r5, #0]
  404dc8:	b010      	add	sp, #64	; 0x40
  404dca:	bd70      	pop	{r4, r5, r6, pc}
  404dcc:	89a2      	ldrh	r2, [r4, #12]
  404dce:	2300      	movs	r3, #0
  404dd0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404dd4:	6033      	str	r3, [r6, #0]
  404dd6:	d004      	beq.n	404de2 <__swhatbuf_r+0x52>
  404dd8:	2240      	movs	r2, #64	; 0x40
  404dda:	4618      	mov	r0, r3
  404ddc:	602a      	str	r2, [r5, #0]
  404dde:	b010      	add	sp, #64	; 0x40
  404de0:	bd70      	pop	{r4, r5, r6, pc}
  404de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404de6:	602b      	str	r3, [r5, #0]
  404de8:	b010      	add	sp, #64	; 0x40
  404dea:	bd70      	pop	{r4, r5, r6, pc}

00404dec <__smakebuf_r>:
  404dec:	898a      	ldrh	r2, [r1, #12]
  404dee:	0792      	lsls	r2, r2, #30
  404df0:	460b      	mov	r3, r1
  404df2:	d506      	bpl.n	404e02 <__smakebuf_r+0x16>
  404df4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404df8:	2101      	movs	r1, #1
  404dfa:	601a      	str	r2, [r3, #0]
  404dfc:	611a      	str	r2, [r3, #16]
  404dfe:	6159      	str	r1, [r3, #20]
  404e00:	4770      	bx	lr
  404e02:	b5f0      	push	{r4, r5, r6, r7, lr}
  404e04:	b083      	sub	sp, #12
  404e06:	ab01      	add	r3, sp, #4
  404e08:	466a      	mov	r2, sp
  404e0a:	460c      	mov	r4, r1
  404e0c:	4606      	mov	r6, r0
  404e0e:	f7ff ffbf 	bl	404d90 <__swhatbuf_r>
  404e12:	9900      	ldr	r1, [sp, #0]
  404e14:	4605      	mov	r5, r0
  404e16:	4630      	mov	r0, r6
  404e18:	f7fd fec6 	bl	402ba8 <_malloc_r>
  404e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e20:	b1d8      	cbz	r0, 404e5a <__smakebuf_r+0x6e>
  404e22:	9a01      	ldr	r2, [sp, #4]
  404e24:	4f15      	ldr	r7, [pc, #84]	; (404e7c <__smakebuf_r+0x90>)
  404e26:	9900      	ldr	r1, [sp, #0]
  404e28:	63f7      	str	r7, [r6, #60]	; 0x3c
  404e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e2e:	81a3      	strh	r3, [r4, #12]
  404e30:	6020      	str	r0, [r4, #0]
  404e32:	6120      	str	r0, [r4, #16]
  404e34:	6161      	str	r1, [r4, #20]
  404e36:	b91a      	cbnz	r2, 404e40 <__smakebuf_r+0x54>
  404e38:	432b      	orrs	r3, r5
  404e3a:	81a3      	strh	r3, [r4, #12]
  404e3c:	b003      	add	sp, #12
  404e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e40:	4630      	mov	r0, r6
  404e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404e46:	f000 fc61 	bl	40570c <_isatty_r>
  404e4a:	b1a0      	cbz	r0, 404e76 <__smakebuf_r+0x8a>
  404e4c:	89a3      	ldrh	r3, [r4, #12]
  404e4e:	f023 0303 	bic.w	r3, r3, #3
  404e52:	f043 0301 	orr.w	r3, r3, #1
  404e56:	b21b      	sxth	r3, r3
  404e58:	e7ee      	b.n	404e38 <__smakebuf_r+0x4c>
  404e5a:	059a      	lsls	r2, r3, #22
  404e5c:	d4ee      	bmi.n	404e3c <__smakebuf_r+0x50>
  404e5e:	f023 0303 	bic.w	r3, r3, #3
  404e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404e66:	f043 0302 	orr.w	r3, r3, #2
  404e6a:	2101      	movs	r1, #1
  404e6c:	81a3      	strh	r3, [r4, #12]
  404e6e:	6022      	str	r2, [r4, #0]
  404e70:	6122      	str	r2, [r4, #16]
  404e72:	6161      	str	r1, [r4, #20]
  404e74:	e7e2      	b.n	404e3c <__smakebuf_r+0x50>
  404e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e7a:	e7dd      	b.n	404e38 <__smakebuf_r+0x4c>
  404e7c:	004045ad 	.word	0x004045ad

00404e80 <__ascii_mbtowc>:
  404e80:	b082      	sub	sp, #8
  404e82:	b149      	cbz	r1, 404e98 <__ascii_mbtowc+0x18>
  404e84:	b15a      	cbz	r2, 404e9e <__ascii_mbtowc+0x1e>
  404e86:	b16b      	cbz	r3, 404ea4 <__ascii_mbtowc+0x24>
  404e88:	7813      	ldrb	r3, [r2, #0]
  404e8a:	600b      	str	r3, [r1, #0]
  404e8c:	7812      	ldrb	r2, [r2, #0]
  404e8e:	1c10      	adds	r0, r2, #0
  404e90:	bf18      	it	ne
  404e92:	2001      	movne	r0, #1
  404e94:	b002      	add	sp, #8
  404e96:	4770      	bx	lr
  404e98:	a901      	add	r1, sp, #4
  404e9a:	2a00      	cmp	r2, #0
  404e9c:	d1f3      	bne.n	404e86 <__ascii_mbtowc+0x6>
  404e9e:	4610      	mov	r0, r2
  404ea0:	b002      	add	sp, #8
  404ea2:	4770      	bx	lr
  404ea4:	f06f 0001 	mvn.w	r0, #1
  404ea8:	e7f4      	b.n	404e94 <__ascii_mbtowc+0x14>
  404eaa:	bf00      	nop
  404eac:	0000      	movs	r0, r0
	...

00404eb0 <memchr>:
  404eb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404eb4:	2a10      	cmp	r2, #16
  404eb6:	db2b      	blt.n	404f10 <memchr+0x60>
  404eb8:	f010 0f07 	tst.w	r0, #7
  404ebc:	d008      	beq.n	404ed0 <memchr+0x20>
  404ebe:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ec2:	3a01      	subs	r2, #1
  404ec4:	428b      	cmp	r3, r1
  404ec6:	d02d      	beq.n	404f24 <memchr+0x74>
  404ec8:	f010 0f07 	tst.w	r0, #7
  404ecc:	b342      	cbz	r2, 404f20 <memchr+0x70>
  404ece:	d1f6      	bne.n	404ebe <memchr+0xe>
  404ed0:	b4f0      	push	{r4, r5, r6, r7}
  404ed2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404ed6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404eda:	f022 0407 	bic.w	r4, r2, #7
  404ede:	f07f 0700 	mvns.w	r7, #0
  404ee2:	2300      	movs	r3, #0
  404ee4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404ee8:	3c08      	subs	r4, #8
  404eea:	ea85 0501 	eor.w	r5, r5, r1
  404eee:	ea86 0601 	eor.w	r6, r6, r1
  404ef2:	fa85 f547 	uadd8	r5, r5, r7
  404ef6:	faa3 f587 	sel	r5, r3, r7
  404efa:	fa86 f647 	uadd8	r6, r6, r7
  404efe:	faa5 f687 	sel	r6, r5, r7
  404f02:	b98e      	cbnz	r6, 404f28 <memchr+0x78>
  404f04:	d1ee      	bne.n	404ee4 <memchr+0x34>
  404f06:	bcf0      	pop	{r4, r5, r6, r7}
  404f08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f0c:	f002 0207 	and.w	r2, r2, #7
  404f10:	b132      	cbz	r2, 404f20 <memchr+0x70>
  404f12:	f810 3b01 	ldrb.w	r3, [r0], #1
  404f16:	3a01      	subs	r2, #1
  404f18:	ea83 0301 	eor.w	r3, r3, r1
  404f1c:	b113      	cbz	r3, 404f24 <memchr+0x74>
  404f1e:	d1f8      	bne.n	404f12 <memchr+0x62>
  404f20:	2000      	movs	r0, #0
  404f22:	4770      	bx	lr
  404f24:	3801      	subs	r0, #1
  404f26:	4770      	bx	lr
  404f28:	2d00      	cmp	r5, #0
  404f2a:	bf06      	itte	eq
  404f2c:	4635      	moveq	r5, r6
  404f2e:	3803      	subeq	r0, #3
  404f30:	3807      	subne	r0, #7
  404f32:	f015 0f01 	tst.w	r5, #1
  404f36:	d107      	bne.n	404f48 <memchr+0x98>
  404f38:	3001      	adds	r0, #1
  404f3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404f3e:	bf02      	ittt	eq
  404f40:	3001      	addeq	r0, #1
  404f42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404f46:	3001      	addeq	r0, #1
  404f48:	bcf0      	pop	{r4, r5, r6, r7}
  404f4a:	3801      	subs	r0, #1
  404f4c:	4770      	bx	lr
  404f4e:	bf00      	nop

00404f50 <memmove>:
  404f50:	4288      	cmp	r0, r1
  404f52:	b5f0      	push	{r4, r5, r6, r7, lr}
  404f54:	d90d      	bls.n	404f72 <memmove+0x22>
  404f56:	188b      	adds	r3, r1, r2
  404f58:	4298      	cmp	r0, r3
  404f5a:	d20a      	bcs.n	404f72 <memmove+0x22>
  404f5c:	1884      	adds	r4, r0, r2
  404f5e:	2a00      	cmp	r2, #0
  404f60:	d051      	beq.n	405006 <memmove+0xb6>
  404f62:	4622      	mov	r2, r4
  404f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404f68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404f6c:	4299      	cmp	r1, r3
  404f6e:	d1f9      	bne.n	404f64 <memmove+0x14>
  404f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404f72:	2a0f      	cmp	r2, #15
  404f74:	d948      	bls.n	405008 <memmove+0xb8>
  404f76:	ea41 0300 	orr.w	r3, r1, r0
  404f7a:	079b      	lsls	r3, r3, #30
  404f7c:	d146      	bne.n	40500c <memmove+0xbc>
  404f7e:	f100 0410 	add.w	r4, r0, #16
  404f82:	f101 0310 	add.w	r3, r1, #16
  404f86:	4615      	mov	r5, r2
  404f88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404f8c:	f844 6c10 	str.w	r6, [r4, #-16]
  404f90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404f94:	f844 6c0c 	str.w	r6, [r4, #-12]
  404f98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404f9c:	f844 6c08 	str.w	r6, [r4, #-8]
  404fa0:	3d10      	subs	r5, #16
  404fa2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404fa6:	f844 6c04 	str.w	r6, [r4, #-4]
  404faa:	2d0f      	cmp	r5, #15
  404fac:	f103 0310 	add.w	r3, r3, #16
  404fb0:	f104 0410 	add.w	r4, r4, #16
  404fb4:	d8e8      	bhi.n	404f88 <memmove+0x38>
  404fb6:	f1a2 0310 	sub.w	r3, r2, #16
  404fba:	f023 030f 	bic.w	r3, r3, #15
  404fbe:	f002 0e0f 	and.w	lr, r2, #15
  404fc2:	3310      	adds	r3, #16
  404fc4:	f1be 0f03 	cmp.w	lr, #3
  404fc8:	4419      	add	r1, r3
  404fca:	4403      	add	r3, r0
  404fcc:	d921      	bls.n	405012 <memmove+0xc2>
  404fce:	1f1e      	subs	r6, r3, #4
  404fd0:	460d      	mov	r5, r1
  404fd2:	4674      	mov	r4, lr
  404fd4:	3c04      	subs	r4, #4
  404fd6:	f855 7b04 	ldr.w	r7, [r5], #4
  404fda:	f846 7f04 	str.w	r7, [r6, #4]!
  404fde:	2c03      	cmp	r4, #3
  404fe0:	d8f8      	bhi.n	404fd4 <memmove+0x84>
  404fe2:	f1ae 0404 	sub.w	r4, lr, #4
  404fe6:	f024 0403 	bic.w	r4, r4, #3
  404fea:	3404      	adds	r4, #4
  404fec:	4421      	add	r1, r4
  404fee:	4423      	add	r3, r4
  404ff0:	f002 0203 	and.w	r2, r2, #3
  404ff4:	b162      	cbz	r2, 405010 <memmove+0xc0>
  404ff6:	3b01      	subs	r3, #1
  404ff8:	440a      	add	r2, r1
  404ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
  404ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
  405002:	428a      	cmp	r2, r1
  405004:	d1f9      	bne.n	404ffa <memmove+0xaa>
  405006:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405008:	4603      	mov	r3, r0
  40500a:	e7f3      	b.n	404ff4 <memmove+0xa4>
  40500c:	4603      	mov	r3, r0
  40500e:	e7f2      	b.n	404ff6 <memmove+0xa6>
  405010:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405012:	4672      	mov	r2, lr
  405014:	e7ee      	b.n	404ff4 <memmove+0xa4>
  405016:	bf00      	nop

00405018 <_realloc_r>:
  405018:	2900      	cmp	r1, #0
  40501a:	f000 8095 	beq.w	405148 <_realloc_r+0x130>
  40501e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405022:	460d      	mov	r5, r1
  405024:	4616      	mov	r6, r2
  405026:	b083      	sub	sp, #12
  405028:	4680      	mov	r8, r0
  40502a:	f106 070b 	add.w	r7, r6, #11
  40502e:	f7fe f953 	bl	4032d8 <__malloc_lock>
  405032:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405036:	2f16      	cmp	r7, #22
  405038:	f02e 0403 	bic.w	r4, lr, #3
  40503c:	f1a5 0908 	sub.w	r9, r5, #8
  405040:	d83c      	bhi.n	4050bc <_realloc_r+0xa4>
  405042:	2210      	movs	r2, #16
  405044:	4617      	mov	r7, r2
  405046:	42be      	cmp	r6, r7
  405048:	d83d      	bhi.n	4050c6 <_realloc_r+0xae>
  40504a:	4294      	cmp	r4, r2
  40504c:	da43      	bge.n	4050d6 <_realloc_r+0xbe>
  40504e:	4bc4      	ldr	r3, [pc, #784]	; (405360 <_realloc_r+0x348>)
  405050:	6899      	ldr	r1, [r3, #8]
  405052:	eb09 0004 	add.w	r0, r9, r4
  405056:	4288      	cmp	r0, r1
  405058:	f000 80b4 	beq.w	4051c4 <_realloc_r+0x1ac>
  40505c:	6843      	ldr	r3, [r0, #4]
  40505e:	f023 0101 	bic.w	r1, r3, #1
  405062:	4401      	add	r1, r0
  405064:	6849      	ldr	r1, [r1, #4]
  405066:	07c9      	lsls	r1, r1, #31
  405068:	d54c      	bpl.n	405104 <_realloc_r+0xec>
  40506a:	f01e 0f01 	tst.w	lr, #1
  40506e:	f000 809b 	beq.w	4051a8 <_realloc_r+0x190>
  405072:	4631      	mov	r1, r6
  405074:	4640      	mov	r0, r8
  405076:	f7fd fd97 	bl	402ba8 <_malloc_r>
  40507a:	4606      	mov	r6, r0
  40507c:	2800      	cmp	r0, #0
  40507e:	d03a      	beq.n	4050f6 <_realloc_r+0xde>
  405080:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405084:	f023 0301 	bic.w	r3, r3, #1
  405088:	444b      	add	r3, r9
  40508a:	f1a0 0208 	sub.w	r2, r0, #8
  40508e:	429a      	cmp	r2, r3
  405090:	f000 8121 	beq.w	4052d6 <_realloc_r+0x2be>
  405094:	1f22      	subs	r2, r4, #4
  405096:	2a24      	cmp	r2, #36	; 0x24
  405098:	f200 8107 	bhi.w	4052aa <_realloc_r+0x292>
  40509c:	2a13      	cmp	r2, #19
  40509e:	f200 80db 	bhi.w	405258 <_realloc_r+0x240>
  4050a2:	4603      	mov	r3, r0
  4050a4:	462a      	mov	r2, r5
  4050a6:	6811      	ldr	r1, [r2, #0]
  4050a8:	6019      	str	r1, [r3, #0]
  4050aa:	6851      	ldr	r1, [r2, #4]
  4050ac:	6059      	str	r1, [r3, #4]
  4050ae:	6892      	ldr	r2, [r2, #8]
  4050b0:	609a      	str	r2, [r3, #8]
  4050b2:	4629      	mov	r1, r5
  4050b4:	4640      	mov	r0, r8
  4050b6:	f7ff fbcd 	bl	404854 <_free_r>
  4050ba:	e01c      	b.n	4050f6 <_realloc_r+0xde>
  4050bc:	f027 0707 	bic.w	r7, r7, #7
  4050c0:	2f00      	cmp	r7, #0
  4050c2:	463a      	mov	r2, r7
  4050c4:	dabf      	bge.n	405046 <_realloc_r+0x2e>
  4050c6:	2600      	movs	r6, #0
  4050c8:	230c      	movs	r3, #12
  4050ca:	4630      	mov	r0, r6
  4050cc:	f8c8 3000 	str.w	r3, [r8]
  4050d0:	b003      	add	sp, #12
  4050d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050d6:	462e      	mov	r6, r5
  4050d8:	1be3      	subs	r3, r4, r7
  4050da:	2b0f      	cmp	r3, #15
  4050dc:	d81e      	bhi.n	40511c <_realloc_r+0x104>
  4050de:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4050e2:	f003 0301 	and.w	r3, r3, #1
  4050e6:	4323      	orrs	r3, r4
  4050e8:	444c      	add	r4, r9
  4050ea:	f8c9 3004 	str.w	r3, [r9, #4]
  4050ee:	6863      	ldr	r3, [r4, #4]
  4050f0:	f043 0301 	orr.w	r3, r3, #1
  4050f4:	6063      	str	r3, [r4, #4]
  4050f6:	4640      	mov	r0, r8
  4050f8:	f7fe f8f4 	bl	4032e4 <__malloc_unlock>
  4050fc:	4630      	mov	r0, r6
  4050fe:	b003      	add	sp, #12
  405100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405104:	f023 0303 	bic.w	r3, r3, #3
  405108:	18e1      	adds	r1, r4, r3
  40510a:	4291      	cmp	r1, r2
  40510c:	db1f      	blt.n	40514e <_realloc_r+0x136>
  40510e:	68c3      	ldr	r3, [r0, #12]
  405110:	6882      	ldr	r2, [r0, #8]
  405112:	462e      	mov	r6, r5
  405114:	60d3      	str	r3, [r2, #12]
  405116:	460c      	mov	r4, r1
  405118:	609a      	str	r2, [r3, #8]
  40511a:	e7dd      	b.n	4050d8 <_realloc_r+0xc0>
  40511c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405120:	eb09 0107 	add.w	r1, r9, r7
  405124:	f002 0201 	and.w	r2, r2, #1
  405128:	444c      	add	r4, r9
  40512a:	f043 0301 	orr.w	r3, r3, #1
  40512e:	4317      	orrs	r7, r2
  405130:	f8c9 7004 	str.w	r7, [r9, #4]
  405134:	604b      	str	r3, [r1, #4]
  405136:	6863      	ldr	r3, [r4, #4]
  405138:	f043 0301 	orr.w	r3, r3, #1
  40513c:	3108      	adds	r1, #8
  40513e:	6063      	str	r3, [r4, #4]
  405140:	4640      	mov	r0, r8
  405142:	f7ff fb87 	bl	404854 <_free_r>
  405146:	e7d6      	b.n	4050f6 <_realloc_r+0xde>
  405148:	4611      	mov	r1, r2
  40514a:	f7fd bd2d 	b.w	402ba8 <_malloc_r>
  40514e:	f01e 0f01 	tst.w	lr, #1
  405152:	d18e      	bne.n	405072 <_realloc_r+0x5a>
  405154:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405158:	eba9 0a01 	sub.w	sl, r9, r1
  40515c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405160:	f021 0103 	bic.w	r1, r1, #3
  405164:	440b      	add	r3, r1
  405166:	4423      	add	r3, r4
  405168:	4293      	cmp	r3, r2
  40516a:	db25      	blt.n	4051b8 <_realloc_r+0x1a0>
  40516c:	68c2      	ldr	r2, [r0, #12]
  40516e:	6881      	ldr	r1, [r0, #8]
  405170:	4656      	mov	r6, sl
  405172:	60ca      	str	r2, [r1, #12]
  405174:	6091      	str	r1, [r2, #8]
  405176:	f8da 100c 	ldr.w	r1, [sl, #12]
  40517a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40517e:	1f22      	subs	r2, r4, #4
  405180:	2a24      	cmp	r2, #36	; 0x24
  405182:	60c1      	str	r1, [r0, #12]
  405184:	6088      	str	r0, [r1, #8]
  405186:	f200 8094 	bhi.w	4052b2 <_realloc_r+0x29a>
  40518a:	2a13      	cmp	r2, #19
  40518c:	d96f      	bls.n	40526e <_realloc_r+0x256>
  40518e:	6829      	ldr	r1, [r5, #0]
  405190:	f8ca 1008 	str.w	r1, [sl, #8]
  405194:	6869      	ldr	r1, [r5, #4]
  405196:	f8ca 100c 	str.w	r1, [sl, #12]
  40519a:	2a1b      	cmp	r2, #27
  40519c:	f200 80a2 	bhi.w	4052e4 <_realloc_r+0x2cc>
  4051a0:	3508      	adds	r5, #8
  4051a2:	f10a 0210 	add.w	r2, sl, #16
  4051a6:	e063      	b.n	405270 <_realloc_r+0x258>
  4051a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4051ac:	eba9 0a03 	sub.w	sl, r9, r3
  4051b0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4051b4:	f021 0103 	bic.w	r1, r1, #3
  4051b8:	1863      	adds	r3, r4, r1
  4051ba:	4293      	cmp	r3, r2
  4051bc:	f6ff af59 	blt.w	405072 <_realloc_r+0x5a>
  4051c0:	4656      	mov	r6, sl
  4051c2:	e7d8      	b.n	405176 <_realloc_r+0x15e>
  4051c4:	6841      	ldr	r1, [r0, #4]
  4051c6:	f021 0b03 	bic.w	fp, r1, #3
  4051ca:	44a3      	add	fp, r4
  4051cc:	f107 0010 	add.w	r0, r7, #16
  4051d0:	4583      	cmp	fp, r0
  4051d2:	da56      	bge.n	405282 <_realloc_r+0x26a>
  4051d4:	f01e 0f01 	tst.w	lr, #1
  4051d8:	f47f af4b 	bne.w	405072 <_realloc_r+0x5a>
  4051dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4051e0:	eba9 0a01 	sub.w	sl, r9, r1
  4051e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4051e8:	f021 0103 	bic.w	r1, r1, #3
  4051ec:	448b      	add	fp, r1
  4051ee:	4558      	cmp	r0, fp
  4051f0:	dce2      	bgt.n	4051b8 <_realloc_r+0x1a0>
  4051f2:	4656      	mov	r6, sl
  4051f4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4051f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4051fc:	1f22      	subs	r2, r4, #4
  4051fe:	2a24      	cmp	r2, #36	; 0x24
  405200:	60c1      	str	r1, [r0, #12]
  405202:	6088      	str	r0, [r1, #8]
  405204:	f200 808f 	bhi.w	405326 <_realloc_r+0x30e>
  405208:	2a13      	cmp	r2, #19
  40520a:	f240 808a 	bls.w	405322 <_realloc_r+0x30a>
  40520e:	6829      	ldr	r1, [r5, #0]
  405210:	f8ca 1008 	str.w	r1, [sl, #8]
  405214:	6869      	ldr	r1, [r5, #4]
  405216:	f8ca 100c 	str.w	r1, [sl, #12]
  40521a:	2a1b      	cmp	r2, #27
  40521c:	f200 808a 	bhi.w	405334 <_realloc_r+0x31c>
  405220:	3508      	adds	r5, #8
  405222:	f10a 0210 	add.w	r2, sl, #16
  405226:	6829      	ldr	r1, [r5, #0]
  405228:	6011      	str	r1, [r2, #0]
  40522a:	6869      	ldr	r1, [r5, #4]
  40522c:	6051      	str	r1, [r2, #4]
  40522e:	68a9      	ldr	r1, [r5, #8]
  405230:	6091      	str	r1, [r2, #8]
  405232:	eb0a 0107 	add.w	r1, sl, r7
  405236:	ebab 0207 	sub.w	r2, fp, r7
  40523a:	f042 0201 	orr.w	r2, r2, #1
  40523e:	6099      	str	r1, [r3, #8]
  405240:	604a      	str	r2, [r1, #4]
  405242:	f8da 3004 	ldr.w	r3, [sl, #4]
  405246:	f003 0301 	and.w	r3, r3, #1
  40524a:	431f      	orrs	r7, r3
  40524c:	4640      	mov	r0, r8
  40524e:	f8ca 7004 	str.w	r7, [sl, #4]
  405252:	f7fe f847 	bl	4032e4 <__malloc_unlock>
  405256:	e751      	b.n	4050fc <_realloc_r+0xe4>
  405258:	682b      	ldr	r3, [r5, #0]
  40525a:	6003      	str	r3, [r0, #0]
  40525c:	686b      	ldr	r3, [r5, #4]
  40525e:	6043      	str	r3, [r0, #4]
  405260:	2a1b      	cmp	r2, #27
  405262:	d82d      	bhi.n	4052c0 <_realloc_r+0x2a8>
  405264:	f100 0308 	add.w	r3, r0, #8
  405268:	f105 0208 	add.w	r2, r5, #8
  40526c:	e71b      	b.n	4050a6 <_realloc_r+0x8e>
  40526e:	4632      	mov	r2, r6
  405270:	6829      	ldr	r1, [r5, #0]
  405272:	6011      	str	r1, [r2, #0]
  405274:	6869      	ldr	r1, [r5, #4]
  405276:	6051      	str	r1, [r2, #4]
  405278:	68a9      	ldr	r1, [r5, #8]
  40527a:	6091      	str	r1, [r2, #8]
  40527c:	461c      	mov	r4, r3
  40527e:	46d1      	mov	r9, sl
  405280:	e72a      	b.n	4050d8 <_realloc_r+0xc0>
  405282:	eb09 0107 	add.w	r1, r9, r7
  405286:	ebab 0b07 	sub.w	fp, fp, r7
  40528a:	f04b 0201 	orr.w	r2, fp, #1
  40528e:	6099      	str	r1, [r3, #8]
  405290:	604a      	str	r2, [r1, #4]
  405292:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405296:	f003 0301 	and.w	r3, r3, #1
  40529a:	431f      	orrs	r7, r3
  40529c:	4640      	mov	r0, r8
  40529e:	f845 7c04 	str.w	r7, [r5, #-4]
  4052a2:	f7fe f81f 	bl	4032e4 <__malloc_unlock>
  4052a6:	462e      	mov	r6, r5
  4052a8:	e728      	b.n	4050fc <_realloc_r+0xe4>
  4052aa:	4629      	mov	r1, r5
  4052ac:	f7ff fe50 	bl	404f50 <memmove>
  4052b0:	e6ff      	b.n	4050b2 <_realloc_r+0x9a>
  4052b2:	4629      	mov	r1, r5
  4052b4:	4630      	mov	r0, r6
  4052b6:	461c      	mov	r4, r3
  4052b8:	46d1      	mov	r9, sl
  4052ba:	f7ff fe49 	bl	404f50 <memmove>
  4052be:	e70b      	b.n	4050d8 <_realloc_r+0xc0>
  4052c0:	68ab      	ldr	r3, [r5, #8]
  4052c2:	6083      	str	r3, [r0, #8]
  4052c4:	68eb      	ldr	r3, [r5, #12]
  4052c6:	60c3      	str	r3, [r0, #12]
  4052c8:	2a24      	cmp	r2, #36	; 0x24
  4052ca:	d017      	beq.n	4052fc <_realloc_r+0x2e4>
  4052cc:	f100 0310 	add.w	r3, r0, #16
  4052d0:	f105 0210 	add.w	r2, r5, #16
  4052d4:	e6e7      	b.n	4050a6 <_realloc_r+0x8e>
  4052d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4052da:	f023 0303 	bic.w	r3, r3, #3
  4052de:	441c      	add	r4, r3
  4052e0:	462e      	mov	r6, r5
  4052e2:	e6f9      	b.n	4050d8 <_realloc_r+0xc0>
  4052e4:	68a9      	ldr	r1, [r5, #8]
  4052e6:	f8ca 1010 	str.w	r1, [sl, #16]
  4052ea:	68e9      	ldr	r1, [r5, #12]
  4052ec:	f8ca 1014 	str.w	r1, [sl, #20]
  4052f0:	2a24      	cmp	r2, #36	; 0x24
  4052f2:	d00c      	beq.n	40530e <_realloc_r+0x2f6>
  4052f4:	3510      	adds	r5, #16
  4052f6:	f10a 0218 	add.w	r2, sl, #24
  4052fa:	e7b9      	b.n	405270 <_realloc_r+0x258>
  4052fc:	692b      	ldr	r3, [r5, #16]
  4052fe:	6103      	str	r3, [r0, #16]
  405300:	696b      	ldr	r3, [r5, #20]
  405302:	6143      	str	r3, [r0, #20]
  405304:	f105 0218 	add.w	r2, r5, #24
  405308:	f100 0318 	add.w	r3, r0, #24
  40530c:	e6cb      	b.n	4050a6 <_realloc_r+0x8e>
  40530e:	692a      	ldr	r2, [r5, #16]
  405310:	f8ca 2018 	str.w	r2, [sl, #24]
  405314:	696a      	ldr	r2, [r5, #20]
  405316:	f8ca 201c 	str.w	r2, [sl, #28]
  40531a:	3518      	adds	r5, #24
  40531c:	f10a 0220 	add.w	r2, sl, #32
  405320:	e7a6      	b.n	405270 <_realloc_r+0x258>
  405322:	4632      	mov	r2, r6
  405324:	e77f      	b.n	405226 <_realloc_r+0x20e>
  405326:	4629      	mov	r1, r5
  405328:	4630      	mov	r0, r6
  40532a:	9301      	str	r3, [sp, #4]
  40532c:	f7ff fe10 	bl	404f50 <memmove>
  405330:	9b01      	ldr	r3, [sp, #4]
  405332:	e77e      	b.n	405232 <_realloc_r+0x21a>
  405334:	68a9      	ldr	r1, [r5, #8]
  405336:	f8ca 1010 	str.w	r1, [sl, #16]
  40533a:	68e9      	ldr	r1, [r5, #12]
  40533c:	f8ca 1014 	str.w	r1, [sl, #20]
  405340:	2a24      	cmp	r2, #36	; 0x24
  405342:	d003      	beq.n	40534c <_realloc_r+0x334>
  405344:	3510      	adds	r5, #16
  405346:	f10a 0218 	add.w	r2, sl, #24
  40534a:	e76c      	b.n	405226 <_realloc_r+0x20e>
  40534c:	692a      	ldr	r2, [r5, #16]
  40534e:	f8ca 2018 	str.w	r2, [sl, #24]
  405352:	696a      	ldr	r2, [r5, #20]
  405354:	f8ca 201c 	str.w	r2, [sl, #28]
  405358:	3518      	adds	r5, #24
  40535a:	f10a 0220 	add.w	r2, sl, #32
  40535e:	e762      	b.n	405226 <_realloc_r+0x20e>
  405360:	20400438 	.word	0x20400438

00405364 <__sread>:
  405364:	b510      	push	{r4, lr}
  405366:	460c      	mov	r4, r1
  405368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40536c:	f000 f9f6 	bl	40575c <_read_r>
  405370:	2800      	cmp	r0, #0
  405372:	db03      	blt.n	40537c <__sread+0x18>
  405374:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405376:	4403      	add	r3, r0
  405378:	6523      	str	r3, [r4, #80]	; 0x50
  40537a:	bd10      	pop	{r4, pc}
  40537c:	89a3      	ldrh	r3, [r4, #12]
  40537e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405382:	81a3      	strh	r3, [r4, #12]
  405384:	bd10      	pop	{r4, pc}
  405386:	bf00      	nop

00405388 <__swrite>:
  405388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40538c:	4616      	mov	r6, r2
  40538e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405392:	461f      	mov	r7, r3
  405394:	05d3      	lsls	r3, r2, #23
  405396:	460c      	mov	r4, r1
  405398:	4605      	mov	r5, r0
  40539a:	d507      	bpl.n	4053ac <__swrite+0x24>
  40539c:	2200      	movs	r2, #0
  40539e:	2302      	movs	r3, #2
  4053a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4053a4:	f000 f9c4 	bl	405730 <_lseek_r>
  4053a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4053ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4053b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4053b4:	81a2      	strh	r2, [r4, #12]
  4053b6:	463b      	mov	r3, r7
  4053b8:	4632      	mov	r2, r6
  4053ba:	4628      	mov	r0, r5
  4053bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4053c0:	f000 b8a4 	b.w	40550c <_write_r>

004053c4 <__sseek>:
  4053c4:	b510      	push	{r4, lr}
  4053c6:	460c      	mov	r4, r1
  4053c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4053cc:	f000 f9b0 	bl	405730 <_lseek_r>
  4053d0:	89a3      	ldrh	r3, [r4, #12]
  4053d2:	1c42      	adds	r2, r0, #1
  4053d4:	bf0e      	itee	eq
  4053d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4053da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4053de:	6520      	strne	r0, [r4, #80]	; 0x50
  4053e0:	81a3      	strh	r3, [r4, #12]
  4053e2:	bd10      	pop	{r4, pc}

004053e4 <__sclose>:
  4053e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4053e8:	f000 b908 	b.w	4055fc <_close_r>

004053ec <__swbuf_r>:
  4053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4053ee:	460d      	mov	r5, r1
  4053f0:	4614      	mov	r4, r2
  4053f2:	4606      	mov	r6, r0
  4053f4:	b110      	cbz	r0, 4053fc <__swbuf_r+0x10>
  4053f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4053f8:	2b00      	cmp	r3, #0
  4053fa:	d04b      	beq.n	405494 <__swbuf_r+0xa8>
  4053fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405400:	69a3      	ldr	r3, [r4, #24]
  405402:	60a3      	str	r3, [r4, #8]
  405404:	b291      	uxth	r1, r2
  405406:	0708      	lsls	r0, r1, #28
  405408:	d539      	bpl.n	40547e <__swbuf_r+0x92>
  40540a:	6923      	ldr	r3, [r4, #16]
  40540c:	2b00      	cmp	r3, #0
  40540e:	d036      	beq.n	40547e <__swbuf_r+0x92>
  405410:	b2ed      	uxtb	r5, r5
  405412:	0489      	lsls	r1, r1, #18
  405414:	462f      	mov	r7, r5
  405416:	d515      	bpl.n	405444 <__swbuf_r+0x58>
  405418:	6822      	ldr	r2, [r4, #0]
  40541a:	6961      	ldr	r1, [r4, #20]
  40541c:	1ad3      	subs	r3, r2, r3
  40541e:	428b      	cmp	r3, r1
  405420:	da1c      	bge.n	40545c <__swbuf_r+0x70>
  405422:	3301      	adds	r3, #1
  405424:	68a1      	ldr	r1, [r4, #8]
  405426:	1c50      	adds	r0, r2, #1
  405428:	3901      	subs	r1, #1
  40542a:	60a1      	str	r1, [r4, #8]
  40542c:	6020      	str	r0, [r4, #0]
  40542e:	7015      	strb	r5, [r2, #0]
  405430:	6962      	ldr	r2, [r4, #20]
  405432:	429a      	cmp	r2, r3
  405434:	d01a      	beq.n	40546c <__swbuf_r+0x80>
  405436:	89a3      	ldrh	r3, [r4, #12]
  405438:	07db      	lsls	r3, r3, #31
  40543a:	d501      	bpl.n	405440 <__swbuf_r+0x54>
  40543c:	2d0a      	cmp	r5, #10
  40543e:	d015      	beq.n	40546c <__swbuf_r+0x80>
  405440:	4638      	mov	r0, r7
  405442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405444:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405446:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40544a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40544e:	81a2      	strh	r2, [r4, #12]
  405450:	6822      	ldr	r2, [r4, #0]
  405452:	6661      	str	r1, [r4, #100]	; 0x64
  405454:	6961      	ldr	r1, [r4, #20]
  405456:	1ad3      	subs	r3, r2, r3
  405458:	428b      	cmp	r3, r1
  40545a:	dbe2      	blt.n	405422 <__swbuf_r+0x36>
  40545c:	4621      	mov	r1, r4
  40545e:	4630      	mov	r0, r6
  405460:	f7ff f87a 	bl	404558 <_fflush_r>
  405464:	b940      	cbnz	r0, 405478 <__swbuf_r+0x8c>
  405466:	6822      	ldr	r2, [r4, #0]
  405468:	2301      	movs	r3, #1
  40546a:	e7db      	b.n	405424 <__swbuf_r+0x38>
  40546c:	4621      	mov	r1, r4
  40546e:	4630      	mov	r0, r6
  405470:	f7ff f872 	bl	404558 <_fflush_r>
  405474:	2800      	cmp	r0, #0
  405476:	d0e3      	beq.n	405440 <__swbuf_r+0x54>
  405478:	f04f 37ff 	mov.w	r7, #4294967295
  40547c:	e7e0      	b.n	405440 <__swbuf_r+0x54>
  40547e:	4621      	mov	r1, r4
  405480:	4630      	mov	r0, r6
  405482:	f7fe ff55 	bl	404330 <__swsetup_r>
  405486:	2800      	cmp	r0, #0
  405488:	d1f6      	bne.n	405478 <__swbuf_r+0x8c>
  40548a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40548e:	6923      	ldr	r3, [r4, #16]
  405490:	b291      	uxth	r1, r2
  405492:	e7bd      	b.n	405410 <__swbuf_r+0x24>
  405494:	f7ff f8b8 	bl	404608 <__sinit>
  405498:	e7b0      	b.n	4053fc <__swbuf_r+0x10>
  40549a:	bf00      	nop

0040549c <_wcrtomb_r>:
  40549c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40549e:	4606      	mov	r6, r0
  4054a0:	b085      	sub	sp, #20
  4054a2:	461f      	mov	r7, r3
  4054a4:	b189      	cbz	r1, 4054ca <_wcrtomb_r+0x2e>
  4054a6:	4c10      	ldr	r4, [pc, #64]	; (4054e8 <_wcrtomb_r+0x4c>)
  4054a8:	4d10      	ldr	r5, [pc, #64]	; (4054ec <_wcrtomb_r+0x50>)
  4054aa:	6824      	ldr	r4, [r4, #0]
  4054ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4054ae:	2c00      	cmp	r4, #0
  4054b0:	bf08      	it	eq
  4054b2:	462c      	moveq	r4, r5
  4054b4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4054b8:	47a0      	blx	r4
  4054ba:	1c43      	adds	r3, r0, #1
  4054bc:	d103      	bne.n	4054c6 <_wcrtomb_r+0x2a>
  4054be:	2200      	movs	r2, #0
  4054c0:	238a      	movs	r3, #138	; 0x8a
  4054c2:	603a      	str	r2, [r7, #0]
  4054c4:	6033      	str	r3, [r6, #0]
  4054c6:	b005      	add	sp, #20
  4054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4054ca:	460c      	mov	r4, r1
  4054cc:	4906      	ldr	r1, [pc, #24]	; (4054e8 <_wcrtomb_r+0x4c>)
  4054ce:	4a07      	ldr	r2, [pc, #28]	; (4054ec <_wcrtomb_r+0x50>)
  4054d0:	6809      	ldr	r1, [r1, #0]
  4054d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4054d4:	2900      	cmp	r1, #0
  4054d6:	bf08      	it	eq
  4054d8:	4611      	moveq	r1, r2
  4054da:	4622      	mov	r2, r4
  4054dc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4054e0:	a901      	add	r1, sp, #4
  4054e2:	47a0      	blx	r4
  4054e4:	e7e9      	b.n	4054ba <_wcrtomb_r+0x1e>
  4054e6:	bf00      	nop
  4054e8:	2040000c 	.word	0x2040000c
  4054ec:	2040084c 	.word	0x2040084c

004054f0 <__ascii_wctomb>:
  4054f0:	b121      	cbz	r1, 4054fc <__ascii_wctomb+0xc>
  4054f2:	2aff      	cmp	r2, #255	; 0xff
  4054f4:	d804      	bhi.n	405500 <__ascii_wctomb+0x10>
  4054f6:	700a      	strb	r2, [r1, #0]
  4054f8:	2001      	movs	r0, #1
  4054fa:	4770      	bx	lr
  4054fc:	4608      	mov	r0, r1
  4054fe:	4770      	bx	lr
  405500:	238a      	movs	r3, #138	; 0x8a
  405502:	6003      	str	r3, [r0, #0]
  405504:	f04f 30ff 	mov.w	r0, #4294967295
  405508:	4770      	bx	lr
  40550a:	bf00      	nop

0040550c <_write_r>:
  40550c:	b570      	push	{r4, r5, r6, lr}
  40550e:	460d      	mov	r5, r1
  405510:	4c08      	ldr	r4, [pc, #32]	; (405534 <_write_r+0x28>)
  405512:	4611      	mov	r1, r2
  405514:	4606      	mov	r6, r0
  405516:	461a      	mov	r2, r3
  405518:	4628      	mov	r0, r5
  40551a:	2300      	movs	r3, #0
  40551c:	6023      	str	r3, [r4, #0]
  40551e:	f7fa feb1 	bl	400284 <_write>
  405522:	1c43      	adds	r3, r0, #1
  405524:	d000      	beq.n	405528 <_write_r+0x1c>
  405526:	bd70      	pop	{r4, r5, r6, pc}
  405528:	6823      	ldr	r3, [r4, #0]
  40552a:	2b00      	cmp	r3, #0
  40552c:	d0fb      	beq.n	405526 <_write_r+0x1a>
  40552e:	6033      	str	r3, [r6, #0]
  405530:	bd70      	pop	{r4, r5, r6, pc}
  405532:	bf00      	nop
  405534:	20400c38 	.word	0x20400c38

00405538 <__register_exitproc>:
  405538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40553c:	4d2c      	ldr	r5, [pc, #176]	; (4055f0 <__register_exitproc+0xb8>)
  40553e:	4606      	mov	r6, r0
  405540:	6828      	ldr	r0, [r5, #0]
  405542:	4698      	mov	r8, r3
  405544:	460f      	mov	r7, r1
  405546:	4691      	mov	r9, r2
  405548:	f7ff fc1e 	bl	404d88 <__retarget_lock_acquire_recursive>
  40554c:	4b29      	ldr	r3, [pc, #164]	; (4055f4 <__register_exitproc+0xbc>)
  40554e:	681c      	ldr	r4, [r3, #0]
  405550:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405554:	2b00      	cmp	r3, #0
  405556:	d03e      	beq.n	4055d6 <__register_exitproc+0x9e>
  405558:	685a      	ldr	r2, [r3, #4]
  40555a:	2a1f      	cmp	r2, #31
  40555c:	dc1c      	bgt.n	405598 <__register_exitproc+0x60>
  40555e:	f102 0e01 	add.w	lr, r2, #1
  405562:	b176      	cbz	r6, 405582 <__register_exitproc+0x4a>
  405564:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405568:	2401      	movs	r4, #1
  40556a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40556e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405572:	4094      	lsls	r4, r2
  405574:	4320      	orrs	r0, r4
  405576:	2e02      	cmp	r6, #2
  405578:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40557c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405580:	d023      	beq.n	4055ca <__register_exitproc+0x92>
  405582:	3202      	adds	r2, #2
  405584:	f8c3 e004 	str.w	lr, [r3, #4]
  405588:	6828      	ldr	r0, [r5, #0]
  40558a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40558e:	f7ff fbfd 	bl	404d8c <__retarget_lock_release_recursive>
  405592:	2000      	movs	r0, #0
  405594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405598:	4b17      	ldr	r3, [pc, #92]	; (4055f8 <__register_exitproc+0xc0>)
  40559a:	b30b      	cbz	r3, 4055e0 <__register_exitproc+0xa8>
  40559c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4055a0:	f7fd faf2 	bl	402b88 <malloc>
  4055a4:	4603      	mov	r3, r0
  4055a6:	b1d8      	cbz	r0, 4055e0 <__register_exitproc+0xa8>
  4055a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4055ac:	6002      	str	r2, [r0, #0]
  4055ae:	2100      	movs	r1, #0
  4055b0:	6041      	str	r1, [r0, #4]
  4055b2:	460a      	mov	r2, r1
  4055b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4055b8:	f04f 0e01 	mov.w	lr, #1
  4055bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4055c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4055c4:	2e00      	cmp	r6, #0
  4055c6:	d0dc      	beq.n	405582 <__register_exitproc+0x4a>
  4055c8:	e7cc      	b.n	405564 <__register_exitproc+0x2c>
  4055ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4055ce:	430c      	orrs	r4, r1
  4055d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4055d4:	e7d5      	b.n	405582 <__register_exitproc+0x4a>
  4055d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4055da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4055de:	e7bb      	b.n	405558 <__register_exitproc+0x20>
  4055e0:	6828      	ldr	r0, [r5, #0]
  4055e2:	f7ff fbd3 	bl	404d8c <__retarget_lock_release_recursive>
  4055e6:	f04f 30ff 	mov.w	r0, #4294967295
  4055ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4055ee:	bf00      	nop
  4055f0:	20400848 	.word	0x20400848
  4055f4:	00405b8c 	.word	0x00405b8c
  4055f8:	00402b89 	.word	0x00402b89

004055fc <_close_r>:
  4055fc:	b538      	push	{r3, r4, r5, lr}
  4055fe:	4c07      	ldr	r4, [pc, #28]	; (40561c <_close_r+0x20>)
  405600:	2300      	movs	r3, #0
  405602:	4605      	mov	r5, r0
  405604:	4608      	mov	r0, r1
  405606:	6023      	str	r3, [r4, #0]
  405608:	f7fb fa60 	bl	400acc <_close>
  40560c:	1c43      	adds	r3, r0, #1
  40560e:	d000      	beq.n	405612 <_close_r+0x16>
  405610:	bd38      	pop	{r3, r4, r5, pc}
  405612:	6823      	ldr	r3, [r4, #0]
  405614:	2b00      	cmp	r3, #0
  405616:	d0fb      	beq.n	405610 <_close_r+0x14>
  405618:	602b      	str	r3, [r5, #0]
  40561a:	bd38      	pop	{r3, r4, r5, pc}
  40561c:	20400c38 	.word	0x20400c38

00405620 <_fclose_r>:
  405620:	b570      	push	{r4, r5, r6, lr}
  405622:	b159      	cbz	r1, 40563c <_fclose_r+0x1c>
  405624:	4605      	mov	r5, r0
  405626:	460c      	mov	r4, r1
  405628:	b110      	cbz	r0, 405630 <_fclose_r+0x10>
  40562a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40562c:	2b00      	cmp	r3, #0
  40562e:	d03c      	beq.n	4056aa <_fclose_r+0x8a>
  405630:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405632:	07d8      	lsls	r0, r3, #31
  405634:	d505      	bpl.n	405642 <_fclose_r+0x22>
  405636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40563a:	b92b      	cbnz	r3, 405648 <_fclose_r+0x28>
  40563c:	2600      	movs	r6, #0
  40563e:	4630      	mov	r0, r6
  405640:	bd70      	pop	{r4, r5, r6, pc}
  405642:	89a3      	ldrh	r3, [r4, #12]
  405644:	0599      	lsls	r1, r3, #22
  405646:	d53c      	bpl.n	4056c2 <_fclose_r+0xa2>
  405648:	4621      	mov	r1, r4
  40564a:	4628      	mov	r0, r5
  40564c:	f7fe fee4 	bl	404418 <__sflush_r>
  405650:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405652:	4606      	mov	r6, r0
  405654:	b133      	cbz	r3, 405664 <_fclose_r+0x44>
  405656:	69e1      	ldr	r1, [r4, #28]
  405658:	4628      	mov	r0, r5
  40565a:	4798      	blx	r3
  40565c:	2800      	cmp	r0, #0
  40565e:	bfb8      	it	lt
  405660:	f04f 36ff 	movlt.w	r6, #4294967295
  405664:	89a3      	ldrh	r3, [r4, #12]
  405666:	061a      	lsls	r2, r3, #24
  405668:	d422      	bmi.n	4056b0 <_fclose_r+0x90>
  40566a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40566c:	b141      	cbz	r1, 405680 <_fclose_r+0x60>
  40566e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405672:	4299      	cmp	r1, r3
  405674:	d002      	beq.n	40567c <_fclose_r+0x5c>
  405676:	4628      	mov	r0, r5
  405678:	f7ff f8ec 	bl	404854 <_free_r>
  40567c:	2300      	movs	r3, #0
  40567e:	6323      	str	r3, [r4, #48]	; 0x30
  405680:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405682:	b121      	cbz	r1, 40568e <_fclose_r+0x6e>
  405684:	4628      	mov	r0, r5
  405686:	f7ff f8e5 	bl	404854 <_free_r>
  40568a:	2300      	movs	r3, #0
  40568c:	6463      	str	r3, [r4, #68]	; 0x44
  40568e:	f7fe ffe7 	bl	404660 <__sfp_lock_acquire>
  405692:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405694:	2200      	movs	r2, #0
  405696:	07db      	lsls	r3, r3, #31
  405698:	81a2      	strh	r2, [r4, #12]
  40569a:	d50e      	bpl.n	4056ba <_fclose_r+0x9a>
  40569c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40569e:	f7ff fb71 	bl	404d84 <__retarget_lock_close_recursive>
  4056a2:	f7fe ffe3 	bl	40466c <__sfp_lock_release>
  4056a6:	4630      	mov	r0, r6
  4056a8:	bd70      	pop	{r4, r5, r6, pc}
  4056aa:	f7fe ffad 	bl	404608 <__sinit>
  4056ae:	e7bf      	b.n	405630 <_fclose_r+0x10>
  4056b0:	6921      	ldr	r1, [r4, #16]
  4056b2:	4628      	mov	r0, r5
  4056b4:	f7ff f8ce 	bl	404854 <_free_r>
  4056b8:	e7d7      	b.n	40566a <_fclose_r+0x4a>
  4056ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4056bc:	f7ff fb66 	bl	404d8c <__retarget_lock_release_recursive>
  4056c0:	e7ec      	b.n	40569c <_fclose_r+0x7c>
  4056c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4056c4:	f7ff fb60 	bl	404d88 <__retarget_lock_acquire_recursive>
  4056c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056cc:	2b00      	cmp	r3, #0
  4056ce:	d1bb      	bne.n	405648 <_fclose_r+0x28>
  4056d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4056d2:	f016 0601 	ands.w	r6, r6, #1
  4056d6:	d1b1      	bne.n	40563c <_fclose_r+0x1c>
  4056d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4056da:	f7ff fb57 	bl	404d8c <__retarget_lock_release_recursive>
  4056de:	4630      	mov	r0, r6
  4056e0:	bd70      	pop	{r4, r5, r6, pc}
  4056e2:	bf00      	nop

004056e4 <_fstat_r>:
  4056e4:	b538      	push	{r3, r4, r5, lr}
  4056e6:	460b      	mov	r3, r1
  4056e8:	4c07      	ldr	r4, [pc, #28]	; (405708 <_fstat_r+0x24>)
  4056ea:	4605      	mov	r5, r0
  4056ec:	4611      	mov	r1, r2
  4056ee:	4618      	mov	r0, r3
  4056f0:	2300      	movs	r3, #0
  4056f2:	6023      	str	r3, [r4, #0]
  4056f4:	f7fb f9ed 	bl	400ad2 <_fstat>
  4056f8:	1c43      	adds	r3, r0, #1
  4056fa:	d000      	beq.n	4056fe <_fstat_r+0x1a>
  4056fc:	bd38      	pop	{r3, r4, r5, pc}
  4056fe:	6823      	ldr	r3, [r4, #0]
  405700:	2b00      	cmp	r3, #0
  405702:	d0fb      	beq.n	4056fc <_fstat_r+0x18>
  405704:	602b      	str	r3, [r5, #0]
  405706:	bd38      	pop	{r3, r4, r5, pc}
  405708:	20400c38 	.word	0x20400c38

0040570c <_isatty_r>:
  40570c:	b538      	push	{r3, r4, r5, lr}
  40570e:	4c07      	ldr	r4, [pc, #28]	; (40572c <_isatty_r+0x20>)
  405710:	2300      	movs	r3, #0
  405712:	4605      	mov	r5, r0
  405714:	4608      	mov	r0, r1
  405716:	6023      	str	r3, [r4, #0]
  405718:	f7fb f9e0 	bl	400adc <_isatty>
  40571c:	1c43      	adds	r3, r0, #1
  40571e:	d000      	beq.n	405722 <_isatty_r+0x16>
  405720:	bd38      	pop	{r3, r4, r5, pc}
  405722:	6823      	ldr	r3, [r4, #0]
  405724:	2b00      	cmp	r3, #0
  405726:	d0fb      	beq.n	405720 <_isatty_r+0x14>
  405728:	602b      	str	r3, [r5, #0]
  40572a:	bd38      	pop	{r3, r4, r5, pc}
  40572c:	20400c38 	.word	0x20400c38

00405730 <_lseek_r>:
  405730:	b570      	push	{r4, r5, r6, lr}
  405732:	460d      	mov	r5, r1
  405734:	4c08      	ldr	r4, [pc, #32]	; (405758 <_lseek_r+0x28>)
  405736:	4611      	mov	r1, r2
  405738:	4606      	mov	r6, r0
  40573a:	461a      	mov	r2, r3
  40573c:	4628      	mov	r0, r5
  40573e:	2300      	movs	r3, #0
  405740:	6023      	str	r3, [r4, #0]
  405742:	f7fb f9cd 	bl	400ae0 <_lseek>
  405746:	1c43      	adds	r3, r0, #1
  405748:	d000      	beq.n	40574c <_lseek_r+0x1c>
  40574a:	bd70      	pop	{r4, r5, r6, pc}
  40574c:	6823      	ldr	r3, [r4, #0]
  40574e:	2b00      	cmp	r3, #0
  405750:	d0fb      	beq.n	40574a <_lseek_r+0x1a>
  405752:	6033      	str	r3, [r6, #0]
  405754:	bd70      	pop	{r4, r5, r6, pc}
  405756:	bf00      	nop
  405758:	20400c38 	.word	0x20400c38

0040575c <_read_r>:
  40575c:	b570      	push	{r4, r5, r6, lr}
  40575e:	460d      	mov	r5, r1
  405760:	4c08      	ldr	r4, [pc, #32]	; (405784 <_read_r+0x28>)
  405762:	4611      	mov	r1, r2
  405764:	4606      	mov	r6, r0
  405766:	461a      	mov	r2, r3
  405768:	4628      	mov	r0, r5
  40576a:	2300      	movs	r3, #0
  40576c:	6023      	str	r3, [r4, #0]
  40576e:	f7fa fd6b 	bl	400248 <_read>
  405772:	1c43      	adds	r3, r0, #1
  405774:	d000      	beq.n	405778 <_read_r+0x1c>
  405776:	bd70      	pop	{r4, r5, r6, pc}
  405778:	6823      	ldr	r3, [r4, #0]
  40577a:	2b00      	cmp	r3, #0
  40577c:	d0fb      	beq.n	405776 <_read_r+0x1a>
  40577e:	6033      	str	r3, [r6, #0]
  405780:	bd70      	pop	{r4, r5, r6, pc}
  405782:	bf00      	nop
  405784:	20400c38 	.word	0x20400c38

00405788 <__aeabi_uldivmod>:
  405788:	b953      	cbnz	r3, 4057a0 <__aeabi_uldivmod+0x18>
  40578a:	b94a      	cbnz	r2, 4057a0 <__aeabi_uldivmod+0x18>
  40578c:	2900      	cmp	r1, #0
  40578e:	bf08      	it	eq
  405790:	2800      	cmpeq	r0, #0
  405792:	bf1c      	itt	ne
  405794:	f04f 31ff 	movne.w	r1, #4294967295
  405798:	f04f 30ff 	movne.w	r0, #4294967295
  40579c:	f000 b97a 	b.w	405a94 <__aeabi_idiv0>
  4057a0:	f1ad 0c08 	sub.w	ip, sp, #8
  4057a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4057a8:	f000 f806 	bl	4057b8 <__udivmoddi4>
  4057ac:	f8dd e004 	ldr.w	lr, [sp, #4]
  4057b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4057b4:	b004      	add	sp, #16
  4057b6:	4770      	bx	lr

004057b8 <__udivmoddi4>:
  4057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4057bc:	468c      	mov	ip, r1
  4057be:	460d      	mov	r5, r1
  4057c0:	4604      	mov	r4, r0
  4057c2:	9e08      	ldr	r6, [sp, #32]
  4057c4:	2b00      	cmp	r3, #0
  4057c6:	d151      	bne.n	40586c <__udivmoddi4+0xb4>
  4057c8:	428a      	cmp	r2, r1
  4057ca:	4617      	mov	r7, r2
  4057cc:	d96d      	bls.n	4058aa <__udivmoddi4+0xf2>
  4057ce:	fab2 fe82 	clz	lr, r2
  4057d2:	f1be 0f00 	cmp.w	lr, #0
  4057d6:	d00b      	beq.n	4057f0 <__udivmoddi4+0x38>
  4057d8:	f1ce 0c20 	rsb	ip, lr, #32
  4057dc:	fa01 f50e 	lsl.w	r5, r1, lr
  4057e0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4057e4:	fa02 f70e 	lsl.w	r7, r2, lr
  4057e8:	ea4c 0c05 	orr.w	ip, ip, r5
  4057ec:	fa00 f40e 	lsl.w	r4, r0, lr
  4057f0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4057f4:	0c25      	lsrs	r5, r4, #16
  4057f6:	fbbc f8fa 	udiv	r8, ip, sl
  4057fa:	fa1f f987 	uxth.w	r9, r7
  4057fe:	fb0a cc18 	mls	ip, sl, r8, ip
  405802:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405806:	fb08 f309 	mul.w	r3, r8, r9
  40580a:	42ab      	cmp	r3, r5
  40580c:	d90a      	bls.n	405824 <__udivmoddi4+0x6c>
  40580e:	19ed      	adds	r5, r5, r7
  405810:	f108 32ff 	add.w	r2, r8, #4294967295
  405814:	f080 8123 	bcs.w	405a5e <__udivmoddi4+0x2a6>
  405818:	42ab      	cmp	r3, r5
  40581a:	f240 8120 	bls.w	405a5e <__udivmoddi4+0x2a6>
  40581e:	f1a8 0802 	sub.w	r8, r8, #2
  405822:	443d      	add	r5, r7
  405824:	1aed      	subs	r5, r5, r3
  405826:	b2a4      	uxth	r4, r4
  405828:	fbb5 f0fa 	udiv	r0, r5, sl
  40582c:	fb0a 5510 	mls	r5, sl, r0, r5
  405830:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405834:	fb00 f909 	mul.w	r9, r0, r9
  405838:	45a1      	cmp	r9, r4
  40583a:	d909      	bls.n	405850 <__udivmoddi4+0x98>
  40583c:	19e4      	adds	r4, r4, r7
  40583e:	f100 33ff 	add.w	r3, r0, #4294967295
  405842:	f080 810a 	bcs.w	405a5a <__udivmoddi4+0x2a2>
  405846:	45a1      	cmp	r9, r4
  405848:	f240 8107 	bls.w	405a5a <__udivmoddi4+0x2a2>
  40584c:	3802      	subs	r0, #2
  40584e:	443c      	add	r4, r7
  405850:	eba4 0409 	sub.w	r4, r4, r9
  405854:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405858:	2100      	movs	r1, #0
  40585a:	2e00      	cmp	r6, #0
  40585c:	d061      	beq.n	405922 <__udivmoddi4+0x16a>
  40585e:	fa24 f40e 	lsr.w	r4, r4, lr
  405862:	2300      	movs	r3, #0
  405864:	6034      	str	r4, [r6, #0]
  405866:	6073      	str	r3, [r6, #4]
  405868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40586c:	428b      	cmp	r3, r1
  40586e:	d907      	bls.n	405880 <__udivmoddi4+0xc8>
  405870:	2e00      	cmp	r6, #0
  405872:	d054      	beq.n	40591e <__udivmoddi4+0x166>
  405874:	2100      	movs	r1, #0
  405876:	e886 0021 	stmia.w	r6, {r0, r5}
  40587a:	4608      	mov	r0, r1
  40587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405880:	fab3 f183 	clz	r1, r3
  405884:	2900      	cmp	r1, #0
  405886:	f040 808e 	bne.w	4059a6 <__udivmoddi4+0x1ee>
  40588a:	42ab      	cmp	r3, r5
  40588c:	d302      	bcc.n	405894 <__udivmoddi4+0xdc>
  40588e:	4282      	cmp	r2, r0
  405890:	f200 80fa 	bhi.w	405a88 <__udivmoddi4+0x2d0>
  405894:	1a84      	subs	r4, r0, r2
  405896:	eb65 0503 	sbc.w	r5, r5, r3
  40589a:	2001      	movs	r0, #1
  40589c:	46ac      	mov	ip, r5
  40589e:	2e00      	cmp	r6, #0
  4058a0:	d03f      	beq.n	405922 <__udivmoddi4+0x16a>
  4058a2:	e886 1010 	stmia.w	r6, {r4, ip}
  4058a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058aa:	b912      	cbnz	r2, 4058b2 <__udivmoddi4+0xfa>
  4058ac:	2701      	movs	r7, #1
  4058ae:	fbb7 f7f2 	udiv	r7, r7, r2
  4058b2:	fab7 fe87 	clz	lr, r7
  4058b6:	f1be 0f00 	cmp.w	lr, #0
  4058ba:	d134      	bne.n	405926 <__udivmoddi4+0x16e>
  4058bc:	1beb      	subs	r3, r5, r7
  4058be:	0c3a      	lsrs	r2, r7, #16
  4058c0:	fa1f fc87 	uxth.w	ip, r7
  4058c4:	2101      	movs	r1, #1
  4058c6:	fbb3 f8f2 	udiv	r8, r3, r2
  4058ca:	0c25      	lsrs	r5, r4, #16
  4058cc:	fb02 3318 	mls	r3, r2, r8, r3
  4058d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4058d4:	fb0c f308 	mul.w	r3, ip, r8
  4058d8:	42ab      	cmp	r3, r5
  4058da:	d907      	bls.n	4058ec <__udivmoddi4+0x134>
  4058dc:	19ed      	adds	r5, r5, r7
  4058de:	f108 30ff 	add.w	r0, r8, #4294967295
  4058e2:	d202      	bcs.n	4058ea <__udivmoddi4+0x132>
  4058e4:	42ab      	cmp	r3, r5
  4058e6:	f200 80d1 	bhi.w	405a8c <__udivmoddi4+0x2d4>
  4058ea:	4680      	mov	r8, r0
  4058ec:	1aed      	subs	r5, r5, r3
  4058ee:	b2a3      	uxth	r3, r4
  4058f0:	fbb5 f0f2 	udiv	r0, r5, r2
  4058f4:	fb02 5510 	mls	r5, r2, r0, r5
  4058f8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4058fc:	fb0c fc00 	mul.w	ip, ip, r0
  405900:	45a4      	cmp	ip, r4
  405902:	d907      	bls.n	405914 <__udivmoddi4+0x15c>
  405904:	19e4      	adds	r4, r4, r7
  405906:	f100 33ff 	add.w	r3, r0, #4294967295
  40590a:	d202      	bcs.n	405912 <__udivmoddi4+0x15a>
  40590c:	45a4      	cmp	ip, r4
  40590e:	f200 80b8 	bhi.w	405a82 <__udivmoddi4+0x2ca>
  405912:	4618      	mov	r0, r3
  405914:	eba4 040c 	sub.w	r4, r4, ip
  405918:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40591c:	e79d      	b.n	40585a <__udivmoddi4+0xa2>
  40591e:	4631      	mov	r1, r6
  405920:	4630      	mov	r0, r6
  405922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405926:	f1ce 0420 	rsb	r4, lr, #32
  40592a:	fa05 f30e 	lsl.w	r3, r5, lr
  40592e:	fa07 f70e 	lsl.w	r7, r7, lr
  405932:	fa20 f804 	lsr.w	r8, r0, r4
  405936:	0c3a      	lsrs	r2, r7, #16
  405938:	fa25 f404 	lsr.w	r4, r5, r4
  40593c:	ea48 0803 	orr.w	r8, r8, r3
  405940:	fbb4 f1f2 	udiv	r1, r4, r2
  405944:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405948:	fb02 4411 	mls	r4, r2, r1, r4
  40594c:	fa1f fc87 	uxth.w	ip, r7
  405950:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  405954:	fb01 f30c 	mul.w	r3, r1, ip
  405958:	42ab      	cmp	r3, r5
  40595a:	fa00 f40e 	lsl.w	r4, r0, lr
  40595e:	d909      	bls.n	405974 <__udivmoddi4+0x1bc>
  405960:	19ed      	adds	r5, r5, r7
  405962:	f101 30ff 	add.w	r0, r1, #4294967295
  405966:	f080 808a 	bcs.w	405a7e <__udivmoddi4+0x2c6>
  40596a:	42ab      	cmp	r3, r5
  40596c:	f240 8087 	bls.w	405a7e <__udivmoddi4+0x2c6>
  405970:	3902      	subs	r1, #2
  405972:	443d      	add	r5, r7
  405974:	1aeb      	subs	r3, r5, r3
  405976:	fa1f f588 	uxth.w	r5, r8
  40597a:	fbb3 f0f2 	udiv	r0, r3, r2
  40597e:	fb02 3310 	mls	r3, r2, r0, r3
  405982:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405986:	fb00 f30c 	mul.w	r3, r0, ip
  40598a:	42ab      	cmp	r3, r5
  40598c:	d907      	bls.n	40599e <__udivmoddi4+0x1e6>
  40598e:	19ed      	adds	r5, r5, r7
  405990:	f100 38ff 	add.w	r8, r0, #4294967295
  405994:	d26f      	bcs.n	405a76 <__udivmoddi4+0x2be>
  405996:	42ab      	cmp	r3, r5
  405998:	d96d      	bls.n	405a76 <__udivmoddi4+0x2be>
  40599a:	3802      	subs	r0, #2
  40599c:	443d      	add	r5, r7
  40599e:	1aeb      	subs	r3, r5, r3
  4059a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4059a4:	e78f      	b.n	4058c6 <__udivmoddi4+0x10e>
  4059a6:	f1c1 0720 	rsb	r7, r1, #32
  4059aa:	fa22 f807 	lsr.w	r8, r2, r7
  4059ae:	408b      	lsls	r3, r1
  4059b0:	fa05 f401 	lsl.w	r4, r5, r1
  4059b4:	ea48 0303 	orr.w	r3, r8, r3
  4059b8:	fa20 fe07 	lsr.w	lr, r0, r7
  4059bc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4059c0:	40fd      	lsrs	r5, r7
  4059c2:	ea4e 0e04 	orr.w	lr, lr, r4
  4059c6:	fbb5 f9fc 	udiv	r9, r5, ip
  4059ca:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4059ce:	fb0c 5519 	mls	r5, ip, r9, r5
  4059d2:	fa1f f883 	uxth.w	r8, r3
  4059d6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4059da:	fb09 f408 	mul.w	r4, r9, r8
  4059de:	42ac      	cmp	r4, r5
  4059e0:	fa02 f201 	lsl.w	r2, r2, r1
  4059e4:	fa00 fa01 	lsl.w	sl, r0, r1
  4059e8:	d908      	bls.n	4059fc <__udivmoddi4+0x244>
  4059ea:	18ed      	adds	r5, r5, r3
  4059ec:	f109 30ff 	add.w	r0, r9, #4294967295
  4059f0:	d243      	bcs.n	405a7a <__udivmoddi4+0x2c2>
  4059f2:	42ac      	cmp	r4, r5
  4059f4:	d941      	bls.n	405a7a <__udivmoddi4+0x2c2>
  4059f6:	f1a9 0902 	sub.w	r9, r9, #2
  4059fa:	441d      	add	r5, r3
  4059fc:	1b2d      	subs	r5, r5, r4
  4059fe:	fa1f fe8e 	uxth.w	lr, lr
  405a02:	fbb5 f0fc 	udiv	r0, r5, ip
  405a06:	fb0c 5510 	mls	r5, ip, r0, r5
  405a0a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  405a0e:	fb00 f808 	mul.w	r8, r0, r8
  405a12:	45a0      	cmp	r8, r4
  405a14:	d907      	bls.n	405a26 <__udivmoddi4+0x26e>
  405a16:	18e4      	adds	r4, r4, r3
  405a18:	f100 35ff 	add.w	r5, r0, #4294967295
  405a1c:	d229      	bcs.n	405a72 <__udivmoddi4+0x2ba>
  405a1e:	45a0      	cmp	r8, r4
  405a20:	d927      	bls.n	405a72 <__udivmoddi4+0x2ba>
  405a22:	3802      	subs	r0, #2
  405a24:	441c      	add	r4, r3
  405a26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405a2a:	eba4 0408 	sub.w	r4, r4, r8
  405a2e:	fba0 8902 	umull	r8, r9, r0, r2
  405a32:	454c      	cmp	r4, r9
  405a34:	46c6      	mov	lr, r8
  405a36:	464d      	mov	r5, r9
  405a38:	d315      	bcc.n	405a66 <__udivmoddi4+0x2ae>
  405a3a:	d012      	beq.n	405a62 <__udivmoddi4+0x2aa>
  405a3c:	b156      	cbz	r6, 405a54 <__udivmoddi4+0x29c>
  405a3e:	ebba 030e 	subs.w	r3, sl, lr
  405a42:	eb64 0405 	sbc.w	r4, r4, r5
  405a46:	fa04 f707 	lsl.w	r7, r4, r7
  405a4a:	40cb      	lsrs	r3, r1
  405a4c:	431f      	orrs	r7, r3
  405a4e:	40cc      	lsrs	r4, r1
  405a50:	6037      	str	r7, [r6, #0]
  405a52:	6074      	str	r4, [r6, #4]
  405a54:	2100      	movs	r1, #0
  405a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a5a:	4618      	mov	r0, r3
  405a5c:	e6f8      	b.n	405850 <__udivmoddi4+0x98>
  405a5e:	4690      	mov	r8, r2
  405a60:	e6e0      	b.n	405824 <__udivmoddi4+0x6c>
  405a62:	45c2      	cmp	sl, r8
  405a64:	d2ea      	bcs.n	405a3c <__udivmoddi4+0x284>
  405a66:	ebb8 0e02 	subs.w	lr, r8, r2
  405a6a:	eb69 0503 	sbc.w	r5, r9, r3
  405a6e:	3801      	subs	r0, #1
  405a70:	e7e4      	b.n	405a3c <__udivmoddi4+0x284>
  405a72:	4628      	mov	r0, r5
  405a74:	e7d7      	b.n	405a26 <__udivmoddi4+0x26e>
  405a76:	4640      	mov	r0, r8
  405a78:	e791      	b.n	40599e <__udivmoddi4+0x1e6>
  405a7a:	4681      	mov	r9, r0
  405a7c:	e7be      	b.n	4059fc <__udivmoddi4+0x244>
  405a7e:	4601      	mov	r1, r0
  405a80:	e778      	b.n	405974 <__udivmoddi4+0x1bc>
  405a82:	3802      	subs	r0, #2
  405a84:	443c      	add	r4, r7
  405a86:	e745      	b.n	405914 <__udivmoddi4+0x15c>
  405a88:	4608      	mov	r0, r1
  405a8a:	e708      	b.n	40589e <__udivmoddi4+0xe6>
  405a8c:	f1a8 0802 	sub.w	r8, r8, #2
  405a90:	443d      	add	r5, r7
  405a92:	e72b      	b.n	4058ec <__udivmoddi4+0x134>

00405a94 <__aeabi_idiv0>:
  405a94:	4770      	bx	lr
  405a96:	bf00      	nop
  405a98:	454c4449 	.word	0x454c4449
  405a9c:	00000000 	.word	0x00000000
  405aa0:	51726d54 	.word	0x51726d54
  405aa4:	00000000 	.word	0x00000000
  405aa8:	20726d54 	.word	0x20726d54
  405aac:	00637653 	.word	0x00637653
  405ab0:	4f525245 	.word	0x4f525245
  405ab4:	6e203a52 	.word	0x6e203a52
  405ab8:	6568206f 	.word	0x6568206f
  405abc:	72656461 	.word	0x72656461
  405ac0:	00000000 	.word	0x00000000
  405ac4:	4f525245 	.word	0x4f525245
  405ac8:	62203a52 	.word	0x62203a52
  405acc:	63206461 	.word	0x63206461
  405ad0:	6b636568 	.word	0x6b636568
  405ad4:	006d7573 	.word	0x006d7573
  405ad8:	000a6425 	.word	0x000a6425
  405adc:	454d4f43 	.word	0x454d4f43
  405ae0:	444e4143 	.word	0x444e4143
  405ae4:	000d0a4f 	.word	0x000d0a4f
  405ae8:	46202d2d 	.word	0x46202d2d
  405aec:	72656572 	.word	0x72656572
  405af0:	20736f74 	.word	0x20736f74
  405af4:	6d617845 	.word	0x6d617845
  405af8:	20656c70 	.word	0x20656c70
  405afc:	0d0a2d2d 	.word	0x0d0a2d2d
  405b00:	00000000 	.word	0x00000000
  405b04:	454d4153 	.word	0x454d4153
  405b08:	582d3037 	.word	0x582d3037
  405b0c:	00444c50 	.word	0x00444c50
  405b10:	25202d2d 	.word	0x25202d2d
  405b14:	000d0a73 	.word	0x000d0a73
  405b18:	323a3132 	.word	0x323a3132
  405b1c:	31353a33 	.word	0x31353a33
  405b20:	00000000 	.word	0x00000000
  405b24:	2079614d 	.word	0x2079614d
  405b28:	32203831 	.word	0x32203831
  405b2c:	00393130 	.word	0x00393130
  405b30:	43202d2d 	.word	0x43202d2d
  405b34:	69706d6f 	.word	0x69706d6f
  405b38:	3a64656c 	.word	0x3a64656c
  405b3c:	20732520 	.word	0x20732520
  405b40:	2d207325 	.word	0x2d207325
  405b44:	000d0a2d 	.word	0x000d0a2d
  405b48:	6164696c 	.word	0x6164696c
  405b4c:	00000072 	.word	0x00000072
  405b50:	6c696146 	.word	0x6c696146
  405b54:	74206465 	.word	0x74206465
  405b58:	7263206f 	.word	0x7263206f
  405b5c:	65746165 	.word	0x65746165
  405b60:	73657420 	.word	0x73657420
  405b64:	696c2074 	.word	0x696c2074
  405b68:	20726164 	.word	0x20726164
  405b6c:	6b736174 	.word	0x6b736174
  405b70:	00000a0d 	.word	0x00000a0d
  405b74:	63617473 	.word	0x63617473
  405b78:	766f206b 	.word	0x766f206b
  405b7c:	6c667265 	.word	0x6c667265
  405b80:	2520776f 	.word	0x2520776f
  405b84:	73252078 	.word	0x73252078
  405b88:	00000a0d 	.word	0x00000a0d

00405b8c <_global_impure_ptr>:
  405b8c:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  405b9c:	46454443 00000000 33323130 37363534     CDEF....01234567
  405bac:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405bbc:	0000296c                                l)..

00405bc0 <blanks.7217>:
  405bc0:	20202020 20202020 20202020 20202020                     

00405bd0 <zeroes.7218>:
  405bd0:	30303030 30303030 30303030 30303030     0000000000000000
  405be0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405bf0 <_ctype_>:
  405bf0:	20202000 20202020 28282020 20282828     .         ((((( 
  405c00:	20202020 20202020 20202020 20202020                     
  405c10:	10108820 10101010 10101010 10101010      ...............
  405c20:	04040410 04040404 10040404 10101010     ................
  405c30:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405c40:	01010101 01010101 01010101 10101010     ................
  405c50:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405c60:	02020202 02020202 02020202 10101010     ................
  405c70:	00000020 00000000 00000000 00000000      ...............
	...

00405cf4 <_init>:
  405cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405cf6:	bf00      	nop
  405cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405cfa:	bc08      	pop	{r3}
  405cfc:	469e      	mov	lr, r3
  405cfe:	4770      	bx	lr

00405d00 <__init_array_start>:
  405d00:	004043f9 	.word	0x004043f9

00405d04 <__frame_dummy_init_array_entry>:
  405d04:	0040018d                                ..@.

00405d08 <_fini>:
  405d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d0a:	bf00      	nop
  405d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405d0e:	bc08      	pop	{r3}
  405d10:	469e      	mov	lr, r3
  405d12:	4770      	bx	lr

00405d14 <__fini_array_start>:
  405d14:	00400169 	.word	0x00400169
