
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005598  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405598  00405598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  004055a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000100  204009c0  00405f60  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400ac0  00406060  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402ac0  00408060  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000121f3  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000022a8  00000000  00000000  00032c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006b52  00000000  00000000  00034ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b70  00000000  00000000  0003ba34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a80  00000000  00000000  0003c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e527  00000000  00000000  0003d024  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000aecf  00000000  00000000  0005b54b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008ab7f  00000000  00000000  0006641a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003e04  00000000  00000000  000f0f9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 2a 40 20 65 15 40 00 15 16 40 00 15 16 40 00     .*@ e.@...@...@.
  400010:	15 16 40 00 15 16 40 00 15 16 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	15 16 40 00 15 16 40 00 00 00 00 00 15 16 40 00     ..@...@.......@.
  40003c:	15 16 40 00 15 16 40 00 15 16 40 00 85 1e 40 00     ..@...@...@...@.
  40004c:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  40005c:	15 16 40 00 15 16 40 00 00 00 00 00 b1 07 40 00     ..@...@.......@.
  40006c:	c9 07 40 00 e1 07 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  40007c:	15 16 40 00 f9 07 40 00 11 08 40 00 15 16 40 00     ..@...@...@...@.
  40008c:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  40009c:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  4000ac:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  4000bc:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  4000cc:	15 16 40 00 00 00 00 00 15 16 40 00 00 00 00 00     ..@.......@.....
  4000dc:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  4000ec:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  4000fc:	15 16 40 00 15 16 40 00 15 16 40 00 15 16 40 00     ..@...@...@...@.
  40010c:	15 16 40 00 15 16 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 15 16 40 00 15 16 40 00 15 16 40 00     ......@...@...@.
  40012c:	15 16 40 00 15 16 40 00 00 00 00 00 15 16 40 00     ..@...@.......@.
  40013c:	15 16 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	004055a0 	.word	0x004055a0

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004055a0 	.word	0x004055a0
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	004055a0 	.word	0x004055a0
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400929 	.word	0x00400929
  40022c:	00400995 	.word	0x00400995
  400230:	00400a05 	.word	0x00400a05

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400961 	.word	0x00400961
  4002a0:	00400a7d 	.word	0x00400a7d

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400a99 	.word	0x00400a99
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00400ab5 	.word	0x00400ab5
  400418:	00400ad1 	.word	0x00400ad1

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00401785 	.word	0x00401785
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400829 	.word	0x00400829
  40051c:	004008a5 	.word	0x004008a5
  400520:	0040161d 	.word	0x0040161d
  400524:	00400499 	.word	0x00400499

00400528 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400528:	b580      	push	{r7, lr}
  40052a:	b086      	sub	sp, #24
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400534:	2300      	movs	r3, #0
  400536:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400538:	68fb      	ldr	r3, [r7, #12]
  40053a:	2b00      	cmp	r3, #0
  40053c:	d012      	beq.n	400564 <_read+0x3c>
		return -1;
  40053e:	f04f 33ff 	mov.w	r3, #4294967295
  400542:	e013      	b.n	40056c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400544:	4b0b      	ldr	r3, [pc, #44]	; (400574 <_read+0x4c>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	4a0b      	ldr	r2, [pc, #44]	; (400578 <_read+0x50>)
  40054a:	6812      	ldr	r2, [r2, #0]
  40054c:	68b9      	ldr	r1, [r7, #8]
  40054e:	4610      	mov	r0, r2
  400550:	4798      	blx	r3
		ptr++;
  400552:	68bb      	ldr	r3, [r7, #8]
  400554:	3301      	adds	r3, #1
  400556:	60bb      	str	r3, [r7, #8]
		nChars++;
  400558:	697b      	ldr	r3, [r7, #20]
  40055a:	3301      	adds	r3, #1
  40055c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	3b01      	subs	r3, #1
  400562:	607b      	str	r3, [r7, #4]
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	2b00      	cmp	r3, #0
  400568:	dcec      	bgt.n	400544 <_read+0x1c>
	}
	return nChars;
  40056a:	697b      	ldr	r3, [r7, #20]
}
  40056c:	4618      	mov	r0, r3
  40056e:	3718      	adds	r7, #24
  400570:	46bd      	mov	sp, r7
  400572:	bd80      	pop	{r7, pc}
  400574:	20400a8c 	.word	0x20400a8c
  400578:	20400a94 	.word	0x20400a94

0040057c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40057c:	b580      	push	{r7, lr}
  40057e:	b086      	sub	sp, #24
  400580:	af00      	add	r7, sp, #0
  400582:	60f8      	str	r0, [r7, #12]
  400584:	60b9      	str	r1, [r7, #8]
  400586:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400588:	2300      	movs	r3, #0
  40058a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	2b01      	cmp	r3, #1
  400590:	d01e      	beq.n	4005d0 <_write+0x54>
  400592:	68fb      	ldr	r3, [r7, #12]
  400594:	2b02      	cmp	r3, #2
  400596:	d01b      	beq.n	4005d0 <_write+0x54>
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	2b03      	cmp	r3, #3
  40059c:	d018      	beq.n	4005d0 <_write+0x54>
		return -1;
  40059e:	f04f 33ff 	mov.w	r3, #4294967295
  4005a2:	e019      	b.n	4005d8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005a4:	4b0e      	ldr	r3, [pc, #56]	; (4005e0 <_write+0x64>)
  4005a6:	681a      	ldr	r2, [r3, #0]
  4005a8:	4b0e      	ldr	r3, [pc, #56]	; (4005e4 <_write+0x68>)
  4005aa:	6818      	ldr	r0, [r3, #0]
  4005ac:	68bb      	ldr	r3, [r7, #8]
  4005ae:	1c59      	adds	r1, r3, #1
  4005b0:	60b9      	str	r1, [r7, #8]
  4005b2:	781b      	ldrb	r3, [r3, #0]
  4005b4:	4619      	mov	r1, r3
  4005b6:	4790      	blx	r2
  4005b8:	4603      	mov	r3, r0
  4005ba:	2b00      	cmp	r3, #0
  4005bc:	da02      	bge.n	4005c4 <_write+0x48>
			return -1;
  4005be:	f04f 33ff 	mov.w	r3, #4294967295
  4005c2:	e009      	b.n	4005d8 <_write+0x5c>
		}
		++nChars;
  4005c4:	697b      	ldr	r3, [r7, #20]
  4005c6:	3301      	adds	r3, #1
  4005c8:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	3b01      	subs	r3, #1
  4005ce:	607b      	str	r3, [r7, #4]
  4005d0:	687b      	ldr	r3, [r7, #4]
  4005d2:	2b00      	cmp	r3, #0
  4005d4:	d1e6      	bne.n	4005a4 <_write+0x28>
	}
	return nChars;
  4005d6:	697b      	ldr	r3, [r7, #20]
}
  4005d8:	4618      	mov	r0, r3
  4005da:	3718      	adds	r7, #24
  4005dc:	46bd      	mov	sp, r7
  4005de:	bd80      	pop	{r7, pc}
  4005e0:	20400a90 	.word	0x20400a90
  4005e4:	20400a94 	.word	0x20400a94

004005e8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4005e8:	b480      	push	{r7}
  4005ea:	b085      	sub	sp, #20
  4005ec:	af00      	add	r7, sp, #0
  4005ee:	60f8      	str	r0, [r7, #12]
  4005f0:	60b9      	str	r1, [r7, #8]
  4005f2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005f4:	687b      	ldr	r3, [r7, #4]
  4005f6:	2b00      	cmp	r3, #0
  4005f8:	d003      	beq.n	400602 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4005fa:	68fb      	ldr	r3, [r7, #12]
  4005fc:	68ba      	ldr	r2, [r7, #8]
  4005fe:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400600:	e002      	b.n	400608 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	68ba      	ldr	r2, [r7, #8]
  400606:	661a      	str	r2, [r3, #96]	; 0x60
}
  400608:	bf00      	nop
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400614:	b480      	push	{r7}
  400616:	b083      	sub	sp, #12
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40061e:	687b      	ldr	r3, [r7, #4]
  400620:	683a      	ldr	r2, [r7, #0]
  400622:	631a      	str	r2, [r3, #48]	; 0x30
}
  400624:	bf00      	nop
  400626:	370c      	adds	r7, #12
  400628:	46bd      	mov	sp, r7
  40062a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40062e:	4770      	bx	lr

00400630 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400630:	b480      	push	{r7}
  400632:	b083      	sub	sp, #12
  400634:	af00      	add	r7, sp, #0
  400636:	6078      	str	r0, [r7, #4]
  400638:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40063a:	687b      	ldr	r3, [r7, #4]
  40063c:	683a      	ldr	r2, [r7, #0]
  40063e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400640:	bf00      	nop
  400642:	370c      	adds	r7, #12
  400644:	46bd      	mov	sp, r7
  400646:	f85d 7b04 	ldr.w	r7, [sp], #4
  40064a:	4770      	bx	lr

0040064c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40064c:	b580      	push	{r7, lr}
  40064e:	b084      	sub	sp, #16
  400650:	af00      	add	r7, sp, #0
  400652:	60f8      	str	r0, [r7, #12]
  400654:	60b9      	str	r1, [r7, #8]
  400656:	607a      	str	r2, [r7, #4]
  400658:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40065a:	68b9      	ldr	r1, [r7, #8]
  40065c:	68f8      	ldr	r0, [r7, #12]
  40065e:	4b12      	ldr	r3, [pc, #72]	; (4006a8 <pio_set_output+0x5c>)
  400660:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400662:	69ba      	ldr	r2, [r7, #24]
  400664:	68b9      	ldr	r1, [r7, #8]
  400666:	68f8      	ldr	r0, [r7, #12]
  400668:	4b10      	ldr	r3, [pc, #64]	; (4006ac <pio_set_output+0x60>)
  40066a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40066c:	683b      	ldr	r3, [r7, #0]
  40066e:	2b00      	cmp	r3, #0
  400670:	d003      	beq.n	40067a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	68ba      	ldr	r2, [r7, #8]
  400676:	651a      	str	r2, [r3, #80]	; 0x50
  400678:	e002      	b.n	400680 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	68ba      	ldr	r2, [r7, #8]
  40067e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400680:	687b      	ldr	r3, [r7, #4]
  400682:	2b00      	cmp	r3, #0
  400684:	d003      	beq.n	40068e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400686:	68fb      	ldr	r3, [r7, #12]
  400688:	68ba      	ldr	r2, [r7, #8]
  40068a:	631a      	str	r2, [r3, #48]	; 0x30
  40068c:	e002      	b.n	400694 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40068e:	68fb      	ldr	r3, [r7, #12]
  400690:	68ba      	ldr	r2, [r7, #8]
  400692:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400694:	68fb      	ldr	r3, [r7, #12]
  400696:	68ba      	ldr	r2, [r7, #8]
  400698:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40069a:	68fb      	ldr	r3, [r7, #12]
  40069c:	68ba      	ldr	r2, [r7, #8]
  40069e:	601a      	str	r2, [r3, #0]
}
  4006a0:	bf00      	nop
  4006a2:	3710      	adds	r7, #16
  4006a4:	46bd      	mov	sp, r7
  4006a6:	bd80      	pop	{r7, pc}
  4006a8:	004006b1 	.word	0x004006b1
  4006ac:	004005e9 	.word	0x004005e9

004006b0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]
  4006b8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	683a      	ldr	r2, [r7, #0]
  4006be:	645a      	str	r2, [r3, #68]	; 0x44
}
  4006c0:	bf00      	nop
  4006c2:	370c      	adds	r7, #12
  4006c4:	46bd      	mov	sp, r7
  4006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ca:	4770      	bx	lr

004006cc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4006cc:	b480      	push	{r7}
  4006ce:	b083      	sub	sp, #12
  4006d0:	af00      	add	r7, sp, #0
  4006d2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4006d4:	687b      	ldr	r3, [r7, #4]
  4006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4006d8:	4618      	mov	r0, r3
  4006da:	370c      	adds	r7, #12
  4006dc:	46bd      	mov	sp, r7
  4006de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006e2:	4770      	bx	lr

004006e4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4006e4:	b480      	push	{r7}
  4006e6:	b083      	sub	sp, #12
  4006e8:	af00      	add	r7, sp, #0
  4006ea:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4006ec:	687b      	ldr	r3, [r7, #4]
  4006ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4006f0:	4618      	mov	r0, r3
  4006f2:	370c      	adds	r7, #12
  4006f4:	46bd      	mov	sp, r7
  4006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006fa:	4770      	bx	lr

004006fc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006fc:	b580      	push	{r7, lr}
  4006fe:	b084      	sub	sp, #16
  400700:	af00      	add	r7, sp, #0
  400702:	6078      	str	r0, [r7, #4]
  400704:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400706:	6878      	ldr	r0, [r7, #4]
  400708:	4b26      	ldr	r3, [pc, #152]	; (4007a4 <pio_handler_process+0xa8>)
  40070a:	4798      	blx	r3
  40070c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40070e:	6878      	ldr	r0, [r7, #4]
  400710:	4b25      	ldr	r3, [pc, #148]	; (4007a8 <pio_handler_process+0xac>)
  400712:	4798      	blx	r3
  400714:	4602      	mov	r2, r0
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	4013      	ands	r3, r2
  40071a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40071c:	68fb      	ldr	r3, [r7, #12]
  40071e:	2b00      	cmp	r3, #0
  400720:	d03c      	beq.n	40079c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400722:	2300      	movs	r3, #0
  400724:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400726:	e034      	b.n	400792 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400728:	4a20      	ldr	r2, [pc, #128]	; (4007ac <pio_handler_process+0xb0>)
  40072a:	68bb      	ldr	r3, [r7, #8]
  40072c:	011b      	lsls	r3, r3, #4
  40072e:	4413      	add	r3, r2
  400730:	681a      	ldr	r2, [r3, #0]
  400732:	683b      	ldr	r3, [r7, #0]
  400734:	429a      	cmp	r2, r3
  400736:	d126      	bne.n	400786 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400738:	4a1c      	ldr	r2, [pc, #112]	; (4007ac <pio_handler_process+0xb0>)
  40073a:	68bb      	ldr	r3, [r7, #8]
  40073c:	011b      	lsls	r3, r3, #4
  40073e:	4413      	add	r3, r2
  400740:	3304      	adds	r3, #4
  400742:	681a      	ldr	r2, [r3, #0]
  400744:	68fb      	ldr	r3, [r7, #12]
  400746:	4013      	ands	r3, r2
  400748:	2b00      	cmp	r3, #0
  40074a:	d01c      	beq.n	400786 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40074c:	4a17      	ldr	r2, [pc, #92]	; (4007ac <pio_handler_process+0xb0>)
  40074e:	68bb      	ldr	r3, [r7, #8]
  400750:	011b      	lsls	r3, r3, #4
  400752:	4413      	add	r3, r2
  400754:	330c      	adds	r3, #12
  400756:	681b      	ldr	r3, [r3, #0]
  400758:	4914      	ldr	r1, [pc, #80]	; (4007ac <pio_handler_process+0xb0>)
  40075a:	68ba      	ldr	r2, [r7, #8]
  40075c:	0112      	lsls	r2, r2, #4
  40075e:	440a      	add	r2, r1
  400760:	6810      	ldr	r0, [r2, #0]
  400762:	4912      	ldr	r1, [pc, #72]	; (4007ac <pio_handler_process+0xb0>)
  400764:	68ba      	ldr	r2, [r7, #8]
  400766:	0112      	lsls	r2, r2, #4
  400768:	440a      	add	r2, r1
  40076a:	3204      	adds	r2, #4
  40076c:	6812      	ldr	r2, [r2, #0]
  40076e:	4611      	mov	r1, r2
  400770:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400772:	4a0e      	ldr	r2, [pc, #56]	; (4007ac <pio_handler_process+0xb0>)
  400774:	68bb      	ldr	r3, [r7, #8]
  400776:	011b      	lsls	r3, r3, #4
  400778:	4413      	add	r3, r2
  40077a:	3304      	adds	r3, #4
  40077c:	681b      	ldr	r3, [r3, #0]
  40077e:	43db      	mvns	r3, r3
  400780:	68fa      	ldr	r2, [r7, #12]
  400782:	4013      	ands	r3, r2
  400784:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400786:	68bb      	ldr	r3, [r7, #8]
  400788:	3301      	adds	r3, #1
  40078a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40078c:	68bb      	ldr	r3, [r7, #8]
  40078e:	2b06      	cmp	r3, #6
  400790:	d803      	bhi.n	40079a <pio_handler_process+0x9e>
		while (status != 0) {
  400792:	68fb      	ldr	r3, [r7, #12]
  400794:	2b00      	cmp	r3, #0
  400796:	d1c7      	bne.n	400728 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400798:	e000      	b.n	40079c <pio_handler_process+0xa0>
				break;
  40079a:	bf00      	nop
}
  40079c:	bf00      	nop
  40079e:	3710      	adds	r7, #16
  4007a0:	46bd      	mov	sp, r7
  4007a2:	bd80      	pop	{r7, pc}
  4007a4:	004006cd 	.word	0x004006cd
  4007a8:	004006e5 	.word	0x004006e5
  4007ac:	204009dc 	.word	0x204009dc

004007b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007b0:	b580      	push	{r7, lr}
  4007b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4007b4:	210a      	movs	r1, #10
  4007b6:	4802      	ldr	r0, [pc, #8]	; (4007c0 <PIOA_Handler+0x10>)
  4007b8:	4b02      	ldr	r3, [pc, #8]	; (4007c4 <PIOA_Handler+0x14>)
  4007ba:	4798      	blx	r3
}
  4007bc:	bf00      	nop
  4007be:	bd80      	pop	{r7, pc}
  4007c0:	400e0e00 	.word	0x400e0e00
  4007c4:	004006fd 	.word	0x004006fd

004007c8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4007c8:	b580      	push	{r7, lr}
  4007ca:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4007cc:	210b      	movs	r1, #11
  4007ce:	4802      	ldr	r0, [pc, #8]	; (4007d8 <PIOB_Handler+0x10>)
  4007d0:	4b02      	ldr	r3, [pc, #8]	; (4007dc <PIOB_Handler+0x14>)
  4007d2:	4798      	blx	r3
}
  4007d4:	bf00      	nop
  4007d6:	bd80      	pop	{r7, pc}
  4007d8:	400e1000 	.word	0x400e1000
  4007dc:	004006fd 	.word	0x004006fd

004007e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007e0:	b580      	push	{r7, lr}
  4007e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4007e4:	210c      	movs	r1, #12
  4007e6:	4802      	ldr	r0, [pc, #8]	; (4007f0 <PIOC_Handler+0x10>)
  4007e8:	4b02      	ldr	r3, [pc, #8]	; (4007f4 <PIOC_Handler+0x14>)
  4007ea:	4798      	blx	r3
}
  4007ec:	bf00      	nop
  4007ee:	bd80      	pop	{r7, pc}
  4007f0:	400e1200 	.word	0x400e1200
  4007f4:	004006fd 	.word	0x004006fd

004007f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4007f8:	b580      	push	{r7, lr}
  4007fa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4007fc:	2110      	movs	r1, #16
  4007fe:	4802      	ldr	r0, [pc, #8]	; (400808 <PIOD_Handler+0x10>)
  400800:	4b02      	ldr	r3, [pc, #8]	; (40080c <PIOD_Handler+0x14>)
  400802:	4798      	blx	r3
}
  400804:	bf00      	nop
  400806:	bd80      	pop	{r7, pc}
  400808:	400e1400 	.word	0x400e1400
  40080c:	004006fd 	.word	0x004006fd

00400810 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400810:	b580      	push	{r7, lr}
  400812:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400814:	2111      	movs	r1, #17
  400816:	4802      	ldr	r0, [pc, #8]	; (400820 <PIOE_Handler+0x10>)
  400818:	4b02      	ldr	r3, [pc, #8]	; (400824 <PIOE_Handler+0x14>)
  40081a:	4798      	blx	r3
}
  40081c:	bf00      	nop
  40081e:	bd80      	pop	{r7, pc}
  400820:	400e1600 	.word	0x400e1600
  400824:	004006fd 	.word	0x004006fd

00400828 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400828:	b480      	push	{r7}
  40082a:	b083      	sub	sp, #12
  40082c:	af00      	add	r7, sp, #0
  40082e:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400830:	687b      	ldr	r3, [r7, #4]
  400832:	3b01      	subs	r3, #1
  400834:	2b03      	cmp	r3, #3
  400836:	d81a      	bhi.n	40086e <pmc_mck_set_division+0x46>
  400838:	a201      	add	r2, pc, #4	; (adr r2, 400840 <pmc_mck_set_division+0x18>)
  40083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40083e:	bf00      	nop
  400840:	00400851 	.word	0x00400851
  400844:	00400857 	.word	0x00400857
  400848:	0040085f 	.word	0x0040085f
  40084c:	00400867 	.word	0x00400867
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400850:	2300      	movs	r3, #0
  400852:	607b      	str	r3, [r7, #4]
			break;
  400854:	e00e      	b.n	400874 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400856:	f44f 7380 	mov.w	r3, #256	; 0x100
  40085a:	607b      	str	r3, [r7, #4]
			break;
  40085c:	e00a      	b.n	400874 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40085e:	f44f 7340 	mov.w	r3, #768	; 0x300
  400862:	607b      	str	r3, [r7, #4]
			break;
  400864:	e006      	b.n	400874 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400866:	f44f 7300 	mov.w	r3, #512	; 0x200
  40086a:	607b      	str	r3, [r7, #4]
			break;
  40086c:	e002      	b.n	400874 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40086e:	2300      	movs	r3, #0
  400870:	607b      	str	r3, [r7, #4]
			break;
  400872:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400874:	490a      	ldr	r1, [pc, #40]	; (4008a0 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400876:	4b0a      	ldr	r3, [pc, #40]	; (4008a0 <pmc_mck_set_division+0x78>)
  400878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40087a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40087e:	687b      	ldr	r3, [r7, #4]
  400880:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400882:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400884:	bf00      	nop
  400886:	4b06      	ldr	r3, [pc, #24]	; (4008a0 <pmc_mck_set_division+0x78>)
  400888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40088a:	f003 0308 	and.w	r3, r3, #8
  40088e:	2b00      	cmp	r3, #0
  400890:	d0f9      	beq.n	400886 <pmc_mck_set_division+0x5e>
}
  400892:	bf00      	nop
  400894:	370c      	adds	r7, #12
  400896:	46bd      	mov	sp, r7
  400898:	f85d 7b04 	ldr.w	r7, [sp], #4
  40089c:	4770      	bx	lr
  40089e:	bf00      	nop
  4008a0:	400e0600 	.word	0x400e0600

004008a4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4008a4:	b480      	push	{r7}
  4008a6:	b085      	sub	sp, #20
  4008a8:	af00      	add	r7, sp, #0
  4008aa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4008ac:	491d      	ldr	r1, [pc, #116]	; (400924 <pmc_switch_mck_to_pllack+0x80>)
  4008ae:	4b1d      	ldr	r3, [pc, #116]	; (400924 <pmc_switch_mck_to_pllack+0x80>)
  4008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	4313      	orrs	r3, r2
  4008ba:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4008c0:	60fb      	str	r3, [r7, #12]
  4008c2:	e007      	b.n	4008d4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008c4:	68fb      	ldr	r3, [r7, #12]
  4008c6:	2b00      	cmp	r3, #0
  4008c8:	d101      	bne.n	4008ce <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4008ca:	2301      	movs	r3, #1
  4008cc:	e023      	b.n	400916 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4008ce:	68fb      	ldr	r3, [r7, #12]
  4008d0:	3b01      	subs	r3, #1
  4008d2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008d4:	4b13      	ldr	r3, [pc, #76]	; (400924 <pmc_switch_mck_to_pllack+0x80>)
  4008d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008d8:	f003 0308 	and.w	r3, r3, #8
  4008dc:	2b00      	cmp	r3, #0
  4008de:	d0f1      	beq.n	4008c4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4008e0:	4a10      	ldr	r2, [pc, #64]	; (400924 <pmc_switch_mck_to_pllack+0x80>)
  4008e2:	4b10      	ldr	r3, [pc, #64]	; (400924 <pmc_switch_mck_to_pllack+0x80>)
  4008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008e6:	f023 0303 	bic.w	r3, r3, #3
  4008ea:	f043 0302 	orr.w	r3, r3, #2
  4008ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4008f4:	60fb      	str	r3, [r7, #12]
  4008f6:	e007      	b.n	400908 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008f8:	68fb      	ldr	r3, [r7, #12]
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d101      	bne.n	400902 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4008fe:	2301      	movs	r3, #1
  400900:	e009      	b.n	400916 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400902:	68fb      	ldr	r3, [r7, #12]
  400904:	3b01      	subs	r3, #1
  400906:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400908:	4b06      	ldr	r3, [pc, #24]	; (400924 <pmc_switch_mck_to_pllack+0x80>)
  40090a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40090c:	f003 0308 	and.w	r3, r3, #8
  400910:	2b00      	cmp	r3, #0
  400912:	d0f1      	beq.n	4008f8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400914:	2300      	movs	r3, #0
}
  400916:	4618      	mov	r0, r3
  400918:	3714      	adds	r7, #20
  40091a:	46bd      	mov	sp, r7
  40091c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400920:	4770      	bx	lr
  400922:	bf00      	nop
  400924:	400e0600 	.word	0x400e0600

00400928 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400928:	b480      	push	{r7}
  40092a:	b083      	sub	sp, #12
  40092c:	af00      	add	r7, sp, #0
  40092e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400930:	687b      	ldr	r3, [r7, #4]
  400932:	2b01      	cmp	r3, #1
  400934:	d105      	bne.n	400942 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400936:	4907      	ldr	r1, [pc, #28]	; (400954 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400938:	4b06      	ldr	r3, [pc, #24]	; (400954 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40093a:	689a      	ldr	r2, [r3, #8]
  40093c:	4b06      	ldr	r3, [pc, #24]	; (400958 <pmc_switch_sclk_to_32kxtal+0x30>)
  40093e:	4313      	orrs	r3, r2
  400940:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400942:	4b04      	ldr	r3, [pc, #16]	; (400954 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400944:	4a05      	ldr	r2, [pc, #20]	; (40095c <pmc_switch_sclk_to_32kxtal+0x34>)
  400946:	601a      	str	r2, [r3, #0]
}
  400948:	bf00      	nop
  40094a:	370c      	adds	r7, #12
  40094c:	46bd      	mov	sp, r7
  40094e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400952:	4770      	bx	lr
  400954:	400e1810 	.word	0x400e1810
  400958:	a5100000 	.word	0xa5100000
  40095c:	a5000008 	.word	0xa5000008

00400960 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400960:	b480      	push	{r7}
  400962:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400964:	4b09      	ldr	r3, [pc, #36]	; (40098c <pmc_osc_is_ready_32kxtal+0x2c>)
  400966:	695b      	ldr	r3, [r3, #20]
  400968:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40096c:	2b00      	cmp	r3, #0
  40096e:	d007      	beq.n	400980 <pmc_osc_is_ready_32kxtal+0x20>
  400970:	4b07      	ldr	r3, [pc, #28]	; (400990 <pmc_osc_is_ready_32kxtal+0x30>)
  400972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400974:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400978:	2b00      	cmp	r3, #0
  40097a:	d001      	beq.n	400980 <pmc_osc_is_ready_32kxtal+0x20>
  40097c:	2301      	movs	r3, #1
  40097e:	e000      	b.n	400982 <pmc_osc_is_ready_32kxtal+0x22>
  400980:	2300      	movs	r3, #0
}
  400982:	4618      	mov	r0, r3
  400984:	46bd      	mov	sp, r7
  400986:	f85d 7b04 	ldr.w	r7, [sp], #4
  40098a:	4770      	bx	lr
  40098c:	400e1810 	.word	0x400e1810
  400990:	400e0600 	.word	0x400e0600

00400994 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400994:	b480      	push	{r7}
  400996:	b083      	sub	sp, #12
  400998:	af00      	add	r7, sp, #0
  40099a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40099c:	4915      	ldr	r1, [pc, #84]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  40099e:	4b15      	ldr	r3, [pc, #84]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  4009a0:	6a1a      	ldr	r2, [r3, #32]
  4009a2:	4b15      	ldr	r3, [pc, #84]	; (4009f8 <pmc_switch_mainck_to_fastrc+0x64>)
  4009a4:	4313      	orrs	r3, r2
  4009a6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4009a8:	bf00      	nop
  4009aa:	4b12      	ldr	r3, [pc, #72]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  4009ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4009b2:	2b00      	cmp	r3, #0
  4009b4:	d0f9      	beq.n	4009aa <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4009b6:	490f      	ldr	r1, [pc, #60]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  4009b8:	4b0e      	ldr	r3, [pc, #56]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  4009ba:	6a1a      	ldr	r2, [r3, #32]
  4009bc:	4b0f      	ldr	r3, [pc, #60]	; (4009fc <pmc_switch_mainck_to_fastrc+0x68>)
  4009be:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4009c0:	687a      	ldr	r2, [r7, #4]
  4009c2:	4313      	orrs	r3, r2
  4009c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4009c8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4009ca:	bf00      	nop
  4009cc:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  4009ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4009d4:	2b00      	cmp	r3, #0
  4009d6:	d0f9      	beq.n	4009cc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4009d8:	4906      	ldr	r1, [pc, #24]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  4009da:	4b06      	ldr	r3, [pc, #24]	; (4009f4 <pmc_switch_mainck_to_fastrc+0x60>)
  4009dc:	6a1a      	ldr	r2, [r3, #32]
  4009de:	4b08      	ldr	r3, [pc, #32]	; (400a00 <pmc_switch_mainck_to_fastrc+0x6c>)
  4009e0:	4013      	ands	r3, r2
  4009e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009e6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4009e8:	bf00      	nop
  4009ea:	370c      	adds	r7, #12
  4009ec:	46bd      	mov	sp, r7
  4009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009f2:	4770      	bx	lr
  4009f4:	400e0600 	.word	0x400e0600
  4009f8:	00370008 	.word	0x00370008
  4009fc:	ffc8ff8f 	.word	0xffc8ff8f
  400a00:	fec8ffff 	.word	0xfec8ffff

00400a04 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400a04:	b480      	push	{r7}
  400a06:	b083      	sub	sp, #12
  400a08:	af00      	add	r7, sp, #0
  400a0a:	6078      	str	r0, [r7, #4]
  400a0c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a0e:	687b      	ldr	r3, [r7, #4]
  400a10:	2b00      	cmp	r3, #0
  400a12:	d008      	beq.n	400a26 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a14:	4913      	ldr	r1, [pc, #76]	; (400a64 <pmc_switch_mainck_to_xtal+0x60>)
  400a16:	4b13      	ldr	r3, [pc, #76]	; (400a64 <pmc_switch_mainck_to_xtal+0x60>)
  400a18:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a1a:	4a13      	ldr	r2, [pc, #76]	; (400a68 <pmc_switch_mainck_to_xtal+0x64>)
  400a1c:	401a      	ands	r2, r3
  400a1e:	4b13      	ldr	r3, [pc, #76]	; (400a6c <pmc_switch_mainck_to_xtal+0x68>)
  400a20:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a22:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400a24:	e018      	b.n	400a58 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a26:	490f      	ldr	r1, [pc, #60]	; (400a64 <pmc_switch_mainck_to_xtal+0x60>)
  400a28:	4b0e      	ldr	r3, [pc, #56]	; (400a64 <pmc_switch_mainck_to_xtal+0x60>)
  400a2a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a2c:	4b10      	ldr	r3, [pc, #64]	; (400a70 <pmc_switch_mainck_to_xtal+0x6c>)
  400a2e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a30:	683a      	ldr	r2, [r7, #0]
  400a32:	0212      	lsls	r2, r2, #8
  400a34:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a36:	431a      	orrs	r2, r3
  400a38:	4b0e      	ldr	r3, [pc, #56]	; (400a74 <pmc_switch_mainck_to_xtal+0x70>)
  400a3a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a3c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a3e:	bf00      	nop
  400a40:	4b08      	ldr	r3, [pc, #32]	; (400a64 <pmc_switch_mainck_to_xtal+0x60>)
  400a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a44:	f003 0301 	and.w	r3, r3, #1
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d0f9      	beq.n	400a40 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a4c:	4905      	ldr	r1, [pc, #20]	; (400a64 <pmc_switch_mainck_to_xtal+0x60>)
  400a4e:	4b05      	ldr	r3, [pc, #20]	; (400a64 <pmc_switch_mainck_to_xtal+0x60>)
  400a50:	6a1a      	ldr	r2, [r3, #32]
  400a52:	4b09      	ldr	r3, [pc, #36]	; (400a78 <pmc_switch_mainck_to_xtal+0x74>)
  400a54:	4313      	orrs	r3, r2
  400a56:	620b      	str	r3, [r1, #32]
}
  400a58:	bf00      	nop
  400a5a:	370c      	adds	r7, #12
  400a5c:	46bd      	mov	sp, r7
  400a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a62:	4770      	bx	lr
  400a64:	400e0600 	.word	0x400e0600
  400a68:	fec8fffc 	.word	0xfec8fffc
  400a6c:	01370002 	.word	0x01370002
  400a70:	ffc8fffc 	.word	0xffc8fffc
  400a74:	00370001 	.word	0x00370001
  400a78:	01370000 	.word	0x01370000

00400a7c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400a7c:	b480      	push	{r7}
  400a7e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a80:	4b04      	ldr	r3, [pc, #16]	; (400a94 <pmc_osc_is_ready_mainck+0x18>)
  400a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400a88:	4618      	mov	r0, r3
  400a8a:	46bd      	mov	sp, r7
  400a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a90:	4770      	bx	lr
  400a92:	bf00      	nop
  400a94:	400e0600 	.word	0x400e0600

00400a98 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400a98:	b480      	push	{r7}
  400a9a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a9c:	4b04      	ldr	r3, [pc, #16]	; (400ab0 <pmc_disable_pllack+0x18>)
  400a9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400aa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400aa4:	bf00      	nop
  400aa6:	46bd      	mov	sp, r7
  400aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aac:	4770      	bx	lr
  400aae:	bf00      	nop
  400ab0:	400e0600 	.word	0x400e0600

00400ab4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400ab4:	b480      	push	{r7}
  400ab6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ab8:	4b04      	ldr	r3, [pc, #16]	; (400acc <pmc_is_locked_pllack+0x18>)
  400aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400abc:	f003 0302 	and.w	r3, r3, #2
}
  400ac0:	4618      	mov	r0, r3
  400ac2:	46bd      	mov	sp, r7
  400ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ac8:	4770      	bx	lr
  400aca:	bf00      	nop
  400acc:	400e0600 	.word	0x400e0600

00400ad0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400ad0:	b480      	push	{r7}
  400ad2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400ad4:	4b04      	ldr	r3, [pc, #16]	; (400ae8 <pmc_is_locked_upll+0x18>)
  400ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400adc:	4618      	mov	r0, r3
  400ade:	46bd      	mov	sp, r7
  400ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ae4:	4770      	bx	lr
  400ae6:	bf00      	nop
  400ae8:	400e0600 	.word	0x400e0600

00400aec <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400aec:	b480      	push	{r7}
  400aee:	b083      	sub	sp, #12
  400af0:	af00      	add	r7, sp, #0
  400af2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400af4:	687b      	ldr	r3, [r7, #4]
  400af6:	2b3f      	cmp	r3, #63	; 0x3f
  400af8:	d901      	bls.n	400afe <pmc_enable_periph_clk+0x12>
		return 1;
  400afa:	2301      	movs	r3, #1
  400afc:	e02f      	b.n	400b5e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400afe:	687b      	ldr	r3, [r7, #4]
  400b00:	2b1f      	cmp	r3, #31
  400b02:	d813      	bhi.n	400b2c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b04:	4b19      	ldr	r3, [pc, #100]	; (400b6c <pmc_enable_periph_clk+0x80>)
  400b06:	699a      	ldr	r2, [r3, #24]
  400b08:	2101      	movs	r1, #1
  400b0a:	687b      	ldr	r3, [r7, #4]
  400b0c:	fa01 f303 	lsl.w	r3, r1, r3
  400b10:	401a      	ands	r2, r3
  400b12:	2101      	movs	r1, #1
  400b14:	687b      	ldr	r3, [r7, #4]
  400b16:	fa01 f303 	lsl.w	r3, r1, r3
  400b1a:	429a      	cmp	r2, r3
  400b1c:	d01e      	beq.n	400b5c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b1e:	4a13      	ldr	r2, [pc, #76]	; (400b6c <pmc_enable_periph_clk+0x80>)
  400b20:	2101      	movs	r1, #1
  400b22:	687b      	ldr	r3, [r7, #4]
  400b24:	fa01 f303 	lsl.w	r3, r1, r3
  400b28:	6113      	str	r3, [r2, #16]
  400b2a:	e017      	b.n	400b5c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400b2c:	687b      	ldr	r3, [r7, #4]
  400b2e:	3b20      	subs	r3, #32
  400b30:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b32:	4b0e      	ldr	r3, [pc, #56]	; (400b6c <pmc_enable_periph_clk+0x80>)
  400b34:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400b38:	2101      	movs	r1, #1
  400b3a:	687b      	ldr	r3, [r7, #4]
  400b3c:	fa01 f303 	lsl.w	r3, r1, r3
  400b40:	401a      	ands	r2, r3
  400b42:	2101      	movs	r1, #1
  400b44:	687b      	ldr	r3, [r7, #4]
  400b46:	fa01 f303 	lsl.w	r3, r1, r3
  400b4a:	429a      	cmp	r2, r3
  400b4c:	d006      	beq.n	400b5c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400b4e:	4a07      	ldr	r2, [pc, #28]	; (400b6c <pmc_enable_periph_clk+0x80>)
  400b50:	2101      	movs	r1, #1
  400b52:	687b      	ldr	r3, [r7, #4]
  400b54:	fa01 f303 	lsl.w	r3, r1, r3
  400b58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400b5c:	2300      	movs	r3, #0
}
  400b5e:	4618      	mov	r0, r3
  400b60:	370c      	adds	r7, #12
  400b62:	46bd      	mov	sp, r7
  400b64:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b68:	4770      	bx	lr
  400b6a:	bf00      	nop
  400b6c:	400e0600 	.word	0x400e0600

00400b70 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  400b70:	b480      	push	{r7}
  400b72:	b083      	sub	sp, #12
  400b74:	af00      	add	r7, sp, #0
  400b76:	6078      	str	r0, [r7, #4]
  400b78:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  400b7a:	683b      	ldr	r3, [r7, #0]
  400b7c:	2b00      	cmp	r3, #0
  400b7e:	d006      	beq.n	400b8e <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	685b      	ldr	r3, [r3, #4]
  400b84:	f043 0201 	orr.w	r2, r3, #1
  400b88:	687b      	ldr	r3, [r7, #4]
  400b8a:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  400b8c:	e005      	b.n	400b9a <rtc_set_hour_mode+0x2a>
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  400b8e:	687b      	ldr	r3, [r7, #4]
  400b90:	685b      	ldr	r3, [r3, #4]
  400b92:	f023 0201 	bic.w	r2, r3, #1
  400b96:	687b      	ldr	r3, [r7, #4]
  400b98:	605a      	str	r2, [r3, #4]
}
  400b9a:	bf00      	nop
  400b9c:	370c      	adds	r7, #12
  400b9e:	46bd      	mov	sp, r7
  400ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ba4:	4770      	bx	lr

00400ba6 <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  400ba6:	b480      	push	{r7}
  400ba8:	b083      	sub	sp, #12
  400baa:	af00      	add	r7, sp, #0
  400bac:	6078      	str	r0, [r7, #4]
  400bae:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  400bb0:	687b      	ldr	r3, [r7, #4]
  400bb2:	683a      	ldr	r2, [r7, #0]
  400bb4:	621a      	str	r2, [r3, #32]
}
  400bb6:	bf00      	nop
  400bb8:	370c      	adds	r7, #12
  400bba:	46bd      	mov	sp, r7
  400bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bc0:	4770      	bx	lr

00400bc2 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400bc2:	b480      	push	{r7}
  400bc4:	b087      	sub	sp, #28
  400bc6:	af00      	add	r7, sp, #0
  400bc8:	60f8      	str	r0, [r7, #12]
  400bca:	60b9      	str	r1, [r7, #8]
  400bcc:	607a      	str	r2, [r7, #4]
  400bce:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400bd0:	68fb      	ldr	r3, [r7, #12]
  400bd2:	689b      	ldr	r3, [r3, #8]
  400bd4:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  400bd6:	e002      	b.n	400bde <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  400bd8:	68fb      	ldr	r3, [r7, #12]
  400bda:	689b      	ldr	r3, [r3, #8]
  400bdc:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  400bde:	68fb      	ldr	r3, [r7, #12]
  400be0:	689a      	ldr	r2, [r3, #8]
  400be2:	697b      	ldr	r3, [r7, #20]
  400be4:	429a      	cmp	r2, r3
  400be6:	d1f7      	bne.n	400bd8 <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
  400be8:	68bb      	ldr	r3, [r7, #8]
  400bea:	2b00      	cmp	r3, #0
  400bec:	d01c      	beq.n	400c28 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  400bee:	697b      	ldr	r3, [r7, #20]
  400bf0:	0c1b      	lsrs	r3, r3, #16
  400bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400bf6:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400bf8:	693b      	ldr	r3, [r7, #16]
  400bfa:	091a      	lsrs	r2, r3, #4
  400bfc:	4613      	mov	r3, r2
  400bfe:	009b      	lsls	r3, r3, #2
  400c00:	4413      	add	r3, r2
  400c02:	005b      	lsls	r3, r3, #1
  400c04:	461a      	mov	r2, r3
  400c06:	693b      	ldr	r3, [r7, #16]
  400c08:	f003 030f 	and.w	r3, r3, #15
  400c0c:	441a      	add	r2, r3
  400c0e:	68bb      	ldr	r3, [r7, #8]
  400c10:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400c12:	697b      	ldr	r3, [r7, #20]
  400c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  400c18:	2b00      	cmp	r3, #0
  400c1a:	d005      	beq.n	400c28 <rtc_get_time+0x66>
			*pul_hour += 12;
  400c1c:	68bb      	ldr	r3, [r7, #8]
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	f103 020c 	add.w	r2, r3, #12
  400c24:	68bb      	ldr	r3, [r7, #8]
  400c26:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400c28:	687b      	ldr	r3, [r7, #4]
  400c2a:	2b00      	cmp	r3, #0
  400c2c:	d011      	beq.n	400c52 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  400c2e:	697b      	ldr	r3, [r7, #20]
  400c30:	0a1b      	lsrs	r3, r3, #8
  400c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400c36:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400c38:	693b      	ldr	r3, [r7, #16]
  400c3a:	091a      	lsrs	r2, r3, #4
  400c3c:	4613      	mov	r3, r2
  400c3e:	009b      	lsls	r3, r3, #2
  400c40:	4413      	add	r3, r2
  400c42:	005b      	lsls	r3, r3, #1
  400c44:	461a      	mov	r2, r3
  400c46:	693b      	ldr	r3, [r7, #16]
  400c48:	f003 030f 	and.w	r3, r3, #15
  400c4c:	441a      	add	r2, r3
  400c4e:	687b      	ldr	r3, [r7, #4]
  400c50:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  400c52:	683b      	ldr	r3, [r7, #0]
  400c54:	2b00      	cmp	r3, #0
  400c56:	d010      	beq.n	400c7a <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  400c58:	697b      	ldr	r3, [r7, #20]
  400c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400c5e:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400c60:	693b      	ldr	r3, [r7, #16]
  400c62:	091a      	lsrs	r2, r3, #4
  400c64:	4613      	mov	r3, r2
  400c66:	009b      	lsls	r3, r3, #2
  400c68:	4413      	add	r3, r2
  400c6a:	005b      	lsls	r3, r3, #1
  400c6c:	461a      	mov	r2, r3
  400c6e:	693b      	ldr	r3, [r7, #16]
  400c70:	f003 030f 	and.w	r3, r3, #15
  400c74:	441a      	add	r2, r3
  400c76:	683b      	ldr	r3, [r7, #0]
  400c78:	601a      	str	r2, [r3, #0]
	}
}
  400c7a:	bf00      	nop
  400c7c:	371c      	adds	r7, #28
  400c7e:	46bd      	mov	sp, r7
  400c80:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c84:	4770      	bx	lr
	...

00400c88 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400c88:	b480      	push	{r7}
  400c8a:	b087      	sub	sp, #28
  400c8c:	af00      	add	r7, sp, #0
  400c8e:	60f8      	str	r0, [r7, #12]
  400c90:	60b9      	str	r1, [r7, #8]
  400c92:	607a      	str	r2, [r7, #4]
  400c94:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  400c96:	2300      	movs	r3, #0
  400c98:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400c9a:	68fb      	ldr	r3, [r7, #12]
  400c9c:	685b      	ldr	r3, [r3, #4]
  400c9e:	f003 0301 	and.w	r3, r3, #1
  400ca2:	2b01      	cmp	r3, #1
  400ca4:	d109      	bne.n	400cba <rtc_set_time+0x32>
		if (ul_hour > 12) {
  400ca6:	68bb      	ldr	r3, [r7, #8]
  400ca8:	2b0c      	cmp	r3, #12
  400caa:	d906      	bls.n	400cba <rtc_set_time+0x32>
			ul_hour -= 12;
  400cac:	68bb      	ldr	r3, [r7, #8]
  400cae:	3b0c      	subs	r3, #12
  400cb0:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  400cb2:	697b      	ldr	r3, [r7, #20]
  400cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400cb8:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400cba:	68bb      	ldr	r3, [r7, #8]
  400cbc:	4a33      	ldr	r2, [pc, #204]	; (400d8c <rtc_set_time+0x104>)
  400cbe:	fba2 2303 	umull	r2, r3, r2, r3
  400cc2:	08db      	lsrs	r3, r3, #3
  400cc4:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400cc6:	68b9      	ldr	r1, [r7, #8]
  400cc8:	4b30      	ldr	r3, [pc, #192]	; (400d8c <rtc_set_time+0x104>)
  400cca:	fba3 2301 	umull	r2, r3, r3, r1
  400cce:	08da      	lsrs	r2, r3, #3
  400cd0:	4613      	mov	r3, r2
  400cd2:	009b      	lsls	r3, r3, #2
  400cd4:	4413      	add	r3, r2
  400cd6:	005b      	lsls	r3, r3, #1
  400cd8:	1aca      	subs	r2, r1, r3
  400cda:	0413      	lsls	r3, r2, #16
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400cdc:	4303      	orrs	r3, r0
  400cde:	697a      	ldr	r2, [r7, #20]
  400ce0:	4313      	orrs	r3, r2
  400ce2:	617b      	str	r3, [r7, #20]

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	4a29      	ldr	r2, [pc, #164]	; (400d8c <rtc_set_time+0x104>)
  400ce8:	fba2 2303 	umull	r2, r3, r2, r3
  400cec:	08db      	lsrs	r3, r3, #3
  400cee:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400cf0:	6879      	ldr	r1, [r7, #4]
  400cf2:	4b26      	ldr	r3, [pc, #152]	; (400d8c <rtc_set_time+0x104>)
  400cf4:	fba3 2301 	umull	r2, r3, r3, r1
  400cf8:	08da      	lsrs	r2, r3, #3
  400cfa:	4613      	mov	r3, r2
  400cfc:	009b      	lsls	r3, r3, #2
  400cfe:	4413      	add	r3, r2
  400d00:	005b      	lsls	r3, r3, #1
  400d02:	1aca      	subs	r2, r1, r3
  400d04:	0213      	lsls	r3, r2, #8
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400d06:	4303      	orrs	r3, r0
  400d08:	697a      	ldr	r2, [r7, #20]
  400d0a:	4313      	orrs	r3, r2
  400d0c:	617b      	str	r3, [r7, #20]

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400d0e:	683b      	ldr	r3, [r7, #0]
  400d10:	4a1e      	ldr	r2, [pc, #120]	; (400d8c <rtc_set_time+0x104>)
  400d12:	fba2 2303 	umull	r2, r3, r2, r3
  400d16:	08db      	lsrs	r3, r3, #3
  400d18:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400d1a:	6839      	ldr	r1, [r7, #0]
  400d1c:	4b1b      	ldr	r3, [pc, #108]	; (400d8c <rtc_set_time+0x104>)
  400d1e:	fba3 2301 	umull	r2, r3, r3, r1
  400d22:	08da      	lsrs	r2, r3, #3
  400d24:	4613      	mov	r3, r2
  400d26:	009b      	lsls	r3, r3, #2
  400d28:	4413      	add	r3, r2
  400d2a:	005b      	lsls	r3, r3, #1
  400d2c:	1aca      	subs	r2, r1, r3
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400d2e:	ea40 0302 	orr.w	r3, r0, r2
  400d32:	697a      	ldr	r2, [r7, #20]
  400d34:	4313      	orrs	r3, r2
  400d36:	617b      	str	r3, [r7, #20]

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400d38:	68fb      	ldr	r3, [r7, #12]
  400d3a:	681b      	ldr	r3, [r3, #0]
  400d3c:	f043 0201 	orr.w	r2, r3, #1
  400d40:	68fb      	ldr	r3, [r7, #12]
  400d42:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400d44:	bf00      	nop
  400d46:	68fb      	ldr	r3, [r7, #12]
  400d48:	699b      	ldr	r3, [r3, #24]
  400d4a:	f003 0301 	and.w	r3, r3, #1
  400d4e:	2b01      	cmp	r3, #1
  400d50:	d1f9      	bne.n	400d46 <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400d52:	68fb      	ldr	r3, [r7, #12]
  400d54:	2201      	movs	r2, #1
  400d56:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  400d58:	68fb      	ldr	r3, [r7, #12]
  400d5a:	697a      	ldr	r2, [r7, #20]
  400d5c:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400d5e:	68fb      	ldr	r3, [r7, #12]
  400d60:	681b      	ldr	r3, [r3, #0]
  400d62:	f023 0201 	bic.w	r2, r3, #1
  400d66:	68fb      	ldr	r3, [r7, #12]
  400d68:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  400d6a:	68fb      	ldr	r3, [r7, #12]
  400d6c:	69db      	ldr	r3, [r3, #28]
  400d6e:	f043 0204 	orr.w	r2, r3, #4
  400d72:	68fb      	ldr	r3, [r7, #12]
  400d74:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400d76:	68fb      	ldr	r3, [r7, #12]
  400d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400d7a:	f003 0301 	and.w	r3, r3, #1
}
  400d7e:	4618      	mov	r0, r3
  400d80:	371c      	adds	r7, #28
  400d82:	46bd      	mov	sp, r7
  400d84:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d88:	4770      	bx	lr
  400d8a:	bf00      	nop
  400d8c:	cccccccd 	.word	0xcccccccd

00400d90 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  400d90:	b480      	push	{r7}
  400d92:	b087      	sub	sp, #28
  400d94:	af00      	add	r7, sp, #0
  400d96:	60f8      	str	r0, [r7, #12]
  400d98:	60b9      	str	r1, [r7, #8]
  400d9a:	607a      	str	r2, [r7, #4]
  400d9c:	603b      	str	r3, [r7, #0]
	uint32_t ul_alarm = 0;
  400d9e:	2300      	movs	r3, #0
  400da0:	617b      	str	r3, [r7, #20]

	/* Hour alarm setting */
	if (ul_hour_flag) {
  400da2:	68bb      	ldr	r3, [r7, #8]
  400da4:	2b00      	cmp	r3, #0
  400da6:	d024      	beq.n	400df2 <rtc_set_time_alarm+0x62>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	685b      	ldr	r3, [r3, #4]
  400dac:	f003 0301 	and.w	r3, r3, #1
  400db0:	2b01      	cmp	r3, #1
  400db2:	d109      	bne.n	400dc8 <rtc_set_time_alarm+0x38>
			if (ul_hour > 12) {
  400db4:	687b      	ldr	r3, [r7, #4]
  400db6:	2b0c      	cmp	r3, #12
  400db8:	d906      	bls.n	400dc8 <rtc_set_time_alarm+0x38>
				ul_hour -= 12;
  400dba:	687b      	ldr	r3, [r7, #4]
  400dbc:	3b0c      	subs	r3, #12
  400dbe:	607b      	str	r3, [r7, #4]
				ul_alarm |= RTC_TIMR_AMPM;
  400dc0:	697b      	ldr	r3, [r7, #20]
  400dc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400dc6:	617b      	str	r3, [r7, #20]
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400dc8:	687b      	ldr	r3, [r7, #4]
  400dca:	4a2e      	ldr	r2, [pc, #184]	; (400e84 <rtc_set_time_alarm+0xf4>)
  400dcc:	fba2 2303 	umull	r2, r3, r2, r3
  400dd0:	08db      	lsrs	r3, r3, #3
  400dd2:	0518      	lsls	r0, r3, #20
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400dd4:	6879      	ldr	r1, [r7, #4]
  400dd6:	4b2b      	ldr	r3, [pc, #172]	; (400e84 <rtc_set_time_alarm+0xf4>)
  400dd8:	fba3 2301 	umull	r2, r3, r3, r1
  400ddc:	08da      	lsrs	r2, r3, #3
  400dde:	4613      	mov	r3, r2
  400de0:	009b      	lsls	r3, r3, #2
  400de2:	4413      	add	r3, r2
  400de4:	005b      	lsls	r3, r3, #1
  400de6:	1aca      	subs	r2, r1, r3
  400de8:	0413      	lsls	r3, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400dea:	4303      	orrs	r3, r0
  400dec:	697a      	ldr	r2, [r7, #20]
  400dee:	4313      	orrs	r3, r2
  400df0:	617b      	str	r3, [r7, #20]
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  400df2:	683b      	ldr	r3, [r7, #0]
  400df4:	2b00      	cmp	r3, #0
  400df6:	d014      	beq.n	400e22 <rtc_set_time_alarm+0x92>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400df8:	6a3b      	ldr	r3, [r7, #32]
  400dfa:	4a22      	ldr	r2, [pc, #136]	; (400e84 <rtc_set_time_alarm+0xf4>)
  400dfc:	fba2 2303 	umull	r2, r3, r2, r3
  400e00:	08db      	lsrs	r3, r3, #3
  400e02:	0318      	lsls	r0, r3, #12
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400e04:	6a39      	ldr	r1, [r7, #32]
  400e06:	4b1f      	ldr	r3, [pc, #124]	; (400e84 <rtc_set_time_alarm+0xf4>)
  400e08:	fba3 2301 	umull	r2, r3, r3, r1
  400e0c:	08da      	lsrs	r2, r3, #3
  400e0e:	4613      	mov	r3, r2
  400e10:	009b      	lsls	r3, r3, #2
  400e12:	4413      	add	r3, r2
  400e14:	005b      	lsls	r3, r3, #1
  400e16:	1aca      	subs	r2, r1, r3
  400e18:	0213      	lsls	r3, r2, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400e1a:	4303      	orrs	r3, r0
  400e1c:	697a      	ldr	r2, [r7, #20]
  400e1e:	4313      	orrs	r3, r2
  400e20:	617b      	str	r3, [r7, #20]
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e24:	2b00      	cmp	r3, #0
  400e26:	d014      	beq.n	400e52 <rtc_set_time_alarm+0xc2>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400e2a:	4a16      	ldr	r2, [pc, #88]	; (400e84 <rtc_set_time_alarm+0xf4>)
  400e2c:	fba2 2303 	umull	r2, r3, r2, r3
  400e30:	08db      	lsrs	r3, r3, #3
  400e32:	0118      	lsls	r0, r3, #4
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  400e36:	4b13      	ldr	r3, [pc, #76]	; (400e84 <rtc_set_time_alarm+0xf4>)
  400e38:	fba3 2301 	umull	r2, r3, r3, r1
  400e3c:	08da      	lsrs	r2, r3, #3
  400e3e:	4613      	mov	r3, r2
  400e40:	009b      	lsls	r3, r3, #2
  400e42:	4413      	add	r3, r2
  400e44:	005b      	lsls	r3, r3, #1
  400e46:	1aca      	subs	r2, r1, r3
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400e48:	ea40 0302 	orr.w	r3, r0, r2
  400e4c:	697a      	ldr	r2, [r7, #20]
  400e4e:	4313      	orrs	r3, r2
  400e50:	617b      	str	r3, [r7, #20]
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400e52:	68fb      	ldr	r3, [r7, #12]
  400e54:	691a      	ldr	r2, [r3, #16]
  400e56:	4b0c      	ldr	r3, [pc, #48]	; (400e88 <rtc_set_time_alarm+0xf8>)
  400e58:	4013      	ands	r3, r2
  400e5a:	68fa      	ldr	r2, [r7, #12]
  400e5c:	6113      	str	r3, [r2, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400e5e:	68fb      	ldr	r3, [r7, #12]
  400e60:	697a      	ldr	r2, [r7, #20]
  400e62:	611a      	str	r2, [r3, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400e64:	68fb      	ldr	r3, [r7, #12]
  400e66:	691a      	ldr	r2, [r3, #16]
  400e68:	4b08      	ldr	r3, [pc, #32]	; (400e8c <rtc_set_time_alarm+0xfc>)
  400e6a:	4313      	orrs	r3, r2
  400e6c:	68fa      	ldr	r2, [r7, #12]
  400e6e:	6113      	str	r3, [r2, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  400e70:	68fb      	ldr	r3, [r7, #12]
  400e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400e74:	f003 0304 	and.w	r3, r3, #4
}
  400e78:	4618      	mov	r0, r3
  400e7a:	371c      	adds	r7, #28
  400e7c:	46bd      	mov	sp, r7
  400e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e82:	4770      	bx	lr
  400e84:	cccccccd 	.word	0xcccccccd
  400e88:	ff7f7f7f 	.word	0xff7f7f7f
  400e8c:	00808080 	.word	0x00808080

00400e90 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400e90:	b480      	push	{r7}
  400e92:	b089      	sub	sp, #36	; 0x24
  400e94:	af00      	add	r7, sp, #0
  400e96:	60f8      	str	r0, [r7, #12]
  400e98:	60b9      	str	r1, [r7, #8]
  400e9a:	607a      	str	r2, [r7, #4]
  400e9c:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400e9e:	68fb      	ldr	r3, [r7, #12]
  400ea0:	68db      	ldr	r3, [r3, #12]
  400ea2:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  400ea4:	e002      	b.n	400eac <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  400ea6:	68fb      	ldr	r3, [r7, #12]
  400ea8:	68db      	ldr	r3, [r3, #12]
  400eaa:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  400eac:	68fb      	ldr	r3, [r7, #12]
  400eae:	68da      	ldr	r2, [r3, #12]
  400eb0:	69fb      	ldr	r3, [r7, #28]
  400eb2:	429a      	cmp	r2, r3
  400eb4:	d1f7      	bne.n	400ea6 <rtc_get_date+0x16>
	}

	/* Retrieve year */
	if (pul_year) {
  400eb6:	68bb      	ldr	r3, [r7, #8]
  400eb8:	2b00      	cmp	r3, #0
  400eba:	d024      	beq.n	400f06 <rtc_get_date+0x76>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  400ebc:	69fb      	ldr	r3, [r7, #28]
  400ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400ec2:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400ec4:	69bb      	ldr	r3, [r7, #24]
  400ec6:	091a      	lsrs	r2, r3, #4
  400ec8:	4613      	mov	r3, r2
  400eca:	009b      	lsls	r3, r3, #2
  400ecc:	4413      	add	r3, r2
  400ece:	005b      	lsls	r3, r3, #1
  400ed0:	461a      	mov	r2, r3
  400ed2:	69bb      	ldr	r3, [r7, #24]
  400ed4:	f003 030f 	and.w	r3, r3, #15
  400ed8:	4413      	add	r3, r2
  400eda:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  400edc:	69fb      	ldr	r3, [r7, #28]
  400ede:	0a1b      	lsrs	r3, r3, #8
  400ee0:	b2db      	uxtb	r3, r3
  400ee2:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400ee4:	697b      	ldr	r3, [r7, #20]
  400ee6:	2264      	movs	r2, #100	; 0x64
  400ee8:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400eec:	69bb      	ldr	r3, [r7, #24]
  400eee:	091a      	lsrs	r2, r3, #4
  400ef0:	4613      	mov	r3, r2
  400ef2:	009b      	lsls	r3, r3, #2
  400ef4:	4413      	add	r3, r2
  400ef6:	005b      	lsls	r3, r3, #1
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400ef8:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400efa:	69bb      	ldr	r3, [r7, #24]
  400efc:	f003 030f 	and.w	r3, r3, #15
  400f00:	441a      	add	r2, r3
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400f02:	68bb      	ldr	r3, [r7, #8]
  400f04:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400f06:	687b      	ldr	r3, [r7, #4]
  400f08:	2b00      	cmp	r3, #0
  400f0a:	d011      	beq.n	400f30 <rtc_get_date+0xa0>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  400f0c:	69fb      	ldr	r3, [r7, #28]
  400f0e:	0c1b      	lsrs	r3, r3, #16
  400f10:	f003 031f 	and.w	r3, r3, #31
  400f14:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400f16:	69bb      	ldr	r3, [r7, #24]
  400f18:	091a      	lsrs	r2, r3, #4
  400f1a:	4613      	mov	r3, r2
  400f1c:	009b      	lsls	r3, r3, #2
  400f1e:	4413      	add	r3, r2
  400f20:	005b      	lsls	r3, r3, #1
  400f22:	461a      	mov	r2, r3
  400f24:	69bb      	ldr	r3, [r7, #24]
  400f26:	f003 030f 	and.w	r3, r3, #15
  400f2a:	441a      	add	r2, r3
  400f2c:	687b      	ldr	r3, [r7, #4]
  400f2e:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400f30:	683b      	ldr	r3, [r7, #0]
  400f32:	2b00      	cmp	r3, #0
  400f34:	d011      	beq.n	400f5a <rtc_get_date+0xca>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  400f36:	69fb      	ldr	r3, [r7, #28]
  400f38:	0e1b      	lsrs	r3, r3, #24
  400f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400f3e:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400f40:	69bb      	ldr	r3, [r7, #24]
  400f42:	091a      	lsrs	r2, r3, #4
  400f44:	4613      	mov	r3, r2
  400f46:	009b      	lsls	r3, r3, #2
  400f48:	4413      	add	r3, r2
  400f4a:	005b      	lsls	r3, r3, #1
  400f4c:	461a      	mov	r2, r3
  400f4e:	69bb      	ldr	r3, [r7, #24]
  400f50:	f003 030f 	and.w	r3, r3, #15
  400f54:	441a      	add	r2, r3
  400f56:	683b      	ldr	r3, [r7, #0]
  400f58:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  400f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400f5c:	2b00      	cmp	r3, #0
  400f5e:	d005      	beq.n	400f6c <rtc_get_date+0xdc>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  400f60:	69fb      	ldr	r3, [r7, #28]
  400f62:	0d5b      	lsrs	r3, r3, #21
  400f64:	f003 0207 	and.w	r2, r3, #7
  400f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400f6a:	601a      	str	r2, [r3, #0]
	}
}
  400f6c:	bf00      	nop
  400f6e:	3724      	adds	r7, #36	; 0x24
  400f70:	46bd      	mov	sp, r7
  400f72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f76:	4770      	bx	lr

00400f78 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400f78:	b480      	push	{r7}
  400f7a:	b087      	sub	sp, #28
  400f7c:	af00      	add	r7, sp, #0
  400f7e:	60f8      	str	r0, [r7, #12]
  400f80:	60b9      	str	r1, [r7, #8]
  400f82:	607a      	str	r2, [r7, #4]
  400f84:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  400f86:	2300      	movs	r3, #0
  400f88:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400f8a:	68bb      	ldr	r3, [r7, #8]
  400f8c:	4a46      	ldr	r2, [pc, #280]	; (4010a8 <rtc_set_date+0x130>)
  400f8e:	fba2 2303 	umull	r2, r3, r2, r3
  400f92:	099b      	lsrs	r3, r3, #6
  400f94:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400f96:	68bb      	ldr	r3, [r7, #8]
  400f98:	4a44      	ldr	r2, [pc, #272]	; (4010ac <rtc_set_date+0x134>)
  400f9a:	fba2 2303 	umull	r2, r3, r2, r3
  400f9e:	0959      	lsrs	r1, r3, #5
  400fa0:	4b43      	ldr	r3, [pc, #268]	; (4010b0 <rtc_set_date+0x138>)
  400fa2:	fba3 2301 	umull	r2, r3, r3, r1
  400fa6:	08da      	lsrs	r2, r3, #3
  400fa8:	4613      	mov	r3, r2
  400faa:	009b      	lsls	r3, r3, #2
  400fac:	4413      	add	r3, r2
  400fae:	005b      	lsls	r3, r3, #1
  400fb0:	1aca      	subs	r2, r1, r3
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  400fb2:	ea40 0302 	orr.w	r3, r0, r2
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400fb6:	697a      	ldr	r2, [r7, #20]
  400fb8:	4313      	orrs	r3, r2
  400fba:	617b      	str	r3, [r7, #20]

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400fbc:	68bb      	ldr	r3, [r7, #8]
  400fbe:	4a3c      	ldr	r2, [pc, #240]	; (4010b0 <rtc_set_date+0x138>)
  400fc0:	fba2 2303 	umull	r2, r3, r2, r3
  400fc4:	08d9      	lsrs	r1, r3, #3
  400fc6:	4b3a      	ldr	r3, [pc, #232]	; (4010b0 <rtc_set_date+0x138>)
  400fc8:	fba3 2301 	umull	r2, r3, r3, r1
  400fcc:	08da      	lsrs	r2, r3, #3
  400fce:	4613      	mov	r3, r2
  400fd0:	009b      	lsls	r3, r3, #2
  400fd2:	4413      	add	r3, r2
  400fd4:	005b      	lsls	r3, r3, #1
  400fd6:	1aca      	subs	r2, r1, r3
  400fd8:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400fda:	68b9      	ldr	r1, [r7, #8]
  400fdc:	4b34      	ldr	r3, [pc, #208]	; (4010b0 <rtc_set_date+0x138>)
  400fde:	fba3 2301 	umull	r2, r3, r3, r1
  400fe2:	08da      	lsrs	r2, r3, #3
  400fe4:	4613      	mov	r3, r2
  400fe6:	009b      	lsls	r3, r3, #2
  400fe8:	4413      	add	r3, r2
  400fea:	005b      	lsls	r3, r3, #1
  400fec:	1aca      	subs	r2, r1, r3
  400fee:	0213      	lsls	r3, r2, #8
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  400ff0:	4303      	orrs	r3, r0
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400ff2:	697a      	ldr	r2, [r7, #20]
  400ff4:	4313      	orrs	r3, r2
  400ff6:	617b      	str	r3, [r7, #20]

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400ff8:	687b      	ldr	r3, [r7, #4]
  400ffa:	4a2d      	ldr	r2, [pc, #180]	; (4010b0 <rtc_set_date+0x138>)
  400ffc:	fba2 2303 	umull	r2, r3, r2, r3
  401000:	08db      	lsrs	r3, r3, #3
  401002:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  401004:	6879      	ldr	r1, [r7, #4]
  401006:	4b2a      	ldr	r3, [pc, #168]	; (4010b0 <rtc_set_date+0x138>)
  401008:	fba3 2301 	umull	r2, r3, r3, r1
  40100c:	08da      	lsrs	r2, r3, #3
  40100e:	4613      	mov	r3, r2
  401010:	009b      	lsls	r3, r3, #2
  401012:	4413      	add	r3, r2
  401014:	005b      	lsls	r3, r3, #1
  401016:	1aca      	subs	r2, r1, r3
  401018:	0413      	lsls	r3, r2, #16
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40101a:	4303      	orrs	r3, r0
  40101c:	697a      	ldr	r2, [r7, #20]
  40101e:	4313      	orrs	r3, r2
  401020:	617b      	str	r3, [r7, #20]

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  401022:	6a3b      	ldr	r3, [r7, #32]
  401024:	055b      	lsls	r3, r3, #21
  401026:	697a      	ldr	r2, [r7, #20]
  401028:	4313      	orrs	r3, r2
  40102a:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40102c:	683b      	ldr	r3, [r7, #0]
  40102e:	4a20      	ldr	r2, [pc, #128]	; (4010b0 <rtc_set_date+0x138>)
  401030:	fba2 2303 	umull	r2, r3, r2, r3
  401034:	08db      	lsrs	r3, r3, #3
  401036:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  401038:	6839      	ldr	r1, [r7, #0]
  40103a:	4b1d      	ldr	r3, [pc, #116]	; (4010b0 <rtc_set_date+0x138>)
  40103c:	fba3 2301 	umull	r2, r3, r3, r1
  401040:	08da      	lsrs	r2, r3, #3
  401042:	4613      	mov	r3, r2
  401044:	009b      	lsls	r3, r3, #2
  401046:	4413      	add	r3, r2
  401048:	005b      	lsls	r3, r3, #1
  40104a:	1aca      	subs	r2, r1, r3
  40104c:	0613      	lsls	r3, r2, #24
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40104e:	4303      	orrs	r3, r0
  401050:	697a      	ldr	r2, [r7, #20]
  401052:	4313      	orrs	r3, r2
  401054:	617b      	str	r3, [r7, #20]

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  401056:	68fb      	ldr	r3, [r7, #12]
  401058:	681b      	ldr	r3, [r3, #0]
  40105a:	f043 0202 	orr.w	r2, r3, #2
  40105e:	68fb      	ldr	r3, [r7, #12]
  401060:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  401062:	bf00      	nop
  401064:	68fb      	ldr	r3, [r7, #12]
  401066:	699b      	ldr	r3, [r3, #24]
  401068:	f003 0301 	and.w	r3, r3, #1
  40106c:	2b01      	cmp	r3, #1
  40106e:	d1f9      	bne.n	401064 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  401070:	68fb      	ldr	r3, [r7, #12]
  401072:	2201      	movs	r2, #1
  401074:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  401076:	68fb      	ldr	r3, [r7, #12]
  401078:	697a      	ldr	r2, [r7, #20]
  40107a:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40107c:	68fb      	ldr	r3, [r7, #12]
  40107e:	681b      	ldr	r3, [r3, #0]
  401080:	f023 0202 	bic.w	r2, r3, #2
  401084:	68fb      	ldr	r3, [r7, #12]
  401086:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  401088:	68fb      	ldr	r3, [r7, #12]
  40108a:	69db      	ldr	r3, [r3, #28]
  40108c:	f043 0204 	orr.w	r2, r3, #4
  401090:	68fb      	ldr	r3, [r7, #12]
  401092:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  401094:	68fb      	ldr	r3, [r7, #12]
  401096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401098:	f003 0302 	and.w	r3, r3, #2
}
  40109c:	4618      	mov	r0, r3
  40109e:	371c      	adds	r7, #28
  4010a0:	46bd      	mov	sp, r7
  4010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010a6:	4770      	bx	lr
  4010a8:	10624dd3 	.word	0x10624dd3
  4010ac:	51eb851f 	.word	0x51eb851f
  4010b0:	cccccccd 	.word	0xcccccccd

004010b4 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  4010b4:	b480      	push	{r7}
  4010b6:	b087      	sub	sp, #28
  4010b8:	af00      	add	r7, sp, #0
  4010ba:	60f8      	str	r0, [r7, #12]
  4010bc:	60b9      	str	r1, [r7, #8]
  4010be:	607a      	str	r2, [r7, #4]
  4010c0:	603b      	str	r3, [r7, #0]
	uint32_t ul_alarm = 0;
  4010c2:	2300      	movs	r3, #0
  4010c4:	617b      	str	r3, [r7, #20]

	/* Month alarm setting */
	if (ul_month_flag) {
  4010c6:	68bb      	ldr	r3, [r7, #8]
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d014      	beq.n	4010f6 <rtc_set_date_alarm+0x42>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4010cc:	687b      	ldr	r3, [r7, #4]
  4010ce:	4a22      	ldr	r2, [pc, #136]	; (401158 <rtc_set_date_alarm+0xa4>)
  4010d0:	fba2 2303 	umull	r2, r3, r2, r3
  4010d4:	08db      	lsrs	r3, r3, #3
  4010d6:	0518      	lsls	r0, r3, #20
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4010d8:	6879      	ldr	r1, [r7, #4]
  4010da:	4b1f      	ldr	r3, [pc, #124]	; (401158 <rtc_set_date_alarm+0xa4>)
  4010dc:	fba3 2301 	umull	r2, r3, r3, r1
  4010e0:	08da      	lsrs	r2, r3, #3
  4010e2:	4613      	mov	r3, r2
  4010e4:	009b      	lsls	r3, r3, #2
  4010e6:	4413      	add	r3, r2
  4010e8:	005b      	lsls	r3, r3, #1
  4010ea:	1aca      	subs	r2, r1, r3
  4010ec:	0413      	lsls	r3, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4010ee:	4303      	orrs	r3, r0
  4010f0:	697a      	ldr	r2, [r7, #20]
  4010f2:	4313      	orrs	r3, r2
  4010f4:	617b      	str	r3, [r7, #20]
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  4010f6:	683b      	ldr	r3, [r7, #0]
  4010f8:	2b00      	cmp	r3, #0
  4010fa:	d014      	beq.n	401126 <rtc_set_date_alarm+0x72>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4010fc:	6a3b      	ldr	r3, [r7, #32]
  4010fe:	4a16      	ldr	r2, [pc, #88]	; (401158 <rtc_set_date_alarm+0xa4>)
  401100:	fba2 2303 	umull	r2, r3, r2, r3
  401104:	08db      	lsrs	r3, r3, #3
  401106:	0718      	lsls	r0, r3, #28
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  401108:	6a39      	ldr	r1, [r7, #32]
  40110a:	4b13      	ldr	r3, [pc, #76]	; (401158 <rtc_set_date_alarm+0xa4>)
  40110c:	fba3 2301 	umull	r2, r3, r3, r1
  401110:	08da      	lsrs	r2, r3, #3
  401112:	4613      	mov	r3, r2
  401114:	009b      	lsls	r3, r3, #2
  401116:	4413      	add	r3, r2
  401118:	005b      	lsls	r3, r3, #1
  40111a:	1aca      	subs	r2, r1, r3
  40111c:	0613      	lsls	r3, r2, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40111e:	4303      	orrs	r3, r0
  401120:	697a      	ldr	r2, [r7, #20]
  401122:	4313      	orrs	r3, r2
  401124:	617b      	str	r3, [r7, #20]
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  401126:	68fb      	ldr	r3, [r7, #12]
  401128:	695a      	ldr	r2, [r3, #20]
  40112a:	4b0c      	ldr	r3, [pc, #48]	; (40115c <rtc_set_date_alarm+0xa8>)
  40112c:	4013      	ands	r3, r2
  40112e:	68fa      	ldr	r2, [r7, #12]
  401130:	6153      	str	r3, [r2, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  401132:	68fb      	ldr	r3, [r7, #12]
  401134:	697a      	ldr	r2, [r7, #20]
  401136:	615a      	str	r2, [r3, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  401138:	68fb      	ldr	r3, [r7, #12]
  40113a:	695a      	ldr	r2, [r3, #20]
  40113c:	4b08      	ldr	r3, [pc, #32]	; (401160 <rtc_set_date_alarm+0xac>)
  40113e:	4313      	orrs	r3, r2
  401140:	68fa      	ldr	r2, [r7, #12]
  401142:	6153      	str	r3, [r2, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  401144:	68fb      	ldr	r3, [r7, #12]
  401146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401148:	f003 0308 	and.w	r3, r3, #8
}
  40114c:	4618      	mov	r0, r3
  40114e:	371c      	adds	r7, #28
  401150:	46bd      	mov	sp, r7
  401152:	f85d 7b04 	ldr.w	r7, [sp], #4
  401156:	4770      	bx	lr
  401158:	cccccccd 	.word	0xcccccccd
  40115c:	7f7fffff 	.word	0x7f7fffff
  401160:	80800000 	.word	0x80800000

00401164 <rtc_get_status>:
 * \param p_rtc Pointer to an RTC instance.
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
  401164:	b480      	push	{r7}
  401166:	b083      	sub	sp, #12
  401168:	af00      	add	r7, sp, #0
  40116a:	6078      	str	r0, [r7, #4]
	return (p_rtc->RTC_SR);
  40116c:	687b      	ldr	r3, [r7, #4]
  40116e:	699b      	ldr	r3, [r3, #24]
}
  401170:	4618      	mov	r0, r3
  401172:	370c      	adds	r7, #12
  401174:	46bd      	mov	sp, r7
  401176:	f85d 7b04 	ldr.w	r7, [sp], #4
  40117a:	4770      	bx	lr

0040117c <rtc_clear_status>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
  40117c:	b480      	push	{r7}
  40117e:	b083      	sub	sp, #12
  401180:	af00      	add	r7, sp, #0
  401182:	6078      	str	r0, [r7, #4]
  401184:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_SCCR = ul_clear;
  401186:	687b      	ldr	r3, [r7, #4]
  401188:	683a      	ldr	r2, [r7, #0]
  40118a:	61da      	str	r2, [r3, #28]
}
  40118c:	bf00      	nop
  40118e:	370c      	adds	r7, #12
  401190:	46bd      	mov	sp, r7
  401192:	f85d 7b04 	ldr.w	r7, [sp], #4
  401196:	4770      	bx	lr

00401198 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401198:	b480      	push	{r7}
  40119a:	b085      	sub	sp, #20
  40119c:	af00      	add	r7, sp, #0
  40119e:	6078      	str	r0, [r7, #4]
  4011a0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4011a2:	2300      	movs	r3, #0
  4011a4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4011a6:	687b      	ldr	r3, [r7, #4]
  4011a8:	22ac      	movs	r2, #172	; 0xac
  4011aa:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4011ac:	683b      	ldr	r3, [r7, #0]
  4011ae:	681a      	ldr	r2, [r3, #0]
  4011b0:	683b      	ldr	r3, [r7, #0]
  4011b2:	685b      	ldr	r3, [r3, #4]
  4011b4:	fbb2 f3f3 	udiv	r3, r2, r3
  4011b8:	091b      	lsrs	r3, r3, #4
  4011ba:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4011bc:	68fb      	ldr	r3, [r7, #12]
  4011be:	2b00      	cmp	r3, #0
  4011c0:	d003      	beq.n	4011ca <uart_init+0x32>
  4011c2:	68fb      	ldr	r3, [r7, #12]
  4011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4011c8:	d301      	bcc.n	4011ce <uart_init+0x36>
		return 1;
  4011ca:	2301      	movs	r3, #1
  4011cc:	e00a      	b.n	4011e4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4011ce:	687b      	ldr	r3, [r7, #4]
  4011d0:	68fa      	ldr	r2, [r7, #12]
  4011d2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4011d4:	683b      	ldr	r3, [r7, #0]
  4011d6:	689a      	ldr	r2, [r3, #8]
  4011d8:	687b      	ldr	r3, [r7, #4]
  4011da:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4011dc:	687b      	ldr	r3, [r7, #4]
  4011de:	2250      	movs	r2, #80	; 0x50
  4011e0:	601a      	str	r2, [r3, #0]

	return 0;
  4011e2:	2300      	movs	r3, #0
}
  4011e4:	4618      	mov	r0, r3
  4011e6:	3714      	adds	r7, #20
  4011e8:	46bd      	mov	sp, r7
  4011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011ee:	4770      	bx	lr

004011f0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4011f0:	b480      	push	{r7}
  4011f2:	b083      	sub	sp, #12
  4011f4:	af00      	add	r7, sp, #0
  4011f6:	6078      	str	r0, [r7, #4]
  4011f8:	460b      	mov	r3, r1
  4011fa:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	695b      	ldr	r3, [r3, #20]
  401200:	f003 0302 	and.w	r3, r3, #2
  401204:	2b00      	cmp	r3, #0
  401206:	d101      	bne.n	40120c <uart_write+0x1c>
		return 1;
  401208:	2301      	movs	r3, #1
  40120a:	e003      	b.n	401214 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40120c:	78fa      	ldrb	r2, [r7, #3]
  40120e:	687b      	ldr	r3, [r7, #4]
  401210:	61da      	str	r2, [r3, #28]
	return 0;
  401212:	2300      	movs	r3, #0
}
  401214:	4618      	mov	r0, r3
  401216:	370c      	adds	r7, #12
  401218:	46bd      	mov	sp, r7
  40121a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40121e:	4770      	bx	lr

00401220 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401220:	b480      	push	{r7}
  401222:	b083      	sub	sp, #12
  401224:	af00      	add	r7, sp, #0
  401226:	6078      	str	r0, [r7, #4]
  401228:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40122a:	687b      	ldr	r3, [r7, #4]
  40122c:	695b      	ldr	r3, [r3, #20]
  40122e:	f003 0301 	and.w	r3, r3, #1
  401232:	2b00      	cmp	r3, #0
  401234:	d101      	bne.n	40123a <uart_read+0x1a>
		return 1;
  401236:	2301      	movs	r3, #1
  401238:	e005      	b.n	401246 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40123a:	687b      	ldr	r3, [r7, #4]
  40123c:	699b      	ldr	r3, [r3, #24]
  40123e:	b2da      	uxtb	r2, r3
  401240:	683b      	ldr	r3, [r7, #0]
  401242:	701a      	strb	r2, [r3, #0]
	return 0;
  401244:	2300      	movs	r3, #0
}
  401246:	4618      	mov	r0, r3
  401248:	370c      	adds	r7, #12
  40124a:	46bd      	mov	sp, r7
  40124c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401250:	4770      	bx	lr

00401252 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401252:	b480      	push	{r7}
  401254:	b089      	sub	sp, #36	; 0x24
  401256:	af00      	add	r7, sp, #0
  401258:	60f8      	str	r0, [r7, #12]
  40125a:	60b9      	str	r1, [r7, #8]
  40125c:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40125e:	68bb      	ldr	r3, [r7, #8]
  401260:	011a      	lsls	r2, r3, #4
  401262:	687b      	ldr	r3, [r7, #4]
  401264:	429a      	cmp	r2, r3
  401266:	d802      	bhi.n	40126e <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401268:	2310      	movs	r3, #16
  40126a:	61fb      	str	r3, [r7, #28]
  40126c:	e001      	b.n	401272 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40126e:	2308      	movs	r3, #8
  401270:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401272:	687b      	ldr	r3, [r7, #4]
  401274:	00da      	lsls	r2, r3, #3
  401276:	69fb      	ldr	r3, [r7, #28]
  401278:	68b9      	ldr	r1, [r7, #8]
  40127a:	fb01 f303 	mul.w	r3, r1, r3
  40127e:	085b      	lsrs	r3, r3, #1
  401280:	441a      	add	r2, r3
  401282:	69fb      	ldr	r3, [r7, #28]
  401284:	68b9      	ldr	r1, [r7, #8]
  401286:	fb01 f303 	mul.w	r3, r1, r3
  40128a:	fbb2 f3f3 	udiv	r3, r2, r3
  40128e:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401290:	69bb      	ldr	r3, [r7, #24]
  401292:	08db      	lsrs	r3, r3, #3
  401294:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401296:	69bb      	ldr	r3, [r7, #24]
  401298:	f003 0307 	and.w	r3, r3, #7
  40129c:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40129e:	697b      	ldr	r3, [r7, #20]
  4012a0:	2b00      	cmp	r3, #0
  4012a2:	d003      	beq.n	4012ac <usart_set_async_baudrate+0x5a>
  4012a4:	697b      	ldr	r3, [r7, #20]
  4012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4012aa:	d301      	bcc.n	4012b0 <usart_set_async_baudrate+0x5e>
		return 1;
  4012ac:	2301      	movs	r3, #1
  4012ae:	e00f      	b.n	4012d0 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4012b0:	69fb      	ldr	r3, [r7, #28]
  4012b2:	2b08      	cmp	r3, #8
  4012b4:	d105      	bne.n	4012c2 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4012b6:	68fb      	ldr	r3, [r7, #12]
  4012b8:	685b      	ldr	r3, [r3, #4]
  4012ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4012be:	68fb      	ldr	r3, [r7, #12]
  4012c0:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4012c2:	693b      	ldr	r3, [r7, #16]
  4012c4:	041a      	lsls	r2, r3, #16
  4012c6:	697b      	ldr	r3, [r7, #20]
  4012c8:	431a      	orrs	r2, r3
  4012ca:	68fb      	ldr	r3, [r7, #12]
  4012cc:	621a      	str	r2, [r3, #32]

	return 0;
  4012ce:	2300      	movs	r3, #0
}
  4012d0:	4618      	mov	r0, r3
  4012d2:	3724      	adds	r7, #36	; 0x24
  4012d4:	46bd      	mov	sp, r7
  4012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012da:	4770      	bx	lr

004012dc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4012dc:	b580      	push	{r7, lr}
  4012de:	b082      	sub	sp, #8
  4012e0:	af00      	add	r7, sp, #0
  4012e2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4012e4:	6878      	ldr	r0, [r7, #4]
  4012e6:	4b0d      	ldr	r3, [pc, #52]	; (40131c <usart_reset+0x40>)
  4012e8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4012ea:	687b      	ldr	r3, [r7, #4]
  4012ec:	2200      	movs	r2, #0
  4012ee:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4012f0:	687b      	ldr	r3, [r7, #4]
  4012f2:	2200      	movs	r2, #0
  4012f4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4012f6:	687b      	ldr	r3, [r7, #4]
  4012f8:	2200      	movs	r2, #0
  4012fa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4012fc:	6878      	ldr	r0, [r7, #4]
  4012fe:	4b08      	ldr	r3, [pc, #32]	; (401320 <usart_reset+0x44>)
  401300:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401302:	6878      	ldr	r0, [r7, #4]
  401304:	4b07      	ldr	r3, [pc, #28]	; (401324 <usart_reset+0x48>)
  401306:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401308:	6878      	ldr	r0, [r7, #4]
  40130a:	4b07      	ldr	r3, [pc, #28]	; (401328 <usart_reset+0x4c>)
  40130c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40130e:	6878      	ldr	r0, [r7, #4]
  401310:	4b06      	ldr	r3, [pc, #24]	; (40132c <usart_reset+0x50>)
  401312:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401314:	bf00      	nop
  401316:	3708      	adds	r7, #8
  401318:	46bd      	mov	sp, r7
  40131a:	bd80      	pop	{r7, pc}
  40131c:	004014bd 	.word	0x004014bd
  401320:	004013cf 	.word	0x004013cf
  401324:	00401403 	.word	0x00401403
  401328:	0040141d 	.word	0x0040141d
  40132c:	00401439 	.word	0x00401439

00401330 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401330:	b580      	push	{r7, lr}
  401332:	b084      	sub	sp, #16
  401334:	af00      	add	r7, sp, #0
  401336:	60f8      	str	r0, [r7, #12]
  401338:	60b9      	str	r1, [r7, #8]
  40133a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40133c:	68f8      	ldr	r0, [r7, #12]
  40133e:	4b1a      	ldr	r3, [pc, #104]	; (4013a8 <usart_init_rs232+0x78>)
  401340:	4798      	blx	r3

	ul_reg_val = 0;
  401342:	4b1a      	ldr	r3, [pc, #104]	; (4013ac <usart_init_rs232+0x7c>)
  401344:	2200      	movs	r2, #0
  401346:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401348:	68bb      	ldr	r3, [r7, #8]
  40134a:	2b00      	cmp	r3, #0
  40134c:	d009      	beq.n	401362 <usart_init_rs232+0x32>
  40134e:	68bb      	ldr	r3, [r7, #8]
  401350:	681b      	ldr	r3, [r3, #0]
  401352:	687a      	ldr	r2, [r7, #4]
  401354:	4619      	mov	r1, r3
  401356:	68f8      	ldr	r0, [r7, #12]
  401358:	4b15      	ldr	r3, [pc, #84]	; (4013b0 <usart_init_rs232+0x80>)
  40135a:	4798      	blx	r3
  40135c:	4603      	mov	r3, r0
  40135e:	2b00      	cmp	r3, #0
  401360:	d001      	beq.n	401366 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401362:	2301      	movs	r3, #1
  401364:	e01b      	b.n	40139e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401366:	68bb      	ldr	r3, [r7, #8]
  401368:	685a      	ldr	r2, [r3, #4]
  40136a:	68bb      	ldr	r3, [r7, #8]
  40136c:	689b      	ldr	r3, [r3, #8]
  40136e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401370:	68bb      	ldr	r3, [r7, #8]
  401372:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401374:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401376:	68bb      	ldr	r3, [r7, #8]
  401378:	68db      	ldr	r3, [r3, #12]
  40137a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40137c:	4b0b      	ldr	r3, [pc, #44]	; (4013ac <usart_init_rs232+0x7c>)
  40137e:	681b      	ldr	r3, [r3, #0]
  401380:	4313      	orrs	r3, r2
  401382:	4a0a      	ldr	r2, [pc, #40]	; (4013ac <usart_init_rs232+0x7c>)
  401384:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401386:	4b09      	ldr	r3, [pc, #36]	; (4013ac <usart_init_rs232+0x7c>)
  401388:	681b      	ldr	r3, [r3, #0]
  40138a:	4a08      	ldr	r2, [pc, #32]	; (4013ac <usart_init_rs232+0x7c>)
  40138c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40138e:	68fb      	ldr	r3, [r7, #12]
  401390:	685a      	ldr	r2, [r3, #4]
  401392:	4b06      	ldr	r3, [pc, #24]	; (4013ac <usart_init_rs232+0x7c>)
  401394:	681b      	ldr	r3, [r3, #0]
  401396:	431a      	orrs	r2, r3
  401398:	68fb      	ldr	r3, [r7, #12]
  40139a:	605a      	str	r2, [r3, #4]

	return 0;
  40139c:	2300      	movs	r3, #0
}
  40139e:	4618      	mov	r0, r3
  4013a0:	3710      	adds	r7, #16
  4013a2:	46bd      	mov	sp, r7
  4013a4:	bd80      	pop	{r7, pc}
  4013a6:	bf00      	nop
  4013a8:	004012dd 	.word	0x004012dd
  4013ac:	20400a4c 	.word	0x20400a4c
  4013b0:	00401253 	.word	0x00401253

004013b4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4013b4:	b480      	push	{r7}
  4013b6:	b083      	sub	sp, #12
  4013b8:	af00      	add	r7, sp, #0
  4013ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4013bc:	687b      	ldr	r3, [r7, #4]
  4013be:	2240      	movs	r2, #64	; 0x40
  4013c0:	601a      	str	r2, [r3, #0]
}
  4013c2:	bf00      	nop
  4013c4:	370c      	adds	r7, #12
  4013c6:	46bd      	mov	sp, r7
  4013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013cc:	4770      	bx	lr

004013ce <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4013ce:	b480      	push	{r7}
  4013d0:	b083      	sub	sp, #12
  4013d2:	af00      	add	r7, sp, #0
  4013d4:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4013d6:	687b      	ldr	r3, [r7, #4]
  4013d8:	2288      	movs	r2, #136	; 0x88
  4013da:	601a      	str	r2, [r3, #0]
}
  4013dc:	bf00      	nop
  4013de:	370c      	adds	r7, #12
  4013e0:	46bd      	mov	sp, r7
  4013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013e6:	4770      	bx	lr

004013e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4013e8:	b480      	push	{r7}
  4013ea:	b083      	sub	sp, #12
  4013ec:	af00      	add	r7, sp, #0
  4013ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4013f0:	687b      	ldr	r3, [r7, #4]
  4013f2:	2210      	movs	r2, #16
  4013f4:	601a      	str	r2, [r3, #0]
}
  4013f6:	bf00      	nop
  4013f8:	370c      	adds	r7, #12
  4013fa:	46bd      	mov	sp, r7
  4013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401400:	4770      	bx	lr

00401402 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401402:	b480      	push	{r7}
  401404:	b083      	sub	sp, #12
  401406:	af00      	add	r7, sp, #0
  401408:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40140a:	687b      	ldr	r3, [r7, #4]
  40140c:	2224      	movs	r2, #36	; 0x24
  40140e:	601a      	str	r2, [r3, #0]
}
  401410:	bf00      	nop
  401412:	370c      	adds	r7, #12
  401414:	46bd      	mov	sp, r7
  401416:	f85d 7b04 	ldr.w	r7, [sp], #4
  40141a:	4770      	bx	lr

0040141c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40141c:	b480      	push	{r7}
  40141e:	b083      	sub	sp, #12
  401420:	af00      	add	r7, sp, #0
  401422:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401424:	687b      	ldr	r3, [r7, #4]
  401426:	f44f 7280 	mov.w	r2, #256	; 0x100
  40142a:	601a      	str	r2, [r3, #0]
}
  40142c:	bf00      	nop
  40142e:	370c      	adds	r7, #12
  401430:	46bd      	mov	sp, r7
  401432:	f85d 7b04 	ldr.w	r7, [sp], #4
  401436:	4770      	bx	lr

00401438 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401438:	b480      	push	{r7}
  40143a:	b083      	sub	sp, #12
  40143c:	af00      	add	r7, sp, #0
  40143e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401446:	601a      	str	r2, [r3, #0]
}
  401448:	bf00      	nop
  40144a:	370c      	adds	r7, #12
  40144c:	46bd      	mov	sp, r7
  40144e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401452:	4770      	bx	lr

00401454 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401454:	b480      	push	{r7}
  401456:	b083      	sub	sp, #12
  401458:	af00      	add	r7, sp, #0
  40145a:	6078      	str	r0, [r7, #4]
  40145c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40145e:	687b      	ldr	r3, [r7, #4]
  401460:	695b      	ldr	r3, [r3, #20]
  401462:	f003 0302 	and.w	r3, r3, #2
  401466:	2b00      	cmp	r3, #0
  401468:	d101      	bne.n	40146e <usart_write+0x1a>
		return 1;
  40146a:	2301      	movs	r3, #1
  40146c:	e005      	b.n	40147a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40146e:	683b      	ldr	r3, [r7, #0]
  401470:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401474:	687b      	ldr	r3, [r7, #4]
  401476:	61da      	str	r2, [r3, #28]
	return 0;
  401478:	2300      	movs	r3, #0
}
  40147a:	4618      	mov	r0, r3
  40147c:	370c      	adds	r7, #12
  40147e:	46bd      	mov	sp, r7
  401480:	f85d 7b04 	ldr.w	r7, [sp], #4
  401484:	4770      	bx	lr

00401486 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401486:	b480      	push	{r7}
  401488:	b083      	sub	sp, #12
  40148a:	af00      	add	r7, sp, #0
  40148c:	6078      	str	r0, [r7, #4]
  40148e:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401490:	687b      	ldr	r3, [r7, #4]
  401492:	695b      	ldr	r3, [r3, #20]
  401494:	f003 0301 	and.w	r3, r3, #1
  401498:	2b00      	cmp	r3, #0
  40149a:	d101      	bne.n	4014a0 <usart_read+0x1a>
		return 1;
  40149c:	2301      	movs	r3, #1
  40149e:	e006      	b.n	4014ae <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4014a0:	687b      	ldr	r3, [r7, #4]
  4014a2:	699b      	ldr	r3, [r3, #24]
  4014a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4014a8:	683b      	ldr	r3, [r7, #0]
  4014aa:	601a      	str	r2, [r3, #0]

	return 0;
  4014ac:	2300      	movs	r3, #0
}
  4014ae:	4618      	mov	r0, r3
  4014b0:	370c      	adds	r7, #12
  4014b2:	46bd      	mov	sp, r7
  4014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014b8:	4770      	bx	lr
	...

004014bc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4014bc:	b480      	push	{r7}
  4014be:	b083      	sub	sp, #12
  4014c0:	af00      	add	r7, sp, #0
  4014c2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4014c4:	687b      	ldr	r3, [r7, #4]
  4014c6:	4a04      	ldr	r2, [pc, #16]	; (4014d8 <usart_disable_writeprotect+0x1c>)
  4014c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4014cc:	bf00      	nop
  4014ce:	370c      	adds	r7, #12
  4014d0:	46bd      	mov	sp, r7
  4014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014d6:	4770      	bx	lr
  4014d8:	55534100 	.word	0x55534100

004014dc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4014dc:	b480      	push	{r7}
  4014de:	b083      	sub	sp, #12
  4014e0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4014e2:	f3ef 8310 	mrs	r3, PRIMASK
  4014e6:	607b      	str	r3, [r7, #4]
  return(result);
  4014e8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4014ea:	2b00      	cmp	r3, #0
  4014ec:	bf0c      	ite	eq
  4014ee:	2301      	moveq	r3, #1
  4014f0:	2300      	movne	r3, #0
  4014f2:	b2db      	uxtb	r3, r3
  4014f4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4014f6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4014f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4014fc:	4b04      	ldr	r3, [pc, #16]	; (401510 <cpu_irq_save+0x34>)
  4014fe:	2200      	movs	r2, #0
  401500:	701a      	strb	r2, [r3, #0]
	return flags;
  401502:	683b      	ldr	r3, [r7, #0]
}
  401504:	4618      	mov	r0, r3
  401506:	370c      	adds	r7, #12
  401508:	46bd      	mov	sp, r7
  40150a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40150e:	4770      	bx	lr
  401510:	2040000a 	.word	0x2040000a

00401514 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401514:	b480      	push	{r7}
  401516:	b083      	sub	sp, #12
  401518:	af00      	add	r7, sp, #0
  40151a:	6078      	str	r0, [r7, #4]
	return (flags);
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	2b00      	cmp	r3, #0
  401520:	bf14      	ite	ne
  401522:	2301      	movne	r3, #1
  401524:	2300      	moveq	r3, #0
  401526:	b2db      	uxtb	r3, r3
}
  401528:	4618      	mov	r0, r3
  40152a:	370c      	adds	r7, #12
  40152c:	46bd      	mov	sp, r7
  40152e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401532:	4770      	bx	lr

00401534 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401534:	b580      	push	{r7, lr}
  401536:	b082      	sub	sp, #8
  401538:	af00      	add	r7, sp, #0
  40153a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40153c:	6878      	ldr	r0, [r7, #4]
  40153e:	4b07      	ldr	r3, [pc, #28]	; (40155c <cpu_irq_restore+0x28>)
  401540:	4798      	blx	r3
  401542:	4603      	mov	r3, r0
  401544:	2b00      	cmp	r3, #0
  401546:	d005      	beq.n	401554 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401548:	4b05      	ldr	r3, [pc, #20]	; (401560 <cpu_irq_restore+0x2c>)
  40154a:	2201      	movs	r2, #1
  40154c:	701a      	strb	r2, [r3, #0]
  40154e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401552:	b662      	cpsie	i
}
  401554:	bf00      	nop
  401556:	3708      	adds	r7, #8
  401558:	46bd      	mov	sp, r7
  40155a:	bd80      	pop	{r7, pc}
  40155c:	00401515 	.word	0x00401515
  401560:	2040000a 	.word	0x2040000a

00401564 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401564:	b580      	push	{r7, lr}
  401566:	b084      	sub	sp, #16
  401568:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40156a:	4b1e      	ldr	r3, [pc, #120]	; (4015e4 <Reset_Handler+0x80>)
  40156c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40156e:	4b1e      	ldr	r3, [pc, #120]	; (4015e8 <Reset_Handler+0x84>)
  401570:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401572:	68fa      	ldr	r2, [r7, #12]
  401574:	68bb      	ldr	r3, [r7, #8]
  401576:	429a      	cmp	r2, r3
  401578:	d00c      	beq.n	401594 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40157a:	e007      	b.n	40158c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40157c:	68bb      	ldr	r3, [r7, #8]
  40157e:	1d1a      	adds	r2, r3, #4
  401580:	60ba      	str	r2, [r7, #8]
  401582:	68fa      	ldr	r2, [r7, #12]
  401584:	1d11      	adds	r1, r2, #4
  401586:	60f9      	str	r1, [r7, #12]
  401588:	6812      	ldr	r2, [r2, #0]
  40158a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40158c:	68bb      	ldr	r3, [r7, #8]
  40158e:	4a17      	ldr	r2, [pc, #92]	; (4015ec <Reset_Handler+0x88>)
  401590:	4293      	cmp	r3, r2
  401592:	d3f3      	bcc.n	40157c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401594:	4b16      	ldr	r3, [pc, #88]	; (4015f0 <Reset_Handler+0x8c>)
  401596:	60bb      	str	r3, [r7, #8]
  401598:	e004      	b.n	4015a4 <Reset_Handler+0x40>
                *pDest++ = 0;
  40159a:	68bb      	ldr	r3, [r7, #8]
  40159c:	1d1a      	adds	r2, r3, #4
  40159e:	60ba      	str	r2, [r7, #8]
  4015a0:	2200      	movs	r2, #0
  4015a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4015a4:	68bb      	ldr	r3, [r7, #8]
  4015a6:	4a13      	ldr	r2, [pc, #76]	; (4015f4 <Reset_Handler+0x90>)
  4015a8:	4293      	cmp	r3, r2
  4015aa:	d3f6      	bcc.n	40159a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4015ac:	4b12      	ldr	r3, [pc, #72]	; (4015f8 <Reset_Handler+0x94>)
  4015ae:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4015b0:	4a12      	ldr	r2, [pc, #72]	; (4015fc <Reset_Handler+0x98>)
  4015b2:	68fb      	ldr	r3, [r7, #12]
  4015b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4015b8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4015ba:	4b11      	ldr	r3, [pc, #68]	; (401600 <Reset_Handler+0x9c>)
  4015bc:	4798      	blx	r3
  4015be:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4015c0:	4a10      	ldr	r2, [pc, #64]	; (401604 <Reset_Handler+0xa0>)
  4015c2:	4b10      	ldr	r3, [pc, #64]	; (401604 <Reset_Handler+0xa0>)
  4015c4:	681b      	ldr	r3, [r3, #0]
  4015c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4015ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4015cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4015d0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4015d4:	6878      	ldr	r0, [r7, #4]
  4015d6:	4b0c      	ldr	r3, [pc, #48]	; (401608 <Reset_Handler+0xa4>)
  4015d8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4015da:	4b0c      	ldr	r3, [pc, #48]	; (40160c <Reset_Handler+0xa8>)
  4015dc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4015de:	4b0c      	ldr	r3, [pc, #48]	; (401610 <Reset_Handler+0xac>)
  4015e0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4015e2:	e7fe      	b.n	4015e2 <Reset_Handler+0x7e>
  4015e4:	004055a0 	.word	0x004055a0
  4015e8:	20400000 	.word	0x20400000
  4015ec:	204009c0 	.word	0x204009c0
  4015f0:	204009c0 	.word	0x204009c0
  4015f4:	20400ac0 	.word	0x20400ac0
  4015f8:	00400000 	.word	0x00400000
  4015fc:	e000ed00 	.word	0xe000ed00
  401600:	004014dd 	.word	0x004014dd
  401604:	e000ed88 	.word	0xe000ed88
  401608:	00401535 	.word	0x00401535
  40160c:	0040273d 	.word	0x0040273d
  401610:	004022ed 	.word	0x004022ed

00401614 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401614:	b480      	push	{r7}
  401616:	af00      	add	r7, sp, #0
        while (1) {
  401618:	e7fe      	b.n	401618 <Dummy_Handler+0x4>
	...

0040161c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40161c:	b480      	push	{r7}
  40161e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401620:	4b52      	ldr	r3, [pc, #328]	; (40176c <SystemCoreClockUpdate+0x150>)
  401622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401624:	f003 0303 	and.w	r3, r3, #3
  401628:	2b01      	cmp	r3, #1
  40162a:	d014      	beq.n	401656 <SystemCoreClockUpdate+0x3a>
  40162c:	2b01      	cmp	r3, #1
  40162e:	d302      	bcc.n	401636 <SystemCoreClockUpdate+0x1a>
  401630:	2b02      	cmp	r3, #2
  401632:	d038      	beq.n	4016a6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401634:	e07a      	b.n	40172c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401636:	4b4e      	ldr	r3, [pc, #312]	; (401770 <SystemCoreClockUpdate+0x154>)
  401638:	695b      	ldr	r3, [r3, #20]
  40163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40163e:	2b00      	cmp	r3, #0
  401640:	d004      	beq.n	40164c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401642:	4b4c      	ldr	r3, [pc, #304]	; (401774 <SystemCoreClockUpdate+0x158>)
  401644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401648:	601a      	str	r2, [r3, #0]
    break;
  40164a:	e06f      	b.n	40172c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40164c:	4b49      	ldr	r3, [pc, #292]	; (401774 <SystemCoreClockUpdate+0x158>)
  40164e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401652:	601a      	str	r2, [r3, #0]
    break;
  401654:	e06a      	b.n	40172c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401656:	4b45      	ldr	r3, [pc, #276]	; (40176c <SystemCoreClockUpdate+0x150>)
  401658:	6a1b      	ldr	r3, [r3, #32]
  40165a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40165e:	2b00      	cmp	r3, #0
  401660:	d003      	beq.n	40166a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401662:	4b44      	ldr	r3, [pc, #272]	; (401774 <SystemCoreClockUpdate+0x158>)
  401664:	4a44      	ldr	r2, [pc, #272]	; (401778 <SystemCoreClockUpdate+0x15c>)
  401666:	601a      	str	r2, [r3, #0]
    break;
  401668:	e060      	b.n	40172c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40166a:	4b42      	ldr	r3, [pc, #264]	; (401774 <SystemCoreClockUpdate+0x158>)
  40166c:	4a43      	ldr	r2, [pc, #268]	; (40177c <SystemCoreClockUpdate+0x160>)
  40166e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401670:	4b3e      	ldr	r3, [pc, #248]	; (40176c <SystemCoreClockUpdate+0x150>)
  401672:	6a1b      	ldr	r3, [r3, #32]
  401674:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401678:	2b10      	cmp	r3, #16
  40167a:	d004      	beq.n	401686 <SystemCoreClockUpdate+0x6a>
  40167c:	2b20      	cmp	r3, #32
  40167e:	d008      	beq.n	401692 <SystemCoreClockUpdate+0x76>
  401680:	2b00      	cmp	r3, #0
  401682:	d00e      	beq.n	4016a2 <SystemCoreClockUpdate+0x86>
          break;
  401684:	e00e      	b.n	4016a4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401686:	4b3b      	ldr	r3, [pc, #236]	; (401774 <SystemCoreClockUpdate+0x158>)
  401688:	681b      	ldr	r3, [r3, #0]
  40168a:	005b      	lsls	r3, r3, #1
  40168c:	4a39      	ldr	r2, [pc, #228]	; (401774 <SystemCoreClockUpdate+0x158>)
  40168e:	6013      	str	r3, [r2, #0]
          break;
  401690:	e008      	b.n	4016a4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401692:	4b38      	ldr	r3, [pc, #224]	; (401774 <SystemCoreClockUpdate+0x158>)
  401694:	681a      	ldr	r2, [r3, #0]
  401696:	4613      	mov	r3, r2
  401698:	005b      	lsls	r3, r3, #1
  40169a:	4413      	add	r3, r2
  40169c:	4a35      	ldr	r2, [pc, #212]	; (401774 <SystemCoreClockUpdate+0x158>)
  40169e:	6013      	str	r3, [r2, #0]
          break;
  4016a0:	e000      	b.n	4016a4 <SystemCoreClockUpdate+0x88>
          break;
  4016a2:	bf00      	nop
    break;
  4016a4:	e042      	b.n	40172c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4016a6:	4b31      	ldr	r3, [pc, #196]	; (40176c <SystemCoreClockUpdate+0x150>)
  4016a8:	6a1b      	ldr	r3, [r3, #32]
  4016aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4016ae:	2b00      	cmp	r3, #0
  4016b0:	d003      	beq.n	4016ba <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4016b2:	4b30      	ldr	r3, [pc, #192]	; (401774 <SystemCoreClockUpdate+0x158>)
  4016b4:	4a30      	ldr	r2, [pc, #192]	; (401778 <SystemCoreClockUpdate+0x15c>)
  4016b6:	601a      	str	r2, [r3, #0]
  4016b8:	e01c      	b.n	4016f4 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016ba:	4b2e      	ldr	r3, [pc, #184]	; (401774 <SystemCoreClockUpdate+0x158>)
  4016bc:	4a2f      	ldr	r2, [pc, #188]	; (40177c <SystemCoreClockUpdate+0x160>)
  4016be:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4016c0:	4b2a      	ldr	r3, [pc, #168]	; (40176c <SystemCoreClockUpdate+0x150>)
  4016c2:	6a1b      	ldr	r3, [r3, #32]
  4016c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016c8:	2b10      	cmp	r3, #16
  4016ca:	d004      	beq.n	4016d6 <SystemCoreClockUpdate+0xba>
  4016cc:	2b20      	cmp	r3, #32
  4016ce:	d008      	beq.n	4016e2 <SystemCoreClockUpdate+0xc6>
  4016d0:	2b00      	cmp	r3, #0
  4016d2:	d00e      	beq.n	4016f2 <SystemCoreClockUpdate+0xd6>
          break;
  4016d4:	e00e      	b.n	4016f4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4016d6:	4b27      	ldr	r3, [pc, #156]	; (401774 <SystemCoreClockUpdate+0x158>)
  4016d8:	681b      	ldr	r3, [r3, #0]
  4016da:	005b      	lsls	r3, r3, #1
  4016dc:	4a25      	ldr	r2, [pc, #148]	; (401774 <SystemCoreClockUpdate+0x158>)
  4016de:	6013      	str	r3, [r2, #0]
          break;
  4016e0:	e008      	b.n	4016f4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  4016e2:	4b24      	ldr	r3, [pc, #144]	; (401774 <SystemCoreClockUpdate+0x158>)
  4016e4:	681a      	ldr	r2, [r3, #0]
  4016e6:	4613      	mov	r3, r2
  4016e8:	005b      	lsls	r3, r3, #1
  4016ea:	4413      	add	r3, r2
  4016ec:	4a21      	ldr	r2, [pc, #132]	; (401774 <SystemCoreClockUpdate+0x158>)
  4016ee:	6013      	str	r3, [r2, #0]
          break;
  4016f0:	e000      	b.n	4016f4 <SystemCoreClockUpdate+0xd8>
          break;
  4016f2:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4016f4:	4b1d      	ldr	r3, [pc, #116]	; (40176c <SystemCoreClockUpdate+0x150>)
  4016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016f8:	f003 0303 	and.w	r3, r3, #3
  4016fc:	2b02      	cmp	r3, #2
  4016fe:	d114      	bne.n	40172a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401700:	4b1a      	ldr	r3, [pc, #104]	; (40176c <SystemCoreClockUpdate+0x150>)
  401702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401704:	0c1b      	lsrs	r3, r3, #16
  401706:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40170a:	3301      	adds	r3, #1
  40170c:	4a19      	ldr	r2, [pc, #100]	; (401774 <SystemCoreClockUpdate+0x158>)
  40170e:	6812      	ldr	r2, [r2, #0]
  401710:	fb02 f303 	mul.w	r3, r2, r3
  401714:	4a17      	ldr	r2, [pc, #92]	; (401774 <SystemCoreClockUpdate+0x158>)
  401716:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401718:	4b14      	ldr	r3, [pc, #80]	; (40176c <SystemCoreClockUpdate+0x150>)
  40171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40171c:	b2db      	uxtb	r3, r3
  40171e:	4a15      	ldr	r2, [pc, #84]	; (401774 <SystemCoreClockUpdate+0x158>)
  401720:	6812      	ldr	r2, [r2, #0]
  401722:	fbb2 f3f3 	udiv	r3, r2, r3
  401726:	4a13      	ldr	r2, [pc, #76]	; (401774 <SystemCoreClockUpdate+0x158>)
  401728:	6013      	str	r3, [r2, #0]
    break;
  40172a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40172c:	4b0f      	ldr	r3, [pc, #60]	; (40176c <SystemCoreClockUpdate+0x150>)
  40172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401730:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401734:	2b70      	cmp	r3, #112	; 0x70
  401736:	d108      	bne.n	40174a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401738:	4b0e      	ldr	r3, [pc, #56]	; (401774 <SystemCoreClockUpdate+0x158>)
  40173a:	681b      	ldr	r3, [r3, #0]
  40173c:	4a10      	ldr	r2, [pc, #64]	; (401780 <SystemCoreClockUpdate+0x164>)
  40173e:	fba2 2303 	umull	r2, r3, r2, r3
  401742:	085b      	lsrs	r3, r3, #1
  401744:	4a0b      	ldr	r2, [pc, #44]	; (401774 <SystemCoreClockUpdate+0x158>)
  401746:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401748:	e00a      	b.n	401760 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40174a:	4b08      	ldr	r3, [pc, #32]	; (40176c <SystemCoreClockUpdate+0x150>)
  40174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40174e:	091b      	lsrs	r3, r3, #4
  401750:	f003 0307 	and.w	r3, r3, #7
  401754:	4a07      	ldr	r2, [pc, #28]	; (401774 <SystemCoreClockUpdate+0x158>)
  401756:	6812      	ldr	r2, [r2, #0]
  401758:	fa22 f303 	lsr.w	r3, r2, r3
  40175c:	4a05      	ldr	r2, [pc, #20]	; (401774 <SystemCoreClockUpdate+0x158>)
  40175e:	6013      	str	r3, [r2, #0]
}
  401760:	bf00      	nop
  401762:	46bd      	mov	sp, r7
  401764:	f85d 7b04 	ldr.w	r7, [sp], #4
  401768:	4770      	bx	lr
  40176a:	bf00      	nop
  40176c:	400e0600 	.word	0x400e0600
  401770:	400e1810 	.word	0x400e1810
  401774:	2040000c 	.word	0x2040000c
  401778:	00b71b00 	.word	0x00b71b00
  40177c:	003d0900 	.word	0x003d0900
  401780:	aaaaaaab 	.word	0xaaaaaaab

00401784 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401784:	b480      	push	{r7}
  401786:	b083      	sub	sp, #12
  401788:	af00      	add	r7, sp, #0
  40178a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40178c:	687b      	ldr	r3, [r7, #4]
  40178e:	4a19      	ldr	r2, [pc, #100]	; (4017f4 <system_init_flash+0x70>)
  401790:	4293      	cmp	r3, r2
  401792:	d804      	bhi.n	40179e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401794:	4b18      	ldr	r3, [pc, #96]	; (4017f8 <system_init_flash+0x74>)
  401796:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40179a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  40179c:	e023      	b.n	4017e6 <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  40179e:	687b      	ldr	r3, [r7, #4]
  4017a0:	4a16      	ldr	r2, [pc, #88]	; (4017fc <system_init_flash+0x78>)
  4017a2:	4293      	cmp	r3, r2
  4017a4:	d803      	bhi.n	4017ae <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4017a6:	4b14      	ldr	r3, [pc, #80]	; (4017f8 <system_init_flash+0x74>)
  4017a8:	4a15      	ldr	r2, [pc, #84]	; (401800 <system_init_flash+0x7c>)
  4017aa:	601a      	str	r2, [r3, #0]
}
  4017ac:	e01b      	b.n	4017e6 <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  4017ae:	687b      	ldr	r3, [r7, #4]
  4017b0:	4a14      	ldr	r2, [pc, #80]	; (401804 <system_init_flash+0x80>)
  4017b2:	4293      	cmp	r3, r2
  4017b4:	d803      	bhi.n	4017be <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4017b6:	4b10      	ldr	r3, [pc, #64]	; (4017f8 <system_init_flash+0x74>)
  4017b8:	4a13      	ldr	r2, [pc, #76]	; (401808 <system_init_flash+0x84>)
  4017ba:	601a      	str	r2, [r3, #0]
}
  4017bc:	e013      	b.n	4017e6 <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4017be:	687b      	ldr	r3, [r7, #4]
  4017c0:	4a12      	ldr	r2, [pc, #72]	; (40180c <system_init_flash+0x88>)
  4017c2:	4293      	cmp	r3, r2
  4017c4:	d803      	bhi.n	4017ce <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4017c6:	4b0c      	ldr	r3, [pc, #48]	; (4017f8 <system_init_flash+0x74>)
  4017c8:	4a11      	ldr	r2, [pc, #68]	; (401810 <system_init_flash+0x8c>)
  4017ca:	601a      	str	r2, [r3, #0]
}
  4017cc:	e00b      	b.n	4017e6 <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4017ce:	687b      	ldr	r3, [r7, #4]
  4017d0:	4a10      	ldr	r2, [pc, #64]	; (401814 <system_init_flash+0x90>)
  4017d2:	4293      	cmp	r3, r2
  4017d4:	d804      	bhi.n	4017e0 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4017d6:	4b08      	ldr	r3, [pc, #32]	; (4017f8 <system_init_flash+0x74>)
  4017d8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4017dc:	601a      	str	r2, [r3, #0]
}
  4017de:	e002      	b.n	4017e6 <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4017e0:	4b05      	ldr	r3, [pc, #20]	; (4017f8 <system_init_flash+0x74>)
  4017e2:	4a0d      	ldr	r2, [pc, #52]	; (401818 <system_init_flash+0x94>)
  4017e4:	601a      	str	r2, [r3, #0]
}
  4017e6:	bf00      	nop
  4017e8:	370c      	adds	r7, #12
  4017ea:	46bd      	mov	sp, r7
  4017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017f0:	4770      	bx	lr
  4017f2:	bf00      	nop
  4017f4:	01312cff 	.word	0x01312cff
  4017f8:	400e0c00 	.word	0x400e0c00
  4017fc:	026259ff 	.word	0x026259ff
  401800:	04000100 	.word	0x04000100
  401804:	039386ff 	.word	0x039386ff
  401808:	04000200 	.word	0x04000200
  40180c:	04c4b3ff 	.word	0x04c4b3ff
  401810:	04000300 	.word	0x04000300
  401814:	05f5e0ff 	.word	0x05f5e0ff
  401818:	04000500 	.word	0x04000500

0040181c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40181c:	b480      	push	{r7}
  40181e:	b085      	sub	sp, #20
  401820:	af00      	add	r7, sp, #0
  401822:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401824:	4b10      	ldr	r3, [pc, #64]	; (401868 <_sbrk+0x4c>)
  401826:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401828:	4b10      	ldr	r3, [pc, #64]	; (40186c <_sbrk+0x50>)
  40182a:	681b      	ldr	r3, [r3, #0]
  40182c:	2b00      	cmp	r3, #0
  40182e:	d102      	bne.n	401836 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401830:	4b0e      	ldr	r3, [pc, #56]	; (40186c <_sbrk+0x50>)
  401832:	4a0f      	ldr	r2, [pc, #60]	; (401870 <_sbrk+0x54>)
  401834:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401836:	4b0d      	ldr	r3, [pc, #52]	; (40186c <_sbrk+0x50>)
  401838:	681b      	ldr	r3, [r3, #0]
  40183a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40183c:	68ba      	ldr	r2, [r7, #8]
  40183e:	687b      	ldr	r3, [r7, #4]
  401840:	441a      	add	r2, r3
  401842:	68fb      	ldr	r3, [r7, #12]
  401844:	429a      	cmp	r2, r3
  401846:	dd02      	ble.n	40184e <_sbrk+0x32>
		return (caddr_t) -1;	
  401848:	f04f 33ff 	mov.w	r3, #4294967295
  40184c:	e006      	b.n	40185c <_sbrk+0x40>
	}

	heap += incr;
  40184e:	4b07      	ldr	r3, [pc, #28]	; (40186c <_sbrk+0x50>)
  401850:	681a      	ldr	r2, [r3, #0]
  401852:	687b      	ldr	r3, [r7, #4]
  401854:	4413      	add	r3, r2
  401856:	4a05      	ldr	r2, [pc, #20]	; (40186c <_sbrk+0x50>)
  401858:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40185a:	68bb      	ldr	r3, [r7, #8]
}
  40185c:	4618      	mov	r0, r3
  40185e:	3714      	adds	r7, #20
  401860:	46bd      	mov	sp, r7
  401862:	f85d 7b04 	ldr.w	r7, [sp], #4
  401866:	4770      	bx	lr
  401868:	2045fffc 	.word	0x2045fffc
  40186c:	20400a50 	.word	0x20400a50
  401870:	20402cc0 	.word	0x20402cc0

00401874 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401874:	b480      	push	{r7}
  401876:	b083      	sub	sp, #12
  401878:	af00      	add	r7, sp, #0
  40187a:	6078      	str	r0, [r7, #4]
	return -1;
  40187c:	f04f 33ff 	mov.w	r3, #4294967295
}
  401880:	4618      	mov	r0, r3
  401882:	370c      	adds	r7, #12
  401884:	46bd      	mov	sp, r7
  401886:	f85d 7b04 	ldr.w	r7, [sp], #4
  40188a:	4770      	bx	lr

0040188c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40188c:	b480      	push	{r7}
  40188e:	b083      	sub	sp, #12
  401890:	af00      	add	r7, sp, #0
  401892:	6078      	str	r0, [r7, #4]
  401894:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401896:	683b      	ldr	r3, [r7, #0]
  401898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40189c:	605a      	str	r2, [r3, #4]

	return 0;
  40189e:	2300      	movs	r3, #0
}
  4018a0:	4618      	mov	r0, r3
  4018a2:	370c      	adds	r7, #12
  4018a4:	46bd      	mov	sp, r7
  4018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018aa:	4770      	bx	lr

004018ac <_isatty>:

extern int _isatty(int file)
{
  4018ac:	b480      	push	{r7}
  4018ae:	b083      	sub	sp, #12
  4018b0:	af00      	add	r7, sp, #0
  4018b2:	6078      	str	r0, [r7, #4]
	return 1;
  4018b4:	2301      	movs	r3, #1
}
  4018b6:	4618      	mov	r0, r3
  4018b8:	370c      	adds	r7, #12
  4018ba:	46bd      	mov	sp, r7
  4018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018c0:	4770      	bx	lr

004018c2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  4018c2:	b480      	push	{r7}
  4018c4:	b085      	sub	sp, #20
  4018c6:	af00      	add	r7, sp, #0
  4018c8:	60f8      	str	r0, [r7, #12]
  4018ca:	60b9      	str	r1, [r7, #8]
  4018cc:	607a      	str	r2, [r7, #4]
	return 0;
  4018ce:	2300      	movs	r3, #0
}
  4018d0:	4618      	mov	r0, r3
  4018d2:	3714      	adds	r7, #20
  4018d4:	46bd      	mov	sp, r7
  4018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018da:	4770      	bx	lr

004018dc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4018dc:	b480      	push	{r7}
  4018de:	b083      	sub	sp, #12
  4018e0:	af00      	add	r7, sp, #0
  4018e2:	4603      	mov	r3, r0
  4018e4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4018e6:	4909      	ldr	r1, [pc, #36]	; (40190c <NVIC_EnableIRQ+0x30>)
  4018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4018ec:	095b      	lsrs	r3, r3, #5
  4018ee:	79fa      	ldrb	r2, [r7, #7]
  4018f0:	f002 021f 	and.w	r2, r2, #31
  4018f4:	2001      	movs	r0, #1
  4018f6:	fa00 f202 	lsl.w	r2, r0, r2
  4018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4018fe:	bf00      	nop
  401900:	370c      	adds	r7, #12
  401902:	46bd      	mov	sp, r7
  401904:	f85d 7b04 	ldr.w	r7, [sp], #4
  401908:	4770      	bx	lr
  40190a:	bf00      	nop
  40190c:	e000e100 	.word	0xe000e100

00401910 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401910:	b480      	push	{r7}
  401912:	b083      	sub	sp, #12
  401914:	af00      	add	r7, sp, #0
  401916:	4603      	mov	r3, r0
  401918:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40191a:	4909      	ldr	r1, [pc, #36]	; (401940 <NVIC_DisableIRQ+0x30>)
  40191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401920:	095b      	lsrs	r3, r3, #5
  401922:	79fa      	ldrb	r2, [r7, #7]
  401924:	f002 021f 	and.w	r2, r2, #31
  401928:	2001      	movs	r0, #1
  40192a:	fa00 f202 	lsl.w	r2, r0, r2
  40192e:	3320      	adds	r3, #32
  401930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401934:	bf00      	nop
  401936:	370c      	adds	r7, #12
  401938:	46bd      	mov	sp, r7
  40193a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40193e:	4770      	bx	lr
  401940:	e000e100 	.word	0xe000e100

00401944 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401944:	b480      	push	{r7}
  401946:	b083      	sub	sp, #12
  401948:	af00      	add	r7, sp, #0
  40194a:	4603      	mov	r3, r0
  40194c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40194e:	4909      	ldr	r1, [pc, #36]	; (401974 <NVIC_ClearPendingIRQ+0x30>)
  401950:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401954:	095b      	lsrs	r3, r3, #5
  401956:	79fa      	ldrb	r2, [r7, #7]
  401958:	f002 021f 	and.w	r2, r2, #31
  40195c:	2001      	movs	r0, #1
  40195e:	fa00 f202 	lsl.w	r2, r0, r2
  401962:	3360      	adds	r3, #96	; 0x60
  401964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401968:	bf00      	nop
  40196a:	370c      	adds	r7, #12
  40196c:	46bd      	mov	sp, r7
  40196e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401972:	4770      	bx	lr
  401974:	e000e100 	.word	0xe000e100

00401978 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401978:	b480      	push	{r7}
  40197a:	b083      	sub	sp, #12
  40197c:	af00      	add	r7, sp, #0
  40197e:	4603      	mov	r3, r0
  401980:	6039      	str	r1, [r7, #0]
  401982:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401984:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401988:	2b00      	cmp	r3, #0
  40198a:	da0b      	bge.n	4019a4 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40198c:	490d      	ldr	r1, [pc, #52]	; (4019c4 <NVIC_SetPriority+0x4c>)
  40198e:	79fb      	ldrb	r3, [r7, #7]
  401990:	f003 030f 	and.w	r3, r3, #15
  401994:	3b04      	subs	r3, #4
  401996:	683a      	ldr	r2, [r7, #0]
  401998:	b2d2      	uxtb	r2, r2
  40199a:	0152      	lsls	r2, r2, #5
  40199c:	b2d2      	uxtb	r2, r2
  40199e:	440b      	add	r3, r1
  4019a0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  4019a2:	e009      	b.n	4019b8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4019a4:	4908      	ldr	r1, [pc, #32]	; (4019c8 <NVIC_SetPriority+0x50>)
  4019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019aa:	683a      	ldr	r2, [r7, #0]
  4019ac:	b2d2      	uxtb	r2, r2
  4019ae:	0152      	lsls	r2, r2, #5
  4019b0:	b2d2      	uxtb	r2, r2
  4019b2:	440b      	add	r3, r1
  4019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4019b8:	bf00      	nop
  4019ba:	370c      	adds	r7, #12
  4019bc:	46bd      	mov	sp, r7
  4019be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019c2:	4770      	bx	lr
  4019c4:	e000ed00 	.word	0xe000ed00
  4019c8:	e000e100 	.word	0xe000e100

004019cc <osc_get_rate>:
{
  4019cc:	b480      	push	{r7}
  4019ce:	b083      	sub	sp, #12
  4019d0:	af00      	add	r7, sp, #0
  4019d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4019d4:	687b      	ldr	r3, [r7, #4]
  4019d6:	2b07      	cmp	r3, #7
  4019d8:	d825      	bhi.n	401a26 <osc_get_rate+0x5a>
  4019da:	a201      	add	r2, pc, #4	; (adr r2, 4019e0 <osc_get_rate+0x14>)
  4019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4019e0:	00401a01 	.word	0x00401a01
  4019e4:	00401a07 	.word	0x00401a07
  4019e8:	00401a0d 	.word	0x00401a0d
  4019ec:	00401a13 	.word	0x00401a13
  4019f0:	00401a17 	.word	0x00401a17
  4019f4:	00401a1b 	.word	0x00401a1b
  4019f8:	00401a1f 	.word	0x00401a1f
  4019fc:	00401a23 	.word	0x00401a23
		return OSC_SLCK_32K_RC_HZ;
  401a00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a04:	e010      	b.n	401a28 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a0a:	e00d      	b.n	401a28 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a10:	e00a      	b.n	401a28 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401a12:	4b08      	ldr	r3, [pc, #32]	; (401a34 <osc_get_rate+0x68>)
  401a14:	e008      	b.n	401a28 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401a16:	4b08      	ldr	r3, [pc, #32]	; (401a38 <osc_get_rate+0x6c>)
  401a18:	e006      	b.n	401a28 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401a1a:	4b08      	ldr	r3, [pc, #32]	; (401a3c <osc_get_rate+0x70>)
  401a1c:	e004      	b.n	401a28 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401a1e:	4b07      	ldr	r3, [pc, #28]	; (401a3c <osc_get_rate+0x70>)
  401a20:	e002      	b.n	401a28 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401a22:	4b06      	ldr	r3, [pc, #24]	; (401a3c <osc_get_rate+0x70>)
  401a24:	e000      	b.n	401a28 <osc_get_rate+0x5c>
	return 0;
  401a26:	2300      	movs	r3, #0
}
  401a28:	4618      	mov	r0, r3
  401a2a:	370c      	adds	r7, #12
  401a2c:	46bd      	mov	sp, r7
  401a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a32:	4770      	bx	lr
  401a34:	003d0900 	.word	0x003d0900
  401a38:	007a1200 	.word	0x007a1200
  401a3c:	00b71b00 	.word	0x00b71b00

00401a40 <sysclk_get_main_hz>:
{
  401a40:	b580      	push	{r7, lr}
  401a42:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401a44:	2006      	movs	r0, #6
  401a46:	4b05      	ldr	r3, [pc, #20]	; (401a5c <sysclk_get_main_hz+0x1c>)
  401a48:	4798      	blx	r3
  401a4a:	4602      	mov	r2, r0
  401a4c:	4613      	mov	r3, r2
  401a4e:	009b      	lsls	r3, r3, #2
  401a50:	4413      	add	r3, r2
  401a52:	009a      	lsls	r2, r3, #2
  401a54:	4413      	add	r3, r2
}
  401a56:	4618      	mov	r0, r3
  401a58:	bd80      	pop	{r7, pc}
  401a5a:	bf00      	nop
  401a5c:	004019cd 	.word	0x004019cd

00401a60 <sysclk_get_cpu_hz>:
{
  401a60:	b580      	push	{r7, lr}
  401a62:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401a64:	4b02      	ldr	r3, [pc, #8]	; (401a70 <sysclk_get_cpu_hz+0x10>)
  401a66:	4798      	blx	r3
  401a68:	4603      	mov	r3, r0
}
  401a6a:	4618      	mov	r0, r3
  401a6c:	bd80      	pop	{r7, pc}
  401a6e:	bf00      	nop
  401a70:	00401a41 	.word	0x00401a41

00401a74 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401a74:	b580      	push	{r7, lr}
  401a76:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401a78:	4b02      	ldr	r3, [pc, #8]	; (401a84 <sysclk_get_peripheral_hz+0x10>)
  401a7a:	4798      	blx	r3
  401a7c:	4603      	mov	r3, r0
  401a7e:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  401a80:	4618      	mov	r0, r3
  401a82:	bd80      	pop	{r7, pc}
  401a84:	00401a41 	.word	0x00401a41

00401a88 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401a88:	b580      	push	{r7, lr}
  401a8a:	b082      	sub	sp, #8
  401a8c:	af00      	add	r7, sp, #0
  401a8e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401a90:	6878      	ldr	r0, [r7, #4]
  401a92:	4b03      	ldr	r3, [pc, #12]	; (401aa0 <sysclk_enable_peripheral_clock+0x18>)
  401a94:	4798      	blx	r3
}
  401a96:	bf00      	nop
  401a98:	3708      	adds	r7, #8
  401a9a:	46bd      	mov	sp, r7
  401a9c:	bd80      	pop	{r7, pc}
  401a9e:	bf00      	nop
  401aa0:	00400aed 	.word	0x00400aed

00401aa4 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401aa4:	b580      	push	{r7, lr}
  401aa6:	b08c      	sub	sp, #48	; 0x30
  401aa8:	af00      	add	r7, sp, #0
  401aaa:	6078      	str	r0, [r7, #4]
  401aac:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401aae:	4b49      	ldr	r3, [pc, #292]	; (401bd4 <usart_serial_init+0x130>)
  401ab0:	4798      	blx	r3
  401ab2:	4603      	mov	r3, r0
  401ab4:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401ab6:	683b      	ldr	r3, [r7, #0]
  401ab8:	681b      	ldr	r3, [r3, #0]
  401aba:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401abc:	683b      	ldr	r3, [r7, #0]
  401abe:	689b      	ldr	r3, [r3, #8]
  401ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401ac2:	683b      	ldr	r3, [r7, #0]
  401ac4:	681b      	ldr	r3, [r3, #0]
  401ac6:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401ac8:	683b      	ldr	r3, [r7, #0]
  401aca:	685b      	ldr	r3, [r3, #4]
  401acc:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401ace:	683b      	ldr	r3, [r7, #0]
  401ad0:	689b      	ldr	r3, [r3, #8]
  401ad2:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401ad4:	683b      	ldr	r3, [r7, #0]
  401ad6:	68db      	ldr	r3, [r3, #12]
  401ad8:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401ada:	2300      	movs	r3, #0
  401adc:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401ade:	687b      	ldr	r3, [r7, #4]
  401ae0:	4a3d      	ldr	r2, [pc, #244]	; (401bd8 <usart_serial_init+0x134>)
  401ae2:	4293      	cmp	r3, r2
  401ae4:	d108      	bne.n	401af8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401ae6:	2007      	movs	r0, #7
  401ae8:	4b3c      	ldr	r3, [pc, #240]	; (401bdc <usart_serial_init+0x138>)
  401aea:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401af0:	4619      	mov	r1, r3
  401af2:	6878      	ldr	r0, [r7, #4]
  401af4:	4b3a      	ldr	r3, [pc, #232]	; (401be0 <usart_serial_init+0x13c>)
  401af6:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401af8:	687b      	ldr	r3, [r7, #4]
  401afa:	4a3a      	ldr	r2, [pc, #232]	; (401be4 <usart_serial_init+0x140>)
  401afc:	4293      	cmp	r3, r2
  401afe:	d108      	bne.n	401b12 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401b00:	2008      	movs	r0, #8
  401b02:	4b36      	ldr	r3, [pc, #216]	; (401bdc <usart_serial_init+0x138>)
  401b04:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b0a:	4619      	mov	r1, r3
  401b0c:	6878      	ldr	r0, [r7, #4]
  401b0e:	4b34      	ldr	r3, [pc, #208]	; (401be0 <usart_serial_init+0x13c>)
  401b10:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401b12:	687b      	ldr	r3, [r7, #4]
  401b14:	4a34      	ldr	r2, [pc, #208]	; (401be8 <usart_serial_init+0x144>)
  401b16:	4293      	cmp	r3, r2
  401b18:	d108      	bne.n	401b2c <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401b1a:	202c      	movs	r0, #44	; 0x2c
  401b1c:	4b2f      	ldr	r3, [pc, #188]	; (401bdc <usart_serial_init+0x138>)
  401b1e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b24:	4619      	mov	r1, r3
  401b26:	6878      	ldr	r0, [r7, #4]
  401b28:	4b2d      	ldr	r3, [pc, #180]	; (401be0 <usart_serial_init+0x13c>)
  401b2a:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401b2c:	687b      	ldr	r3, [r7, #4]
  401b2e:	4a2f      	ldr	r2, [pc, #188]	; (401bec <usart_serial_init+0x148>)
  401b30:	4293      	cmp	r3, r2
  401b32:	d108      	bne.n	401b46 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401b34:	202d      	movs	r0, #45	; 0x2d
  401b36:	4b29      	ldr	r3, [pc, #164]	; (401bdc <usart_serial_init+0x138>)
  401b38:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b3e:	4619      	mov	r1, r3
  401b40:	6878      	ldr	r0, [r7, #4]
  401b42:	4b27      	ldr	r3, [pc, #156]	; (401be0 <usart_serial_init+0x13c>)
  401b44:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401b46:	687b      	ldr	r3, [r7, #4]
  401b48:	4a29      	ldr	r2, [pc, #164]	; (401bf0 <usart_serial_init+0x14c>)
  401b4a:	4293      	cmp	r3, r2
  401b4c:	d111      	bne.n	401b72 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401b4e:	200d      	movs	r0, #13
  401b50:	4b22      	ldr	r3, [pc, #136]	; (401bdc <usart_serial_init+0x138>)
  401b52:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401b54:	4b1f      	ldr	r3, [pc, #124]	; (401bd4 <usart_serial_init+0x130>)
  401b56:	4798      	blx	r3
  401b58:	4602      	mov	r2, r0
  401b5a:	f107 030c 	add.w	r3, r7, #12
  401b5e:	4619      	mov	r1, r3
  401b60:	6878      	ldr	r0, [r7, #4]
  401b62:	4b24      	ldr	r3, [pc, #144]	; (401bf4 <usart_serial_init+0x150>)
  401b64:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401b66:	6878      	ldr	r0, [r7, #4]
  401b68:	4b23      	ldr	r3, [pc, #140]	; (401bf8 <usart_serial_init+0x154>)
  401b6a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401b6c:	6878      	ldr	r0, [r7, #4]
  401b6e:	4b23      	ldr	r3, [pc, #140]	; (401bfc <usart_serial_init+0x158>)
  401b70:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401b72:	687b      	ldr	r3, [r7, #4]
  401b74:	4a22      	ldr	r2, [pc, #136]	; (401c00 <usart_serial_init+0x15c>)
  401b76:	4293      	cmp	r3, r2
  401b78:	d111      	bne.n	401b9e <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401b7a:	200e      	movs	r0, #14
  401b7c:	4b17      	ldr	r3, [pc, #92]	; (401bdc <usart_serial_init+0x138>)
  401b7e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401b80:	4b14      	ldr	r3, [pc, #80]	; (401bd4 <usart_serial_init+0x130>)
  401b82:	4798      	blx	r3
  401b84:	4602      	mov	r2, r0
  401b86:	f107 030c 	add.w	r3, r7, #12
  401b8a:	4619      	mov	r1, r3
  401b8c:	6878      	ldr	r0, [r7, #4]
  401b8e:	4b19      	ldr	r3, [pc, #100]	; (401bf4 <usart_serial_init+0x150>)
  401b90:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401b92:	6878      	ldr	r0, [r7, #4]
  401b94:	4b18      	ldr	r3, [pc, #96]	; (401bf8 <usart_serial_init+0x154>)
  401b96:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401b98:	6878      	ldr	r0, [r7, #4]
  401b9a:	4b18      	ldr	r3, [pc, #96]	; (401bfc <usart_serial_init+0x158>)
  401b9c:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401b9e:	687b      	ldr	r3, [r7, #4]
  401ba0:	4a18      	ldr	r2, [pc, #96]	; (401c04 <usart_serial_init+0x160>)
  401ba2:	4293      	cmp	r3, r2
  401ba4:	d111      	bne.n	401bca <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  401ba6:	200f      	movs	r0, #15
  401ba8:	4b0c      	ldr	r3, [pc, #48]	; (401bdc <usart_serial_init+0x138>)
  401baa:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401bac:	4b09      	ldr	r3, [pc, #36]	; (401bd4 <usart_serial_init+0x130>)
  401bae:	4798      	blx	r3
  401bb0:	4602      	mov	r2, r0
  401bb2:	f107 030c 	add.w	r3, r7, #12
  401bb6:	4619      	mov	r1, r3
  401bb8:	6878      	ldr	r0, [r7, #4]
  401bba:	4b0e      	ldr	r3, [pc, #56]	; (401bf4 <usart_serial_init+0x150>)
  401bbc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401bbe:	6878      	ldr	r0, [r7, #4]
  401bc0:	4b0d      	ldr	r3, [pc, #52]	; (401bf8 <usart_serial_init+0x154>)
  401bc2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401bc4:	6878      	ldr	r0, [r7, #4]
  401bc6:	4b0d      	ldr	r3, [pc, #52]	; (401bfc <usart_serial_init+0x158>)
  401bc8:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401bca:	bf00      	nop
  401bcc:	3730      	adds	r7, #48	; 0x30
  401bce:	46bd      	mov	sp, r7
  401bd0:	bd80      	pop	{r7, pc}
  401bd2:	bf00      	nop
  401bd4:	00401a75 	.word	0x00401a75
  401bd8:	400e0800 	.word	0x400e0800
  401bdc:	00401a89 	.word	0x00401a89
  401be0:	00401199 	.word	0x00401199
  401be4:	400e0a00 	.word	0x400e0a00
  401be8:	400e1a00 	.word	0x400e1a00
  401bec:	400e1c00 	.word	0x400e1c00
  401bf0:	40024000 	.word	0x40024000
  401bf4:	00401331 	.word	0x00401331
  401bf8:	004013b5 	.word	0x004013b5
  401bfc:	004013e9 	.word	0x004013e9
  401c00:	40028000 	.word	0x40028000
  401c04:	4002c000 	.word	0x4002c000

00401c08 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401c08:	b580      	push	{r7, lr}
  401c0a:	b082      	sub	sp, #8
  401c0c:	af00      	add	r7, sp, #0
  401c0e:	6078      	str	r0, [r7, #4]
  401c10:	460b      	mov	r3, r1
  401c12:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c14:	687b      	ldr	r3, [r7, #4]
  401c16:	4a36      	ldr	r2, [pc, #216]	; (401cf0 <usart_serial_putchar+0xe8>)
  401c18:	4293      	cmp	r3, r2
  401c1a:	d10a      	bne.n	401c32 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c1c:	bf00      	nop
  401c1e:	78fb      	ldrb	r3, [r7, #3]
  401c20:	4619      	mov	r1, r3
  401c22:	6878      	ldr	r0, [r7, #4]
  401c24:	4b33      	ldr	r3, [pc, #204]	; (401cf4 <usart_serial_putchar+0xec>)
  401c26:	4798      	blx	r3
  401c28:	4603      	mov	r3, r0
  401c2a:	2b00      	cmp	r3, #0
  401c2c:	d1f7      	bne.n	401c1e <usart_serial_putchar+0x16>
		return 1;
  401c2e:	2301      	movs	r3, #1
  401c30:	e05a      	b.n	401ce8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c32:	687b      	ldr	r3, [r7, #4]
  401c34:	4a30      	ldr	r2, [pc, #192]	; (401cf8 <usart_serial_putchar+0xf0>)
  401c36:	4293      	cmp	r3, r2
  401c38:	d10a      	bne.n	401c50 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c3a:	bf00      	nop
  401c3c:	78fb      	ldrb	r3, [r7, #3]
  401c3e:	4619      	mov	r1, r3
  401c40:	6878      	ldr	r0, [r7, #4]
  401c42:	4b2c      	ldr	r3, [pc, #176]	; (401cf4 <usart_serial_putchar+0xec>)
  401c44:	4798      	blx	r3
  401c46:	4603      	mov	r3, r0
  401c48:	2b00      	cmp	r3, #0
  401c4a:	d1f7      	bne.n	401c3c <usart_serial_putchar+0x34>
		return 1;
  401c4c:	2301      	movs	r3, #1
  401c4e:	e04b      	b.n	401ce8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401c50:	687b      	ldr	r3, [r7, #4]
  401c52:	4a2a      	ldr	r2, [pc, #168]	; (401cfc <usart_serial_putchar+0xf4>)
  401c54:	4293      	cmp	r3, r2
  401c56:	d10a      	bne.n	401c6e <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c58:	bf00      	nop
  401c5a:	78fb      	ldrb	r3, [r7, #3]
  401c5c:	4619      	mov	r1, r3
  401c5e:	6878      	ldr	r0, [r7, #4]
  401c60:	4b24      	ldr	r3, [pc, #144]	; (401cf4 <usart_serial_putchar+0xec>)
  401c62:	4798      	blx	r3
  401c64:	4603      	mov	r3, r0
  401c66:	2b00      	cmp	r3, #0
  401c68:	d1f7      	bne.n	401c5a <usart_serial_putchar+0x52>
		return 1;
  401c6a:	2301      	movs	r3, #1
  401c6c:	e03c      	b.n	401ce8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401c6e:	687b      	ldr	r3, [r7, #4]
  401c70:	4a23      	ldr	r2, [pc, #140]	; (401d00 <usart_serial_putchar+0xf8>)
  401c72:	4293      	cmp	r3, r2
  401c74:	d10a      	bne.n	401c8c <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c76:	bf00      	nop
  401c78:	78fb      	ldrb	r3, [r7, #3]
  401c7a:	4619      	mov	r1, r3
  401c7c:	6878      	ldr	r0, [r7, #4]
  401c7e:	4b1d      	ldr	r3, [pc, #116]	; (401cf4 <usart_serial_putchar+0xec>)
  401c80:	4798      	blx	r3
  401c82:	4603      	mov	r3, r0
  401c84:	2b00      	cmp	r3, #0
  401c86:	d1f7      	bne.n	401c78 <usart_serial_putchar+0x70>
		return 1;
  401c88:	2301      	movs	r3, #1
  401c8a:	e02d      	b.n	401ce8 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401c8c:	687b      	ldr	r3, [r7, #4]
  401c8e:	4a1d      	ldr	r2, [pc, #116]	; (401d04 <usart_serial_putchar+0xfc>)
  401c90:	4293      	cmp	r3, r2
  401c92:	d10a      	bne.n	401caa <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401c94:	bf00      	nop
  401c96:	78fb      	ldrb	r3, [r7, #3]
  401c98:	4619      	mov	r1, r3
  401c9a:	6878      	ldr	r0, [r7, #4]
  401c9c:	4b1a      	ldr	r3, [pc, #104]	; (401d08 <usart_serial_putchar+0x100>)
  401c9e:	4798      	blx	r3
  401ca0:	4603      	mov	r3, r0
  401ca2:	2b00      	cmp	r3, #0
  401ca4:	d1f7      	bne.n	401c96 <usart_serial_putchar+0x8e>
		return 1;
  401ca6:	2301      	movs	r3, #1
  401ca8:	e01e      	b.n	401ce8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401caa:	687b      	ldr	r3, [r7, #4]
  401cac:	4a17      	ldr	r2, [pc, #92]	; (401d0c <usart_serial_putchar+0x104>)
  401cae:	4293      	cmp	r3, r2
  401cb0:	d10a      	bne.n	401cc8 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401cb2:	bf00      	nop
  401cb4:	78fb      	ldrb	r3, [r7, #3]
  401cb6:	4619      	mov	r1, r3
  401cb8:	6878      	ldr	r0, [r7, #4]
  401cba:	4b13      	ldr	r3, [pc, #76]	; (401d08 <usart_serial_putchar+0x100>)
  401cbc:	4798      	blx	r3
  401cbe:	4603      	mov	r3, r0
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	d1f7      	bne.n	401cb4 <usart_serial_putchar+0xac>
		return 1;
  401cc4:	2301      	movs	r3, #1
  401cc6:	e00f      	b.n	401ce8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401cc8:	687b      	ldr	r3, [r7, #4]
  401cca:	4a11      	ldr	r2, [pc, #68]	; (401d10 <usart_serial_putchar+0x108>)
  401ccc:	4293      	cmp	r3, r2
  401cce:	d10a      	bne.n	401ce6 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401cd0:	bf00      	nop
  401cd2:	78fb      	ldrb	r3, [r7, #3]
  401cd4:	4619      	mov	r1, r3
  401cd6:	6878      	ldr	r0, [r7, #4]
  401cd8:	4b0b      	ldr	r3, [pc, #44]	; (401d08 <usart_serial_putchar+0x100>)
  401cda:	4798      	blx	r3
  401cdc:	4603      	mov	r3, r0
  401cde:	2b00      	cmp	r3, #0
  401ce0:	d1f7      	bne.n	401cd2 <usart_serial_putchar+0xca>
		return 1;
  401ce2:	2301      	movs	r3, #1
  401ce4:	e000      	b.n	401ce8 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401ce6:	2300      	movs	r3, #0
}
  401ce8:	4618      	mov	r0, r3
  401cea:	3708      	adds	r7, #8
  401cec:	46bd      	mov	sp, r7
  401cee:	bd80      	pop	{r7, pc}
  401cf0:	400e0800 	.word	0x400e0800
  401cf4:	004011f1 	.word	0x004011f1
  401cf8:	400e0a00 	.word	0x400e0a00
  401cfc:	400e1a00 	.word	0x400e1a00
  401d00:	400e1c00 	.word	0x400e1c00
  401d04:	40024000 	.word	0x40024000
  401d08:	00401455 	.word	0x00401455
  401d0c:	40028000 	.word	0x40028000
  401d10:	4002c000 	.word	0x4002c000

00401d14 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401d14:	b580      	push	{r7, lr}
  401d16:	b084      	sub	sp, #16
  401d18:	af00      	add	r7, sp, #0
  401d1a:	6078      	str	r0, [r7, #4]
  401d1c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401d1e:	2300      	movs	r3, #0
  401d20:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401d22:	687b      	ldr	r3, [r7, #4]
  401d24:	4a34      	ldr	r2, [pc, #208]	; (401df8 <usart_serial_getchar+0xe4>)
  401d26:	4293      	cmp	r3, r2
  401d28:	d107      	bne.n	401d3a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401d2a:	bf00      	nop
  401d2c:	6839      	ldr	r1, [r7, #0]
  401d2e:	6878      	ldr	r0, [r7, #4]
  401d30:	4b32      	ldr	r3, [pc, #200]	; (401dfc <usart_serial_getchar+0xe8>)
  401d32:	4798      	blx	r3
  401d34:	4603      	mov	r3, r0
  401d36:	2b00      	cmp	r3, #0
  401d38:	d1f8      	bne.n	401d2c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401d3a:	687b      	ldr	r3, [r7, #4]
  401d3c:	4a30      	ldr	r2, [pc, #192]	; (401e00 <usart_serial_getchar+0xec>)
  401d3e:	4293      	cmp	r3, r2
  401d40:	d107      	bne.n	401d52 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401d42:	bf00      	nop
  401d44:	6839      	ldr	r1, [r7, #0]
  401d46:	6878      	ldr	r0, [r7, #4]
  401d48:	4b2c      	ldr	r3, [pc, #176]	; (401dfc <usart_serial_getchar+0xe8>)
  401d4a:	4798      	blx	r3
  401d4c:	4603      	mov	r3, r0
  401d4e:	2b00      	cmp	r3, #0
  401d50:	d1f8      	bne.n	401d44 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401d52:	687b      	ldr	r3, [r7, #4]
  401d54:	4a2b      	ldr	r2, [pc, #172]	; (401e04 <usart_serial_getchar+0xf0>)
  401d56:	4293      	cmp	r3, r2
  401d58:	d107      	bne.n	401d6a <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401d5a:	bf00      	nop
  401d5c:	6839      	ldr	r1, [r7, #0]
  401d5e:	6878      	ldr	r0, [r7, #4]
  401d60:	4b26      	ldr	r3, [pc, #152]	; (401dfc <usart_serial_getchar+0xe8>)
  401d62:	4798      	blx	r3
  401d64:	4603      	mov	r3, r0
  401d66:	2b00      	cmp	r3, #0
  401d68:	d1f8      	bne.n	401d5c <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401d6a:	687b      	ldr	r3, [r7, #4]
  401d6c:	4a26      	ldr	r2, [pc, #152]	; (401e08 <usart_serial_getchar+0xf4>)
  401d6e:	4293      	cmp	r3, r2
  401d70:	d107      	bne.n	401d82 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401d72:	bf00      	nop
  401d74:	6839      	ldr	r1, [r7, #0]
  401d76:	6878      	ldr	r0, [r7, #4]
  401d78:	4b20      	ldr	r3, [pc, #128]	; (401dfc <usart_serial_getchar+0xe8>)
  401d7a:	4798      	blx	r3
  401d7c:	4603      	mov	r3, r0
  401d7e:	2b00      	cmp	r3, #0
  401d80:	d1f8      	bne.n	401d74 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401d82:	687b      	ldr	r3, [r7, #4]
  401d84:	4a21      	ldr	r2, [pc, #132]	; (401e0c <usart_serial_getchar+0xf8>)
  401d86:	4293      	cmp	r3, r2
  401d88:	d10d      	bne.n	401da6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401d8a:	bf00      	nop
  401d8c:	f107 030c 	add.w	r3, r7, #12
  401d90:	4619      	mov	r1, r3
  401d92:	6878      	ldr	r0, [r7, #4]
  401d94:	4b1e      	ldr	r3, [pc, #120]	; (401e10 <usart_serial_getchar+0xfc>)
  401d96:	4798      	blx	r3
  401d98:	4603      	mov	r3, r0
  401d9a:	2b00      	cmp	r3, #0
  401d9c:	d1f6      	bne.n	401d8c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401d9e:	68fb      	ldr	r3, [r7, #12]
  401da0:	b2da      	uxtb	r2, r3
  401da2:	683b      	ldr	r3, [r7, #0]
  401da4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401da6:	687b      	ldr	r3, [r7, #4]
  401da8:	4a1a      	ldr	r2, [pc, #104]	; (401e14 <usart_serial_getchar+0x100>)
  401daa:	4293      	cmp	r3, r2
  401dac:	d10d      	bne.n	401dca <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401dae:	bf00      	nop
  401db0:	f107 030c 	add.w	r3, r7, #12
  401db4:	4619      	mov	r1, r3
  401db6:	6878      	ldr	r0, [r7, #4]
  401db8:	4b15      	ldr	r3, [pc, #84]	; (401e10 <usart_serial_getchar+0xfc>)
  401dba:	4798      	blx	r3
  401dbc:	4603      	mov	r3, r0
  401dbe:	2b00      	cmp	r3, #0
  401dc0:	d1f6      	bne.n	401db0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401dc2:	68fb      	ldr	r3, [r7, #12]
  401dc4:	b2da      	uxtb	r2, r3
  401dc6:	683b      	ldr	r3, [r7, #0]
  401dc8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401dca:	687b      	ldr	r3, [r7, #4]
  401dcc:	4a12      	ldr	r2, [pc, #72]	; (401e18 <usart_serial_getchar+0x104>)
  401dce:	4293      	cmp	r3, r2
  401dd0:	d10d      	bne.n	401dee <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401dd2:	bf00      	nop
  401dd4:	f107 030c 	add.w	r3, r7, #12
  401dd8:	4619      	mov	r1, r3
  401dda:	6878      	ldr	r0, [r7, #4]
  401ddc:	4b0c      	ldr	r3, [pc, #48]	; (401e10 <usart_serial_getchar+0xfc>)
  401dde:	4798      	blx	r3
  401de0:	4603      	mov	r3, r0
  401de2:	2b00      	cmp	r3, #0
  401de4:	d1f6      	bne.n	401dd4 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401de6:	68fb      	ldr	r3, [r7, #12]
  401de8:	b2da      	uxtb	r2, r3
  401dea:	683b      	ldr	r3, [r7, #0]
  401dec:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401dee:	bf00      	nop
  401df0:	3710      	adds	r7, #16
  401df2:	46bd      	mov	sp, r7
  401df4:	bd80      	pop	{r7, pc}
  401df6:	bf00      	nop
  401df8:	400e0800 	.word	0x400e0800
  401dfc:	00401221 	.word	0x00401221
  401e00:	400e0a00 	.word	0x400e0a00
  401e04:	400e1a00 	.word	0x400e1a00
  401e08:	400e1c00 	.word	0x400e1c00
  401e0c:	40024000 	.word	0x40024000
  401e10:	00401487 	.word	0x00401487
  401e14:	40028000 	.word	0x40028000
  401e18:	4002c000 	.word	0x4002c000

00401e1c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401e1c:	b580      	push	{r7, lr}
  401e1e:	b082      	sub	sp, #8
  401e20:	af00      	add	r7, sp, #0
  401e22:	6078      	str	r0, [r7, #4]
  401e24:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401e26:	4a0f      	ldr	r2, [pc, #60]	; (401e64 <stdio_serial_init+0x48>)
  401e28:	687b      	ldr	r3, [r7, #4]
  401e2a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401e2c:	4b0e      	ldr	r3, [pc, #56]	; (401e68 <stdio_serial_init+0x4c>)
  401e2e:	4a0f      	ldr	r2, [pc, #60]	; (401e6c <stdio_serial_init+0x50>)
  401e30:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401e32:	4b0f      	ldr	r3, [pc, #60]	; (401e70 <stdio_serial_init+0x54>)
  401e34:	4a0f      	ldr	r2, [pc, #60]	; (401e74 <stdio_serial_init+0x58>)
  401e36:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401e38:	6839      	ldr	r1, [r7, #0]
  401e3a:	6878      	ldr	r0, [r7, #4]
  401e3c:	4b0e      	ldr	r3, [pc, #56]	; (401e78 <stdio_serial_init+0x5c>)
  401e3e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401e40:	4b0e      	ldr	r3, [pc, #56]	; (401e7c <stdio_serial_init+0x60>)
  401e42:	681b      	ldr	r3, [r3, #0]
  401e44:	689b      	ldr	r3, [r3, #8]
  401e46:	2100      	movs	r1, #0
  401e48:	4618      	mov	r0, r3
  401e4a:	4b0d      	ldr	r3, [pc, #52]	; (401e80 <stdio_serial_init+0x64>)
  401e4c:	4798      	blx	r3
	setbuf(stdin, NULL);
  401e4e:	4b0b      	ldr	r3, [pc, #44]	; (401e7c <stdio_serial_init+0x60>)
  401e50:	681b      	ldr	r3, [r3, #0]
  401e52:	685b      	ldr	r3, [r3, #4]
  401e54:	2100      	movs	r1, #0
  401e56:	4618      	mov	r0, r3
  401e58:	4b09      	ldr	r3, [pc, #36]	; (401e80 <stdio_serial_init+0x64>)
  401e5a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401e5c:	bf00      	nop
  401e5e:	3708      	adds	r7, #8
  401e60:	46bd      	mov	sp, r7
  401e62:	bd80      	pop	{r7, pc}
  401e64:	20400a94 	.word	0x20400a94
  401e68:	20400a90 	.word	0x20400a90
  401e6c:	00401c09 	.word	0x00401c09
  401e70:	20400a8c 	.word	0x20400a8c
  401e74:	00401d15 	.word	0x00401d15
  401e78:	00401aa5 	.word	0x00401aa5
  401e7c:	20400010 	.word	0x20400010
  401e80:	00402851 	.word	0x00402851

00401e84 <RTC_Handler>:
/************************************************************************/

/**
* \brief Interrupt handler for the RTC. Refresh the display.
*/
void RTC_Handler(void) {
  401e84:	b580      	push	{r7, lr}
  401e86:	b082      	sub	sp, #8
  401e88:	af00      	add	r7, sp, #0
    uint32_t ul_status = rtc_get_status(RTC);
  401e8a:	481b      	ldr	r0, [pc, #108]	; (401ef8 <RTC_Handler+0x74>)
  401e8c:	4b1b      	ldr	r3, [pc, #108]	; (401efc <RTC_Handler+0x78>)
  401e8e:	4798      	blx	r3
  401e90:	6078      	str	r0, [r7, #4]
	
    /* seccond tick */
    if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {	
  401e92:	687b      	ldr	r3, [r7, #4]
  401e94:	f003 0304 	and.w	r3, r3, #4
  401e98:	2b00      	cmp	r3, #0
  401e9a:	d005      	beq.n	401ea8 <RTC_Handler+0x24>
			// o código para irq de segundo vem aqui
			printf("Sec alarm \n");
  401e9c:	4818      	ldr	r0, [pc, #96]	; (401f00 <RTC_Handler+0x7c>)
  401e9e:	4b19      	ldr	r3, [pc, #100]	; (401f04 <RTC_Handler+0x80>)
  401ea0:	4798      	blx	r3
			flag_rtc_alarm1 = 1;
  401ea2:	4b19      	ldr	r3, [pc, #100]	; (401f08 <RTC_Handler+0x84>)
  401ea4:	2201      	movs	r2, #1
  401ea6:	701a      	strb	r2, [r3, #0]
    }
	
    /* Time or date alarm */
    if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  401ea8:	687b      	ldr	r3, [r7, #4]
  401eaa:	f003 0302 	and.w	r3, r3, #2
  401eae:	2b00      	cmp	r3, #0
  401eb0:	d005      	beq.n	401ebe <RTC_Handler+0x3a>
    	// o código para irq de alame vem aqui
        flag_rtc_alarm = 1;
  401eb2:	4b16      	ldr	r3, [pc, #88]	; (401f0c <RTC_Handler+0x88>)
  401eb4:	2201      	movs	r2, #1
  401eb6:	701a      	strb	r2, [r3, #0]
				printf("Time alarm \n");
  401eb8:	4815      	ldr	r0, [pc, #84]	; (401f10 <RTC_Handler+0x8c>)
  401eba:	4b12      	ldr	r3, [pc, #72]	; (401f04 <RTC_Handler+0x80>)
  401ebc:	4798      	blx	r3
    }

    rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401ebe:	2104      	movs	r1, #4
  401ec0:	480d      	ldr	r0, [pc, #52]	; (401ef8 <RTC_Handler+0x74>)
  401ec2:	4b14      	ldr	r3, [pc, #80]	; (401f14 <RTC_Handler+0x90>)
  401ec4:	4798      	blx	r3
    rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  401ec6:	2102      	movs	r1, #2
  401ec8:	480b      	ldr	r0, [pc, #44]	; (401ef8 <RTC_Handler+0x74>)
  401eca:	4b12      	ldr	r3, [pc, #72]	; (401f14 <RTC_Handler+0x90>)
  401ecc:	4798      	blx	r3
    rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  401ece:	2101      	movs	r1, #1
  401ed0:	4809      	ldr	r0, [pc, #36]	; (401ef8 <RTC_Handler+0x74>)
  401ed2:	4b10      	ldr	r3, [pc, #64]	; (401f14 <RTC_Handler+0x90>)
  401ed4:	4798      	blx	r3
    rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  401ed6:	2108      	movs	r1, #8
  401ed8:	4807      	ldr	r0, [pc, #28]	; (401ef8 <RTC_Handler+0x74>)
  401eda:	4b0e      	ldr	r3, [pc, #56]	; (401f14 <RTC_Handler+0x90>)
  401edc:	4798      	blx	r3
    rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401ede:	2110      	movs	r1, #16
  401ee0:	4805      	ldr	r0, [pc, #20]	; (401ef8 <RTC_Handler+0x74>)
  401ee2:	4b0c      	ldr	r3, [pc, #48]	; (401f14 <RTC_Handler+0x90>)
  401ee4:	4798      	blx	r3
    rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401ee6:	2120      	movs	r1, #32
  401ee8:	4803      	ldr	r0, [pc, #12]	; (401ef8 <RTC_Handler+0x74>)
  401eea:	4b0a      	ldr	r3, [pc, #40]	; (401f14 <RTC_Handler+0x90>)
  401eec:	4798      	blx	r3
}
  401eee:	bf00      	nop
  401ef0:	3708      	adds	r7, #8
  401ef2:	46bd      	mov	sp, r7
  401ef4:	bd80      	pop	{r7, pc}
  401ef6:	bf00      	nop
  401ef8:	400e1860 	.word	0x400e1860
  401efc:	00401165 	.word	0x00401165
  401f00:	004053b8 	.word	0x004053b8
  401f04:	0040278d 	.word	0x0040278d
  401f08:	20400a55 	.word	0x20400a55
  401f0c:	20400a54 	.word	0x20400a54
  401f10:	004053c4 	.word	0x004053c4
  401f14:	0040117d 	.word	0x0040117d

00401f18 <pisca_led>:

/************************************************************************/
/* Funcoes                                                              */
/************************************************************************/

void pisca_led (int n, int t, int l) {
  401f18:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f1a:	b087      	sub	sp, #28
  401f1c:	af00      	add	r7, sp, #0
  401f1e:	60f8      	str	r0, [r7, #12]
  401f20:	60b9      	str	r1, [r7, #8]
  401f22:	607a      	str	r2, [r7, #4]
	if (l) {
  401f24:	687b      	ldr	r3, [r7, #4]
  401f26:	2b00      	cmp	r3, #0
  401f28:	f000 8096 	beq.w	402058 <pisca_led+0x140>
		for (int i=0;i<n;i++){
  401f2c:	2300      	movs	r3, #0
  401f2e:	617b      	str	r3, [r7, #20]
  401f30:	e08c      	b.n	40204c <pisca_led+0x134>
			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401f32:	2101      	movs	r1, #1
  401f34:	4896      	ldr	r0, [pc, #600]	; (402190 <pisca_led+0x278>)
  401f36:	4b97      	ldr	r3, [pc, #604]	; (402194 <pisca_led+0x27c>)
  401f38:	4798      	blx	r3
			delay_ms(t);
  401f3a:	68bb      	ldr	r3, [r7, #8]
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d026      	beq.n	401f8e <pisca_led+0x76>
  401f40:	68bb      	ldr	r3, [r7, #8]
  401f42:	461d      	mov	r5, r3
  401f44:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401f48:	4b93      	ldr	r3, [pc, #588]	; (402198 <pisca_led+0x280>)
  401f4a:	4798      	blx	r3
  401f4c:	4603      	mov	r3, r0
  401f4e:	f04f 0400 	mov.w	r4, #0
  401f52:	fb03 f106 	mul.w	r1, r3, r6
  401f56:	fb05 f204 	mul.w	r2, r5, r4
  401f5a:	440a      	add	r2, r1
  401f5c:	fba5 3403 	umull	r3, r4, r5, r3
  401f60:	4422      	add	r2, r4
  401f62:	4614      	mov	r4, r2
  401f64:	f241 712b 	movw	r1, #5931	; 0x172b
  401f68:	f04f 0200 	mov.w	r2, #0
  401f6c:	185d      	adds	r5, r3, r1
  401f6e:	eb44 0602 	adc.w	r6, r4, r2
  401f72:	4628      	mov	r0, r5
  401f74:	4631      	mov	r1, r6
  401f76:	4c89      	ldr	r4, [pc, #548]	; (40219c <pisca_led+0x284>)
  401f78:	f241 722c 	movw	r2, #5932	; 0x172c
  401f7c:	f04f 0300 	mov.w	r3, #0
  401f80:	47a0      	blx	r4
  401f82:	4603      	mov	r3, r0
  401f84:	460c      	mov	r4, r1
  401f86:	4618      	mov	r0, r3
  401f88:	4b85      	ldr	r3, [pc, #532]	; (4021a0 <pisca_led+0x288>)
  401f8a:	4798      	blx	r3
  401f8c:	e016      	b.n	401fbc <pisca_led+0xa4>
  401f8e:	4b82      	ldr	r3, [pc, #520]	; (402198 <pisca_led+0x280>)
  401f90:	4798      	blx	r3
  401f92:	4603      	mov	r3, r0
  401f94:	f04f 0400 	mov.w	r4, #0
  401f98:	4982      	ldr	r1, [pc, #520]	; (4021a4 <pisca_led+0x28c>)
  401f9a:	f04f 0200 	mov.w	r2, #0
  401f9e:	185d      	adds	r5, r3, r1
  401fa0:	eb44 0602 	adc.w	r6, r4, r2
  401fa4:	4628      	mov	r0, r5
  401fa6:	4631      	mov	r1, r6
  401fa8:	4c7c      	ldr	r4, [pc, #496]	; (40219c <pisca_led+0x284>)
  401faa:	4a7f      	ldr	r2, [pc, #508]	; (4021a8 <pisca_led+0x290>)
  401fac:	f04f 0300 	mov.w	r3, #0
  401fb0:	47a0      	blx	r4
  401fb2:	4603      	mov	r3, r0
  401fb4:	460c      	mov	r4, r1
  401fb6:	4618      	mov	r0, r3
  401fb8:	4b79      	ldr	r3, [pc, #484]	; (4021a0 <pisca_led+0x288>)
  401fba:	4798      	blx	r3
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401fbc:	2101      	movs	r1, #1
  401fbe:	4874      	ldr	r0, [pc, #464]	; (402190 <pisca_led+0x278>)
  401fc0:	4b7a      	ldr	r3, [pc, #488]	; (4021ac <pisca_led+0x294>)
  401fc2:	4798      	blx	r3
			delay_ms(t);
  401fc4:	68bb      	ldr	r3, [r7, #8]
  401fc6:	2b00      	cmp	r3, #0
  401fc8:	d026      	beq.n	402018 <pisca_led+0x100>
  401fca:	68bb      	ldr	r3, [r7, #8]
  401fcc:	461d      	mov	r5, r3
  401fce:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401fd2:	4b71      	ldr	r3, [pc, #452]	; (402198 <pisca_led+0x280>)
  401fd4:	4798      	blx	r3
  401fd6:	4603      	mov	r3, r0
  401fd8:	f04f 0400 	mov.w	r4, #0
  401fdc:	fb03 f106 	mul.w	r1, r3, r6
  401fe0:	fb05 f204 	mul.w	r2, r5, r4
  401fe4:	440a      	add	r2, r1
  401fe6:	fba5 3403 	umull	r3, r4, r5, r3
  401fea:	4422      	add	r2, r4
  401fec:	4614      	mov	r4, r2
  401fee:	f241 712b 	movw	r1, #5931	; 0x172b
  401ff2:	f04f 0200 	mov.w	r2, #0
  401ff6:	185d      	adds	r5, r3, r1
  401ff8:	eb44 0602 	adc.w	r6, r4, r2
  401ffc:	4628      	mov	r0, r5
  401ffe:	4631      	mov	r1, r6
  402000:	4c66      	ldr	r4, [pc, #408]	; (40219c <pisca_led+0x284>)
  402002:	f241 722c 	movw	r2, #5932	; 0x172c
  402006:	f04f 0300 	mov.w	r3, #0
  40200a:	47a0      	blx	r4
  40200c:	4603      	mov	r3, r0
  40200e:	460c      	mov	r4, r1
  402010:	4618      	mov	r0, r3
  402012:	4b63      	ldr	r3, [pc, #396]	; (4021a0 <pisca_led+0x288>)
  402014:	4798      	blx	r3
  402016:	e016      	b.n	402046 <pisca_led+0x12e>
  402018:	4b5f      	ldr	r3, [pc, #380]	; (402198 <pisca_led+0x280>)
  40201a:	4798      	blx	r3
  40201c:	4603      	mov	r3, r0
  40201e:	f04f 0400 	mov.w	r4, #0
  402022:	4960      	ldr	r1, [pc, #384]	; (4021a4 <pisca_led+0x28c>)
  402024:	f04f 0200 	mov.w	r2, #0
  402028:	185d      	adds	r5, r3, r1
  40202a:	eb44 0602 	adc.w	r6, r4, r2
  40202e:	4628      	mov	r0, r5
  402030:	4631      	mov	r1, r6
  402032:	4c5a      	ldr	r4, [pc, #360]	; (40219c <pisca_led+0x284>)
  402034:	4a5c      	ldr	r2, [pc, #368]	; (4021a8 <pisca_led+0x290>)
  402036:	f04f 0300 	mov.w	r3, #0
  40203a:	47a0      	blx	r4
  40203c:	4603      	mov	r3, r0
  40203e:	460c      	mov	r4, r1
  402040:	4618      	mov	r0, r3
  402042:	4b57      	ldr	r3, [pc, #348]	; (4021a0 <pisca_led+0x288>)
  402044:	4798      	blx	r3
		for (int i=0;i<n;i++){
  402046:	697b      	ldr	r3, [r7, #20]
  402048:	3301      	adds	r3, #1
  40204a:	617b      	str	r3, [r7, #20]
  40204c:	697a      	ldr	r2, [r7, #20]
  40204e:	68fb      	ldr	r3, [r7, #12]
  402050:	429a      	cmp	r2, r3
  402052:	f6ff af6e 	blt.w	401f32 <pisca_led+0x1a>
			delay_ms(t);
			pio_set(LED_PIO, LED_IDX_MASK);
			delay_ms(t);
		}
	}
}
  402056:	e096      	b.n	402186 <pisca_led+0x26e>
		for (int i=0;i<n;i++){
  402058:	2300      	movs	r3, #0
  40205a:	613b      	str	r3, [r7, #16]
  40205c:	e08e      	b.n	40217c <pisca_led+0x264>
			pio_clear(LED_PIO, LED_IDX_MASK);
  40205e:	f44f 7180 	mov.w	r1, #256	; 0x100
  402062:	4853      	ldr	r0, [pc, #332]	; (4021b0 <pisca_led+0x298>)
  402064:	4b4b      	ldr	r3, [pc, #300]	; (402194 <pisca_led+0x27c>)
  402066:	4798      	blx	r3
			delay_ms(t);
  402068:	68bb      	ldr	r3, [r7, #8]
  40206a:	2b00      	cmp	r3, #0
  40206c:	d026      	beq.n	4020bc <pisca_led+0x1a4>
  40206e:	68bb      	ldr	r3, [r7, #8]
  402070:	461d      	mov	r5, r3
  402072:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402076:	4b48      	ldr	r3, [pc, #288]	; (402198 <pisca_led+0x280>)
  402078:	4798      	blx	r3
  40207a:	4603      	mov	r3, r0
  40207c:	f04f 0400 	mov.w	r4, #0
  402080:	fb03 f106 	mul.w	r1, r3, r6
  402084:	fb05 f204 	mul.w	r2, r5, r4
  402088:	440a      	add	r2, r1
  40208a:	fba5 3403 	umull	r3, r4, r5, r3
  40208e:	4422      	add	r2, r4
  402090:	4614      	mov	r4, r2
  402092:	f241 712b 	movw	r1, #5931	; 0x172b
  402096:	f04f 0200 	mov.w	r2, #0
  40209a:	185d      	adds	r5, r3, r1
  40209c:	eb44 0602 	adc.w	r6, r4, r2
  4020a0:	4628      	mov	r0, r5
  4020a2:	4631      	mov	r1, r6
  4020a4:	4c3d      	ldr	r4, [pc, #244]	; (40219c <pisca_led+0x284>)
  4020a6:	f241 722c 	movw	r2, #5932	; 0x172c
  4020aa:	f04f 0300 	mov.w	r3, #0
  4020ae:	47a0      	blx	r4
  4020b0:	4603      	mov	r3, r0
  4020b2:	460c      	mov	r4, r1
  4020b4:	4618      	mov	r0, r3
  4020b6:	4b3a      	ldr	r3, [pc, #232]	; (4021a0 <pisca_led+0x288>)
  4020b8:	4798      	blx	r3
  4020ba:	e016      	b.n	4020ea <pisca_led+0x1d2>
  4020bc:	4b36      	ldr	r3, [pc, #216]	; (402198 <pisca_led+0x280>)
  4020be:	4798      	blx	r3
  4020c0:	4603      	mov	r3, r0
  4020c2:	f04f 0400 	mov.w	r4, #0
  4020c6:	4937      	ldr	r1, [pc, #220]	; (4021a4 <pisca_led+0x28c>)
  4020c8:	f04f 0200 	mov.w	r2, #0
  4020cc:	185d      	adds	r5, r3, r1
  4020ce:	eb44 0602 	adc.w	r6, r4, r2
  4020d2:	4628      	mov	r0, r5
  4020d4:	4631      	mov	r1, r6
  4020d6:	4c31      	ldr	r4, [pc, #196]	; (40219c <pisca_led+0x284>)
  4020d8:	4a33      	ldr	r2, [pc, #204]	; (4021a8 <pisca_led+0x290>)
  4020da:	f04f 0300 	mov.w	r3, #0
  4020de:	47a0      	blx	r4
  4020e0:	4603      	mov	r3, r0
  4020e2:	460c      	mov	r4, r1
  4020e4:	4618      	mov	r0, r3
  4020e6:	4b2e      	ldr	r3, [pc, #184]	; (4021a0 <pisca_led+0x288>)
  4020e8:	4798      	blx	r3
			pio_set(LED_PIO, LED_IDX_MASK);
  4020ea:	f44f 7180 	mov.w	r1, #256	; 0x100
  4020ee:	4830      	ldr	r0, [pc, #192]	; (4021b0 <pisca_led+0x298>)
  4020f0:	4b2e      	ldr	r3, [pc, #184]	; (4021ac <pisca_led+0x294>)
  4020f2:	4798      	blx	r3
			delay_ms(t);
  4020f4:	68bb      	ldr	r3, [r7, #8]
  4020f6:	2b00      	cmp	r3, #0
  4020f8:	d026      	beq.n	402148 <pisca_led+0x230>
  4020fa:	68bb      	ldr	r3, [r7, #8]
  4020fc:	461d      	mov	r5, r3
  4020fe:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402102:	4b25      	ldr	r3, [pc, #148]	; (402198 <pisca_led+0x280>)
  402104:	4798      	blx	r3
  402106:	4603      	mov	r3, r0
  402108:	f04f 0400 	mov.w	r4, #0
  40210c:	fb03 f106 	mul.w	r1, r3, r6
  402110:	fb05 f204 	mul.w	r2, r5, r4
  402114:	440a      	add	r2, r1
  402116:	fba5 3403 	umull	r3, r4, r5, r3
  40211a:	4422      	add	r2, r4
  40211c:	4614      	mov	r4, r2
  40211e:	f241 712b 	movw	r1, #5931	; 0x172b
  402122:	f04f 0200 	mov.w	r2, #0
  402126:	185d      	adds	r5, r3, r1
  402128:	eb44 0602 	adc.w	r6, r4, r2
  40212c:	4628      	mov	r0, r5
  40212e:	4631      	mov	r1, r6
  402130:	4c1a      	ldr	r4, [pc, #104]	; (40219c <pisca_led+0x284>)
  402132:	f241 722c 	movw	r2, #5932	; 0x172c
  402136:	f04f 0300 	mov.w	r3, #0
  40213a:	47a0      	blx	r4
  40213c:	4603      	mov	r3, r0
  40213e:	460c      	mov	r4, r1
  402140:	4618      	mov	r0, r3
  402142:	4b17      	ldr	r3, [pc, #92]	; (4021a0 <pisca_led+0x288>)
  402144:	4798      	blx	r3
  402146:	e016      	b.n	402176 <pisca_led+0x25e>
  402148:	4b13      	ldr	r3, [pc, #76]	; (402198 <pisca_led+0x280>)
  40214a:	4798      	blx	r3
  40214c:	4603      	mov	r3, r0
  40214e:	f04f 0400 	mov.w	r4, #0
  402152:	4914      	ldr	r1, [pc, #80]	; (4021a4 <pisca_led+0x28c>)
  402154:	f04f 0200 	mov.w	r2, #0
  402158:	185d      	adds	r5, r3, r1
  40215a:	eb44 0602 	adc.w	r6, r4, r2
  40215e:	4628      	mov	r0, r5
  402160:	4631      	mov	r1, r6
  402162:	4c0e      	ldr	r4, [pc, #56]	; (40219c <pisca_led+0x284>)
  402164:	4a10      	ldr	r2, [pc, #64]	; (4021a8 <pisca_led+0x290>)
  402166:	f04f 0300 	mov.w	r3, #0
  40216a:	47a0      	blx	r4
  40216c:	4603      	mov	r3, r0
  40216e:	460c      	mov	r4, r1
  402170:	4618      	mov	r0, r3
  402172:	4b0b      	ldr	r3, [pc, #44]	; (4021a0 <pisca_led+0x288>)
  402174:	4798      	blx	r3
		for (int i=0;i<n;i++){
  402176:	693b      	ldr	r3, [r7, #16]
  402178:	3301      	adds	r3, #1
  40217a:	613b      	str	r3, [r7, #16]
  40217c:	693a      	ldr	r2, [r7, #16]
  40217e:	68fb      	ldr	r3, [r7, #12]
  402180:	429a      	cmp	r2, r3
  402182:	f6ff af6c 	blt.w	40205e <pisca_led+0x146>
}
  402186:	bf00      	nop
  402188:	371c      	adds	r7, #28
  40218a:	46bd      	mov	sp, r7
  40218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40218e:	bf00      	nop
  402190:	400e0e00 	.word	0x400e0e00
  402194:	00400631 	.word	0x00400631
  402198:	00401a61 	.word	0x00401a61
  40219c:	0040242d 	.word	0x0040242d
  4021a0:	20400001 	.word	0x20400001
  4021a4:	005a83df 	.word	0x005a83df
  4021a8:	005a83e0 	.word	0x005a83e0
  4021ac:	00400615 	.word	0x00400615
  4021b0:	400e1200 	.word	0x400e1200

004021b4 <LED_init>:

/**
* @Brief Inicializa o pino do LED
*/
void LED_init(int estado) {
  4021b4:	b590      	push	{r4, r7, lr}
  4021b6:	b085      	sub	sp, #20
  4021b8:	af02      	add	r7, sp, #8
  4021ba:	6078      	str	r0, [r7, #4]
     pmc_enable_periph_clk(LED_PIO_ID);
  4021bc:	200c      	movs	r0, #12
  4021be:	4b0d      	ldr	r3, [pc, #52]	; (4021f4 <LED_init+0x40>)
  4021c0:	4798      	blx	r3
     pio_set_output(LED_PIO, LED_IDX_MASK, estado, 0, 0 );
  4021c2:	687a      	ldr	r2, [r7, #4]
  4021c4:	2300      	movs	r3, #0
  4021c6:	9300      	str	r3, [sp, #0]
  4021c8:	2300      	movs	r3, #0
  4021ca:	f44f 7180 	mov.w	r1, #256	; 0x100
  4021ce:	480a      	ldr	r0, [pc, #40]	; (4021f8 <LED_init+0x44>)
  4021d0:	4c0a      	ldr	r4, [pc, #40]	; (4021fc <LED_init+0x48>)
  4021d2:	47a0      	blx	r4
		 
		 pmc_enable_periph_clk(LED1_PIO_ID);
  4021d4:	200a      	movs	r0, #10
  4021d6:	4b07      	ldr	r3, [pc, #28]	; (4021f4 <LED_init+0x40>)
  4021d8:	4798      	blx	r3
		 pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, estado, 0, 0 );
  4021da:	687a      	ldr	r2, [r7, #4]
  4021dc:	2300      	movs	r3, #0
  4021de:	9300      	str	r3, [sp, #0]
  4021e0:	2300      	movs	r3, #0
  4021e2:	2101      	movs	r1, #1
  4021e4:	4806      	ldr	r0, [pc, #24]	; (402200 <LED_init+0x4c>)
  4021e6:	4c05      	ldr	r4, [pc, #20]	; (4021fc <LED_init+0x48>)
  4021e8:	47a0      	blx	r4
};
  4021ea:	bf00      	nop
  4021ec:	370c      	adds	r7, #12
  4021ee:	46bd      	mov	sp, r7
  4021f0:	bd90      	pop	{r4, r7, pc}
  4021f2:	bf00      	nop
  4021f4:	00400aed 	.word	0x00400aed
  4021f8:	400e1200 	.word	0x400e1200
  4021fc:	0040064d 	.word	0x0040064d
  402200:	400e0e00 	.word	0x400e0e00

00402204 <RTC_init>:

/**
* Configura o RTC para funcionar com interrupcao de alarme
*/
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  402204:	b082      	sub	sp, #8
  402206:	b590      	push	{r4, r7, lr}
  402208:	b085      	sub	sp, #20
  40220a:	af02      	add	r7, sp, #8
  40220c:	6078      	str	r0, [r7, #4]
  40220e:	6039      	str	r1, [r7, #0]
  402210:	f107 0118 	add.w	r1, r7, #24
  402214:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  402218:	2002      	movs	r0, #2
  40221a:	4b1a      	ldr	r3, [pc, #104]	; (402284 <RTC_init+0x80>)
  40221c:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  40221e:	2100      	movs	r1, #0
  402220:	6878      	ldr	r0, [r7, #4]
  402222:	4b19      	ldr	r3, [pc, #100]	; (402288 <RTC_init+0x84>)
  402224:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  402226:	69b9      	ldr	r1, [r7, #24]
  402228:	69fa      	ldr	r2, [r7, #28]
  40222a:	6a38      	ldr	r0, [r7, #32]
  40222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40222e:	9300      	str	r3, [sp, #0]
  402230:	4603      	mov	r3, r0
  402232:	6878      	ldr	r0, [r7, #4]
  402234:	4c15      	ldr	r4, [pc, #84]	; (40228c <RTC_init+0x88>)
  402236:	47a0      	blx	r4
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  402238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  40223a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40223e:	6878      	ldr	r0, [r7, #4]
  402240:	4c13      	ldr	r4, [pc, #76]	; (402290 <RTC_init+0x8c>)
  402242:	47a0      	blx	r4

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  402244:	683b      	ldr	r3, [r7, #0]
  402246:	b25b      	sxtb	r3, r3
  402248:	4618      	mov	r0, r3
  40224a:	4b12      	ldr	r3, [pc, #72]	; (402294 <RTC_init+0x90>)
  40224c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(id_rtc);
  40224e:	683b      	ldr	r3, [r7, #0]
  402250:	b25b      	sxtb	r3, r3
  402252:	4618      	mov	r0, r3
  402254:	4b10      	ldr	r3, [pc, #64]	; (402298 <RTC_init+0x94>)
  402256:	4798      	blx	r3
	NVIC_SetPriority(id_rtc, 4);
  402258:	683b      	ldr	r3, [r7, #0]
  40225a:	b25b      	sxtb	r3, r3
  40225c:	2104      	movs	r1, #4
  40225e:	4618      	mov	r0, r3
  402260:	4b0e      	ldr	r3, [pc, #56]	; (40229c <RTC_init+0x98>)
  402262:	4798      	blx	r3
	NVIC_EnableIRQ(id_rtc);
  402264:	683b      	ldr	r3, [r7, #0]
  402266:	b25b      	sxtb	r3, r3
  402268:	4618      	mov	r0, r3
  40226a:	4b0d      	ldr	r3, [pc, #52]	; (4022a0 <RTC_init+0x9c>)
  40226c:	4798      	blx	r3

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  40226e:	6b79      	ldr	r1, [r7, #52]	; 0x34
  402270:	6878      	ldr	r0, [r7, #4]
  402272:	4b0c      	ldr	r3, [pc, #48]	; (4022a4 <RTC_init+0xa0>)
  402274:	4798      	blx	r3
}
  402276:	bf00      	nop
  402278:	370c      	adds	r7, #12
  40227a:	46bd      	mov	sp, r7
  40227c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
  402280:	b002      	add	sp, #8
  402282:	4770      	bx	lr
  402284:	00400aed 	.word	0x00400aed
  402288:	00400b71 	.word	0x00400b71
  40228c:	00400f79 	.word	0x00400f79
  402290:	00400c89 	.word	0x00400c89
  402294:	00401911 	.word	0x00401911
  402298:	00401945 	.word	0x00401945
  40229c:	00401979 	.word	0x00401979
  4022a0:	004018dd 	.word	0x004018dd
  4022a4:	00400ba7 	.word	0x00400ba7

004022a8 <configure_console>:

static void configure_console(void) {
  4022a8:	b590      	push	{r4, r7, lr}
  4022aa:	b085      	sub	sp, #20
  4022ac:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  4022ae:	4b0a      	ldr	r3, [pc, #40]	; (4022d8 <configure_console+0x30>)
  4022b0:	463c      	mov	r4, r7
  4022b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4022b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &uart_serial_options);
  4022b8:	463b      	mov	r3, r7
  4022ba:	4619      	mov	r1, r3
  4022bc:	4807      	ldr	r0, [pc, #28]	; (4022dc <configure_console+0x34>)
  4022be:	4b08      	ldr	r3, [pc, #32]	; (4022e0 <configure_console+0x38>)
  4022c0:	4798      	blx	r3

	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
  4022c2:	4b08      	ldr	r3, [pc, #32]	; (4022e4 <configure_console+0x3c>)
  4022c4:	681b      	ldr	r3, [r3, #0]
  4022c6:	689b      	ldr	r3, [r3, #8]
  4022c8:	2100      	movs	r1, #0
  4022ca:	4618      	mov	r0, r3
  4022cc:	4b06      	ldr	r3, [pc, #24]	; (4022e8 <configure_console+0x40>)
  4022ce:	4798      	blx	r3
}
  4022d0:	bf00      	nop
  4022d2:	3714      	adds	r7, #20
  4022d4:	46bd      	mov	sp, r7
  4022d6:	bd90      	pop	{r4, r7, pc}
  4022d8:	004053d4 	.word	0x004053d4
  4022dc:	40028000 	.word	0x40028000
  4022e0:	00401e1d 	.word	0x00401e1d
  4022e4:	20400010 	.word	0x20400010
  4022e8:	00402851 	.word	0x00402851

004022ec <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void) {
  4022ec:	b5b0      	push	{r4, r5, r7, lr}
  4022ee:	b094      	sub	sp, #80	; 0x50
  4022f0:	af06      	add	r7, sp, #24
    /* Initialize the SAM system */                                                                 
    sysclk_init();        
  4022f2:	4b3e      	ldr	r3, [pc, #248]	; (4023ec <main+0x100>)
  4022f4:	4798      	blx	r3
		
		/* Initialize the console uart */
		configure_console();                                                                          
  4022f6:	4b3e      	ldr	r3, [pc, #248]	; (4023f0 <main+0x104>)
  4022f8:	4798      	blx	r3
                                                                                                    
    /* Disable the watchdog */                                                                      
    WDT->WDT_MR = WDT_MR_WDDIS;                                                                     
  4022fa:	4b3e      	ldr	r3, [pc, #248]	; (4023f4 <main+0x108>)
  4022fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402300:	605a      	str	r2, [r3, #4]
                                                                                                    
    /* Configura Leds */                                                                            
    LED_init(1);                                                                                    
  402302:	2001      	movs	r0, #1
  402304:	4b3c      	ldr	r3, [pc, #240]	; (4023f8 <main+0x10c>)
  402306:	4798      	blx	r3
                                                                                                    
    /** Configura RTC */                                                                            
    calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};                                            
  402308:	4b3c      	ldr	r3, [pc, #240]	; (4023fc <main+0x110>)
  40230a:	f107 041c 	add.w	r4, r7, #28
  40230e:	461d      	mov	r5, r3
  402310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN); 
  40231c:	2302      	movs	r3, #2
  40231e:	9305      	str	r3, [sp, #20]
  402320:	466d      	mov	r5, sp
  402322:	f107 0424 	add.w	r4, r7, #36	; 0x24
  402326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40232a:	6823      	ldr	r3, [r4, #0]
  40232c:	602b      	str	r3, [r5, #0]
  40232e:	f107 031c 	add.w	r3, r7, #28
  402332:	cb0c      	ldmia	r3, {r2, r3}
  402334:	2102      	movs	r1, #2
  402336:	4832      	ldr	r0, [pc, #200]	; (402400 <main+0x114>)
  402338:	4c32      	ldr	r4, [pc, #200]	; (402404 <main+0x118>)
  40233a:	47a0      	blx	r4
		RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_SECEN);                                              
  40233c:	2304      	movs	r3, #4
  40233e:	9305      	str	r3, [sp, #20]
  402340:	466d      	mov	r5, sp
  402342:	f107 0424 	add.w	r4, r7, #36	; 0x24
  402346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40234a:	6823      	ldr	r3, [r4, #0]
  40234c:	602b      	str	r3, [r5, #0]
  40234e:	f107 031c 	add.w	r3, r7, #28
  402352:	cb0c      	ldmia	r3, {r2, r3}
  402354:	2102      	movs	r1, #2
  402356:	482a      	ldr	r0, [pc, #168]	; (402400 <main+0x114>)
  402358:	4c2a      	ldr	r4, [pc, #168]	; (402404 <main+0x118>)
  40235a:	47a0      	blx	r4
                                                                                                    
    /* Leitura do valor atual do RTC */           
    uint32_t current_hour, current_min, current_sec;
    uint32_t current_year, current_month, current_day, current_week;
    rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  40235c:	f107 0310 	add.w	r3, r7, #16
  402360:	f107 0214 	add.w	r2, r7, #20
  402364:	f107 0118 	add.w	r1, r7, #24
  402368:	4825      	ldr	r0, [pc, #148]	; (402400 <main+0x114>)
  40236a:	4c27      	ldr	r4, [pc, #156]	; (402408 <main+0x11c>)
  40236c:	47a0      	blx	r4
    rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  40236e:	1d38      	adds	r0, r7, #4
  402370:	f107 0208 	add.w	r2, r7, #8
  402374:	f107 010c 	add.w	r1, r7, #12
  402378:	463b      	mov	r3, r7
  40237a:	9300      	str	r3, [sp, #0]
  40237c:	4603      	mov	r3, r0
  40237e:	4820      	ldr	r0, [pc, #128]	; (402400 <main+0x114>)
  402380:	4c22      	ldr	r4, [pc, #136]	; (40240c <main+0x120>)
  402382:	47a0      	blx	r4
	
    /* configura alarme do RTC para daqui 20 segundos */                                                                   
    rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);                              
  402384:	68ba      	ldr	r2, [r7, #8]
  402386:	687b      	ldr	r3, [r7, #4]
  402388:	9300      	str	r3, [sp, #0]
  40238a:	2301      	movs	r3, #1
  40238c:	2101      	movs	r1, #1
  40238e:	481c      	ldr	r0, [pc, #112]	; (402400 <main+0x114>)
  402390:	4c1f      	ldr	r4, [pc, #124]	; (402410 <main+0x124>)
  402392:	47a0      	blx	r4
    rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 10);
  402394:	69b9      	ldr	r1, [r7, #24]
  402396:	697b      	ldr	r3, [r7, #20]
  402398:	693a      	ldr	r2, [r7, #16]
  40239a:	320a      	adds	r2, #10
  40239c:	9202      	str	r2, [sp, #8]
  40239e:	2201      	movs	r2, #1
  4023a0:	9201      	str	r2, [sp, #4]
  4023a2:	9300      	str	r3, [sp, #0]
  4023a4:	2301      	movs	r3, #1
  4023a6:	460a      	mov	r2, r1
  4023a8:	2101      	movs	r1, #1
  4023aa:	4815      	ldr	r0, [pc, #84]	; (402400 <main+0x114>)
  4023ac:	4c19      	ldr	r4, [pc, #100]	; (402414 <main+0x128>)
  4023ae:	47a0      	blx	r4
		printf("Chegou \n");
  4023b0:	4819      	ldr	r0, [pc, #100]	; (402418 <main+0x12c>)
  4023b2:	4b1a      	ldr	r3, [pc, #104]	; (40241c <main+0x130>)
  4023b4:	4798      	blx	r3
                                                                                                    
    while (1) {                                                                                     
      if(flag_rtc_alarm){                                                                                 
  4023b6:	4b1a      	ldr	r3, [pc, #104]	; (402420 <main+0x134>)
  4023b8:	781b      	ldrb	r3, [r3, #0]
  4023ba:	b2db      	uxtb	r3, r3
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d007      	beq.n	4023d0 <main+0xe4>
          pisca_led(5, 200, 0);                                                                       
  4023c0:	2200      	movs	r2, #0
  4023c2:	21c8      	movs	r1, #200	; 0xc8
  4023c4:	2005      	movs	r0, #5
  4023c6:	4b17      	ldr	r3, [pc, #92]	; (402424 <main+0x138>)
  4023c8:	4798      	blx	r3
          flag_rtc_alarm = 0;                                                                          
  4023ca:	4b15      	ldr	r3, [pc, #84]	; (402420 <main+0x134>)
  4023cc:	2200      	movs	r2, #0
  4023ce:	701a      	strb	r2, [r3, #0]
       }
			 if(flag_rtc_alarm1){
  4023d0:	4b15      	ldr	r3, [pc, #84]	; (402428 <main+0x13c>)
  4023d2:	781b      	ldrb	r3, [r3, #0]
  4023d4:	b2db      	uxtb	r3, r3
  4023d6:	2b00      	cmp	r3, #0
  4023d8:	d0ed      	beq.n	4023b6 <main+0xca>
				 pisca_led(5, 200, 1);
  4023da:	2201      	movs	r2, #1
  4023dc:	21c8      	movs	r1, #200	; 0xc8
  4023de:	2005      	movs	r0, #5
  4023e0:	4b10      	ldr	r3, [pc, #64]	; (402424 <main+0x138>)
  4023e2:	4798      	blx	r3
				 flag_rtc_alarm1 = 0;
  4023e4:	4b10      	ldr	r3, [pc, #64]	; (402428 <main+0x13c>)
  4023e6:	2200      	movs	r2, #0
  4023e8:	701a      	strb	r2, [r3, #0]
      if(flag_rtc_alarm){                                                                                 
  4023ea:	e7e4      	b.n	4023b6 <main+0xca>
  4023ec:	004004ad 	.word	0x004004ad
  4023f0:	004022a9 	.word	0x004022a9
  4023f4:	400e1850 	.word	0x400e1850
  4023f8:	004021b5 	.word	0x004021b5
  4023fc:	004053f0 	.word	0x004053f0
  402400:	400e1860 	.word	0x400e1860
  402404:	00402205 	.word	0x00402205
  402408:	00400bc3 	.word	0x00400bc3
  40240c:	00400e91 	.word	0x00400e91
  402410:	004010b5 	.word	0x004010b5
  402414:	00400d91 	.word	0x00400d91
  402418:	004053e4 	.word	0x004053e4
  40241c:	0040278d 	.word	0x0040278d
  402420:	20400a54 	.word	0x20400a54
  402424:	00401f19 	.word	0x00401f19
  402428:	20400a55 	.word	0x20400a55

0040242c <__aeabi_uldivmod>:
  40242c:	b953      	cbnz	r3, 402444 <__aeabi_uldivmod+0x18>
  40242e:	b94a      	cbnz	r2, 402444 <__aeabi_uldivmod+0x18>
  402430:	2900      	cmp	r1, #0
  402432:	bf08      	it	eq
  402434:	2800      	cmpeq	r0, #0
  402436:	bf1c      	itt	ne
  402438:	f04f 31ff 	movne.w	r1, #4294967295
  40243c:	f04f 30ff 	movne.w	r0, #4294967295
  402440:	f000 b97a 	b.w	402738 <__aeabi_idiv0>
  402444:	f1ad 0c08 	sub.w	ip, sp, #8
  402448:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40244c:	f000 f806 	bl	40245c <__udivmoddi4>
  402450:	f8dd e004 	ldr.w	lr, [sp, #4]
  402454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402458:	b004      	add	sp, #16
  40245a:	4770      	bx	lr

0040245c <__udivmoddi4>:
  40245c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402460:	468c      	mov	ip, r1
  402462:	460d      	mov	r5, r1
  402464:	4604      	mov	r4, r0
  402466:	9e08      	ldr	r6, [sp, #32]
  402468:	2b00      	cmp	r3, #0
  40246a:	d151      	bne.n	402510 <__udivmoddi4+0xb4>
  40246c:	428a      	cmp	r2, r1
  40246e:	4617      	mov	r7, r2
  402470:	d96d      	bls.n	40254e <__udivmoddi4+0xf2>
  402472:	fab2 fe82 	clz	lr, r2
  402476:	f1be 0f00 	cmp.w	lr, #0
  40247a:	d00b      	beq.n	402494 <__udivmoddi4+0x38>
  40247c:	f1ce 0c20 	rsb	ip, lr, #32
  402480:	fa01 f50e 	lsl.w	r5, r1, lr
  402484:	fa20 fc0c 	lsr.w	ip, r0, ip
  402488:	fa02 f70e 	lsl.w	r7, r2, lr
  40248c:	ea4c 0c05 	orr.w	ip, ip, r5
  402490:	fa00 f40e 	lsl.w	r4, r0, lr
  402494:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402498:	0c25      	lsrs	r5, r4, #16
  40249a:	fbbc f8fa 	udiv	r8, ip, sl
  40249e:	fa1f f987 	uxth.w	r9, r7
  4024a2:	fb0a cc18 	mls	ip, sl, r8, ip
  4024a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4024aa:	fb08 f309 	mul.w	r3, r8, r9
  4024ae:	42ab      	cmp	r3, r5
  4024b0:	d90a      	bls.n	4024c8 <__udivmoddi4+0x6c>
  4024b2:	19ed      	adds	r5, r5, r7
  4024b4:	f108 32ff 	add.w	r2, r8, #4294967295
  4024b8:	f080 8123 	bcs.w	402702 <__udivmoddi4+0x2a6>
  4024bc:	42ab      	cmp	r3, r5
  4024be:	f240 8120 	bls.w	402702 <__udivmoddi4+0x2a6>
  4024c2:	f1a8 0802 	sub.w	r8, r8, #2
  4024c6:	443d      	add	r5, r7
  4024c8:	1aed      	subs	r5, r5, r3
  4024ca:	b2a4      	uxth	r4, r4
  4024cc:	fbb5 f0fa 	udiv	r0, r5, sl
  4024d0:	fb0a 5510 	mls	r5, sl, r0, r5
  4024d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4024d8:	fb00 f909 	mul.w	r9, r0, r9
  4024dc:	45a1      	cmp	r9, r4
  4024de:	d909      	bls.n	4024f4 <__udivmoddi4+0x98>
  4024e0:	19e4      	adds	r4, r4, r7
  4024e2:	f100 33ff 	add.w	r3, r0, #4294967295
  4024e6:	f080 810a 	bcs.w	4026fe <__udivmoddi4+0x2a2>
  4024ea:	45a1      	cmp	r9, r4
  4024ec:	f240 8107 	bls.w	4026fe <__udivmoddi4+0x2a2>
  4024f0:	3802      	subs	r0, #2
  4024f2:	443c      	add	r4, r7
  4024f4:	eba4 0409 	sub.w	r4, r4, r9
  4024f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4024fc:	2100      	movs	r1, #0
  4024fe:	2e00      	cmp	r6, #0
  402500:	d061      	beq.n	4025c6 <__udivmoddi4+0x16a>
  402502:	fa24 f40e 	lsr.w	r4, r4, lr
  402506:	2300      	movs	r3, #0
  402508:	6034      	str	r4, [r6, #0]
  40250a:	6073      	str	r3, [r6, #4]
  40250c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402510:	428b      	cmp	r3, r1
  402512:	d907      	bls.n	402524 <__udivmoddi4+0xc8>
  402514:	2e00      	cmp	r6, #0
  402516:	d054      	beq.n	4025c2 <__udivmoddi4+0x166>
  402518:	2100      	movs	r1, #0
  40251a:	e886 0021 	stmia.w	r6, {r0, r5}
  40251e:	4608      	mov	r0, r1
  402520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402524:	fab3 f183 	clz	r1, r3
  402528:	2900      	cmp	r1, #0
  40252a:	f040 808e 	bne.w	40264a <__udivmoddi4+0x1ee>
  40252e:	42ab      	cmp	r3, r5
  402530:	d302      	bcc.n	402538 <__udivmoddi4+0xdc>
  402532:	4282      	cmp	r2, r0
  402534:	f200 80fa 	bhi.w	40272c <__udivmoddi4+0x2d0>
  402538:	1a84      	subs	r4, r0, r2
  40253a:	eb65 0503 	sbc.w	r5, r5, r3
  40253e:	2001      	movs	r0, #1
  402540:	46ac      	mov	ip, r5
  402542:	2e00      	cmp	r6, #0
  402544:	d03f      	beq.n	4025c6 <__udivmoddi4+0x16a>
  402546:	e886 1010 	stmia.w	r6, {r4, ip}
  40254a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40254e:	b912      	cbnz	r2, 402556 <__udivmoddi4+0xfa>
  402550:	2701      	movs	r7, #1
  402552:	fbb7 f7f2 	udiv	r7, r7, r2
  402556:	fab7 fe87 	clz	lr, r7
  40255a:	f1be 0f00 	cmp.w	lr, #0
  40255e:	d134      	bne.n	4025ca <__udivmoddi4+0x16e>
  402560:	1beb      	subs	r3, r5, r7
  402562:	0c3a      	lsrs	r2, r7, #16
  402564:	fa1f fc87 	uxth.w	ip, r7
  402568:	2101      	movs	r1, #1
  40256a:	fbb3 f8f2 	udiv	r8, r3, r2
  40256e:	0c25      	lsrs	r5, r4, #16
  402570:	fb02 3318 	mls	r3, r2, r8, r3
  402574:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402578:	fb0c f308 	mul.w	r3, ip, r8
  40257c:	42ab      	cmp	r3, r5
  40257e:	d907      	bls.n	402590 <__udivmoddi4+0x134>
  402580:	19ed      	adds	r5, r5, r7
  402582:	f108 30ff 	add.w	r0, r8, #4294967295
  402586:	d202      	bcs.n	40258e <__udivmoddi4+0x132>
  402588:	42ab      	cmp	r3, r5
  40258a:	f200 80d1 	bhi.w	402730 <__udivmoddi4+0x2d4>
  40258e:	4680      	mov	r8, r0
  402590:	1aed      	subs	r5, r5, r3
  402592:	b2a3      	uxth	r3, r4
  402594:	fbb5 f0f2 	udiv	r0, r5, r2
  402598:	fb02 5510 	mls	r5, r2, r0, r5
  40259c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4025a0:	fb0c fc00 	mul.w	ip, ip, r0
  4025a4:	45a4      	cmp	ip, r4
  4025a6:	d907      	bls.n	4025b8 <__udivmoddi4+0x15c>
  4025a8:	19e4      	adds	r4, r4, r7
  4025aa:	f100 33ff 	add.w	r3, r0, #4294967295
  4025ae:	d202      	bcs.n	4025b6 <__udivmoddi4+0x15a>
  4025b0:	45a4      	cmp	ip, r4
  4025b2:	f200 80b8 	bhi.w	402726 <__udivmoddi4+0x2ca>
  4025b6:	4618      	mov	r0, r3
  4025b8:	eba4 040c 	sub.w	r4, r4, ip
  4025bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4025c0:	e79d      	b.n	4024fe <__udivmoddi4+0xa2>
  4025c2:	4631      	mov	r1, r6
  4025c4:	4630      	mov	r0, r6
  4025c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025ca:	f1ce 0420 	rsb	r4, lr, #32
  4025ce:	fa05 f30e 	lsl.w	r3, r5, lr
  4025d2:	fa07 f70e 	lsl.w	r7, r7, lr
  4025d6:	fa20 f804 	lsr.w	r8, r0, r4
  4025da:	0c3a      	lsrs	r2, r7, #16
  4025dc:	fa25 f404 	lsr.w	r4, r5, r4
  4025e0:	ea48 0803 	orr.w	r8, r8, r3
  4025e4:	fbb4 f1f2 	udiv	r1, r4, r2
  4025e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4025ec:	fb02 4411 	mls	r4, r2, r1, r4
  4025f0:	fa1f fc87 	uxth.w	ip, r7
  4025f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4025f8:	fb01 f30c 	mul.w	r3, r1, ip
  4025fc:	42ab      	cmp	r3, r5
  4025fe:	fa00 f40e 	lsl.w	r4, r0, lr
  402602:	d909      	bls.n	402618 <__udivmoddi4+0x1bc>
  402604:	19ed      	adds	r5, r5, r7
  402606:	f101 30ff 	add.w	r0, r1, #4294967295
  40260a:	f080 808a 	bcs.w	402722 <__udivmoddi4+0x2c6>
  40260e:	42ab      	cmp	r3, r5
  402610:	f240 8087 	bls.w	402722 <__udivmoddi4+0x2c6>
  402614:	3902      	subs	r1, #2
  402616:	443d      	add	r5, r7
  402618:	1aeb      	subs	r3, r5, r3
  40261a:	fa1f f588 	uxth.w	r5, r8
  40261e:	fbb3 f0f2 	udiv	r0, r3, r2
  402622:	fb02 3310 	mls	r3, r2, r0, r3
  402626:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40262a:	fb00 f30c 	mul.w	r3, r0, ip
  40262e:	42ab      	cmp	r3, r5
  402630:	d907      	bls.n	402642 <__udivmoddi4+0x1e6>
  402632:	19ed      	adds	r5, r5, r7
  402634:	f100 38ff 	add.w	r8, r0, #4294967295
  402638:	d26f      	bcs.n	40271a <__udivmoddi4+0x2be>
  40263a:	42ab      	cmp	r3, r5
  40263c:	d96d      	bls.n	40271a <__udivmoddi4+0x2be>
  40263e:	3802      	subs	r0, #2
  402640:	443d      	add	r5, r7
  402642:	1aeb      	subs	r3, r5, r3
  402644:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402648:	e78f      	b.n	40256a <__udivmoddi4+0x10e>
  40264a:	f1c1 0720 	rsb	r7, r1, #32
  40264e:	fa22 f807 	lsr.w	r8, r2, r7
  402652:	408b      	lsls	r3, r1
  402654:	fa05 f401 	lsl.w	r4, r5, r1
  402658:	ea48 0303 	orr.w	r3, r8, r3
  40265c:	fa20 fe07 	lsr.w	lr, r0, r7
  402660:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402664:	40fd      	lsrs	r5, r7
  402666:	ea4e 0e04 	orr.w	lr, lr, r4
  40266a:	fbb5 f9fc 	udiv	r9, r5, ip
  40266e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402672:	fb0c 5519 	mls	r5, ip, r9, r5
  402676:	fa1f f883 	uxth.w	r8, r3
  40267a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40267e:	fb09 f408 	mul.w	r4, r9, r8
  402682:	42ac      	cmp	r4, r5
  402684:	fa02 f201 	lsl.w	r2, r2, r1
  402688:	fa00 fa01 	lsl.w	sl, r0, r1
  40268c:	d908      	bls.n	4026a0 <__udivmoddi4+0x244>
  40268e:	18ed      	adds	r5, r5, r3
  402690:	f109 30ff 	add.w	r0, r9, #4294967295
  402694:	d243      	bcs.n	40271e <__udivmoddi4+0x2c2>
  402696:	42ac      	cmp	r4, r5
  402698:	d941      	bls.n	40271e <__udivmoddi4+0x2c2>
  40269a:	f1a9 0902 	sub.w	r9, r9, #2
  40269e:	441d      	add	r5, r3
  4026a0:	1b2d      	subs	r5, r5, r4
  4026a2:	fa1f fe8e 	uxth.w	lr, lr
  4026a6:	fbb5 f0fc 	udiv	r0, r5, ip
  4026aa:	fb0c 5510 	mls	r5, ip, r0, r5
  4026ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4026b2:	fb00 f808 	mul.w	r8, r0, r8
  4026b6:	45a0      	cmp	r8, r4
  4026b8:	d907      	bls.n	4026ca <__udivmoddi4+0x26e>
  4026ba:	18e4      	adds	r4, r4, r3
  4026bc:	f100 35ff 	add.w	r5, r0, #4294967295
  4026c0:	d229      	bcs.n	402716 <__udivmoddi4+0x2ba>
  4026c2:	45a0      	cmp	r8, r4
  4026c4:	d927      	bls.n	402716 <__udivmoddi4+0x2ba>
  4026c6:	3802      	subs	r0, #2
  4026c8:	441c      	add	r4, r3
  4026ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4026ce:	eba4 0408 	sub.w	r4, r4, r8
  4026d2:	fba0 8902 	umull	r8, r9, r0, r2
  4026d6:	454c      	cmp	r4, r9
  4026d8:	46c6      	mov	lr, r8
  4026da:	464d      	mov	r5, r9
  4026dc:	d315      	bcc.n	40270a <__udivmoddi4+0x2ae>
  4026de:	d012      	beq.n	402706 <__udivmoddi4+0x2aa>
  4026e0:	b156      	cbz	r6, 4026f8 <__udivmoddi4+0x29c>
  4026e2:	ebba 030e 	subs.w	r3, sl, lr
  4026e6:	eb64 0405 	sbc.w	r4, r4, r5
  4026ea:	fa04 f707 	lsl.w	r7, r4, r7
  4026ee:	40cb      	lsrs	r3, r1
  4026f0:	431f      	orrs	r7, r3
  4026f2:	40cc      	lsrs	r4, r1
  4026f4:	6037      	str	r7, [r6, #0]
  4026f6:	6074      	str	r4, [r6, #4]
  4026f8:	2100      	movs	r1, #0
  4026fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026fe:	4618      	mov	r0, r3
  402700:	e6f8      	b.n	4024f4 <__udivmoddi4+0x98>
  402702:	4690      	mov	r8, r2
  402704:	e6e0      	b.n	4024c8 <__udivmoddi4+0x6c>
  402706:	45c2      	cmp	sl, r8
  402708:	d2ea      	bcs.n	4026e0 <__udivmoddi4+0x284>
  40270a:	ebb8 0e02 	subs.w	lr, r8, r2
  40270e:	eb69 0503 	sbc.w	r5, r9, r3
  402712:	3801      	subs	r0, #1
  402714:	e7e4      	b.n	4026e0 <__udivmoddi4+0x284>
  402716:	4628      	mov	r0, r5
  402718:	e7d7      	b.n	4026ca <__udivmoddi4+0x26e>
  40271a:	4640      	mov	r0, r8
  40271c:	e791      	b.n	402642 <__udivmoddi4+0x1e6>
  40271e:	4681      	mov	r9, r0
  402720:	e7be      	b.n	4026a0 <__udivmoddi4+0x244>
  402722:	4601      	mov	r1, r0
  402724:	e778      	b.n	402618 <__udivmoddi4+0x1bc>
  402726:	3802      	subs	r0, #2
  402728:	443c      	add	r4, r7
  40272a:	e745      	b.n	4025b8 <__udivmoddi4+0x15c>
  40272c:	4608      	mov	r0, r1
  40272e:	e708      	b.n	402542 <__udivmoddi4+0xe6>
  402730:	f1a8 0802 	sub.w	r8, r8, #2
  402734:	443d      	add	r5, r7
  402736:	e72b      	b.n	402590 <__udivmoddi4+0x134>

00402738 <__aeabi_idiv0>:
  402738:	4770      	bx	lr
  40273a:	bf00      	nop

0040273c <__libc_init_array>:
  40273c:	b570      	push	{r4, r5, r6, lr}
  40273e:	4e0f      	ldr	r6, [pc, #60]	; (40277c <__libc_init_array+0x40>)
  402740:	4d0f      	ldr	r5, [pc, #60]	; (402780 <__libc_init_array+0x44>)
  402742:	1b76      	subs	r6, r6, r5
  402744:	10b6      	asrs	r6, r6, #2
  402746:	bf18      	it	ne
  402748:	2400      	movne	r4, #0
  40274a:	d005      	beq.n	402758 <__libc_init_array+0x1c>
  40274c:	3401      	adds	r4, #1
  40274e:	f855 3b04 	ldr.w	r3, [r5], #4
  402752:	4798      	blx	r3
  402754:	42a6      	cmp	r6, r4
  402756:	d1f9      	bne.n	40274c <__libc_init_array+0x10>
  402758:	4e0a      	ldr	r6, [pc, #40]	; (402784 <__libc_init_array+0x48>)
  40275a:	4d0b      	ldr	r5, [pc, #44]	; (402788 <__libc_init_array+0x4c>)
  40275c:	1b76      	subs	r6, r6, r5
  40275e:	f002 ff09 	bl	405574 <_init>
  402762:	10b6      	asrs	r6, r6, #2
  402764:	bf18      	it	ne
  402766:	2400      	movne	r4, #0
  402768:	d006      	beq.n	402778 <__libc_init_array+0x3c>
  40276a:	3401      	adds	r4, #1
  40276c:	f855 3b04 	ldr.w	r3, [r5], #4
  402770:	4798      	blx	r3
  402772:	42a6      	cmp	r6, r4
  402774:	d1f9      	bne.n	40276a <__libc_init_array+0x2e>
  402776:	bd70      	pop	{r4, r5, r6, pc}
  402778:	bd70      	pop	{r4, r5, r6, pc}
  40277a:	bf00      	nop
  40277c:	00405580 	.word	0x00405580
  402780:	00405580 	.word	0x00405580
  402784:	00405588 	.word	0x00405588
  402788:	00405580 	.word	0x00405580

0040278c <iprintf>:
  40278c:	b40f      	push	{r0, r1, r2, r3}
  40278e:	b500      	push	{lr}
  402790:	4907      	ldr	r1, [pc, #28]	; (4027b0 <iprintf+0x24>)
  402792:	b083      	sub	sp, #12
  402794:	ab04      	add	r3, sp, #16
  402796:	6808      	ldr	r0, [r1, #0]
  402798:	f853 2b04 	ldr.w	r2, [r3], #4
  40279c:	6881      	ldr	r1, [r0, #8]
  40279e:	9301      	str	r3, [sp, #4]
  4027a0:	f000 f966 	bl	402a70 <_vfiprintf_r>
  4027a4:	b003      	add	sp, #12
  4027a6:	f85d eb04 	ldr.w	lr, [sp], #4
  4027aa:	b004      	add	sp, #16
  4027ac:	4770      	bx	lr
  4027ae:	bf00      	nop
  4027b0:	20400010 	.word	0x20400010

004027b4 <memset>:
  4027b4:	b470      	push	{r4, r5, r6}
  4027b6:	0786      	lsls	r6, r0, #30
  4027b8:	d046      	beq.n	402848 <memset+0x94>
  4027ba:	1e54      	subs	r4, r2, #1
  4027bc:	2a00      	cmp	r2, #0
  4027be:	d041      	beq.n	402844 <memset+0x90>
  4027c0:	b2ca      	uxtb	r2, r1
  4027c2:	4603      	mov	r3, r0
  4027c4:	e002      	b.n	4027cc <memset+0x18>
  4027c6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4027ca:	d33b      	bcc.n	402844 <memset+0x90>
  4027cc:	f803 2b01 	strb.w	r2, [r3], #1
  4027d0:	079d      	lsls	r5, r3, #30
  4027d2:	d1f8      	bne.n	4027c6 <memset+0x12>
  4027d4:	2c03      	cmp	r4, #3
  4027d6:	d92e      	bls.n	402836 <memset+0x82>
  4027d8:	b2cd      	uxtb	r5, r1
  4027da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4027de:	2c0f      	cmp	r4, #15
  4027e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4027e4:	d919      	bls.n	40281a <memset+0x66>
  4027e6:	f103 0210 	add.w	r2, r3, #16
  4027ea:	4626      	mov	r6, r4
  4027ec:	3e10      	subs	r6, #16
  4027ee:	2e0f      	cmp	r6, #15
  4027f0:	f842 5c10 	str.w	r5, [r2, #-16]
  4027f4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4027f8:	f842 5c08 	str.w	r5, [r2, #-8]
  4027fc:	f842 5c04 	str.w	r5, [r2, #-4]
  402800:	f102 0210 	add.w	r2, r2, #16
  402804:	d8f2      	bhi.n	4027ec <memset+0x38>
  402806:	f1a4 0210 	sub.w	r2, r4, #16
  40280a:	f022 020f 	bic.w	r2, r2, #15
  40280e:	f004 040f 	and.w	r4, r4, #15
  402812:	3210      	adds	r2, #16
  402814:	2c03      	cmp	r4, #3
  402816:	4413      	add	r3, r2
  402818:	d90d      	bls.n	402836 <memset+0x82>
  40281a:	461e      	mov	r6, r3
  40281c:	4622      	mov	r2, r4
  40281e:	3a04      	subs	r2, #4
  402820:	2a03      	cmp	r2, #3
  402822:	f846 5b04 	str.w	r5, [r6], #4
  402826:	d8fa      	bhi.n	40281e <memset+0x6a>
  402828:	1f22      	subs	r2, r4, #4
  40282a:	f022 0203 	bic.w	r2, r2, #3
  40282e:	3204      	adds	r2, #4
  402830:	4413      	add	r3, r2
  402832:	f004 0403 	and.w	r4, r4, #3
  402836:	b12c      	cbz	r4, 402844 <memset+0x90>
  402838:	b2c9      	uxtb	r1, r1
  40283a:	441c      	add	r4, r3
  40283c:	f803 1b01 	strb.w	r1, [r3], #1
  402840:	429c      	cmp	r4, r3
  402842:	d1fb      	bne.n	40283c <memset+0x88>
  402844:	bc70      	pop	{r4, r5, r6}
  402846:	4770      	bx	lr
  402848:	4614      	mov	r4, r2
  40284a:	4603      	mov	r3, r0
  40284c:	e7c2      	b.n	4027d4 <memset+0x20>
  40284e:	bf00      	nop

00402850 <setbuf>:
  402850:	2900      	cmp	r1, #0
  402852:	bf0c      	ite	eq
  402854:	2202      	moveq	r2, #2
  402856:	2200      	movne	r2, #0
  402858:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40285c:	f000 b800 	b.w	402860 <setvbuf>

00402860 <setvbuf>:
  402860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402864:	4c61      	ldr	r4, [pc, #388]	; (4029ec <setvbuf+0x18c>)
  402866:	6825      	ldr	r5, [r4, #0]
  402868:	b083      	sub	sp, #12
  40286a:	4604      	mov	r4, r0
  40286c:	460f      	mov	r7, r1
  40286e:	4690      	mov	r8, r2
  402870:	461e      	mov	r6, r3
  402872:	b115      	cbz	r5, 40287a <setvbuf+0x1a>
  402874:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402876:	2b00      	cmp	r3, #0
  402878:	d064      	beq.n	402944 <setvbuf+0xe4>
  40287a:	f1b8 0f02 	cmp.w	r8, #2
  40287e:	d006      	beq.n	40288e <setvbuf+0x2e>
  402880:	f1b8 0f01 	cmp.w	r8, #1
  402884:	f200 809f 	bhi.w	4029c6 <setvbuf+0x166>
  402888:	2e00      	cmp	r6, #0
  40288a:	f2c0 809c 	blt.w	4029c6 <setvbuf+0x166>
  40288e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402890:	07d8      	lsls	r0, r3, #31
  402892:	d534      	bpl.n	4028fe <setvbuf+0x9e>
  402894:	4621      	mov	r1, r4
  402896:	4628      	mov	r0, r5
  402898:	f001 f888 	bl	4039ac <_fflush_r>
  40289c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40289e:	b141      	cbz	r1, 4028b2 <setvbuf+0x52>
  4028a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4028a4:	4299      	cmp	r1, r3
  4028a6:	d002      	beq.n	4028ae <setvbuf+0x4e>
  4028a8:	4628      	mov	r0, r5
  4028aa:	f001 f9fd 	bl	403ca8 <_free_r>
  4028ae:	2300      	movs	r3, #0
  4028b0:	6323      	str	r3, [r4, #48]	; 0x30
  4028b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4028b6:	2200      	movs	r2, #0
  4028b8:	61a2      	str	r2, [r4, #24]
  4028ba:	6062      	str	r2, [r4, #4]
  4028bc:	061a      	lsls	r2, r3, #24
  4028be:	d43a      	bmi.n	402936 <setvbuf+0xd6>
  4028c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4028c4:	f023 0303 	bic.w	r3, r3, #3
  4028c8:	f1b8 0f02 	cmp.w	r8, #2
  4028cc:	81a3      	strh	r3, [r4, #12]
  4028ce:	d01d      	beq.n	40290c <setvbuf+0xac>
  4028d0:	ab01      	add	r3, sp, #4
  4028d2:	466a      	mov	r2, sp
  4028d4:	4621      	mov	r1, r4
  4028d6:	4628      	mov	r0, r5
  4028d8:	f001 fc84 	bl	4041e4 <__swhatbuf_r>
  4028dc:	89a3      	ldrh	r3, [r4, #12]
  4028de:	4318      	orrs	r0, r3
  4028e0:	81a0      	strh	r0, [r4, #12]
  4028e2:	2e00      	cmp	r6, #0
  4028e4:	d132      	bne.n	40294c <setvbuf+0xec>
  4028e6:	9e00      	ldr	r6, [sp, #0]
  4028e8:	4630      	mov	r0, r6
  4028ea:	f001 fcf3 	bl	4042d4 <malloc>
  4028ee:	4607      	mov	r7, r0
  4028f0:	2800      	cmp	r0, #0
  4028f2:	d06b      	beq.n	4029cc <setvbuf+0x16c>
  4028f4:	89a3      	ldrh	r3, [r4, #12]
  4028f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4028fa:	81a3      	strh	r3, [r4, #12]
  4028fc:	e028      	b.n	402950 <setvbuf+0xf0>
  4028fe:	89a3      	ldrh	r3, [r4, #12]
  402900:	0599      	lsls	r1, r3, #22
  402902:	d4c7      	bmi.n	402894 <setvbuf+0x34>
  402904:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402906:	f001 fc69 	bl	4041dc <__retarget_lock_acquire_recursive>
  40290a:	e7c3      	b.n	402894 <setvbuf+0x34>
  40290c:	2500      	movs	r5, #0
  40290e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402910:	2600      	movs	r6, #0
  402912:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402916:	f043 0302 	orr.w	r3, r3, #2
  40291a:	2001      	movs	r0, #1
  40291c:	60a6      	str	r6, [r4, #8]
  40291e:	07ce      	lsls	r6, r1, #31
  402920:	81a3      	strh	r3, [r4, #12]
  402922:	6022      	str	r2, [r4, #0]
  402924:	6122      	str	r2, [r4, #16]
  402926:	6160      	str	r0, [r4, #20]
  402928:	d401      	bmi.n	40292e <setvbuf+0xce>
  40292a:	0598      	lsls	r0, r3, #22
  40292c:	d53e      	bpl.n	4029ac <setvbuf+0x14c>
  40292e:	4628      	mov	r0, r5
  402930:	b003      	add	sp, #12
  402932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402936:	6921      	ldr	r1, [r4, #16]
  402938:	4628      	mov	r0, r5
  40293a:	f001 f9b5 	bl	403ca8 <_free_r>
  40293e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402942:	e7bd      	b.n	4028c0 <setvbuf+0x60>
  402944:	4628      	mov	r0, r5
  402946:	f001 f889 	bl	403a5c <__sinit>
  40294a:	e796      	b.n	40287a <setvbuf+0x1a>
  40294c:	2f00      	cmp	r7, #0
  40294e:	d0cb      	beq.n	4028e8 <setvbuf+0x88>
  402950:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402952:	2b00      	cmp	r3, #0
  402954:	d033      	beq.n	4029be <setvbuf+0x15e>
  402956:	9b00      	ldr	r3, [sp, #0]
  402958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40295c:	6027      	str	r7, [r4, #0]
  40295e:	429e      	cmp	r6, r3
  402960:	bf1c      	itt	ne
  402962:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402966:	81a2      	strhne	r2, [r4, #12]
  402968:	f1b8 0f01 	cmp.w	r8, #1
  40296c:	bf04      	itt	eq
  40296e:	f042 0201 	orreq.w	r2, r2, #1
  402972:	81a2      	strheq	r2, [r4, #12]
  402974:	b292      	uxth	r2, r2
  402976:	f012 0308 	ands.w	r3, r2, #8
  40297a:	6127      	str	r7, [r4, #16]
  40297c:	6166      	str	r6, [r4, #20]
  40297e:	d00e      	beq.n	40299e <setvbuf+0x13e>
  402980:	07d1      	lsls	r1, r2, #31
  402982:	d51a      	bpl.n	4029ba <setvbuf+0x15a>
  402984:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402986:	4276      	negs	r6, r6
  402988:	2300      	movs	r3, #0
  40298a:	f015 0501 	ands.w	r5, r5, #1
  40298e:	61a6      	str	r6, [r4, #24]
  402990:	60a3      	str	r3, [r4, #8]
  402992:	d009      	beq.n	4029a8 <setvbuf+0x148>
  402994:	2500      	movs	r5, #0
  402996:	4628      	mov	r0, r5
  402998:	b003      	add	sp, #12
  40299a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40299e:	60a3      	str	r3, [r4, #8]
  4029a0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4029a2:	f015 0501 	ands.w	r5, r5, #1
  4029a6:	d1f5      	bne.n	402994 <setvbuf+0x134>
  4029a8:	0593      	lsls	r3, r2, #22
  4029aa:	d4c0      	bmi.n	40292e <setvbuf+0xce>
  4029ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4029ae:	f001 fc17 	bl	4041e0 <__retarget_lock_release_recursive>
  4029b2:	4628      	mov	r0, r5
  4029b4:	b003      	add	sp, #12
  4029b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4029ba:	60a6      	str	r6, [r4, #8]
  4029bc:	e7f0      	b.n	4029a0 <setvbuf+0x140>
  4029be:	4628      	mov	r0, r5
  4029c0:	f001 f84c 	bl	403a5c <__sinit>
  4029c4:	e7c7      	b.n	402956 <setvbuf+0xf6>
  4029c6:	f04f 35ff 	mov.w	r5, #4294967295
  4029ca:	e7b0      	b.n	40292e <setvbuf+0xce>
  4029cc:	f8dd 9000 	ldr.w	r9, [sp]
  4029d0:	45b1      	cmp	r9, r6
  4029d2:	d004      	beq.n	4029de <setvbuf+0x17e>
  4029d4:	4648      	mov	r0, r9
  4029d6:	f001 fc7d 	bl	4042d4 <malloc>
  4029da:	4607      	mov	r7, r0
  4029dc:	b920      	cbnz	r0, 4029e8 <setvbuf+0x188>
  4029de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029e2:	f04f 35ff 	mov.w	r5, #4294967295
  4029e6:	e792      	b.n	40290e <setvbuf+0xae>
  4029e8:	464e      	mov	r6, r9
  4029ea:	e783      	b.n	4028f4 <setvbuf+0x94>
  4029ec:	20400010 	.word	0x20400010

004029f0 <__sprint_r.part.0>:
  4029f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4029f6:	049c      	lsls	r4, r3, #18
  4029f8:	4693      	mov	fp, r2
  4029fa:	d52f      	bpl.n	402a5c <__sprint_r.part.0+0x6c>
  4029fc:	6893      	ldr	r3, [r2, #8]
  4029fe:	6812      	ldr	r2, [r2, #0]
  402a00:	b353      	cbz	r3, 402a58 <__sprint_r.part.0+0x68>
  402a02:	460e      	mov	r6, r1
  402a04:	4607      	mov	r7, r0
  402a06:	f102 0908 	add.w	r9, r2, #8
  402a0a:	e919 0420 	ldmdb	r9, {r5, sl}
  402a0e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402a12:	d017      	beq.n	402a44 <__sprint_r.part.0+0x54>
  402a14:	3d04      	subs	r5, #4
  402a16:	2400      	movs	r4, #0
  402a18:	e001      	b.n	402a1e <__sprint_r.part.0+0x2e>
  402a1a:	45a0      	cmp	r8, r4
  402a1c:	d010      	beq.n	402a40 <__sprint_r.part.0+0x50>
  402a1e:	4632      	mov	r2, r6
  402a20:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402a24:	4638      	mov	r0, r7
  402a26:	f001 f8bb 	bl	403ba0 <_fputwc_r>
  402a2a:	1c43      	adds	r3, r0, #1
  402a2c:	f104 0401 	add.w	r4, r4, #1
  402a30:	d1f3      	bne.n	402a1a <__sprint_r.part.0+0x2a>
  402a32:	2300      	movs	r3, #0
  402a34:	f8cb 3008 	str.w	r3, [fp, #8]
  402a38:	f8cb 3004 	str.w	r3, [fp, #4]
  402a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a40:	f8db 3008 	ldr.w	r3, [fp, #8]
  402a44:	f02a 0a03 	bic.w	sl, sl, #3
  402a48:	eba3 030a 	sub.w	r3, r3, sl
  402a4c:	f8cb 3008 	str.w	r3, [fp, #8]
  402a50:	f109 0908 	add.w	r9, r9, #8
  402a54:	2b00      	cmp	r3, #0
  402a56:	d1d8      	bne.n	402a0a <__sprint_r.part.0+0x1a>
  402a58:	2000      	movs	r0, #0
  402a5a:	e7ea      	b.n	402a32 <__sprint_r.part.0+0x42>
  402a5c:	f001 fa0a 	bl	403e74 <__sfvwrite_r>
  402a60:	2300      	movs	r3, #0
  402a62:	f8cb 3008 	str.w	r3, [fp, #8]
  402a66:	f8cb 3004 	str.w	r3, [fp, #4]
  402a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a6e:	bf00      	nop

00402a70 <_vfiprintf_r>:
  402a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a74:	b0ad      	sub	sp, #180	; 0xb4
  402a76:	461d      	mov	r5, r3
  402a78:	468b      	mov	fp, r1
  402a7a:	4690      	mov	r8, r2
  402a7c:	9307      	str	r3, [sp, #28]
  402a7e:	9006      	str	r0, [sp, #24]
  402a80:	b118      	cbz	r0, 402a8a <_vfiprintf_r+0x1a>
  402a82:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402a84:	2b00      	cmp	r3, #0
  402a86:	f000 80f3 	beq.w	402c70 <_vfiprintf_r+0x200>
  402a8a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402a8e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402a92:	07df      	lsls	r7, r3, #31
  402a94:	b281      	uxth	r1, r0
  402a96:	d402      	bmi.n	402a9e <_vfiprintf_r+0x2e>
  402a98:	058e      	lsls	r6, r1, #22
  402a9a:	f140 80fc 	bpl.w	402c96 <_vfiprintf_r+0x226>
  402a9e:	048c      	lsls	r4, r1, #18
  402aa0:	d40a      	bmi.n	402ab8 <_vfiprintf_r+0x48>
  402aa2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402aa6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402aae:	f8ab 100c 	strh.w	r1, [fp, #12]
  402ab2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402ab6:	b289      	uxth	r1, r1
  402ab8:	0708      	lsls	r0, r1, #28
  402aba:	f140 80b3 	bpl.w	402c24 <_vfiprintf_r+0x1b4>
  402abe:	f8db 3010 	ldr.w	r3, [fp, #16]
  402ac2:	2b00      	cmp	r3, #0
  402ac4:	f000 80ae 	beq.w	402c24 <_vfiprintf_r+0x1b4>
  402ac8:	f001 031a 	and.w	r3, r1, #26
  402acc:	2b0a      	cmp	r3, #10
  402ace:	f000 80b5 	beq.w	402c3c <_vfiprintf_r+0x1cc>
  402ad2:	2300      	movs	r3, #0
  402ad4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402ad8:	930b      	str	r3, [sp, #44]	; 0x2c
  402ada:	9311      	str	r3, [sp, #68]	; 0x44
  402adc:	9310      	str	r3, [sp, #64]	; 0x40
  402ade:	9303      	str	r3, [sp, #12]
  402ae0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402ae4:	46ca      	mov	sl, r9
  402ae6:	f8cd b010 	str.w	fp, [sp, #16]
  402aea:	f898 3000 	ldrb.w	r3, [r8]
  402aee:	4644      	mov	r4, r8
  402af0:	b1fb      	cbz	r3, 402b32 <_vfiprintf_r+0xc2>
  402af2:	2b25      	cmp	r3, #37	; 0x25
  402af4:	d102      	bne.n	402afc <_vfiprintf_r+0x8c>
  402af6:	e01c      	b.n	402b32 <_vfiprintf_r+0xc2>
  402af8:	2b25      	cmp	r3, #37	; 0x25
  402afa:	d003      	beq.n	402b04 <_vfiprintf_r+0x94>
  402afc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402b00:	2b00      	cmp	r3, #0
  402b02:	d1f9      	bne.n	402af8 <_vfiprintf_r+0x88>
  402b04:	eba4 0508 	sub.w	r5, r4, r8
  402b08:	b19d      	cbz	r5, 402b32 <_vfiprintf_r+0xc2>
  402b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402b0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b0e:	f8ca 8000 	str.w	r8, [sl]
  402b12:	3301      	adds	r3, #1
  402b14:	442a      	add	r2, r5
  402b16:	2b07      	cmp	r3, #7
  402b18:	f8ca 5004 	str.w	r5, [sl, #4]
  402b1c:	9211      	str	r2, [sp, #68]	; 0x44
  402b1e:	9310      	str	r3, [sp, #64]	; 0x40
  402b20:	dd7a      	ble.n	402c18 <_vfiprintf_r+0x1a8>
  402b22:	2a00      	cmp	r2, #0
  402b24:	f040 84b0 	bne.w	403488 <_vfiprintf_r+0xa18>
  402b28:	9b03      	ldr	r3, [sp, #12]
  402b2a:	9210      	str	r2, [sp, #64]	; 0x40
  402b2c:	442b      	add	r3, r5
  402b2e:	46ca      	mov	sl, r9
  402b30:	9303      	str	r3, [sp, #12]
  402b32:	7823      	ldrb	r3, [r4, #0]
  402b34:	2b00      	cmp	r3, #0
  402b36:	f000 83e0 	beq.w	4032fa <_vfiprintf_r+0x88a>
  402b3a:	2000      	movs	r0, #0
  402b3c:	f04f 0300 	mov.w	r3, #0
  402b40:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402b44:	f104 0801 	add.w	r8, r4, #1
  402b48:	7862      	ldrb	r2, [r4, #1]
  402b4a:	4605      	mov	r5, r0
  402b4c:	4606      	mov	r6, r0
  402b4e:	4603      	mov	r3, r0
  402b50:	f04f 34ff 	mov.w	r4, #4294967295
  402b54:	f108 0801 	add.w	r8, r8, #1
  402b58:	f1a2 0120 	sub.w	r1, r2, #32
  402b5c:	2958      	cmp	r1, #88	; 0x58
  402b5e:	f200 82de 	bhi.w	40311e <_vfiprintf_r+0x6ae>
  402b62:	e8df f011 	tbh	[pc, r1, lsl #1]
  402b66:	0221      	.short	0x0221
  402b68:	02dc02dc 	.word	0x02dc02dc
  402b6c:	02dc0229 	.word	0x02dc0229
  402b70:	02dc02dc 	.word	0x02dc02dc
  402b74:	02dc02dc 	.word	0x02dc02dc
  402b78:	028902dc 	.word	0x028902dc
  402b7c:	02dc0295 	.word	0x02dc0295
  402b80:	02bd00a2 	.word	0x02bd00a2
  402b84:	019f02dc 	.word	0x019f02dc
  402b88:	01a401a4 	.word	0x01a401a4
  402b8c:	01a401a4 	.word	0x01a401a4
  402b90:	01a401a4 	.word	0x01a401a4
  402b94:	01a401a4 	.word	0x01a401a4
  402b98:	02dc01a4 	.word	0x02dc01a4
  402b9c:	02dc02dc 	.word	0x02dc02dc
  402ba0:	02dc02dc 	.word	0x02dc02dc
  402ba4:	02dc02dc 	.word	0x02dc02dc
  402ba8:	02dc02dc 	.word	0x02dc02dc
  402bac:	01b202dc 	.word	0x01b202dc
  402bb0:	02dc02dc 	.word	0x02dc02dc
  402bb4:	02dc02dc 	.word	0x02dc02dc
  402bb8:	02dc02dc 	.word	0x02dc02dc
  402bbc:	02dc02dc 	.word	0x02dc02dc
  402bc0:	02dc02dc 	.word	0x02dc02dc
  402bc4:	02dc0197 	.word	0x02dc0197
  402bc8:	02dc02dc 	.word	0x02dc02dc
  402bcc:	02dc02dc 	.word	0x02dc02dc
  402bd0:	02dc019b 	.word	0x02dc019b
  402bd4:	025302dc 	.word	0x025302dc
  402bd8:	02dc02dc 	.word	0x02dc02dc
  402bdc:	02dc02dc 	.word	0x02dc02dc
  402be0:	02dc02dc 	.word	0x02dc02dc
  402be4:	02dc02dc 	.word	0x02dc02dc
  402be8:	02dc02dc 	.word	0x02dc02dc
  402bec:	021b025a 	.word	0x021b025a
  402bf0:	02dc02dc 	.word	0x02dc02dc
  402bf4:	026e02dc 	.word	0x026e02dc
  402bf8:	02dc021b 	.word	0x02dc021b
  402bfc:	027302dc 	.word	0x027302dc
  402c00:	01f502dc 	.word	0x01f502dc
  402c04:	02090182 	.word	0x02090182
  402c08:	02dc02d7 	.word	0x02dc02d7
  402c0c:	02dc029a 	.word	0x02dc029a
  402c10:	02dc00a7 	.word	0x02dc00a7
  402c14:	022e02dc 	.word	0x022e02dc
  402c18:	f10a 0a08 	add.w	sl, sl, #8
  402c1c:	9b03      	ldr	r3, [sp, #12]
  402c1e:	442b      	add	r3, r5
  402c20:	9303      	str	r3, [sp, #12]
  402c22:	e786      	b.n	402b32 <_vfiprintf_r+0xc2>
  402c24:	4659      	mov	r1, fp
  402c26:	9806      	ldr	r0, [sp, #24]
  402c28:	f000 fdac 	bl	403784 <__swsetup_r>
  402c2c:	bb18      	cbnz	r0, 402c76 <_vfiprintf_r+0x206>
  402c2e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402c32:	f001 031a 	and.w	r3, r1, #26
  402c36:	2b0a      	cmp	r3, #10
  402c38:	f47f af4b 	bne.w	402ad2 <_vfiprintf_r+0x62>
  402c3c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402c40:	2b00      	cmp	r3, #0
  402c42:	f6ff af46 	blt.w	402ad2 <_vfiprintf_r+0x62>
  402c46:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402c4a:	07db      	lsls	r3, r3, #31
  402c4c:	d405      	bmi.n	402c5a <_vfiprintf_r+0x1ea>
  402c4e:	058f      	lsls	r7, r1, #22
  402c50:	d403      	bmi.n	402c5a <_vfiprintf_r+0x1ea>
  402c52:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402c56:	f001 fac3 	bl	4041e0 <__retarget_lock_release_recursive>
  402c5a:	462b      	mov	r3, r5
  402c5c:	4642      	mov	r2, r8
  402c5e:	4659      	mov	r1, fp
  402c60:	9806      	ldr	r0, [sp, #24]
  402c62:	f000 fd4d 	bl	403700 <__sbprintf>
  402c66:	9003      	str	r0, [sp, #12]
  402c68:	9803      	ldr	r0, [sp, #12]
  402c6a:	b02d      	add	sp, #180	; 0xb4
  402c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c70:	f000 fef4 	bl	403a5c <__sinit>
  402c74:	e709      	b.n	402a8a <_vfiprintf_r+0x1a>
  402c76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402c7a:	07d9      	lsls	r1, r3, #31
  402c7c:	d404      	bmi.n	402c88 <_vfiprintf_r+0x218>
  402c7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402c82:	059a      	lsls	r2, r3, #22
  402c84:	f140 84aa 	bpl.w	4035dc <_vfiprintf_r+0xb6c>
  402c88:	f04f 33ff 	mov.w	r3, #4294967295
  402c8c:	9303      	str	r3, [sp, #12]
  402c8e:	9803      	ldr	r0, [sp, #12]
  402c90:	b02d      	add	sp, #180	; 0xb4
  402c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c96:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402c9a:	f001 fa9f 	bl	4041dc <__retarget_lock_acquire_recursive>
  402c9e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402ca2:	b281      	uxth	r1, r0
  402ca4:	e6fb      	b.n	402a9e <_vfiprintf_r+0x2e>
  402ca6:	4276      	negs	r6, r6
  402ca8:	9207      	str	r2, [sp, #28]
  402caa:	f043 0304 	orr.w	r3, r3, #4
  402cae:	f898 2000 	ldrb.w	r2, [r8]
  402cb2:	e74f      	b.n	402b54 <_vfiprintf_r+0xe4>
  402cb4:	9608      	str	r6, [sp, #32]
  402cb6:	069e      	lsls	r6, r3, #26
  402cb8:	f100 8450 	bmi.w	40355c <_vfiprintf_r+0xaec>
  402cbc:	9907      	ldr	r1, [sp, #28]
  402cbe:	06dd      	lsls	r5, r3, #27
  402cc0:	460a      	mov	r2, r1
  402cc2:	f100 83ef 	bmi.w	4034a4 <_vfiprintf_r+0xa34>
  402cc6:	0658      	lsls	r0, r3, #25
  402cc8:	f140 83ec 	bpl.w	4034a4 <_vfiprintf_r+0xa34>
  402ccc:	880e      	ldrh	r6, [r1, #0]
  402cce:	3104      	adds	r1, #4
  402cd0:	2700      	movs	r7, #0
  402cd2:	2201      	movs	r2, #1
  402cd4:	9107      	str	r1, [sp, #28]
  402cd6:	f04f 0100 	mov.w	r1, #0
  402cda:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402cde:	2500      	movs	r5, #0
  402ce0:	1c61      	adds	r1, r4, #1
  402ce2:	f000 8116 	beq.w	402f12 <_vfiprintf_r+0x4a2>
  402ce6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402cea:	9102      	str	r1, [sp, #8]
  402cec:	ea56 0107 	orrs.w	r1, r6, r7
  402cf0:	f040 8114 	bne.w	402f1c <_vfiprintf_r+0x4ac>
  402cf4:	2c00      	cmp	r4, #0
  402cf6:	f040 835c 	bne.w	4033b2 <_vfiprintf_r+0x942>
  402cfa:	2a00      	cmp	r2, #0
  402cfc:	f040 83b7 	bne.w	40346e <_vfiprintf_r+0x9fe>
  402d00:	f013 0301 	ands.w	r3, r3, #1
  402d04:	9305      	str	r3, [sp, #20]
  402d06:	f000 8457 	beq.w	4035b8 <_vfiprintf_r+0xb48>
  402d0a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402d0e:	2330      	movs	r3, #48	; 0x30
  402d10:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402d14:	9b05      	ldr	r3, [sp, #20]
  402d16:	42a3      	cmp	r3, r4
  402d18:	bfb8      	it	lt
  402d1a:	4623      	movlt	r3, r4
  402d1c:	9301      	str	r3, [sp, #4]
  402d1e:	b10d      	cbz	r5, 402d24 <_vfiprintf_r+0x2b4>
  402d20:	3301      	adds	r3, #1
  402d22:	9301      	str	r3, [sp, #4]
  402d24:	9b02      	ldr	r3, [sp, #8]
  402d26:	f013 0302 	ands.w	r3, r3, #2
  402d2a:	9309      	str	r3, [sp, #36]	; 0x24
  402d2c:	d002      	beq.n	402d34 <_vfiprintf_r+0x2c4>
  402d2e:	9b01      	ldr	r3, [sp, #4]
  402d30:	3302      	adds	r3, #2
  402d32:	9301      	str	r3, [sp, #4]
  402d34:	9b02      	ldr	r3, [sp, #8]
  402d36:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402d3a:	930a      	str	r3, [sp, #40]	; 0x28
  402d3c:	f040 8217 	bne.w	40316e <_vfiprintf_r+0x6fe>
  402d40:	9b08      	ldr	r3, [sp, #32]
  402d42:	9a01      	ldr	r2, [sp, #4]
  402d44:	1a9d      	subs	r5, r3, r2
  402d46:	2d00      	cmp	r5, #0
  402d48:	f340 8211 	ble.w	40316e <_vfiprintf_r+0x6fe>
  402d4c:	2d10      	cmp	r5, #16
  402d4e:	f340 8490 	ble.w	403672 <_vfiprintf_r+0xc02>
  402d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d56:	4ec4      	ldr	r6, [pc, #784]	; (403068 <_vfiprintf_r+0x5f8>)
  402d58:	46d6      	mov	lr, sl
  402d5a:	2710      	movs	r7, #16
  402d5c:	46a2      	mov	sl, r4
  402d5e:	4619      	mov	r1, r3
  402d60:	9c06      	ldr	r4, [sp, #24]
  402d62:	e007      	b.n	402d74 <_vfiprintf_r+0x304>
  402d64:	f101 0c02 	add.w	ip, r1, #2
  402d68:	f10e 0e08 	add.w	lr, lr, #8
  402d6c:	4601      	mov	r1, r0
  402d6e:	3d10      	subs	r5, #16
  402d70:	2d10      	cmp	r5, #16
  402d72:	dd11      	ble.n	402d98 <_vfiprintf_r+0x328>
  402d74:	1c48      	adds	r0, r1, #1
  402d76:	3210      	adds	r2, #16
  402d78:	2807      	cmp	r0, #7
  402d7a:	9211      	str	r2, [sp, #68]	; 0x44
  402d7c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402d80:	9010      	str	r0, [sp, #64]	; 0x40
  402d82:	ddef      	ble.n	402d64 <_vfiprintf_r+0x2f4>
  402d84:	2a00      	cmp	r2, #0
  402d86:	f040 81e4 	bne.w	403152 <_vfiprintf_r+0x6e2>
  402d8a:	3d10      	subs	r5, #16
  402d8c:	2d10      	cmp	r5, #16
  402d8e:	4611      	mov	r1, r2
  402d90:	f04f 0c01 	mov.w	ip, #1
  402d94:	46ce      	mov	lr, r9
  402d96:	dced      	bgt.n	402d74 <_vfiprintf_r+0x304>
  402d98:	4654      	mov	r4, sl
  402d9a:	4661      	mov	r1, ip
  402d9c:	46f2      	mov	sl, lr
  402d9e:	442a      	add	r2, r5
  402da0:	2907      	cmp	r1, #7
  402da2:	9211      	str	r2, [sp, #68]	; 0x44
  402da4:	f8ca 6000 	str.w	r6, [sl]
  402da8:	f8ca 5004 	str.w	r5, [sl, #4]
  402dac:	9110      	str	r1, [sp, #64]	; 0x40
  402dae:	f300 82ec 	bgt.w	40338a <_vfiprintf_r+0x91a>
  402db2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402db6:	f10a 0a08 	add.w	sl, sl, #8
  402dba:	1c48      	adds	r0, r1, #1
  402dbc:	2d00      	cmp	r5, #0
  402dbe:	f040 81de 	bne.w	40317e <_vfiprintf_r+0x70e>
  402dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402dc4:	2b00      	cmp	r3, #0
  402dc6:	f000 81f8 	beq.w	4031ba <_vfiprintf_r+0x74a>
  402dca:	3202      	adds	r2, #2
  402dcc:	a90e      	add	r1, sp, #56	; 0x38
  402dce:	2302      	movs	r3, #2
  402dd0:	2807      	cmp	r0, #7
  402dd2:	9211      	str	r2, [sp, #68]	; 0x44
  402dd4:	9010      	str	r0, [sp, #64]	; 0x40
  402dd6:	e88a 000a 	stmia.w	sl, {r1, r3}
  402dda:	f340 81ea 	ble.w	4031b2 <_vfiprintf_r+0x742>
  402dde:	2a00      	cmp	r2, #0
  402de0:	f040 838c 	bne.w	4034fc <_vfiprintf_r+0xa8c>
  402de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402de6:	2b80      	cmp	r3, #128	; 0x80
  402de8:	f04f 0001 	mov.w	r0, #1
  402dec:	4611      	mov	r1, r2
  402dee:	46ca      	mov	sl, r9
  402df0:	f040 81e7 	bne.w	4031c2 <_vfiprintf_r+0x752>
  402df4:	9b08      	ldr	r3, [sp, #32]
  402df6:	9d01      	ldr	r5, [sp, #4]
  402df8:	1b5e      	subs	r6, r3, r5
  402dfa:	2e00      	cmp	r6, #0
  402dfc:	f340 81e1 	ble.w	4031c2 <_vfiprintf_r+0x752>
  402e00:	2e10      	cmp	r6, #16
  402e02:	4d9a      	ldr	r5, [pc, #616]	; (40306c <_vfiprintf_r+0x5fc>)
  402e04:	f340 8450 	ble.w	4036a8 <_vfiprintf_r+0xc38>
  402e08:	46d4      	mov	ip, sl
  402e0a:	2710      	movs	r7, #16
  402e0c:	46a2      	mov	sl, r4
  402e0e:	9c06      	ldr	r4, [sp, #24]
  402e10:	e007      	b.n	402e22 <_vfiprintf_r+0x3b2>
  402e12:	f101 0e02 	add.w	lr, r1, #2
  402e16:	f10c 0c08 	add.w	ip, ip, #8
  402e1a:	4601      	mov	r1, r0
  402e1c:	3e10      	subs	r6, #16
  402e1e:	2e10      	cmp	r6, #16
  402e20:	dd11      	ble.n	402e46 <_vfiprintf_r+0x3d6>
  402e22:	1c48      	adds	r0, r1, #1
  402e24:	3210      	adds	r2, #16
  402e26:	2807      	cmp	r0, #7
  402e28:	9211      	str	r2, [sp, #68]	; 0x44
  402e2a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402e2e:	9010      	str	r0, [sp, #64]	; 0x40
  402e30:	ddef      	ble.n	402e12 <_vfiprintf_r+0x3a2>
  402e32:	2a00      	cmp	r2, #0
  402e34:	f040 829d 	bne.w	403372 <_vfiprintf_r+0x902>
  402e38:	3e10      	subs	r6, #16
  402e3a:	2e10      	cmp	r6, #16
  402e3c:	f04f 0e01 	mov.w	lr, #1
  402e40:	4611      	mov	r1, r2
  402e42:	46cc      	mov	ip, r9
  402e44:	dced      	bgt.n	402e22 <_vfiprintf_r+0x3b2>
  402e46:	4654      	mov	r4, sl
  402e48:	46e2      	mov	sl, ip
  402e4a:	4432      	add	r2, r6
  402e4c:	f1be 0f07 	cmp.w	lr, #7
  402e50:	9211      	str	r2, [sp, #68]	; 0x44
  402e52:	e88a 0060 	stmia.w	sl, {r5, r6}
  402e56:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402e5a:	f300 8369 	bgt.w	403530 <_vfiprintf_r+0xac0>
  402e5e:	f10a 0a08 	add.w	sl, sl, #8
  402e62:	f10e 0001 	add.w	r0, lr, #1
  402e66:	4671      	mov	r1, lr
  402e68:	e1ab      	b.n	4031c2 <_vfiprintf_r+0x752>
  402e6a:	9608      	str	r6, [sp, #32]
  402e6c:	f013 0220 	ands.w	r2, r3, #32
  402e70:	f040 838c 	bne.w	40358c <_vfiprintf_r+0xb1c>
  402e74:	f013 0110 	ands.w	r1, r3, #16
  402e78:	f040 831a 	bne.w	4034b0 <_vfiprintf_r+0xa40>
  402e7c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402e80:	f000 8316 	beq.w	4034b0 <_vfiprintf_r+0xa40>
  402e84:	9807      	ldr	r0, [sp, #28]
  402e86:	460a      	mov	r2, r1
  402e88:	4601      	mov	r1, r0
  402e8a:	3104      	adds	r1, #4
  402e8c:	8806      	ldrh	r6, [r0, #0]
  402e8e:	9107      	str	r1, [sp, #28]
  402e90:	2700      	movs	r7, #0
  402e92:	e720      	b.n	402cd6 <_vfiprintf_r+0x266>
  402e94:	9608      	str	r6, [sp, #32]
  402e96:	f043 0310 	orr.w	r3, r3, #16
  402e9a:	e7e7      	b.n	402e6c <_vfiprintf_r+0x3fc>
  402e9c:	9608      	str	r6, [sp, #32]
  402e9e:	f043 0310 	orr.w	r3, r3, #16
  402ea2:	e708      	b.n	402cb6 <_vfiprintf_r+0x246>
  402ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ea8:	f898 2000 	ldrb.w	r2, [r8]
  402eac:	e652      	b.n	402b54 <_vfiprintf_r+0xe4>
  402eae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402eb2:	2600      	movs	r6, #0
  402eb4:	f818 2b01 	ldrb.w	r2, [r8], #1
  402eb8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402ebc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402ec0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402ec4:	2909      	cmp	r1, #9
  402ec6:	d9f5      	bls.n	402eb4 <_vfiprintf_r+0x444>
  402ec8:	e646      	b.n	402b58 <_vfiprintf_r+0xe8>
  402eca:	9608      	str	r6, [sp, #32]
  402ecc:	2800      	cmp	r0, #0
  402ece:	f040 8408 	bne.w	4036e2 <_vfiprintf_r+0xc72>
  402ed2:	f043 0310 	orr.w	r3, r3, #16
  402ed6:	069e      	lsls	r6, r3, #26
  402ed8:	f100 834c 	bmi.w	403574 <_vfiprintf_r+0xb04>
  402edc:	06dd      	lsls	r5, r3, #27
  402ede:	f100 82f3 	bmi.w	4034c8 <_vfiprintf_r+0xa58>
  402ee2:	0658      	lsls	r0, r3, #25
  402ee4:	f140 82f0 	bpl.w	4034c8 <_vfiprintf_r+0xa58>
  402ee8:	9d07      	ldr	r5, [sp, #28]
  402eea:	f9b5 6000 	ldrsh.w	r6, [r5]
  402eee:	462a      	mov	r2, r5
  402ef0:	17f7      	asrs	r7, r6, #31
  402ef2:	3204      	adds	r2, #4
  402ef4:	4630      	mov	r0, r6
  402ef6:	4639      	mov	r1, r7
  402ef8:	9207      	str	r2, [sp, #28]
  402efa:	2800      	cmp	r0, #0
  402efc:	f171 0200 	sbcs.w	r2, r1, #0
  402f00:	f2c0 835d 	blt.w	4035be <_vfiprintf_r+0xb4e>
  402f04:	1c61      	adds	r1, r4, #1
  402f06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f0a:	f04f 0201 	mov.w	r2, #1
  402f0e:	f47f aeea 	bne.w	402ce6 <_vfiprintf_r+0x276>
  402f12:	ea56 0107 	orrs.w	r1, r6, r7
  402f16:	f000 824d 	beq.w	4033b4 <_vfiprintf_r+0x944>
  402f1a:	9302      	str	r3, [sp, #8]
  402f1c:	2a01      	cmp	r2, #1
  402f1e:	f000 828c 	beq.w	40343a <_vfiprintf_r+0x9ca>
  402f22:	2a02      	cmp	r2, #2
  402f24:	f040 825c 	bne.w	4033e0 <_vfiprintf_r+0x970>
  402f28:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402f2a:	46cb      	mov	fp, r9
  402f2c:	0933      	lsrs	r3, r6, #4
  402f2e:	f006 010f 	and.w	r1, r6, #15
  402f32:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402f36:	093a      	lsrs	r2, r7, #4
  402f38:	461e      	mov	r6, r3
  402f3a:	4617      	mov	r7, r2
  402f3c:	5c43      	ldrb	r3, [r0, r1]
  402f3e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  402f42:	ea56 0307 	orrs.w	r3, r6, r7
  402f46:	d1f1      	bne.n	402f2c <_vfiprintf_r+0x4bc>
  402f48:	eba9 030b 	sub.w	r3, r9, fp
  402f4c:	9305      	str	r3, [sp, #20]
  402f4e:	e6e1      	b.n	402d14 <_vfiprintf_r+0x2a4>
  402f50:	2800      	cmp	r0, #0
  402f52:	f040 83c0 	bne.w	4036d6 <_vfiprintf_r+0xc66>
  402f56:	0699      	lsls	r1, r3, #26
  402f58:	f100 8367 	bmi.w	40362a <_vfiprintf_r+0xbba>
  402f5c:	06da      	lsls	r2, r3, #27
  402f5e:	f100 80f1 	bmi.w	403144 <_vfiprintf_r+0x6d4>
  402f62:	065b      	lsls	r3, r3, #25
  402f64:	f140 80ee 	bpl.w	403144 <_vfiprintf_r+0x6d4>
  402f68:	9a07      	ldr	r2, [sp, #28]
  402f6a:	6813      	ldr	r3, [r2, #0]
  402f6c:	3204      	adds	r2, #4
  402f6e:	9207      	str	r2, [sp, #28]
  402f70:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  402f74:	801a      	strh	r2, [r3, #0]
  402f76:	e5b8      	b.n	402aea <_vfiprintf_r+0x7a>
  402f78:	9807      	ldr	r0, [sp, #28]
  402f7a:	4a3d      	ldr	r2, [pc, #244]	; (403070 <_vfiprintf_r+0x600>)
  402f7c:	9608      	str	r6, [sp, #32]
  402f7e:	920b      	str	r2, [sp, #44]	; 0x2c
  402f80:	6806      	ldr	r6, [r0, #0]
  402f82:	2278      	movs	r2, #120	; 0x78
  402f84:	2130      	movs	r1, #48	; 0x30
  402f86:	3004      	adds	r0, #4
  402f88:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402f8c:	f043 0302 	orr.w	r3, r3, #2
  402f90:	9007      	str	r0, [sp, #28]
  402f92:	2700      	movs	r7, #0
  402f94:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402f98:	2202      	movs	r2, #2
  402f9a:	e69c      	b.n	402cd6 <_vfiprintf_r+0x266>
  402f9c:	9608      	str	r6, [sp, #32]
  402f9e:	2800      	cmp	r0, #0
  402fa0:	d099      	beq.n	402ed6 <_vfiprintf_r+0x466>
  402fa2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fa6:	e796      	b.n	402ed6 <_vfiprintf_r+0x466>
  402fa8:	f898 2000 	ldrb.w	r2, [r8]
  402fac:	2d00      	cmp	r5, #0
  402fae:	f47f add1 	bne.w	402b54 <_vfiprintf_r+0xe4>
  402fb2:	2001      	movs	r0, #1
  402fb4:	2520      	movs	r5, #32
  402fb6:	e5cd      	b.n	402b54 <_vfiprintf_r+0xe4>
  402fb8:	f043 0301 	orr.w	r3, r3, #1
  402fbc:	f898 2000 	ldrb.w	r2, [r8]
  402fc0:	e5c8      	b.n	402b54 <_vfiprintf_r+0xe4>
  402fc2:	9608      	str	r6, [sp, #32]
  402fc4:	2800      	cmp	r0, #0
  402fc6:	f040 8393 	bne.w	4036f0 <_vfiprintf_r+0xc80>
  402fca:	4929      	ldr	r1, [pc, #164]	; (403070 <_vfiprintf_r+0x600>)
  402fcc:	910b      	str	r1, [sp, #44]	; 0x2c
  402fce:	069f      	lsls	r7, r3, #26
  402fd0:	f100 82e8 	bmi.w	4035a4 <_vfiprintf_r+0xb34>
  402fd4:	9807      	ldr	r0, [sp, #28]
  402fd6:	06de      	lsls	r6, r3, #27
  402fd8:	4601      	mov	r1, r0
  402fda:	f100 8270 	bmi.w	4034be <_vfiprintf_r+0xa4e>
  402fde:	065d      	lsls	r5, r3, #25
  402fe0:	f140 826d 	bpl.w	4034be <_vfiprintf_r+0xa4e>
  402fe4:	3104      	adds	r1, #4
  402fe6:	8806      	ldrh	r6, [r0, #0]
  402fe8:	9107      	str	r1, [sp, #28]
  402fea:	2700      	movs	r7, #0
  402fec:	07d8      	lsls	r0, r3, #31
  402fee:	f140 8222 	bpl.w	403436 <_vfiprintf_r+0x9c6>
  402ff2:	ea56 0107 	orrs.w	r1, r6, r7
  402ff6:	f000 821e 	beq.w	403436 <_vfiprintf_r+0x9c6>
  402ffa:	2130      	movs	r1, #48	; 0x30
  402ffc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403000:	f043 0302 	orr.w	r3, r3, #2
  403004:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403008:	2202      	movs	r2, #2
  40300a:	e664      	b.n	402cd6 <_vfiprintf_r+0x266>
  40300c:	9608      	str	r6, [sp, #32]
  40300e:	2800      	cmp	r0, #0
  403010:	f040 836b 	bne.w	4036ea <_vfiprintf_r+0xc7a>
  403014:	4917      	ldr	r1, [pc, #92]	; (403074 <_vfiprintf_r+0x604>)
  403016:	910b      	str	r1, [sp, #44]	; 0x2c
  403018:	e7d9      	b.n	402fce <_vfiprintf_r+0x55e>
  40301a:	9907      	ldr	r1, [sp, #28]
  40301c:	9608      	str	r6, [sp, #32]
  40301e:	680a      	ldr	r2, [r1, #0]
  403020:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403024:	f04f 0000 	mov.w	r0, #0
  403028:	460a      	mov	r2, r1
  40302a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40302e:	3204      	adds	r2, #4
  403030:	2001      	movs	r0, #1
  403032:	9001      	str	r0, [sp, #4]
  403034:	9207      	str	r2, [sp, #28]
  403036:	9005      	str	r0, [sp, #20]
  403038:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40303c:	9302      	str	r3, [sp, #8]
  40303e:	2400      	movs	r4, #0
  403040:	e670      	b.n	402d24 <_vfiprintf_r+0x2b4>
  403042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403046:	f898 2000 	ldrb.w	r2, [r8]
  40304a:	e583      	b.n	402b54 <_vfiprintf_r+0xe4>
  40304c:	f898 2000 	ldrb.w	r2, [r8]
  403050:	2a6c      	cmp	r2, #108	; 0x6c
  403052:	bf03      	ittte	eq
  403054:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403058:	f043 0320 	orreq.w	r3, r3, #32
  40305c:	f108 0801 	addeq.w	r8, r8, #1
  403060:	f043 0310 	orrne.w	r3, r3, #16
  403064:	e576      	b.n	402b54 <_vfiprintf_r+0xe4>
  403066:	bf00      	nop
  403068:	00405440 	.word	0x00405440
  40306c:	00405450 	.word	0x00405450
  403070:	00405424 	.word	0x00405424
  403074:	00405410 	.word	0x00405410
  403078:	9907      	ldr	r1, [sp, #28]
  40307a:	680e      	ldr	r6, [r1, #0]
  40307c:	460a      	mov	r2, r1
  40307e:	2e00      	cmp	r6, #0
  403080:	f102 0204 	add.w	r2, r2, #4
  403084:	f6ff ae0f 	blt.w	402ca6 <_vfiprintf_r+0x236>
  403088:	9207      	str	r2, [sp, #28]
  40308a:	f898 2000 	ldrb.w	r2, [r8]
  40308e:	e561      	b.n	402b54 <_vfiprintf_r+0xe4>
  403090:	f898 2000 	ldrb.w	r2, [r8]
  403094:	2001      	movs	r0, #1
  403096:	252b      	movs	r5, #43	; 0x2b
  403098:	e55c      	b.n	402b54 <_vfiprintf_r+0xe4>
  40309a:	9907      	ldr	r1, [sp, #28]
  40309c:	9608      	str	r6, [sp, #32]
  40309e:	f8d1 b000 	ldr.w	fp, [r1]
  4030a2:	f04f 0200 	mov.w	r2, #0
  4030a6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4030aa:	1d0e      	adds	r6, r1, #4
  4030ac:	f1bb 0f00 	cmp.w	fp, #0
  4030b0:	f000 82e5 	beq.w	40367e <_vfiprintf_r+0xc0e>
  4030b4:	1c67      	adds	r7, r4, #1
  4030b6:	f000 82c4 	beq.w	403642 <_vfiprintf_r+0xbd2>
  4030ba:	4622      	mov	r2, r4
  4030bc:	2100      	movs	r1, #0
  4030be:	4658      	mov	r0, fp
  4030c0:	9301      	str	r3, [sp, #4]
  4030c2:	f001 fbd5 	bl	404870 <memchr>
  4030c6:	9b01      	ldr	r3, [sp, #4]
  4030c8:	2800      	cmp	r0, #0
  4030ca:	f000 82e5 	beq.w	403698 <_vfiprintf_r+0xc28>
  4030ce:	eba0 020b 	sub.w	r2, r0, fp
  4030d2:	9205      	str	r2, [sp, #20]
  4030d4:	9607      	str	r6, [sp, #28]
  4030d6:	9302      	str	r3, [sp, #8]
  4030d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4030dc:	2400      	movs	r4, #0
  4030de:	e619      	b.n	402d14 <_vfiprintf_r+0x2a4>
  4030e0:	f898 2000 	ldrb.w	r2, [r8]
  4030e4:	2a2a      	cmp	r2, #42	; 0x2a
  4030e6:	f108 0701 	add.w	r7, r8, #1
  4030ea:	f000 82e9 	beq.w	4036c0 <_vfiprintf_r+0xc50>
  4030ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4030f2:	2909      	cmp	r1, #9
  4030f4:	46b8      	mov	r8, r7
  4030f6:	f04f 0400 	mov.w	r4, #0
  4030fa:	f63f ad2d 	bhi.w	402b58 <_vfiprintf_r+0xe8>
  4030fe:	f818 2b01 	ldrb.w	r2, [r8], #1
  403102:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403106:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40310a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40310e:	2909      	cmp	r1, #9
  403110:	d9f5      	bls.n	4030fe <_vfiprintf_r+0x68e>
  403112:	e521      	b.n	402b58 <_vfiprintf_r+0xe8>
  403114:	f043 0320 	orr.w	r3, r3, #32
  403118:	f898 2000 	ldrb.w	r2, [r8]
  40311c:	e51a      	b.n	402b54 <_vfiprintf_r+0xe4>
  40311e:	9608      	str	r6, [sp, #32]
  403120:	2800      	cmp	r0, #0
  403122:	f040 82db 	bne.w	4036dc <_vfiprintf_r+0xc6c>
  403126:	2a00      	cmp	r2, #0
  403128:	f000 80e7 	beq.w	4032fa <_vfiprintf_r+0x88a>
  40312c:	2101      	movs	r1, #1
  40312e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403132:	f04f 0200 	mov.w	r2, #0
  403136:	9101      	str	r1, [sp, #4]
  403138:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40313c:	9105      	str	r1, [sp, #20]
  40313e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403142:	e77b      	b.n	40303c <_vfiprintf_r+0x5cc>
  403144:	9a07      	ldr	r2, [sp, #28]
  403146:	6813      	ldr	r3, [r2, #0]
  403148:	3204      	adds	r2, #4
  40314a:	9207      	str	r2, [sp, #28]
  40314c:	9a03      	ldr	r2, [sp, #12]
  40314e:	601a      	str	r2, [r3, #0]
  403150:	e4cb      	b.n	402aea <_vfiprintf_r+0x7a>
  403152:	aa0f      	add	r2, sp, #60	; 0x3c
  403154:	9904      	ldr	r1, [sp, #16]
  403156:	4620      	mov	r0, r4
  403158:	f7ff fc4a 	bl	4029f0 <__sprint_r.part.0>
  40315c:	2800      	cmp	r0, #0
  40315e:	f040 8139 	bne.w	4033d4 <_vfiprintf_r+0x964>
  403162:	9910      	ldr	r1, [sp, #64]	; 0x40
  403164:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403166:	f101 0c01 	add.w	ip, r1, #1
  40316a:	46ce      	mov	lr, r9
  40316c:	e5ff      	b.n	402d6e <_vfiprintf_r+0x2fe>
  40316e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403170:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403172:	1c48      	adds	r0, r1, #1
  403174:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403178:	2d00      	cmp	r5, #0
  40317a:	f43f ae22 	beq.w	402dc2 <_vfiprintf_r+0x352>
  40317e:	3201      	adds	r2, #1
  403180:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403184:	2101      	movs	r1, #1
  403186:	2807      	cmp	r0, #7
  403188:	9211      	str	r2, [sp, #68]	; 0x44
  40318a:	9010      	str	r0, [sp, #64]	; 0x40
  40318c:	f8ca 5000 	str.w	r5, [sl]
  403190:	f8ca 1004 	str.w	r1, [sl, #4]
  403194:	f340 8108 	ble.w	4033a8 <_vfiprintf_r+0x938>
  403198:	2a00      	cmp	r2, #0
  40319a:	f040 81bc 	bne.w	403516 <_vfiprintf_r+0xaa6>
  40319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4031a0:	2b00      	cmp	r3, #0
  4031a2:	f43f ae1f 	beq.w	402de4 <_vfiprintf_r+0x374>
  4031a6:	ab0e      	add	r3, sp, #56	; 0x38
  4031a8:	2202      	movs	r2, #2
  4031aa:	4608      	mov	r0, r1
  4031ac:	931c      	str	r3, [sp, #112]	; 0x70
  4031ae:	921d      	str	r2, [sp, #116]	; 0x74
  4031b0:	46ca      	mov	sl, r9
  4031b2:	4601      	mov	r1, r0
  4031b4:	f10a 0a08 	add.w	sl, sl, #8
  4031b8:	3001      	adds	r0, #1
  4031ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031bc:	2b80      	cmp	r3, #128	; 0x80
  4031be:	f43f ae19 	beq.w	402df4 <_vfiprintf_r+0x384>
  4031c2:	9b05      	ldr	r3, [sp, #20]
  4031c4:	1ae4      	subs	r4, r4, r3
  4031c6:	2c00      	cmp	r4, #0
  4031c8:	dd2e      	ble.n	403228 <_vfiprintf_r+0x7b8>
  4031ca:	2c10      	cmp	r4, #16
  4031cc:	4db3      	ldr	r5, [pc, #716]	; (40349c <_vfiprintf_r+0xa2c>)
  4031ce:	dd1e      	ble.n	40320e <_vfiprintf_r+0x79e>
  4031d0:	46d6      	mov	lr, sl
  4031d2:	2610      	movs	r6, #16
  4031d4:	9f06      	ldr	r7, [sp, #24]
  4031d6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4031da:	e006      	b.n	4031ea <_vfiprintf_r+0x77a>
  4031dc:	1c88      	adds	r0, r1, #2
  4031de:	f10e 0e08 	add.w	lr, lr, #8
  4031e2:	4619      	mov	r1, r3
  4031e4:	3c10      	subs	r4, #16
  4031e6:	2c10      	cmp	r4, #16
  4031e8:	dd10      	ble.n	40320c <_vfiprintf_r+0x79c>
  4031ea:	1c4b      	adds	r3, r1, #1
  4031ec:	3210      	adds	r2, #16
  4031ee:	2b07      	cmp	r3, #7
  4031f0:	9211      	str	r2, [sp, #68]	; 0x44
  4031f2:	e88e 0060 	stmia.w	lr, {r5, r6}
  4031f6:	9310      	str	r3, [sp, #64]	; 0x40
  4031f8:	ddf0      	ble.n	4031dc <_vfiprintf_r+0x76c>
  4031fa:	2a00      	cmp	r2, #0
  4031fc:	d165      	bne.n	4032ca <_vfiprintf_r+0x85a>
  4031fe:	3c10      	subs	r4, #16
  403200:	2c10      	cmp	r4, #16
  403202:	f04f 0001 	mov.w	r0, #1
  403206:	4611      	mov	r1, r2
  403208:	46ce      	mov	lr, r9
  40320a:	dcee      	bgt.n	4031ea <_vfiprintf_r+0x77a>
  40320c:	46f2      	mov	sl, lr
  40320e:	4422      	add	r2, r4
  403210:	2807      	cmp	r0, #7
  403212:	9211      	str	r2, [sp, #68]	; 0x44
  403214:	f8ca 5000 	str.w	r5, [sl]
  403218:	f8ca 4004 	str.w	r4, [sl, #4]
  40321c:	9010      	str	r0, [sp, #64]	; 0x40
  40321e:	f300 8085 	bgt.w	40332c <_vfiprintf_r+0x8bc>
  403222:	f10a 0a08 	add.w	sl, sl, #8
  403226:	3001      	adds	r0, #1
  403228:	9905      	ldr	r1, [sp, #20]
  40322a:	f8ca b000 	str.w	fp, [sl]
  40322e:	440a      	add	r2, r1
  403230:	2807      	cmp	r0, #7
  403232:	9211      	str	r2, [sp, #68]	; 0x44
  403234:	f8ca 1004 	str.w	r1, [sl, #4]
  403238:	9010      	str	r0, [sp, #64]	; 0x40
  40323a:	f340 8082 	ble.w	403342 <_vfiprintf_r+0x8d2>
  40323e:	2a00      	cmp	r2, #0
  403240:	f040 8118 	bne.w	403474 <_vfiprintf_r+0xa04>
  403244:	9b02      	ldr	r3, [sp, #8]
  403246:	9210      	str	r2, [sp, #64]	; 0x40
  403248:	0758      	lsls	r0, r3, #29
  40324a:	d535      	bpl.n	4032b8 <_vfiprintf_r+0x848>
  40324c:	9b08      	ldr	r3, [sp, #32]
  40324e:	9901      	ldr	r1, [sp, #4]
  403250:	1a5c      	subs	r4, r3, r1
  403252:	2c00      	cmp	r4, #0
  403254:	f340 80e7 	ble.w	403426 <_vfiprintf_r+0x9b6>
  403258:	46ca      	mov	sl, r9
  40325a:	2c10      	cmp	r4, #16
  40325c:	f340 8218 	ble.w	403690 <_vfiprintf_r+0xc20>
  403260:	9910      	ldr	r1, [sp, #64]	; 0x40
  403262:	4e8f      	ldr	r6, [pc, #572]	; (4034a0 <_vfiprintf_r+0xa30>)
  403264:	9f06      	ldr	r7, [sp, #24]
  403266:	f8dd b010 	ldr.w	fp, [sp, #16]
  40326a:	2510      	movs	r5, #16
  40326c:	e006      	b.n	40327c <_vfiprintf_r+0x80c>
  40326e:	1c88      	adds	r0, r1, #2
  403270:	f10a 0a08 	add.w	sl, sl, #8
  403274:	4619      	mov	r1, r3
  403276:	3c10      	subs	r4, #16
  403278:	2c10      	cmp	r4, #16
  40327a:	dd11      	ble.n	4032a0 <_vfiprintf_r+0x830>
  40327c:	1c4b      	adds	r3, r1, #1
  40327e:	3210      	adds	r2, #16
  403280:	2b07      	cmp	r3, #7
  403282:	9211      	str	r2, [sp, #68]	; 0x44
  403284:	f8ca 6000 	str.w	r6, [sl]
  403288:	f8ca 5004 	str.w	r5, [sl, #4]
  40328c:	9310      	str	r3, [sp, #64]	; 0x40
  40328e:	ddee      	ble.n	40326e <_vfiprintf_r+0x7fe>
  403290:	bb42      	cbnz	r2, 4032e4 <_vfiprintf_r+0x874>
  403292:	3c10      	subs	r4, #16
  403294:	2c10      	cmp	r4, #16
  403296:	f04f 0001 	mov.w	r0, #1
  40329a:	4611      	mov	r1, r2
  40329c:	46ca      	mov	sl, r9
  40329e:	dced      	bgt.n	40327c <_vfiprintf_r+0x80c>
  4032a0:	4422      	add	r2, r4
  4032a2:	2807      	cmp	r0, #7
  4032a4:	9211      	str	r2, [sp, #68]	; 0x44
  4032a6:	f8ca 6000 	str.w	r6, [sl]
  4032aa:	f8ca 4004 	str.w	r4, [sl, #4]
  4032ae:	9010      	str	r0, [sp, #64]	; 0x40
  4032b0:	dd51      	ble.n	403356 <_vfiprintf_r+0x8e6>
  4032b2:	2a00      	cmp	r2, #0
  4032b4:	f040 819b 	bne.w	4035ee <_vfiprintf_r+0xb7e>
  4032b8:	9b03      	ldr	r3, [sp, #12]
  4032ba:	9a08      	ldr	r2, [sp, #32]
  4032bc:	9901      	ldr	r1, [sp, #4]
  4032be:	428a      	cmp	r2, r1
  4032c0:	bfac      	ite	ge
  4032c2:	189b      	addge	r3, r3, r2
  4032c4:	185b      	addlt	r3, r3, r1
  4032c6:	9303      	str	r3, [sp, #12]
  4032c8:	e04e      	b.n	403368 <_vfiprintf_r+0x8f8>
  4032ca:	aa0f      	add	r2, sp, #60	; 0x3c
  4032cc:	4651      	mov	r1, sl
  4032ce:	4638      	mov	r0, r7
  4032d0:	f7ff fb8e 	bl	4029f0 <__sprint_r.part.0>
  4032d4:	2800      	cmp	r0, #0
  4032d6:	f040 813f 	bne.w	403558 <_vfiprintf_r+0xae8>
  4032da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4032dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032de:	1c48      	adds	r0, r1, #1
  4032e0:	46ce      	mov	lr, r9
  4032e2:	e77f      	b.n	4031e4 <_vfiprintf_r+0x774>
  4032e4:	aa0f      	add	r2, sp, #60	; 0x3c
  4032e6:	4659      	mov	r1, fp
  4032e8:	4638      	mov	r0, r7
  4032ea:	f7ff fb81 	bl	4029f0 <__sprint_r.part.0>
  4032ee:	b960      	cbnz	r0, 40330a <_vfiprintf_r+0x89a>
  4032f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4032f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032f4:	1c48      	adds	r0, r1, #1
  4032f6:	46ca      	mov	sl, r9
  4032f8:	e7bd      	b.n	403276 <_vfiprintf_r+0x806>
  4032fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4032fc:	f8dd b010 	ldr.w	fp, [sp, #16]
  403300:	2b00      	cmp	r3, #0
  403302:	f040 81d4 	bne.w	4036ae <_vfiprintf_r+0xc3e>
  403306:	2300      	movs	r3, #0
  403308:	9310      	str	r3, [sp, #64]	; 0x40
  40330a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40330e:	f013 0f01 	tst.w	r3, #1
  403312:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403316:	d102      	bne.n	40331e <_vfiprintf_r+0x8ae>
  403318:	059a      	lsls	r2, r3, #22
  40331a:	f140 80de 	bpl.w	4034da <_vfiprintf_r+0xa6a>
  40331e:	065b      	lsls	r3, r3, #25
  403320:	f53f acb2 	bmi.w	402c88 <_vfiprintf_r+0x218>
  403324:	9803      	ldr	r0, [sp, #12]
  403326:	b02d      	add	sp, #180	; 0xb4
  403328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40332c:	2a00      	cmp	r2, #0
  40332e:	f040 8106 	bne.w	40353e <_vfiprintf_r+0xace>
  403332:	9a05      	ldr	r2, [sp, #20]
  403334:	921d      	str	r2, [sp, #116]	; 0x74
  403336:	2301      	movs	r3, #1
  403338:	9211      	str	r2, [sp, #68]	; 0x44
  40333a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40333e:	9310      	str	r3, [sp, #64]	; 0x40
  403340:	46ca      	mov	sl, r9
  403342:	f10a 0a08 	add.w	sl, sl, #8
  403346:	9b02      	ldr	r3, [sp, #8]
  403348:	0759      	lsls	r1, r3, #29
  40334a:	d504      	bpl.n	403356 <_vfiprintf_r+0x8e6>
  40334c:	9b08      	ldr	r3, [sp, #32]
  40334e:	9901      	ldr	r1, [sp, #4]
  403350:	1a5c      	subs	r4, r3, r1
  403352:	2c00      	cmp	r4, #0
  403354:	dc81      	bgt.n	40325a <_vfiprintf_r+0x7ea>
  403356:	9b03      	ldr	r3, [sp, #12]
  403358:	9908      	ldr	r1, [sp, #32]
  40335a:	9801      	ldr	r0, [sp, #4]
  40335c:	4281      	cmp	r1, r0
  40335e:	bfac      	ite	ge
  403360:	185b      	addge	r3, r3, r1
  403362:	181b      	addlt	r3, r3, r0
  403364:	9303      	str	r3, [sp, #12]
  403366:	bb72      	cbnz	r2, 4033c6 <_vfiprintf_r+0x956>
  403368:	2300      	movs	r3, #0
  40336a:	9310      	str	r3, [sp, #64]	; 0x40
  40336c:	46ca      	mov	sl, r9
  40336e:	f7ff bbbc 	b.w	402aea <_vfiprintf_r+0x7a>
  403372:	aa0f      	add	r2, sp, #60	; 0x3c
  403374:	9904      	ldr	r1, [sp, #16]
  403376:	4620      	mov	r0, r4
  403378:	f7ff fb3a 	bl	4029f0 <__sprint_r.part.0>
  40337c:	bb50      	cbnz	r0, 4033d4 <_vfiprintf_r+0x964>
  40337e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403380:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403382:	f101 0e01 	add.w	lr, r1, #1
  403386:	46cc      	mov	ip, r9
  403388:	e548      	b.n	402e1c <_vfiprintf_r+0x3ac>
  40338a:	2a00      	cmp	r2, #0
  40338c:	f040 8140 	bne.w	403610 <_vfiprintf_r+0xba0>
  403390:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403394:	2900      	cmp	r1, #0
  403396:	f000 811b 	beq.w	4035d0 <_vfiprintf_r+0xb60>
  40339a:	2201      	movs	r2, #1
  40339c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4033a0:	4610      	mov	r0, r2
  4033a2:	921d      	str	r2, [sp, #116]	; 0x74
  4033a4:	911c      	str	r1, [sp, #112]	; 0x70
  4033a6:	46ca      	mov	sl, r9
  4033a8:	4601      	mov	r1, r0
  4033aa:	f10a 0a08 	add.w	sl, sl, #8
  4033ae:	3001      	adds	r0, #1
  4033b0:	e507      	b.n	402dc2 <_vfiprintf_r+0x352>
  4033b2:	9b02      	ldr	r3, [sp, #8]
  4033b4:	2a01      	cmp	r2, #1
  4033b6:	f000 8098 	beq.w	4034ea <_vfiprintf_r+0xa7a>
  4033ba:	2a02      	cmp	r2, #2
  4033bc:	d10d      	bne.n	4033da <_vfiprintf_r+0x96a>
  4033be:	9302      	str	r3, [sp, #8]
  4033c0:	2600      	movs	r6, #0
  4033c2:	2700      	movs	r7, #0
  4033c4:	e5b0      	b.n	402f28 <_vfiprintf_r+0x4b8>
  4033c6:	aa0f      	add	r2, sp, #60	; 0x3c
  4033c8:	9904      	ldr	r1, [sp, #16]
  4033ca:	9806      	ldr	r0, [sp, #24]
  4033cc:	f7ff fb10 	bl	4029f0 <__sprint_r.part.0>
  4033d0:	2800      	cmp	r0, #0
  4033d2:	d0c9      	beq.n	403368 <_vfiprintf_r+0x8f8>
  4033d4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4033d8:	e797      	b.n	40330a <_vfiprintf_r+0x89a>
  4033da:	9302      	str	r3, [sp, #8]
  4033dc:	2600      	movs	r6, #0
  4033de:	2700      	movs	r7, #0
  4033e0:	4649      	mov	r1, r9
  4033e2:	e000      	b.n	4033e6 <_vfiprintf_r+0x976>
  4033e4:	4659      	mov	r1, fp
  4033e6:	08f2      	lsrs	r2, r6, #3
  4033e8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4033ec:	08f8      	lsrs	r0, r7, #3
  4033ee:	f006 0307 	and.w	r3, r6, #7
  4033f2:	4607      	mov	r7, r0
  4033f4:	4616      	mov	r6, r2
  4033f6:	3330      	adds	r3, #48	; 0x30
  4033f8:	ea56 0207 	orrs.w	r2, r6, r7
  4033fc:	f801 3c01 	strb.w	r3, [r1, #-1]
  403400:	f101 3bff 	add.w	fp, r1, #4294967295
  403404:	d1ee      	bne.n	4033e4 <_vfiprintf_r+0x974>
  403406:	9a02      	ldr	r2, [sp, #8]
  403408:	07d6      	lsls	r6, r2, #31
  40340a:	f57f ad9d 	bpl.w	402f48 <_vfiprintf_r+0x4d8>
  40340e:	2b30      	cmp	r3, #48	; 0x30
  403410:	f43f ad9a 	beq.w	402f48 <_vfiprintf_r+0x4d8>
  403414:	3902      	subs	r1, #2
  403416:	2330      	movs	r3, #48	; 0x30
  403418:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40341c:	eba9 0301 	sub.w	r3, r9, r1
  403420:	9305      	str	r3, [sp, #20]
  403422:	468b      	mov	fp, r1
  403424:	e476      	b.n	402d14 <_vfiprintf_r+0x2a4>
  403426:	9b03      	ldr	r3, [sp, #12]
  403428:	9a08      	ldr	r2, [sp, #32]
  40342a:	428a      	cmp	r2, r1
  40342c:	bfac      	ite	ge
  40342e:	189b      	addge	r3, r3, r2
  403430:	185b      	addlt	r3, r3, r1
  403432:	9303      	str	r3, [sp, #12]
  403434:	e798      	b.n	403368 <_vfiprintf_r+0x8f8>
  403436:	2202      	movs	r2, #2
  403438:	e44d      	b.n	402cd6 <_vfiprintf_r+0x266>
  40343a:	2f00      	cmp	r7, #0
  40343c:	bf08      	it	eq
  40343e:	2e0a      	cmpeq	r6, #10
  403440:	d352      	bcc.n	4034e8 <_vfiprintf_r+0xa78>
  403442:	46cb      	mov	fp, r9
  403444:	4630      	mov	r0, r6
  403446:	4639      	mov	r1, r7
  403448:	220a      	movs	r2, #10
  40344a:	2300      	movs	r3, #0
  40344c:	f7fe ffee 	bl	40242c <__aeabi_uldivmod>
  403450:	3230      	adds	r2, #48	; 0x30
  403452:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403456:	4630      	mov	r0, r6
  403458:	4639      	mov	r1, r7
  40345a:	2300      	movs	r3, #0
  40345c:	220a      	movs	r2, #10
  40345e:	f7fe ffe5 	bl	40242c <__aeabi_uldivmod>
  403462:	4606      	mov	r6, r0
  403464:	460f      	mov	r7, r1
  403466:	ea56 0307 	orrs.w	r3, r6, r7
  40346a:	d1eb      	bne.n	403444 <_vfiprintf_r+0x9d4>
  40346c:	e56c      	b.n	402f48 <_vfiprintf_r+0x4d8>
  40346e:	9405      	str	r4, [sp, #20]
  403470:	46cb      	mov	fp, r9
  403472:	e44f      	b.n	402d14 <_vfiprintf_r+0x2a4>
  403474:	aa0f      	add	r2, sp, #60	; 0x3c
  403476:	9904      	ldr	r1, [sp, #16]
  403478:	9806      	ldr	r0, [sp, #24]
  40347a:	f7ff fab9 	bl	4029f0 <__sprint_r.part.0>
  40347e:	2800      	cmp	r0, #0
  403480:	d1a8      	bne.n	4033d4 <_vfiprintf_r+0x964>
  403482:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403484:	46ca      	mov	sl, r9
  403486:	e75e      	b.n	403346 <_vfiprintf_r+0x8d6>
  403488:	aa0f      	add	r2, sp, #60	; 0x3c
  40348a:	9904      	ldr	r1, [sp, #16]
  40348c:	9806      	ldr	r0, [sp, #24]
  40348e:	f7ff faaf 	bl	4029f0 <__sprint_r.part.0>
  403492:	2800      	cmp	r0, #0
  403494:	d19e      	bne.n	4033d4 <_vfiprintf_r+0x964>
  403496:	46ca      	mov	sl, r9
  403498:	f7ff bbc0 	b.w	402c1c <_vfiprintf_r+0x1ac>
  40349c:	00405450 	.word	0x00405450
  4034a0:	00405440 	.word	0x00405440
  4034a4:	3104      	adds	r1, #4
  4034a6:	6816      	ldr	r6, [r2, #0]
  4034a8:	9107      	str	r1, [sp, #28]
  4034aa:	2201      	movs	r2, #1
  4034ac:	2700      	movs	r7, #0
  4034ae:	e412      	b.n	402cd6 <_vfiprintf_r+0x266>
  4034b0:	9807      	ldr	r0, [sp, #28]
  4034b2:	4601      	mov	r1, r0
  4034b4:	3104      	adds	r1, #4
  4034b6:	6806      	ldr	r6, [r0, #0]
  4034b8:	9107      	str	r1, [sp, #28]
  4034ba:	2700      	movs	r7, #0
  4034bc:	e40b      	b.n	402cd6 <_vfiprintf_r+0x266>
  4034be:	680e      	ldr	r6, [r1, #0]
  4034c0:	3104      	adds	r1, #4
  4034c2:	9107      	str	r1, [sp, #28]
  4034c4:	2700      	movs	r7, #0
  4034c6:	e591      	b.n	402fec <_vfiprintf_r+0x57c>
  4034c8:	9907      	ldr	r1, [sp, #28]
  4034ca:	680e      	ldr	r6, [r1, #0]
  4034cc:	460a      	mov	r2, r1
  4034ce:	17f7      	asrs	r7, r6, #31
  4034d0:	3204      	adds	r2, #4
  4034d2:	9207      	str	r2, [sp, #28]
  4034d4:	4630      	mov	r0, r6
  4034d6:	4639      	mov	r1, r7
  4034d8:	e50f      	b.n	402efa <_vfiprintf_r+0x48a>
  4034da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4034de:	f000 fe7f 	bl	4041e0 <__retarget_lock_release_recursive>
  4034e2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4034e6:	e71a      	b.n	40331e <_vfiprintf_r+0x8ae>
  4034e8:	9b02      	ldr	r3, [sp, #8]
  4034ea:	9302      	str	r3, [sp, #8]
  4034ec:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4034f0:	3630      	adds	r6, #48	; 0x30
  4034f2:	2301      	movs	r3, #1
  4034f4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4034f8:	9305      	str	r3, [sp, #20]
  4034fa:	e40b      	b.n	402d14 <_vfiprintf_r+0x2a4>
  4034fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4034fe:	9904      	ldr	r1, [sp, #16]
  403500:	9806      	ldr	r0, [sp, #24]
  403502:	f7ff fa75 	bl	4029f0 <__sprint_r.part.0>
  403506:	2800      	cmp	r0, #0
  403508:	f47f af64 	bne.w	4033d4 <_vfiprintf_r+0x964>
  40350c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40350e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403510:	1c48      	adds	r0, r1, #1
  403512:	46ca      	mov	sl, r9
  403514:	e651      	b.n	4031ba <_vfiprintf_r+0x74a>
  403516:	aa0f      	add	r2, sp, #60	; 0x3c
  403518:	9904      	ldr	r1, [sp, #16]
  40351a:	9806      	ldr	r0, [sp, #24]
  40351c:	f7ff fa68 	bl	4029f0 <__sprint_r.part.0>
  403520:	2800      	cmp	r0, #0
  403522:	f47f af57 	bne.w	4033d4 <_vfiprintf_r+0x964>
  403526:	9910      	ldr	r1, [sp, #64]	; 0x40
  403528:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40352a:	1c48      	adds	r0, r1, #1
  40352c:	46ca      	mov	sl, r9
  40352e:	e448      	b.n	402dc2 <_vfiprintf_r+0x352>
  403530:	2a00      	cmp	r2, #0
  403532:	f040 8091 	bne.w	403658 <_vfiprintf_r+0xbe8>
  403536:	2001      	movs	r0, #1
  403538:	4611      	mov	r1, r2
  40353a:	46ca      	mov	sl, r9
  40353c:	e641      	b.n	4031c2 <_vfiprintf_r+0x752>
  40353e:	aa0f      	add	r2, sp, #60	; 0x3c
  403540:	9904      	ldr	r1, [sp, #16]
  403542:	9806      	ldr	r0, [sp, #24]
  403544:	f7ff fa54 	bl	4029f0 <__sprint_r.part.0>
  403548:	2800      	cmp	r0, #0
  40354a:	f47f af43 	bne.w	4033d4 <_vfiprintf_r+0x964>
  40354e:	9810      	ldr	r0, [sp, #64]	; 0x40
  403550:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403552:	3001      	adds	r0, #1
  403554:	46ca      	mov	sl, r9
  403556:	e667      	b.n	403228 <_vfiprintf_r+0x7b8>
  403558:	46d3      	mov	fp, sl
  40355a:	e6d6      	b.n	40330a <_vfiprintf_r+0x89a>
  40355c:	9e07      	ldr	r6, [sp, #28]
  40355e:	3607      	adds	r6, #7
  403560:	f026 0207 	bic.w	r2, r6, #7
  403564:	f102 0108 	add.w	r1, r2, #8
  403568:	e9d2 6700 	ldrd	r6, r7, [r2]
  40356c:	9107      	str	r1, [sp, #28]
  40356e:	2201      	movs	r2, #1
  403570:	f7ff bbb1 	b.w	402cd6 <_vfiprintf_r+0x266>
  403574:	9e07      	ldr	r6, [sp, #28]
  403576:	3607      	adds	r6, #7
  403578:	f026 0607 	bic.w	r6, r6, #7
  40357c:	e9d6 0100 	ldrd	r0, r1, [r6]
  403580:	f106 0208 	add.w	r2, r6, #8
  403584:	9207      	str	r2, [sp, #28]
  403586:	4606      	mov	r6, r0
  403588:	460f      	mov	r7, r1
  40358a:	e4b6      	b.n	402efa <_vfiprintf_r+0x48a>
  40358c:	9e07      	ldr	r6, [sp, #28]
  40358e:	3607      	adds	r6, #7
  403590:	f026 0207 	bic.w	r2, r6, #7
  403594:	f102 0108 	add.w	r1, r2, #8
  403598:	e9d2 6700 	ldrd	r6, r7, [r2]
  40359c:	9107      	str	r1, [sp, #28]
  40359e:	2200      	movs	r2, #0
  4035a0:	f7ff bb99 	b.w	402cd6 <_vfiprintf_r+0x266>
  4035a4:	9e07      	ldr	r6, [sp, #28]
  4035a6:	3607      	adds	r6, #7
  4035a8:	f026 0107 	bic.w	r1, r6, #7
  4035ac:	f101 0008 	add.w	r0, r1, #8
  4035b0:	9007      	str	r0, [sp, #28]
  4035b2:	e9d1 6700 	ldrd	r6, r7, [r1]
  4035b6:	e519      	b.n	402fec <_vfiprintf_r+0x57c>
  4035b8:	46cb      	mov	fp, r9
  4035ba:	f7ff bbab 	b.w	402d14 <_vfiprintf_r+0x2a4>
  4035be:	252d      	movs	r5, #45	; 0x2d
  4035c0:	4276      	negs	r6, r6
  4035c2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4035c6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4035ca:	2201      	movs	r2, #1
  4035cc:	f7ff bb88 	b.w	402ce0 <_vfiprintf_r+0x270>
  4035d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4035d2:	b9b3      	cbnz	r3, 403602 <_vfiprintf_r+0xb92>
  4035d4:	4611      	mov	r1, r2
  4035d6:	2001      	movs	r0, #1
  4035d8:	46ca      	mov	sl, r9
  4035da:	e5f2      	b.n	4031c2 <_vfiprintf_r+0x752>
  4035dc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4035e0:	f000 fdfe 	bl	4041e0 <__retarget_lock_release_recursive>
  4035e4:	f04f 33ff 	mov.w	r3, #4294967295
  4035e8:	9303      	str	r3, [sp, #12]
  4035ea:	f7ff bb50 	b.w	402c8e <_vfiprintf_r+0x21e>
  4035ee:	aa0f      	add	r2, sp, #60	; 0x3c
  4035f0:	9904      	ldr	r1, [sp, #16]
  4035f2:	9806      	ldr	r0, [sp, #24]
  4035f4:	f7ff f9fc 	bl	4029f0 <__sprint_r.part.0>
  4035f8:	2800      	cmp	r0, #0
  4035fa:	f47f aeeb 	bne.w	4033d4 <_vfiprintf_r+0x964>
  4035fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403600:	e6a9      	b.n	403356 <_vfiprintf_r+0x8e6>
  403602:	ab0e      	add	r3, sp, #56	; 0x38
  403604:	2202      	movs	r2, #2
  403606:	931c      	str	r3, [sp, #112]	; 0x70
  403608:	921d      	str	r2, [sp, #116]	; 0x74
  40360a:	2001      	movs	r0, #1
  40360c:	46ca      	mov	sl, r9
  40360e:	e5d0      	b.n	4031b2 <_vfiprintf_r+0x742>
  403610:	aa0f      	add	r2, sp, #60	; 0x3c
  403612:	9904      	ldr	r1, [sp, #16]
  403614:	9806      	ldr	r0, [sp, #24]
  403616:	f7ff f9eb 	bl	4029f0 <__sprint_r.part.0>
  40361a:	2800      	cmp	r0, #0
  40361c:	f47f aeda 	bne.w	4033d4 <_vfiprintf_r+0x964>
  403620:	9910      	ldr	r1, [sp, #64]	; 0x40
  403622:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403624:	1c48      	adds	r0, r1, #1
  403626:	46ca      	mov	sl, r9
  403628:	e5a4      	b.n	403174 <_vfiprintf_r+0x704>
  40362a:	9a07      	ldr	r2, [sp, #28]
  40362c:	9903      	ldr	r1, [sp, #12]
  40362e:	6813      	ldr	r3, [r2, #0]
  403630:	17cd      	asrs	r5, r1, #31
  403632:	4608      	mov	r0, r1
  403634:	3204      	adds	r2, #4
  403636:	4629      	mov	r1, r5
  403638:	9207      	str	r2, [sp, #28]
  40363a:	e9c3 0100 	strd	r0, r1, [r3]
  40363e:	f7ff ba54 	b.w	402aea <_vfiprintf_r+0x7a>
  403642:	4658      	mov	r0, fp
  403644:	9607      	str	r6, [sp, #28]
  403646:	9302      	str	r3, [sp, #8]
  403648:	f001 fc7a 	bl	404f40 <strlen>
  40364c:	2400      	movs	r4, #0
  40364e:	9005      	str	r0, [sp, #20]
  403650:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403654:	f7ff bb5e 	b.w	402d14 <_vfiprintf_r+0x2a4>
  403658:	aa0f      	add	r2, sp, #60	; 0x3c
  40365a:	9904      	ldr	r1, [sp, #16]
  40365c:	9806      	ldr	r0, [sp, #24]
  40365e:	f7ff f9c7 	bl	4029f0 <__sprint_r.part.0>
  403662:	2800      	cmp	r0, #0
  403664:	f47f aeb6 	bne.w	4033d4 <_vfiprintf_r+0x964>
  403668:	9910      	ldr	r1, [sp, #64]	; 0x40
  40366a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40366c:	1c48      	adds	r0, r1, #1
  40366e:	46ca      	mov	sl, r9
  403670:	e5a7      	b.n	4031c2 <_vfiprintf_r+0x752>
  403672:	9910      	ldr	r1, [sp, #64]	; 0x40
  403674:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403676:	4e20      	ldr	r6, [pc, #128]	; (4036f8 <_vfiprintf_r+0xc88>)
  403678:	3101      	adds	r1, #1
  40367a:	f7ff bb90 	b.w	402d9e <_vfiprintf_r+0x32e>
  40367e:	2c06      	cmp	r4, #6
  403680:	bf28      	it	cs
  403682:	2406      	movcs	r4, #6
  403684:	9405      	str	r4, [sp, #20]
  403686:	9607      	str	r6, [sp, #28]
  403688:	9401      	str	r4, [sp, #4]
  40368a:	f8df b070 	ldr.w	fp, [pc, #112]	; 4036fc <_vfiprintf_r+0xc8c>
  40368e:	e4d5      	b.n	40303c <_vfiprintf_r+0x5cc>
  403690:	9810      	ldr	r0, [sp, #64]	; 0x40
  403692:	4e19      	ldr	r6, [pc, #100]	; (4036f8 <_vfiprintf_r+0xc88>)
  403694:	3001      	adds	r0, #1
  403696:	e603      	b.n	4032a0 <_vfiprintf_r+0x830>
  403698:	9405      	str	r4, [sp, #20]
  40369a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40369e:	9607      	str	r6, [sp, #28]
  4036a0:	9302      	str	r3, [sp, #8]
  4036a2:	4604      	mov	r4, r0
  4036a4:	f7ff bb36 	b.w	402d14 <_vfiprintf_r+0x2a4>
  4036a8:	4686      	mov	lr, r0
  4036aa:	f7ff bbce 	b.w	402e4a <_vfiprintf_r+0x3da>
  4036ae:	9806      	ldr	r0, [sp, #24]
  4036b0:	aa0f      	add	r2, sp, #60	; 0x3c
  4036b2:	4659      	mov	r1, fp
  4036b4:	f7ff f99c 	bl	4029f0 <__sprint_r.part.0>
  4036b8:	2800      	cmp	r0, #0
  4036ba:	f43f ae24 	beq.w	403306 <_vfiprintf_r+0x896>
  4036be:	e624      	b.n	40330a <_vfiprintf_r+0x89a>
  4036c0:	9907      	ldr	r1, [sp, #28]
  4036c2:	f898 2001 	ldrb.w	r2, [r8, #1]
  4036c6:	680c      	ldr	r4, [r1, #0]
  4036c8:	3104      	adds	r1, #4
  4036ca:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4036ce:	46b8      	mov	r8, r7
  4036d0:	9107      	str	r1, [sp, #28]
  4036d2:	f7ff ba3f 	b.w	402b54 <_vfiprintf_r+0xe4>
  4036d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4036da:	e43c      	b.n	402f56 <_vfiprintf_r+0x4e6>
  4036dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4036e0:	e521      	b.n	403126 <_vfiprintf_r+0x6b6>
  4036e2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4036e6:	f7ff bbf4 	b.w	402ed2 <_vfiprintf_r+0x462>
  4036ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4036ee:	e491      	b.n	403014 <_vfiprintf_r+0x5a4>
  4036f0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4036f4:	e469      	b.n	402fca <_vfiprintf_r+0x55a>
  4036f6:	bf00      	nop
  4036f8:	00405440 	.word	0x00405440
  4036fc:	00405438 	.word	0x00405438

00403700 <__sbprintf>:
  403700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403704:	460c      	mov	r4, r1
  403706:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40370a:	8989      	ldrh	r1, [r1, #12]
  40370c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40370e:	89e5      	ldrh	r5, [r4, #14]
  403710:	9619      	str	r6, [sp, #100]	; 0x64
  403712:	f021 0102 	bic.w	r1, r1, #2
  403716:	4606      	mov	r6, r0
  403718:	69e0      	ldr	r0, [r4, #28]
  40371a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40371e:	4617      	mov	r7, r2
  403720:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403724:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403726:	f8ad 500e 	strh.w	r5, [sp, #14]
  40372a:	4698      	mov	r8, r3
  40372c:	ad1a      	add	r5, sp, #104	; 0x68
  40372e:	2300      	movs	r3, #0
  403730:	9007      	str	r0, [sp, #28]
  403732:	a816      	add	r0, sp, #88	; 0x58
  403734:	9209      	str	r2, [sp, #36]	; 0x24
  403736:	9306      	str	r3, [sp, #24]
  403738:	9500      	str	r5, [sp, #0]
  40373a:	9504      	str	r5, [sp, #16]
  40373c:	9102      	str	r1, [sp, #8]
  40373e:	9105      	str	r1, [sp, #20]
  403740:	f000 fd48 	bl	4041d4 <__retarget_lock_init_recursive>
  403744:	4643      	mov	r3, r8
  403746:	463a      	mov	r2, r7
  403748:	4669      	mov	r1, sp
  40374a:	4630      	mov	r0, r6
  40374c:	f7ff f990 	bl	402a70 <_vfiprintf_r>
  403750:	1e05      	subs	r5, r0, #0
  403752:	db07      	blt.n	403764 <__sbprintf+0x64>
  403754:	4630      	mov	r0, r6
  403756:	4669      	mov	r1, sp
  403758:	f000 f928 	bl	4039ac <_fflush_r>
  40375c:	2800      	cmp	r0, #0
  40375e:	bf18      	it	ne
  403760:	f04f 35ff 	movne.w	r5, #4294967295
  403764:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403768:	065b      	lsls	r3, r3, #25
  40376a:	d503      	bpl.n	403774 <__sbprintf+0x74>
  40376c:	89a3      	ldrh	r3, [r4, #12]
  40376e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403772:	81a3      	strh	r3, [r4, #12]
  403774:	9816      	ldr	r0, [sp, #88]	; 0x58
  403776:	f000 fd2f 	bl	4041d8 <__retarget_lock_close_recursive>
  40377a:	4628      	mov	r0, r5
  40377c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403784 <__swsetup_r>:
  403784:	b538      	push	{r3, r4, r5, lr}
  403786:	4b30      	ldr	r3, [pc, #192]	; (403848 <__swsetup_r+0xc4>)
  403788:	681b      	ldr	r3, [r3, #0]
  40378a:	4605      	mov	r5, r0
  40378c:	460c      	mov	r4, r1
  40378e:	b113      	cbz	r3, 403796 <__swsetup_r+0x12>
  403790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403792:	2a00      	cmp	r2, #0
  403794:	d038      	beq.n	403808 <__swsetup_r+0x84>
  403796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40379a:	b293      	uxth	r3, r2
  40379c:	0718      	lsls	r0, r3, #28
  40379e:	d50c      	bpl.n	4037ba <__swsetup_r+0x36>
  4037a0:	6920      	ldr	r0, [r4, #16]
  4037a2:	b1a8      	cbz	r0, 4037d0 <__swsetup_r+0x4c>
  4037a4:	f013 0201 	ands.w	r2, r3, #1
  4037a8:	d01e      	beq.n	4037e8 <__swsetup_r+0x64>
  4037aa:	6963      	ldr	r3, [r4, #20]
  4037ac:	2200      	movs	r2, #0
  4037ae:	425b      	negs	r3, r3
  4037b0:	61a3      	str	r3, [r4, #24]
  4037b2:	60a2      	str	r2, [r4, #8]
  4037b4:	b1f0      	cbz	r0, 4037f4 <__swsetup_r+0x70>
  4037b6:	2000      	movs	r0, #0
  4037b8:	bd38      	pop	{r3, r4, r5, pc}
  4037ba:	06d9      	lsls	r1, r3, #27
  4037bc:	d53c      	bpl.n	403838 <__swsetup_r+0xb4>
  4037be:	0758      	lsls	r0, r3, #29
  4037c0:	d426      	bmi.n	403810 <__swsetup_r+0x8c>
  4037c2:	6920      	ldr	r0, [r4, #16]
  4037c4:	f042 0308 	orr.w	r3, r2, #8
  4037c8:	81a3      	strh	r3, [r4, #12]
  4037ca:	b29b      	uxth	r3, r3
  4037cc:	2800      	cmp	r0, #0
  4037ce:	d1e9      	bne.n	4037a4 <__swsetup_r+0x20>
  4037d0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4037d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4037d8:	d0e4      	beq.n	4037a4 <__swsetup_r+0x20>
  4037da:	4628      	mov	r0, r5
  4037dc:	4621      	mov	r1, r4
  4037de:	f000 fd2f 	bl	404240 <__smakebuf_r>
  4037e2:	89a3      	ldrh	r3, [r4, #12]
  4037e4:	6920      	ldr	r0, [r4, #16]
  4037e6:	e7dd      	b.n	4037a4 <__swsetup_r+0x20>
  4037e8:	0799      	lsls	r1, r3, #30
  4037ea:	bf58      	it	pl
  4037ec:	6962      	ldrpl	r2, [r4, #20]
  4037ee:	60a2      	str	r2, [r4, #8]
  4037f0:	2800      	cmp	r0, #0
  4037f2:	d1e0      	bne.n	4037b6 <__swsetup_r+0x32>
  4037f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4037f8:	061a      	lsls	r2, r3, #24
  4037fa:	d5dd      	bpl.n	4037b8 <__swsetup_r+0x34>
  4037fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403800:	81a3      	strh	r3, [r4, #12]
  403802:	f04f 30ff 	mov.w	r0, #4294967295
  403806:	bd38      	pop	{r3, r4, r5, pc}
  403808:	4618      	mov	r0, r3
  40380a:	f000 f927 	bl	403a5c <__sinit>
  40380e:	e7c2      	b.n	403796 <__swsetup_r+0x12>
  403810:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403812:	b151      	cbz	r1, 40382a <__swsetup_r+0xa6>
  403814:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403818:	4299      	cmp	r1, r3
  40381a:	d004      	beq.n	403826 <__swsetup_r+0xa2>
  40381c:	4628      	mov	r0, r5
  40381e:	f000 fa43 	bl	403ca8 <_free_r>
  403822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403826:	2300      	movs	r3, #0
  403828:	6323      	str	r3, [r4, #48]	; 0x30
  40382a:	2300      	movs	r3, #0
  40382c:	6920      	ldr	r0, [r4, #16]
  40382e:	6063      	str	r3, [r4, #4]
  403830:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403834:	6020      	str	r0, [r4, #0]
  403836:	e7c5      	b.n	4037c4 <__swsetup_r+0x40>
  403838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40383c:	2309      	movs	r3, #9
  40383e:	602b      	str	r3, [r5, #0]
  403840:	f04f 30ff 	mov.w	r0, #4294967295
  403844:	81a2      	strh	r2, [r4, #12]
  403846:	bd38      	pop	{r3, r4, r5, pc}
  403848:	20400010 	.word	0x20400010

0040384c <register_fini>:
  40384c:	4b02      	ldr	r3, [pc, #8]	; (403858 <register_fini+0xc>)
  40384e:	b113      	cbz	r3, 403856 <register_fini+0xa>
  403850:	4802      	ldr	r0, [pc, #8]	; (40385c <register_fini+0x10>)
  403852:	f000 b805 	b.w	403860 <atexit>
  403856:	4770      	bx	lr
  403858:	00000000 	.word	0x00000000
  40385c:	00403acd 	.word	0x00403acd

00403860 <atexit>:
  403860:	2300      	movs	r3, #0
  403862:	4601      	mov	r1, r0
  403864:	461a      	mov	r2, r3
  403866:	4618      	mov	r0, r3
  403868:	f001 bc7e 	b.w	405168 <__register_exitproc>

0040386c <__sflush_r>:
  40386c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403870:	b29a      	uxth	r2, r3
  403872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403876:	460d      	mov	r5, r1
  403878:	0711      	lsls	r1, r2, #28
  40387a:	4680      	mov	r8, r0
  40387c:	d43a      	bmi.n	4038f4 <__sflush_r+0x88>
  40387e:	686a      	ldr	r2, [r5, #4]
  403880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403884:	2a00      	cmp	r2, #0
  403886:	81ab      	strh	r3, [r5, #12]
  403888:	dd6f      	ble.n	40396a <__sflush_r+0xfe>
  40388a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40388c:	2c00      	cmp	r4, #0
  40388e:	d049      	beq.n	403924 <__sflush_r+0xb8>
  403890:	2200      	movs	r2, #0
  403892:	b29b      	uxth	r3, r3
  403894:	f8d8 6000 	ldr.w	r6, [r8]
  403898:	f8c8 2000 	str.w	r2, [r8]
  40389c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4038a0:	d067      	beq.n	403972 <__sflush_r+0x106>
  4038a2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4038a4:	075f      	lsls	r7, r3, #29
  4038a6:	d505      	bpl.n	4038b4 <__sflush_r+0x48>
  4038a8:	6869      	ldr	r1, [r5, #4]
  4038aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4038ac:	1a52      	subs	r2, r2, r1
  4038ae:	b10b      	cbz	r3, 4038b4 <__sflush_r+0x48>
  4038b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4038b2:	1ad2      	subs	r2, r2, r3
  4038b4:	2300      	movs	r3, #0
  4038b6:	69e9      	ldr	r1, [r5, #28]
  4038b8:	4640      	mov	r0, r8
  4038ba:	47a0      	blx	r4
  4038bc:	1c44      	adds	r4, r0, #1
  4038be:	d03c      	beq.n	40393a <__sflush_r+0xce>
  4038c0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4038c4:	692a      	ldr	r2, [r5, #16]
  4038c6:	602a      	str	r2, [r5, #0]
  4038c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4038cc:	2200      	movs	r2, #0
  4038ce:	81ab      	strh	r3, [r5, #12]
  4038d0:	04db      	lsls	r3, r3, #19
  4038d2:	606a      	str	r2, [r5, #4]
  4038d4:	d447      	bmi.n	403966 <__sflush_r+0xfa>
  4038d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4038d8:	f8c8 6000 	str.w	r6, [r8]
  4038dc:	b311      	cbz	r1, 403924 <__sflush_r+0xb8>
  4038de:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4038e2:	4299      	cmp	r1, r3
  4038e4:	d002      	beq.n	4038ec <__sflush_r+0x80>
  4038e6:	4640      	mov	r0, r8
  4038e8:	f000 f9de 	bl	403ca8 <_free_r>
  4038ec:	2000      	movs	r0, #0
  4038ee:	6328      	str	r0, [r5, #48]	; 0x30
  4038f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038f4:	692e      	ldr	r6, [r5, #16]
  4038f6:	b1ae      	cbz	r6, 403924 <__sflush_r+0xb8>
  4038f8:	682c      	ldr	r4, [r5, #0]
  4038fa:	602e      	str	r6, [r5, #0]
  4038fc:	0791      	lsls	r1, r2, #30
  4038fe:	bf0c      	ite	eq
  403900:	696b      	ldreq	r3, [r5, #20]
  403902:	2300      	movne	r3, #0
  403904:	1ba4      	subs	r4, r4, r6
  403906:	60ab      	str	r3, [r5, #8]
  403908:	e00a      	b.n	403920 <__sflush_r+0xb4>
  40390a:	4623      	mov	r3, r4
  40390c:	4632      	mov	r2, r6
  40390e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403910:	69e9      	ldr	r1, [r5, #28]
  403912:	4640      	mov	r0, r8
  403914:	47b8      	blx	r7
  403916:	2800      	cmp	r0, #0
  403918:	eba4 0400 	sub.w	r4, r4, r0
  40391c:	4406      	add	r6, r0
  40391e:	dd04      	ble.n	40392a <__sflush_r+0xbe>
  403920:	2c00      	cmp	r4, #0
  403922:	dcf2      	bgt.n	40390a <__sflush_r+0x9e>
  403924:	2000      	movs	r0, #0
  403926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40392a:	89ab      	ldrh	r3, [r5, #12]
  40392c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403930:	81ab      	strh	r3, [r5, #12]
  403932:	f04f 30ff 	mov.w	r0, #4294967295
  403936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40393a:	f8d8 4000 	ldr.w	r4, [r8]
  40393e:	2c1d      	cmp	r4, #29
  403940:	d8f3      	bhi.n	40392a <__sflush_r+0xbe>
  403942:	4b19      	ldr	r3, [pc, #100]	; (4039a8 <__sflush_r+0x13c>)
  403944:	40e3      	lsrs	r3, r4
  403946:	43db      	mvns	r3, r3
  403948:	f013 0301 	ands.w	r3, r3, #1
  40394c:	d1ed      	bne.n	40392a <__sflush_r+0xbe>
  40394e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403952:	606b      	str	r3, [r5, #4]
  403954:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403958:	6929      	ldr	r1, [r5, #16]
  40395a:	81ab      	strh	r3, [r5, #12]
  40395c:	04da      	lsls	r2, r3, #19
  40395e:	6029      	str	r1, [r5, #0]
  403960:	d5b9      	bpl.n	4038d6 <__sflush_r+0x6a>
  403962:	2c00      	cmp	r4, #0
  403964:	d1b7      	bne.n	4038d6 <__sflush_r+0x6a>
  403966:	6528      	str	r0, [r5, #80]	; 0x50
  403968:	e7b5      	b.n	4038d6 <__sflush_r+0x6a>
  40396a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40396c:	2a00      	cmp	r2, #0
  40396e:	dc8c      	bgt.n	40388a <__sflush_r+0x1e>
  403970:	e7d8      	b.n	403924 <__sflush_r+0xb8>
  403972:	2301      	movs	r3, #1
  403974:	69e9      	ldr	r1, [r5, #28]
  403976:	4640      	mov	r0, r8
  403978:	47a0      	blx	r4
  40397a:	1c43      	adds	r3, r0, #1
  40397c:	4602      	mov	r2, r0
  40397e:	d002      	beq.n	403986 <__sflush_r+0x11a>
  403980:	89ab      	ldrh	r3, [r5, #12]
  403982:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403984:	e78e      	b.n	4038a4 <__sflush_r+0x38>
  403986:	f8d8 3000 	ldr.w	r3, [r8]
  40398a:	2b00      	cmp	r3, #0
  40398c:	d0f8      	beq.n	403980 <__sflush_r+0x114>
  40398e:	2b1d      	cmp	r3, #29
  403990:	d001      	beq.n	403996 <__sflush_r+0x12a>
  403992:	2b16      	cmp	r3, #22
  403994:	d102      	bne.n	40399c <__sflush_r+0x130>
  403996:	f8c8 6000 	str.w	r6, [r8]
  40399a:	e7c3      	b.n	403924 <__sflush_r+0xb8>
  40399c:	89ab      	ldrh	r3, [r5, #12]
  40399e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4039a2:	81ab      	strh	r3, [r5, #12]
  4039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039a8:	20400001 	.word	0x20400001

004039ac <_fflush_r>:
  4039ac:	b538      	push	{r3, r4, r5, lr}
  4039ae:	460d      	mov	r5, r1
  4039b0:	4604      	mov	r4, r0
  4039b2:	b108      	cbz	r0, 4039b8 <_fflush_r+0xc>
  4039b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4039b6:	b1bb      	cbz	r3, 4039e8 <_fflush_r+0x3c>
  4039b8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4039bc:	b188      	cbz	r0, 4039e2 <_fflush_r+0x36>
  4039be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4039c0:	07db      	lsls	r3, r3, #31
  4039c2:	d401      	bmi.n	4039c8 <_fflush_r+0x1c>
  4039c4:	0581      	lsls	r1, r0, #22
  4039c6:	d517      	bpl.n	4039f8 <_fflush_r+0x4c>
  4039c8:	4620      	mov	r0, r4
  4039ca:	4629      	mov	r1, r5
  4039cc:	f7ff ff4e 	bl	40386c <__sflush_r>
  4039d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4039d2:	07da      	lsls	r2, r3, #31
  4039d4:	4604      	mov	r4, r0
  4039d6:	d402      	bmi.n	4039de <_fflush_r+0x32>
  4039d8:	89ab      	ldrh	r3, [r5, #12]
  4039da:	059b      	lsls	r3, r3, #22
  4039dc:	d507      	bpl.n	4039ee <_fflush_r+0x42>
  4039de:	4620      	mov	r0, r4
  4039e0:	bd38      	pop	{r3, r4, r5, pc}
  4039e2:	4604      	mov	r4, r0
  4039e4:	4620      	mov	r0, r4
  4039e6:	bd38      	pop	{r3, r4, r5, pc}
  4039e8:	f000 f838 	bl	403a5c <__sinit>
  4039ec:	e7e4      	b.n	4039b8 <_fflush_r+0xc>
  4039ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4039f0:	f000 fbf6 	bl	4041e0 <__retarget_lock_release_recursive>
  4039f4:	4620      	mov	r0, r4
  4039f6:	bd38      	pop	{r3, r4, r5, pc}
  4039f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4039fa:	f000 fbef 	bl	4041dc <__retarget_lock_acquire_recursive>
  4039fe:	e7e3      	b.n	4039c8 <_fflush_r+0x1c>

00403a00 <_cleanup_r>:
  403a00:	4901      	ldr	r1, [pc, #4]	; (403a08 <_cleanup_r+0x8>)
  403a02:	f000 bbaf 	b.w	404164 <_fwalk_reent>
  403a06:	bf00      	nop
  403a08:	00405251 	.word	0x00405251

00403a0c <std.isra.0>:
  403a0c:	b510      	push	{r4, lr}
  403a0e:	2300      	movs	r3, #0
  403a10:	4604      	mov	r4, r0
  403a12:	8181      	strh	r1, [r0, #12]
  403a14:	81c2      	strh	r2, [r0, #14]
  403a16:	6003      	str	r3, [r0, #0]
  403a18:	6043      	str	r3, [r0, #4]
  403a1a:	6083      	str	r3, [r0, #8]
  403a1c:	6643      	str	r3, [r0, #100]	; 0x64
  403a1e:	6103      	str	r3, [r0, #16]
  403a20:	6143      	str	r3, [r0, #20]
  403a22:	6183      	str	r3, [r0, #24]
  403a24:	4619      	mov	r1, r3
  403a26:	2208      	movs	r2, #8
  403a28:	305c      	adds	r0, #92	; 0x5c
  403a2a:	f7fe fec3 	bl	4027b4 <memset>
  403a2e:	4807      	ldr	r0, [pc, #28]	; (403a4c <std.isra.0+0x40>)
  403a30:	4907      	ldr	r1, [pc, #28]	; (403a50 <std.isra.0+0x44>)
  403a32:	4a08      	ldr	r2, [pc, #32]	; (403a54 <std.isra.0+0x48>)
  403a34:	4b08      	ldr	r3, [pc, #32]	; (403a58 <std.isra.0+0x4c>)
  403a36:	6220      	str	r0, [r4, #32]
  403a38:	61e4      	str	r4, [r4, #28]
  403a3a:	6261      	str	r1, [r4, #36]	; 0x24
  403a3c:	62a2      	str	r2, [r4, #40]	; 0x28
  403a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
  403a40:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403a48:	f000 bbc4 	b.w	4041d4 <__retarget_lock_init_recursive>
  403a4c:	00404e95 	.word	0x00404e95
  403a50:	00404eb9 	.word	0x00404eb9
  403a54:	00404ef5 	.word	0x00404ef5
  403a58:	00404f15 	.word	0x00404f15

00403a5c <__sinit>:
  403a5c:	b510      	push	{r4, lr}
  403a5e:	4604      	mov	r4, r0
  403a60:	4812      	ldr	r0, [pc, #72]	; (403aac <__sinit+0x50>)
  403a62:	f000 fbbb 	bl	4041dc <__retarget_lock_acquire_recursive>
  403a66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403a68:	b9d2      	cbnz	r2, 403aa0 <__sinit+0x44>
  403a6a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403a6e:	4810      	ldr	r0, [pc, #64]	; (403ab0 <__sinit+0x54>)
  403a70:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403a74:	2103      	movs	r1, #3
  403a76:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403a7a:	63e0      	str	r0, [r4, #60]	; 0x3c
  403a7c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403a80:	6860      	ldr	r0, [r4, #4]
  403a82:	2104      	movs	r1, #4
  403a84:	f7ff ffc2 	bl	403a0c <std.isra.0>
  403a88:	2201      	movs	r2, #1
  403a8a:	2109      	movs	r1, #9
  403a8c:	68a0      	ldr	r0, [r4, #8]
  403a8e:	f7ff ffbd 	bl	403a0c <std.isra.0>
  403a92:	2202      	movs	r2, #2
  403a94:	2112      	movs	r1, #18
  403a96:	68e0      	ldr	r0, [r4, #12]
  403a98:	f7ff ffb8 	bl	403a0c <std.isra.0>
  403a9c:	2301      	movs	r3, #1
  403a9e:	63a3      	str	r3, [r4, #56]	; 0x38
  403aa0:	4802      	ldr	r0, [pc, #8]	; (403aac <__sinit+0x50>)
  403aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403aa6:	f000 bb9b 	b.w	4041e0 <__retarget_lock_release_recursive>
  403aaa:	bf00      	nop
  403aac:	20400aa4 	.word	0x20400aa4
  403ab0:	00403a01 	.word	0x00403a01

00403ab4 <__sfp_lock_acquire>:
  403ab4:	4801      	ldr	r0, [pc, #4]	; (403abc <__sfp_lock_acquire+0x8>)
  403ab6:	f000 bb91 	b.w	4041dc <__retarget_lock_acquire_recursive>
  403aba:	bf00      	nop
  403abc:	20400ab8 	.word	0x20400ab8

00403ac0 <__sfp_lock_release>:
  403ac0:	4801      	ldr	r0, [pc, #4]	; (403ac8 <__sfp_lock_release+0x8>)
  403ac2:	f000 bb8d 	b.w	4041e0 <__retarget_lock_release_recursive>
  403ac6:	bf00      	nop
  403ac8:	20400ab8 	.word	0x20400ab8

00403acc <__libc_fini_array>:
  403acc:	b538      	push	{r3, r4, r5, lr}
  403ace:	4c0a      	ldr	r4, [pc, #40]	; (403af8 <__libc_fini_array+0x2c>)
  403ad0:	4d0a      	ldr	r5, [pc, #40]	; (403afc <__libc_fini_array+0x30>)
  403ad2:	1b64      	subs	r4, r4, r5
  403ad4:	10a4      	asrs	r4, r4, #2
  403ad6:	d00a      	beq.n	403aee <__libc_fini_array+0x22>
  403ad8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403adc:	3b01      	subs	r3, #1
  403ade:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403ae2:	3c01      	subs	r4, #1
  403ae4:	f855 3904 	ldr.w	r3, [r5], #-4
  403ae8:	4798      	blx	r3
  403aea:	2c00      	cmp	r4, #0
  403aec:	d1f9      	bne.n	403ae2 <__libc_fini_array+0x16>
  403aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403af2:	f001 bd49 	b.w	405588 <_fini>
  403af6:	bf00      	nop
  403af8:	00405598 	.word	0x00405598
  403afc:	00405594 	.word	0x00405594

00403b00 <__fputwc>:
  403b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403b04:	b082      	sub	sp, #8
  403b06:	4680      	mov	r8, r0
  403b08:	4689      	mov	r9, r1
  403b0a:	4614      	mov	r4, r2
  403b0c:	f000 fb54 	bl	4041b8 <__locale_mb_cur_max>
  403b10:	2801      	cmp	r0, #1
  403b12:	d036      	beq.n	403b82 <__fputwc+0x82>
  403b14:	464a      	mov	r2, r9
  403b16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403b1a:	a901      	add	r1, sp, #4
  403b1c:	4640      	mov	r0, r8
  403b1e:	f001 fad5 	bl	4050cc <_wcrtomb_r>
  403b22:	1c42      	adds	r2, r0, #1
  403b24:	4606      	mov	r6, r0
  403b26:	d025      	beq.n	403b74 <__fputwc+0x74>
  403b28:	b3a8      	cbz	r0, 403b96 <__fputwc+0x96>
  403b2a:	f89d e004 	ldrb.w	lr, [sp, #4]
  403b2e:	2500      	movs	r5, #0
  403b30:	f10d 0a04 	add.w	sl, sp, #4
  403b34:	e009      	b.n	403b4a <__fputwc+0x4a>
  403b36:	6823      	ldr	r3, [r4, #0]
  403b38:	1c5a      	adds	r2, r3, #1
  403b3a:	6022      	str	r2, [r4, #0]
  403b3c:	f883 e000 	strb.w	lr, [r3]
  403b40:	3501      	adds	r5, #1
  403b42:	42b5      	cmp	r5, r6
  403b44:	d227      	bcs.n	403b96 <__fputwc+0x96>
  403b46:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403b4a:	68a3      	ldr	r3, [r4, #8]
  403b4c:	3b01      	subs	r3, #1
  403b4e:	2b00      	cmp	r3, #0
  403b50:	60a3      	str	r3, [r4, #8]
  403b52:	daf0      	bge.n	403b36 <__fputwc+0x36>
  403b54:	69a7      	ldr	r7, [r4, #24]
  403b56:	42bb      	cmp	r3, r7
  403b58:	4671      	mov	r1, lr
  403b5a:	4622      	mov	r2, r4
  403b5c:	4640      	mov	r0, r8
  403b5e:	db02      	blt.n	403b66 <__fputwc+0x66>
  403b60:	f1be 0f0a 	cmp.w	lr, #10
  403b64:	d1e7      	bne.n	403b36 <__fputwc+0x36>
  403b66:	f001 fa59 	bl	40501c <__swbuf_r>
  403b6a:	1c43      	adds	r3, r0, #1
  403b6c:	d1e8      	bne.n	403b40 <__fputwc+0x40>
  403b6e:	b002      	add	sp, #8
  403b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b74:	89a3      	ldrh	r3, [r4, #12]
  403b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b7a:	81a3      	strh	r3, [r4, #12]
  403b7c:	b002      	add	sp, #8
  403b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b82:	f109 33ff 	add.w	r3, r9, #4294967295
  403b86:	2bfe      	cmp	r3, #254	; 0xfe
  403b88:	d8c4      	bhi.n	403b14 <__fputwc+0x14>
  403b8a:	fa5f fe89 	uxtb.w	lr, r9
  403b8e:	4606      	mov	r6, r0
  403b90:	f88d e004 	strb.w	lr, [sp, #4]
  403b94:	e7cb      	b.n	403b2e <__fputwc+0x2e>
  403b96:	4648      	mov	r0, r9
  403b98:	b002      	add	sp, #8
  403b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b9e:	bf00      	nop

00403ba0 <_fputwc_r>:
  403ba0:	b530      	push	{r4, r5, lr}
  403ba2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403ba4:	f013 0f01 	tst.w	r3, #1
  403ba8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403bac:	4614      	mov	r4, r2
  403bae:	b083      	sub	sp, #12
  403bb0:	4605      	mov	r5, r0
  403bb2:	b29a      	uxth	r2, r3
  403bb4:	d101      	bne.n	403bba <_fputwc_r+0x1a>
  403bb6:	0590      	lsls	r0, r2, #22
  403bb8:	d51c      	bpl.n	403bf4 <_fputwc_r+0x54>
  403bba:	0490      	lsls	r0, r2, #18
  403bbc:	d406      	bmi.n	403bcc <_fputwc_r+0x2c>
  403bbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403bc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403bc8:	81a3      	strh	r3, [r4, #12]
  403bca:	6662      	str	r2, [r4, #100]	; 0x64
  403bcc:	4628      	mov	r0, r5
  403bce:	4622      	mov	r2, r4
  403bd0:	f7ff ff96 	bl	403b00 <__fputwc>
  403bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403bd6:	07da      	lsls	r2, r3, #31
  403bd8:	4605      	mov	r5, r0
  403bda:	d402      	bmi.n	403be2 <_fputwc_r+0x42>
  403bdc:	89a3      	ldrh	r3, [r4, #12]
  403bde:	059b      	lsls	r3, r3, #22
  403be0:	d502      	bpl.n	403be8 <_fputwc_r+0x48>
  403be2:	4628      	mov	r0, r5
  403be4:	b003      	add	sp, #12
  403be6:	bd30      	pop	{r4, r5, pc}
  403be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403bea:	f000 faf9 	bl	4041e0 <__retarget_lock_release_recursive>
  403bee:	4628      	mov	r0, r5
  403bf0:	b003      	add	sp, #12
  403bf2:	bd30      	pop	{r4, r5, pc}
  403bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403bf6:	9101      	str	r1, [sp, #4]
  403bf8:	f000 faf0 	bl	4041dc <__retarget_lock_acquire_recursive>
  403bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c00:	9901      	ldr	r1, [sp, #4]
  403c02:	b29a      	uxth	r2, r3
  403c04:	e7d9      	b.n	403bba <_fputwc_r+0x1a>
  403c06:	bf00      	nop

00403c08 <_malloc_trim_r>:
  403c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c0a:	4f24      	ldr	r7, [pc, #144]	; (403c9c <_malloc_trim_r+0x94>)
  403c0c:	460c      	mov	r4, r1
  403c0e:	4606      	mov	r6, r0
  403c10:	f000 ff7c 	bl	404b0c <__malloc_lock>
  403c14:	68bb      	ldr	r3, [r7, #8]
  403c16:	685d      	ldr	r5, [r3, #4]
  403c18:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403c1c:	310f      	adds	r1, #15
  403c1e:	f025 0503 	bic.w	r5, r5, #3
  403c22:	4429      	add	r1, r5
  403c24:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403c28:	f021 010f 	bic.w	r1, r1, #15
  403c2c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403c30:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403c34:	db07      	blt.n	403c46 <_malloc_trim_r+0x3e>
  403c36:	2100      	movs	r1, #0
  403c38:	4630      	mov	r0, r6
  403c3a:	f001 f919 	bl	404e70 <_sbrk_r>
  403c3e:	68bb      	ldr	r3, [r7, #8]
  403c40:	442b      	add	r3, r5
  403c42:	4298      	cmp	r0, r3
  403c44:	d004      	beq.n	403c50 <_malloc_trim_r+0x48>
  403c46:	4630      	mov	r0, r6
  403c48:	f000 ff66 	bl	404b18 <__malloc_unlock>
  403c4c:	2000      	movs	r0, #0
  403c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c50:	4261      	negs	r1, r4
  403c52:	4630      	mov	r0, r6
  403c54:	f001 f90c 	bl	404e70 <_sbrk_r>
  403c58:	3001      	adds	r0, #1
  403c5a:	d00d      	beq.n	403c78 <_malloc_trim_r+0x70>
  403c5c:	4b10      	ldr	r3, [pc, #64]	; (403ca0 <_malloc_trim_r+0x98>)
  403c5e:	68ba      	ldr	r2, [r7, #8]
  403c60:	6819      	ldr	r1, [r3, #0]
  403c62:	1b2d      	subs	r5, r5, r4
  403c64:	f045 0501 	orr.w	r5, r5, #1
  403c68:	4630      	mov	r0, r6
  403c6a:	1b09      	subs	r1, r1, r4
  403c6c:	6055      	str	r5, [r2, #4]
  403c6e:	6019      	str	r1, [r3, #0]
  403c70:	f000 ff52 	bl	404b18 <__malloc_unlock>
  403c74:	2001      	movs	r0, #1
  403c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c78:	2100      	movs	r1, #0
  403c7a:	4630      	mov	r0, r6
  403c7c:	f001 f8f8 	bl	404e70 <_sbrk_r>
  403c80:	68ba      	ldr	r2, [r7, #8]
  403c82:	1a83      	subs	r3, r0, r2
  403c84:	2b0f      	cmp	r3, #15
  403c86:	ddde      	ble.n	403c46 <_malloc_trim_r+0x3e>
  403c88:	4c06      	ldr	r4, [pc, #24]	; (403ca4 <_malloc_trim_r+0x9c>)
  403c8a:	4905      	ldr	r1, [pc, #20]	; (403ca0 <_malloc_trim_r+0x98>)
  403c8c:	6824      	ldr	r4, [r4, #0]
  403c8e:	f043 0301 	orr.w	r3, r3, #1
  403c92:	1b00      	subs	r0, r0, r4
  403c94:	6053      	str	r3, [r2, #4]
  403c96:	6008      	str	r0, [r1, #0]
  403c98:	e7d5      	b.n	403c46 <_malloc_trim_r+0x3e>
  403c9a:	bf00      	nop
  403c9c:	204005b0 	.word	0x204005b0
  403ca0:	20400a58 	.word	0x20400a58
  403ca4:	204009b8 	.word	0x204009b8

00403ca8 <_free_r>:
  403ca8:	2900      	cmp	r1, #0
  403caa:	d044      	beq.n	403d36 <_free_r+0x8e>
  403cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403cb0:	460d      	mov	r5, r1
  403cb2:	4680      	mov	r8, r0
  403cb4:	f000 ff2a 	bl	404b0c <__malloc_lock>
  403cb8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403cbc:	4969      	ldr	r1, [pc, #420]	; (403e64 <_free_r+0x1bc>)
  403cbe:	f027 0301 	bic.w	r3, r7, #1
  403cc2:	f1a5 0408 	sub.w	r4, r5, #8
  403cc6:	18e2      	adds	r2, r4, r3
  403cc8:	688e      	ldr	r6, [r1, #8]
  403cca:	6850      	ldr	r0, [r2, #4]
  403ccc:	42b2      	cmp	r2, r6
  403cce:	f020 0003 	bic.w	r0, r0, #3
  403cd2:	d05e      	beq.n	403d92 <_free_r+0xea>
  403cd4:	07fe      	lsls	r6, r7, #31
  403cd6:	6050      	str	r0, [r2, #4]
  403cd8:	d40b      	bmi.n	403cf2 <_free_r+0x4a>
  403cda:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403cde:	1be4      	subs	r4, r4, r7
  403ce0:	f101 0e08 	add.w	lr, r1, #8
  403ce4:	68a5      	ldr	r5, [r4, #8]
  403ce6:	4575      	cmp	r5, lr
  403ce8:	443b      	add	r3, r7
  403cea:	d06d      	beq.n	403dc8 <_free_r+0x120>
  403cec:	68e7      	ldr	r7, [r4, #12]
  403cee:	60ef      	str	r7, [r5, #12]
  403cf0:	60bd      	str	r5, [r7, #8]
  403cf2:	1815      	adds	r5, r2, r0
  403cf4:	686d      	ldr	r5, [r5, #4]
  403cf6:	07ed      	lsls	r5, r5, #31
  403cf8:	d53e      	bpl.n	403d78 <_free_r+0xd0>
  403cfa:	f043 0201 	orr.w	r2, r3, #1
  403cfe:	6062      	str	r2, [r4, #4]
  403d00:	50e3      	str	r3, [r4, r3]
  403d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403d06:	d217      	bcs.n	403d38 <_free_r+0x90>
  403d08:	08db      	lsrs	r3, r3, #3
  403d0a:	1c58      	adds	r0, r3, #1
  403d0c:	109a      	asrs	r2, r3, #2
  403d0e:	684d      	ldr	r5, [r1, #4]
  403d10:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403d14:	60a7      	str	r7, [r4, #8]
  403d16:	2301      	movs	r3, #1
  403d18:	4093      	lsls	r3, r2
  403d1a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403d1e:	432b      	orrs	r3, r5
  403d20:	3a08      	subs	r2, #8
  403d22:	60e2      	str	r2, [r4, #12]
  403d24:	604b      	str	r3, [r1, #4]
  403d26:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403d2a:	60fc      	str	r4, [r7, #12]
  403d2c:	4640      	mov	r0, r8
  403d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403d32:	f000 bef1 	b.w	404b18 <__malloc_unlock>
  403d36:	4770      	bx	lr
  403d38:	0a5a      	lsrs	r2, r3, #9
  403d3a:	2a04      	cmp	r2, #4
  403d3c:	d852      	bhi.n	403de4 <_free_r+0x13c>
  403d3e:	099a      	lsrs	r2, r3, #6
  403d40:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403d44:	00ff      	lsls	r7, r7, #3
  403d46:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403d4a:	19c8      	adds	r0, r1, r7
  403d4c:	59ca      	ldr	r2, [r1, r7]
  403d4e:	3808      	subs	r0, #8
  403d50:	4290      	cmp	r0, r2
  403d52:	d04f      	beq.n	403df4 <_free_r+0x14c>
  403d54:	6851      	ldr	r1, [r2, #4]
  403d56:	f021 0103 	bic.w	r1, r1, #3
  403d5a:	428b      	cmp	r3, r1
  403d5c:	d232      	bcs.n	403dc4 <_free_r+0x11c>
  403d5e:	6892      	ldr	r2, [r2, #8]
  403d60:	4290      	cmp	r0, r2
  403d62:	d1f7      	bne.n	403d54 <_free_r+0xac>
  403d64:	68c3      	ldr	r3, [r0, #12]
  403d66:	60a0      	str	r0, [r4, #8]
  403d68:	60e3      	str	r3, [r4, #12]
  403d6a:	609c      	str	r4, [r3, #8]
  403d6c:	60c4      	str	r4, [r0, #12]
  403d6e:	4640      	mov	r0, r8
  403d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403d74:	f000 bed0 	b.w	404b18 <__malloc_unlock>
  403d78:	6895      	ldr	r5, [r2, #8]
  403d7a:	4f3b      	ldr	r7, [pc, #236]	; (403e68 <_free_r+0x1c0>)
  403d7c:	42bd      	cmp	r5, r7
  403d7e:	4403      	add	r3, r0
  403d80:	d040      	beq.n	403e04 <_free_r+0x15c>
  403d82:	68d0      	ldr	r0, [r2, #12]
  403d84:	60e8      	str	r0, [r5, #12]
  403d86:	f043 0201 	orr.w	r2, r3, #1
  403d8a:	6085      	str	r5, [r0, #8]
  403d8c:	6062      	str	r2, [r4, #4]
  403d8e:	50e3      	str	r3, [r4, r3]
  403d90:	e7b7      	b.n	403d02 <_free_r+0x5a>
  403d92:	07ff      	lsls	r7, r7, #31
  403d94:	4403      	add	r3, r0
  403d96:	d407      	bmi.n	403da8 <_free_r+0x100>
  403d98:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403d9c:	1aa4      	subs	r4, r4, r2
  403d9e:	4413      	add	r3, r2
  403da0:	68a0      	ldr	r0, [r4, #8]
  403da2:	68e2      	ldr	r2, [r4, #12]
  403da4:	60c2      	str	r2, [r0, #12]
  403da6:	6090      	str	r0, [r2, #8]
  403da8:	4a30      	ldr	r2, [pc, #192]	; (403e6c <_free_r+0x1c4>)
  403daa:	6812      	ldr	r2, [r2, #0]
  403dac:	f043 0001 	orr.w	r0, r3, #1
  403db0:	4293      	cmp	r3, r2
  403db2:	6060      	str	r0, [r4, #4]
  403db4:	608c      	str	r4, [r1, #8]
  403db6:	d3b9      	bcc.n	403d2c <_free_r+0x84>
  403db8:	4b2d      	ldr	r3, [pc, #180]	; (403e70 <_free_r+0x1c8>)
  403dba:	4640      	mov	r0, r8
  403dbc:	6819      	ldr	r1, [r3, #0]
  403dbe:	f7ff ff23 	bl	403c08 <_malloc_trim_r>
  403dc2:	e7b3      	b.n	403d2c <_free_r+0x84>
  403dc4:	4610      	mov	r0, r2
  403dc6:	e7cd      	b.n	403d64 <_free_r+0xbc>
  403dc8:	1811      	adds	r1, r2, r0
  403dca:	6849      	ldr	r1, [r1, #4]
  403dcc:	07c9      	lsls	r1, r1, #31
  403dce:	d444      	bmi.n	403e5a <_free_r+0x1b2>
  403dd0:	6891      	ldr	r1, [r2, #8]
  403dd2:	68d2      	ldr	r2, [r2, #12]
  403dd4:	60ca      	str	r2, [r1, #12]
  403dd6:	4403      	add	r3, r0
  403dd8:	f043 0001 	orr.w	r0, r3, #1
  403ddc:	6091      	str	r1, [r2, #8]
  403dde:	6060      	str	r0, [r4, #4]
  403de0:	50e3      	str	r3, [r4, r3]
  403de2:	e7a3      	b.n	403d2c <_free_r+0x84>
  403de4:	2a14      	cmp	r2, #20
  403de6:	d816      	bhi.n	403e16 <_free_r+0x16e>
  403de8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403dec:	00ff      	lsls	r7, r7, #3
  403dee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403df2:	e7aa      	b.n	403d4a <_free_r+0xa2>
  403df4:	10aa      	asrs	r2, r5, #2
  403df6:	2301      	movs	r3, #1
  403df8:	684d      	ldr	r5, [r1, #4]
  403dfa:	4093      	lsls	r3, r2
  403dfc:	432b      	orrs	r3, r5
  403dfe:	604b      	str	r3, [r1, #4]
  403e00:	4603      	mov	r3, r0
  403e02:	e7b0      	b.n	403d66 <_free_r+0xbe>
  403e04:	f043 0201 	orr.w	r2, r3, #1
  403e08:	614c      	str	r4, [r1, #20]
  403e0a:	610c      	str	r4, [r1, #16]
  403e0c:	60e5      	str	r5, [r4, #12]
  403e0e:	60a5      	str	r5, [r4, #8]
  403e10:	6062      	str	r2, [r4, #4]
  403e12:	50e3      	str	r3, [r4, r3]
  403e14:	e78a      	b.n	403d2c <_free_r+0x84>
  403e16:	2a54      	cmp	r2, #84	; 0x54
  403e18:	d806      	bhi.n	403e28 <_free_r+0x180>
  403e1a:	0b1a      	lsrs	r2, r3, #12
  403e1c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403e20:	00ff      	lsls	r7, r7, #3
  403e22:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403e26:	e790      	b.n	403d4a <_free_r+0xa2>
  403e28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403e2c:	d806      	bhi.n	403e3c <_free_r+0x194>
  403e2e:	0bda      	lsrs	r2, r3, #15
  403e30:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403e34:	00ff      	lsls	r7, r7, #3
  403e36:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403e3a:	e786      	b.n	403d4a <_free_r+0xa2>
  403e3c:	f240 5054 	movw	r0, #1364	; 0x554
  403e40:	4282      	cmp	r2, r0
  403e42:	d806      	bhi.n	403e52 <_free_r+0x1aa>
  403e44:	0c9a      	lsrs	r2, r3, #18
  403e46:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403e4a:	00ff      	lsls	r7, r7, #3
  403e4c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403e50:	e77b      	b.n	403d4a <_free_r+0xa2>
  403e52:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403e56:	257e      	movs	r5, #126	; 0x7e
  403e58:	e777      	b.n	403d4a <_free_r+0xa2>
  403e5a:	f043 0101 	orr.w	r1, r3, #1
  403e5e:	6061      	str	r1, [r4, #4]
  403e60:	6013      	str	r3, [r2, #0]
  403e62:	e763      	b.n	403d2c <_free_r+0x84>
  403e64:	204005b0 	.word	0x204005b0
  403e68:	204005b8 	.word	0x204005b8
  403e6c:	204009bc 	.word	0x204009bc
  403e70:	20400a88 	.word	0x20400a88

00403e74 <__sfvwrite_r>:
  403e74:	6893      	ldr	r3, [r2, #8]
  403e76:	2b00      	cmp	r3, #0
  403e78:	d073      	beq.n	403f62 <__sfvwrite_r+0xee>
  403e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e7e:	898b      	ldrh	r3, [r1, #12]
  403e80:	b083      	sub	sp, #12
  403e82:	460c      	mov	r4, r1
  403e84:	0719      	lsls	r1, r3, #28
  403e86:	9000      	str	r0, [sp, #0]
  403e88:	4616      	mov	r6, r2
  403e8a:	d526      	bpl.n	403eda <__sfvwrite_r+0x66>
  403e8c:	6922      	ldr	r2, [r4, #16]
  403e8e:	b322      	cbz	r2, 403eda <__sfvwrite_r+0x66>
  403e90:	f013 0002 	ands.w	r0, r3, #2
  403e94:	6835      	ldr	r5, [r6, #0]
  403e96:	d02c      	beq.n	403ef2 <__sfvwrite_r+0x7e>
  403e98:	f04f 0900 	mov.w	r9, #0
  403e9c:	4fb0      	ldr	r7, [pc, #704]	; (404160 <__sfvwrite_r+0x2ec>)
  403e9e:	46c8      	mov	r8, r9
  403ea0:	46b2      	mov	sl, r6
  403ea2:	45b8      	cmp	r8, r7
  403ea4:	4643      	mov	r3, r8
  403ea6:	464a      	mov	r2, r9
  403ea8:	bf28      	it	cs
  403eaa:	463b      	movcs	r3, r7
  403eac:	9800      	ldr	r0, [sp, #0]
  403eae:	f1b8 0f00 	cmp.w	r8, #0
  403eb2:	d050      	beq.n	403f56 <__sfvwrite_r+0xe2>
  403eb4:	69e1      	ldr	r1, [r4, #28]
  403eb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403eb8:	47b0      	blx	r6
  403eba:	2800      	cmp	r0, #0
  403ebc:	dd58      	ble.n	403f70 <__sfvwrite_r+0xfc>
  403ebe:	f8da 3008 	ldr.w	r3, [sl, #8]
  403ec2:	1a1b      	subs	r3, r3, r0
  403ec4:	4481      	add	r9, r0
  403ec6:	eba8 0800 	sub.w	r8, r8, r0
  403eca:	f8ca 3008 	str.w	r3, [sl, #8]
  403ece:	2b00      	cmp	r3, #0
  403ed0:	d1e7      	bne.n	403ea2 <__sfvwrite_r+0x2e>
  403ed2:	2000      	movs	r0, #0
  403ed4:	b003      	add	sp, #12
  403ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403eda:	4621      	mov	r1, r4
  403edc:	9800      	ldr	r0, [sp, #0]
  403ede:	f7ff fc51 	bl	403784 <__swsetup_r>
  403ee2:	2800      	cmp	r0, #0
  403ee4:	f040 8133 	bne.w	40414e <__sfvwrite_r+0x2da>
  403ee8:	89a3      	ldrh	r3, [r4, #12]
  403eea:	6835      	ldr	r5, [r6, #0]
  403eec:	f013 0002 	ands.w	r0, r3, #2
  403ef0:	d1d2      	bne.n	403e98 <__sfvwrite_r+0x24>
  403ef2:	f013 0901 	ands.w	r9, r3, #1
  403ef6:	d145      	bne.n	403f84 <__sfvwrite_r+0x110>
  403ef8:	464f      	mov	r7, r9
  403efa:	9601      	str	r6, [sp, #4]
  403efc:	b337      	cbz	r7, 403f4c <__sfvwrite_r+0xd8>
  403efe:	059a      	lsls	r2, r3, #22
  403f00:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403f04:	f140 8083 	bpl.w	40400e <__sfvwrite_r+0x19a>
  403f08:	4547      	cmp	r7, r8
  403f0a:	46c3      	mov	fp, r8
  403f0c:	f0c0 80ab 	bcc.w	404066 <__sfvwrite_r+0x1f2>
  403f10:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403f14:	f040 80ac 	bne.w	404070 <__sfvwrite_r+0x1fc>
  403f18:	6820      	ldr	r0, [r4, #0]
  403f1a:	46ba      	mov	sl, r7
  403f1c:	465a      	mov	r2, fp
  403f1e:	4649      	mov	r1, r9
  403f20:	f000 fd90 	bl	404a44 <memmove>
  403f24:	68a2      	ldr	r2, [r4, #8]
  403f26:	6823      	ldr	r3, [r4, #0]
  403f28:	eba2 0208 	sub.w	r2, r2, r8
  403f2c:	445b      	add	r3, fp
  403f2e:	60a2      	str	r2, [r4, #8]
  403f30:	6023      	str	r3, [r4, #0]
  403f32:	9a01      	ldr	r2, [sp, #4]
  403f34:	6893      	ldr	r3, [r2, #8]
  403f36:	eba3 030a 	sub.w	r3, r3, sl
  403f3a:	44d1      	add	r9, sl
  403f3c:	eba7 070a 	sub.w	r7, r7, sl
  403f40:	6093      	str	r3, [r2, #8]
  403f42:	2b00      	cmp	r3, #0
  403f44:	d0c5      	beq.n	403ed2 <__sfvwrite_r+0x5e>
  403f46:	89a3      	ldrh	r3, [r4, #12]
  403f48:	2f00      	cmp	r7, #0
  403f4a:	d1d8      	bne.n	403efe <__sfvwrite_r+0x8a>
  403f4c:	f8d5 9000 	ldr.w	r9, [r5]
  403f50:	686f      	ldr	r7, [r5, #4]
  403f52:	3508      	adds	r5, #8
  403f54:	e7d2      	b.n	403efc <__sfvwrite_r+0x88>
  403f56:	f8d5 9000 	ldr.w	r9, [r5]
  403f5a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403f5e:	3508      	adds	r5, #8
  403f60:	e79f      	b.n	403ea2 <__sfvwrite_r+0x2e>
  403f62:	2000      	movs	r0, #0
  403f64:	4770      	bx	lr
  403f66:	4621      	mov	r1, r4
  403f68:	9800      	ldr	r0, [sp, #0]
  403f6a:	f7ff fd1f 	bl	4039ac <_fflush_r>
  403f6e:	b370      	cbz	r0, 403fce <__sfvwrite_r+0x15a>
  403f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f78:	f04f 30ff 	mov.w	r0, #4294967295
  403f7c:	81a3      	strh	r3, [r4, #12]
  403f7e:	b003      	add	sp, #12
  403f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f84:	4681      	mov	r9, r0
  403f86:	4633      	mov	r3, r6
  403f88:	464e      	mov	r6, r9
  403f8a:	46a8      	mov	r8, r5
  403f8c:	469a      	mov	sl, r3
  403f8e:	464d      	mov	r5, r9
  403f90:	b34e      	cbz	r6, 403fe6 <__sfvwrite_r+0x172>
  403f92:	b380      	cbz	r0, 403ff6 <__sfvwrite_r+0x182>
  403f94:	6820      	ldr	r0, [r4, #0]
  403f96:	6923      	ldr	r3, [r4, #16]
  403f98:	6962      	ldr	r2, [r4, #20]
  403f9a:	45b1      	cmp	r9, r6
  403f9c:	46cb      	mov	fp, r9
  403f9e:	bf28      	it	cs
  403fa0:	46b3      	movcs	fp, r6
  403fa2:	4298      	cmp	r0, r3
  403fa4:	465f      	mov	r7, fp
  403fa6:	d904      	bls.n	403fb2 <__sfvwrite_r+0x13e>
  403fa8:	68a3      	ldr	r3, [r4, #8]
  403faa:	4413      	add	r3, r2
  403fac:	459b      	cmp	fp, r3
  403fae:	f300 80a6 	bgt.w	4040fe <__sfvwrite_r+0x28a>
  403fb2:	4593      	cmp	fp, r2
  403fb4:	db4b      	blt.n	40404e <__sfvwrite_r+0x1da>
  403fb6:	4613      	mov	r3, r2
  403fb8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403fba:	69e1      	ldr	r1, [r4, #28]
  403fbc:	9800      	ldr	r0, [sp, #0]
  403fbe:	462a      	mov	r2, r5
  403fc0:	47b8      	blx	r7
  403fc2:	1e07      	subs	r7, r0, #0
  403fc4:	ddd4      	ble.n	403f70 <__sfvwrite_r+0xfc>
  403fc6:	ebb9 0907 	subs.w	r9, r9, r7
  403fca:	d0cc      	beq.n	403f66 <__sfvwrite_r+0xf2>
  403fcc:	2001      	movs	r0, #1
  403fce:	f8da 3008 	ldr.w	r3, [sl, #8]
  403fd2:	1bdb      	subs	r3, r3, r7
  403fd4:	443d      	add	r5, r7
  403fd6:	1bf6      	subs	r6, r6, r7
  403fd8:	f8ca 3008 	str.w	r3, [sl, #8]
  403fdc:	2b00      	cmp	r3, #0
  403fde:	f43f af78 	beq.w	403ed2 <__sfvwrite_r+0x5e>
  403fe2:	2e00      	cmp	r6, #0
  403fe4:	d1d5      	bne.n	403f92 <__sfvwrite_r+0x11e>
  403fe6:	f108 0308 	add.w	r3, r8, #8
  403fea:	e913 0060 	ldmdb	r3, {r5, r6}
  403fee:	4698      	mov	r8, r3
  403ff0:	3308      	adds	r3, #8
  403ff2:	2e00      	cmp	r6, #0
  403ff4:	d0f9      	beq.n	403fea <__sfvwrite_r+0x176>
  403ff6:	4632      	mov	r2, r6
  403ff8:	210a      	movs	r1, #10
  403ffa:	4628      	mov	r0, r5
  403ffc:	f000 fc38 	bl	404870 <memchr>
  404000:	2800      	cmp	r0, #0
  404002:	f000 80a1 	beq.w	404148 <__sfvwrite_r+0x2d4>
  404006:	3001      	adds	r0, #1
  404008:	eba0 0905 	sub.w	r9, r0, r5
  40400c:	e7c2      	b.n	403f94 <__sfvwrite_r+0x120>
  40400e:	6820      	ldr	r0, [r4, #0]
  404010:	6923      	ldr	r3, [r4, #16]
  404012:	4298      	cmp	r0, r3
  404014:	d802      	bhi.n	40401c <__sfvwrite_r+0x1a8>
  404016:	6963      	ldr	r3, [r4, #20]
  404018:	429f      	cmp	r7, r3
  40401a:	d25d      	bcs.n	4040d8 <__sfvwrite_r+0x264>
  40401c:	45b8      	cmp	r8, r7
  40401e:	bf28      	it	cs
  404020:	46b8      	movcs	r8, r7
  404022:	4642      	mov	r2, r8
  404024:	4649      	mov	r1, r9
  404026:	f000 fd0d 	bl	404a44 <memmove>
  40402a:	68a3      	ldr	r3, [r4, #8]
  40402c:	6822      	ldr	r2, [r4, #0]
  40402e:	eba3 0308 	sub.w	r3, r3, r8
  404032:	4442      	add	r2, r8
  404034:	60a3      	str	r3, [r4, #8]
  404036:	6022      	str	r2, [r4, #0]
  404038:	b10b      	cbz	r3, 40403e <__sfvwrite_r+0x1ca>
  40403a:	46c2      	mov	sl, r8
  40403c:	e779      	b.n	403f32 <__sfvwrite_r+0xbe>
  40403e:	4621      	mov	r1, r4
  404040:	9800      	ldr	r0, [sp, #0]
  404042:	f7ff fcb3 	bl	4039ac <_fflush_r>
  404046:	2800      	cmp	r0, #0
  404048:	d192      	bne.n	403f70 <__sfvwrite_r+0xfc>
  40404a:	46c2      	mov	sl, r8
  40404c:	e771      	b.n	403f32 <__sfvwrite_r+0xbe>
  40404e:	465a      	mov	r2, fp
  404050:	4629      	mov	r1, r5
  404052:	f000 fcf7 	bl	404a44 <memmove>
  404056:	68a2      	ldr	r2, [r4, #8]
  404058:	6823      	ldr	r3, [r4, #0]
  40405a:	eba2 020b 	sub.w	r2, r2, fp
  40405e:	445b      	add	r3, fp
  404060:	60a2      	str	r2, [r4, #8]
  404062:	6023      	str	r3, [r4, #0]
  404064:	e7af      	b.n	403fc6 <__sfvwrite_r+0x152>
  404066:	6820      	ldr	r0, [r4, #0]
  404068:	46b8      	mov	r8, r7
  40406a:	46ba      	mov	sl, r7
  40406c:	46bb      	mov	fp, r7
  40406e:	e755      	b.n	403f1c <__sfvwrite_r+0xa8>
  404070:	6962      	ldr	r2, [r4, #20]
  404072:	6820      	ldr	r0, [r4, #0]
  404074:	6921      	ldr	r1, [r4, #16]
  404076:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40407a:	eba0 0a01 	sub.w	sl, r0, r1
  40407e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404082:	f10a 0001 	add.w	r0, sl, #1
  404086:	ea4f 0868 	mov.w	r8, r8, asr #1
  40408a:	4438      	add	r0, r7
  40408c:	4540      	cmp	r0, r8
  40408e:	4642      	mov	r2, r8
  404090:	bf84      	itt	hi
  404092:	4680      	movhi	r8, r0
  404094:	4642      	movhi	r2, r8
  404096:	055b      	lsls	r3, r3, #21
  404098:	d544      	bpl.n	404124 <__sfvwrite_r+0x2b0>
  40409a:	4611      	mov	r1, r2
  40409c:	9800      	ldr	r0, [sp, #0]
  40409e:	f000 f921 	bl	4042e4 <_malloc_r>
  4040a2:	4683      	mov	fp, r0
  4040a4:	2800      	cmp	r0, #0
  4040a6:	d055      	beq.n	404154 <__sfvwrite_r+0x2e0>
  4040a8:	4652      	mov	r2, sl
  4040aa:	6921      	ldr	r1, [r4, #16]
  4040ac:	f000 fc30 	bl	404910 <memcpy>
  4040b0:	89a3      	ldrh	r3, [r4, #12]
  4040b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040ba:	81a3      	strh	r3, [r4, #12]
  4040bc:	eb0b 000a 	add.w	r0, fp, sl
  4040c0:	eba8 030a 	sub.w	r3, r8, sl
  4040c4:	f8c4 b010 	str.w	fp, [r4, #16]
  4040c8:	f8c4 8014 	str.w	r8, [r4, #20]
  4040cc:	6020      	str	r0, [r4, #0]
  4040ce:	60a3      	str	r3, [r4, #8]
  4040d0:	46b8      	mov	r8, r7
  4040d2:	46ba      	mov	sl, r7
  4040d4:	46bb      	mov	fp, r7
  4040d6:	e721      	b.n	403f1c <__sfvwrite_r+0xa8>
  4040d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4040dc:	42b9      	cmp	r1, r7
  4040de:	bf28      	it	cs
  4040e0:	4639      	movcs	r1, r7
  4040e2:	464a      	mov	r2, r9
  4040e4:	fb91 f1f3 	sdiv	r1, r1, r3
  4040e8:	9800      	ldr	r0, [sp, #0]
  4040ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4040ec:	fb03 f301 	mul.w	r3, r3, r1
  4040f0:	69e1      	ldr	r1, [r4, #28]
  4040f2:	47b0      	blx	r6
  4040f4:	f1b0 0a00 	subs.w	sl, r0, #0
  4040f8:	f73f af1b 	bgt.w	403f32 <__sfvwrite_r+0xbe>
  4040fc:	e738      	b.n	403f70 <__sfvwrite_r+0xfc>
  4040fe:	461a      	mov	r2, r3
  404100:	4629      	mov	r1, r5
  404102:	9301      	str	r3, [sp, #4]
  404104:	f000 fc9e 	bl	404a44 <memmove>
  404108:	6822      	ldr	r2, [r4, #0]
  40410a:	9b01      	ldr	r3, [sp, #4]
  40410c:	9800      	ldr	r0, [sp, #0]
  40410e:	441a      	add	r2, r3
  404110:	6022      	str	r2, [r4, #0]
  404112:	4621      	mov	r1, r4
  404114:	f7ff fc4a 	bl	4039ac <_fflush_r>
  404118:	9b01      	ldr	r3, [sp, #4]
  40411a:	2800      	cmp	r0, #0
  40411c:	f47f af28 	bne.w	403f70 <__sfvwrite_r+0xfc>
  404120:	461f      	mov	r7, r3
  404122:	e750      	b.n	403fc6 <__sfvwrite_r+0x152>
  404124:	9800      	ldr	r0, [sp, #0]
  404126:	f000 fcfd 	bl	404b24 <_realloc_r>
  40412a:	4683      	mov	fp, r0
  40412c:	2800      	cmp	r0, #0
  40412e:	d1c5      	bne.n	4040bc <__sfvwrite_r+0x248>
  404130:	9d00      	ldr	r5, [sp, #0]
  404132:	6921      	ldr	r1, [r4, #16]
  404134:	4628      	mov	r0, r5
  404136:	f7ff fdb7 	bl	403ca8 <_free_r>
  40413a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40413e:	220c      	movs	r2, #12
  404140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404144:	602a      	str	r2, [r5, #0]
  404146:	e715      	b.n	403f74 <__sfvwrite_r+0x100>
  404148:	f106 0901 	add.w	r9, r6, #1
  40414c:	e722      	b.n	403f94 <__sfvwrite_r+0x120>
  40414e:	f04f 30ff 	mov.w	r0, #4294967295
  404152:	e6bf      	b.n	403ed4 <__sfvwrite_r+0x60>
  404154:	9a00      	ldr	r2, [sp, #0]
  404156:	230c      	movs	r3, #12
  404158:	6013      	str	r3, [r2, #0]
  40415a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40415e:	e709      	b.n	403f74 <__sfvwrite_r+0x100>
  404160:	7ffffc00 	.word	0x7ffffc00

00404164 <_fwalk_reent>:
  404164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404168:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40416c:	d01f      	beq.n	4041ae <_fwalk_reent+0x4a>
  40416e:	4688      	mov	r8, r1
  404170:	4606      	mov	r6, r0
  404172:	f04f 0900 	mov.w	r9, #0
  404176:	687d      	ldr	r5, [r7, #4]
  404178:	68bc      	ldr	r4, [r7, #8]
  40417a:	3d01      	subs	r5, #1
  40417c:	d411      	bmi.n	4041a2 <_fwalk_reent+0x3e>
  40417e:	89a3      	ldrh	r3, [r4, #12]
  404180:	2b01      	cmp	r3, #1
  404182:	f105 35ff 	add.w	r5, r5, #4294967295
  404186:	d908      	bls.n	40419a <_fwalk_reent+0x36>
  404188:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40418c:	3301      	adds	r3, #1
  40418e:	4621      	mov	r1, r4
  404190:	4630      	mov	r0, r6
  404192:	d002      	beq.n	40419a <_fwalk_reent+0x36>
  404194:	47c0      	blx	r8
  404196:	ea49 0900 	orr.w	r9, r9, r0
  40419a:	1c6b      	adds	r3, r5, #1
  40419c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4041a0:	d1ed      	bne.n	40417e <_fwalk_reent+0x1a>
  4041a2:	683f      	ldr	r7, [r7, #0]
  4041a4:	2f00      	cmp	r7, #0
  4041a6:	d1e6      	bne.n	404176 <_fwalk_reent+0x12>
  4041a8:	4648      	mov	r0, r9
  4041aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4041ae:	46b9      	mov	r9, r7
  4041b0:	4648      	mov	r0, r9
  4041b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4041b6:	bf00      	nop

004041b8 <__locale_mb_cur_max>:
  4041b8:	4b04      	ldr	r3, [pc, #16]	; (4041cc <__locale_mb_cur_max+0x14>)
  4041ba:	4a05      	ldr	r2, [pc, #20]	; (4041d0 <__locale_mb_cur_max+0x18>)
  4041bc:	681b      	ldr	r3, [r3, #0]
  4041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	bf08      	it	eq
  4041c4:	4613      	moveq	r3, r2
  4041c6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4041ca:	4770      	bx	lr
  4041cc:	20400010 	.word	0x20400010
  4041d0:	20400444 	.word	0x20400444

004041d4 <__retarget_lock_init_recursive>:
  4041d4:	4770      	bx	lr
  4041d6:	bf00      	nop

004041d8 <__retarget_lock_close_recursive>:
  4041d8:	4770      	bx	lr
  4041da:	bf00      	nop

004041dc <__retarget_lock_acquire_recursive>:
  4041dc:	4770      	bx	lr
  4041de:	bf00      	nop

004041e0 <__retarget_lock_release_recursive>:
  4041e0:	4770      	bx	lr
  4041e2:	bf00      	nop

004041e4 <__swhatbuf_r>:
  4041e4:	b570      	push	{r4, r5, r6, lr}
  4041e6:	460c      	mov	r4, r1
  4041e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041ec:	2900      	cmp	r1, #0
  4041ee:	b090      	sub	sp, #64	; 0x40
  4041f0:	4615      	mov	r5, r2
  4041f2:	461e      	mov	r6, r3
  4041f4:	db14      	blt.n	404220 <__swhatbuf_r+0x3c>
  4041f6:	aa01      	add	r2, sp, #4
  4041f8:	f001 f88c 	bl	405314 <_fstat_r>
  4041fc:	2800      	cmp	r0, #0
  4041fe:	db0f      	blt.n	404220 <__swhatbuf_r+0x3c>
  404200:	9a02      	ldr	r2, [sp, #8]
  404202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404206:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40420a:	fab2 f282 	clz	r2, r2
  40420e:	0952      	lsrs	r2, r2, #5
  404210:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404214:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404218:	6032      	str	r2, [r6, #0]
  40421a:	602b      	str	r3, [r5, #0]
  40421c:	b010      	add	sp, #64	; 0x40
  40421e:	bd70      	pop	{r4, r5, r6, pc}
  404220:	89a2      	ldrh	r2, [r4, #12]
  404222:	2300      	movs	r3, #0
  404224:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404228:	6033      	str	r3, [r6, #0]
  40422a:	d004      	beq.n	404236 <__swhatbuf_r+0x52>
  40422c:	2240      	movs	r2, #64	; 0x40
  40422e:	4618      	mov	r0, r3
  404230:	602a      	str	r2, [r5, #0]
  404232:	b010      	add	sp, #64	; 0x40
  404234:	bd70      	pop	{r4, r5, r6, pc}
  404236:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40423a:	602b      	str	r3, [r5, #0]
  40423c:	b010      	add	sp, #64	; 0x40
  40423e:	bd70      	pop	{r4, r5, r6, pc}

00404240 <__smakebuf_r>:
  404240:	898a      	ldrh	r2, [r1, #12]
  404242:	0792      	lsls	r2, r2, #30
  404244:	460b      	mov	r3, r1
  404246:	d506      	bpl.n	404256 <__smakebuf_r+0x16>
  404248:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40424c:	2101      	movs	r1, #1
  40424e:	601a      	str	r2, [r3, #0]
  404250:	611a      	str	r2, [r3, #16]
  404252:	6159      	str	r1, [r3, #20]
  404254:	4770      	bx	lr
  404256:	b5f0      	push	{r4, r5, r6, r7, lr}
  404258:	b083      	sub	sp, #12
  40425a:	ab01      	add	r3, sp, #4
  40425c:	466a      	mov	r2, sp
  40425e:	460c      	mov	r4, r1
  404260:	4606      	mov	r6, r0
  404262:	f7ff ffbf 	bl	4041e4 <__swhatbuf_r>
  404266:	9900      	ldr	r1, [sp, #0]
  404268:	4605      	mov	r5, r0
  40426a:	4630      	mov	r0, r6
  40426c:	f000 f83a 	bl	4042e4 <_malloc_r>
  404270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404274:	b1d8      	cbz	r0, 4042ae <__smakebuf_r+0x6e>
  404276:	9a01      	ldr	r2, [sp, #4]
  404278:	4f15      	ldr	r7, [pc, #84]	; (4042d0 <__smakebuf_r+0x90>)
  40427a:	9900      	ldr	r1, [sp, #0]
  40427c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404282:	81a3      	strh	r3, [r4, #12]
  404284:	6020      	str	r0, [r4, #0]
  404286:	6120      	str	r0, [r4, #16]
  404288:	6161      	str	r1, [r4, #20]
  40428a:	b91a      	cbnz	r2, 404294 <__smakebuf_r+0x54>
  40428c:	432b      	orrs	r3, r5
  40428e:	81a3      	strh	r3, [r4, #12]
  404290:	b003      	add	sp, #12
  404292:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404294:	4630      	mov	r0, r6
  404296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40429a:	f001 f84f 	bl	40533c <_isatty_r>
  40429e:	b1a0      	cbz	r0, 4042ca <__smakebuf_r+0x8a>
  4042a0:	89a3      	ldrh	r3, [r4, #12]
  4042a2:	f023 0303 	bic.w	r3, r3, #3
  4042a6:	f043 0301 	orr.w	r3, r3, #1
  4042aa:	b21b      	sxth	r3, r3
  4042ac:	e7ee      	b.n	40428c <__smakebuf_r+0x4c>
  4042ae:	059a      	lsls	r2, r3, #22
  4042b0:	d4ee      	bmi.n	404290 <__smakebuf_r+0x50>
  4042b2:	f023 0303 	bic.w	r3, r3, #3
  4042b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4042ba:	f043 0302 	orr.w	r3, r3, #2
  4042be:	2101      	movs	r1, #1
  4042c0:	81a3      	strh	r3, [r4, #12]
  4042c2:	6022      	str	r2, [r4, #0]
  4042c4:	6122      	str	r2, [r4, #16]
  4042c6:	6161      	str	r1, [r4, #20]
  4042c8:	e7e2      	b.n	404290 <__smakebuf_r+0x50>
  4042ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042ce:	e7dd      	b.n	40428c <__smakebuf_r+0x4c>
  4042d0:	00403a01 	.word	0x00403a01

004042d4 <malloc>:
  4042d4:	4b02      	ldr	r3, [pc, #8]	; (4042e0 <malloc+0xc>)
  4042d6:	4601      	mov	r1, r0
  4042d8:	6818      	ldr	r0, [r3, #0]
  4042da:	f000 b803 	b.w	4042e4 <_malloc_r>
  4042de:	bf00      	nop
  4042e0:	20400010 	.word	0x20400010

004042e4 <_malloc_r>:
  4042e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042e8:	f101 060b 	add.w	r6, r1, #11
  4042ec:	2e16      	cmp	r6, #22
  4042ee:	b083      	sub	sp, #12
  4042f0:	4605      	mov	r5, r0
  4042f2:	f240 809e 	bls.w	404432 <_malloc_r+0x14e>
  4042f6:	f036 0607 	bics.w	r6, r6, #7
  4042fa:	f100 80bd 	bmi.w	404478 <_malloc_r+0x194>
  4042fe:	42b1      	cmp	r1, r6
  404300:	f200 80ba 	bhi.w	404478 <_malloc_r+0x194>
  404304:	f000 fc02 	bl	404b0c <__malloc_lock>
  404308:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40430c:	f0c0 8293 	bcc.w	404836 <_malloc_r+0x552>
  404310:	0a73      	lsrs	r3, r6, #9
  404312:	f000 80b8 	beq.w	404486 <_malloc_r+0x1a2>
  404316:	2b04      	cmp	r3, #4
  404318:	f200 8179 	bhi.w	40460e <_malloc_r+0x32a>
  40431c:	09b3      	lsrs	r3, r6, #6
  40431e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404322:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404326:	00c3      	lsls	r3, r0, #3
  404328:	4fbf      	ldr	r7, [pc, #764]	; (404628 <_malloc_r+0x344>)
  40432a:	443b      	add	r3, r7
  40432c:	f1a3 0108 	sub.w	r1, r3, #8
  404330:	685c      	ldr	r4, [r3, #4]
  404332:	42a1      	cmp	r1, r4
  404334:	d106      	bne.n	404344 <_malloc_r+0x60>
  404336:	e00c      	b.n	404352 <_malloc_r+0x6e>
  404338:	2a00      	cmp	r2, #0
  40433a:	f280 80aa 	bge.w	404492 <_malloc_r+0x1ae>
  40433e:	68e4      	ldr	r4, [r4, #12]
  404340:	42a1      	cmp	r1, r4
  404342:	d006      	beq.n	404352 <_malloc_r+0x6e>
  404344:	6863      	ldr	r3, [r4, #4]
  404346:	f023 0303 	bic.w	r3, r3, #3
  40434a:	1b9a      	subs	r2, r3, r6
  40434c:	2a0f      	cmp	r2, #15
  40434e:	ddf3      	ble.n	404338 <_malloc_r+0x54>
  404350:	4670      	mov	r0, lr
  404352:	693c      	ldr	r4, [r7, #16]
  404354:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40463c <_malloc_r+0x358>
  404358:	4574      	cmp	r4, lr
  40435a:	f000 81ab 	beq.w	4046b4 <_malloc_r+0x3d0>
  40435e:	6863      	ldr	r3, [r4, #4]
  404360:	f023 0303 	bic.w	r3, r3, #3
  404364:	1b9a      	subs	r2, r3, r6
  404366:	2a0f      	cmp	r2, #15
  404368:	f300 8190 	bgt.w	40468c <_malloc_r+0x3a8>
  40436c:	2a00      	cmp	r2, #0
  40436e:	f8c7 e014 	str.w	lr, [r7, #20]
  404372:	f8c7 e010 	str.w	lr, [r7, #16]
  404376:	f280 809d 	bge.w	4044b4 <_malloc_r+0x1d0>
  40437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40437e:	f080 8161 	bcs.w	404644 <_malloc_r+0x360>
  404382:	08db      	lsrs	r3, r3, #3
  404384:	f103 0c01 	add.w	ip, r3, #1
  404388:	1099      	asrs	r1, r3, #2
  40438a:	687a      	ldr	r2, [r7, #4]
  40438c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404390:	f8c4 8008 	str.w	r8, [r4, #8]
  404394:	2301      	movs	r3, #1
  404396:	408b      	lsls	r3, r1
  404398:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40439c:	4313      	orrs	r3, r2
  40439e:	3908      	subs	r1, #8
  4043a0:	60e1      	str	r1, [r4, #12]
  4043a2:	607b      	str	r3, [r7, #4]
  4043a4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4043a8:	f8c8 400c 	str.w	r4, [r8, #12]
  4043ac:	1082      	asrs	r2, r0, #2
  4043ae:	2401      	movs	r4, #1
  4043b0:	4094      	lsls	r4, r2
  4043b2:	429c      	cmp	r4, r3
  4043b4:	f200 808b 	bhi.w	4044ce <_malloc_r+0x1ea>
  4043b8:	421c      	tst	r4, r3
  4043ba:	d106      	bne.n	4043ca <_malloc_r+0xe6>
  4043bc:	f020 0003 	bic.w	r0, r0, #3
  4043c0:	0064      	lsls	r4, r4, #1
  4043c2:	421c      	tst	r4, r3
  4043c4:	f100 0004 	add.w	r0, r0, #4
  4043c8:	d0fa      	beq.n	4043c0 <_malloc_r+0xdc>
  4043ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4043ce:	46cc      	mov	ip, r9
  4043d0:	4680      	mov	r8, r0
  4043d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4043d6:	459c      	cmp	ip, r3
  4043d8:	d107      	bne.n	4043ea <_malloc_r+0x106>
  4043da:	e16d      	b.n	4046b8 <_malloc_r+0x3d4>
  4043dc:	2a00      	cmp	r2, #0
  4043de:	f280 817b 	bge.w	4046d8 <_malloc_r+0x3f4>
  4043e2:	68db      	ldr	r3, [r3, #12]
  4043e4:	459c      	cmp	ip, r3
  4043e6:	f000 8167 	beq.w	4046b8 <_malloc_r+0x3d4>
  4043ea:	6859      	ldr	r1, [r3, #4]
  4043ec:	f021 0103 	bic.w	r1, r1, #3
  4043f0:	1b8a      	subs	r2, r1, r6
  4043f2:	2a0f      	cmp	r2, #15
  4043f4:	ddf2      	ble.n	4043dc <_malloc_r+0xf8>
  4043f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4043fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4043fe:	9300      	str	r3, [sp, #0]
  404400:	199c      	adds	r4, r3, r6
  404402:	4628      	mov	r0, r5
  404404:	f046 0601 	orr.w	r6, r6, #1
  404408:	f042 0501 	orr.w	r5, r2, #1
  40440c:	605e      	str	r6, [r3, #4]
  40440e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404412:	f8cc 8008 	str.w	r8, [ip, #8]
  404416:	617c      	str	r4, [r7, #20]
  404418:	613c      	str	r4, [r7, #16]
  40441a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40441e:	f8c4 e008 	str.w	lr, [r4, #8]
  404422:	6065      	str	r5, [r4, #4]
  404424:	505a      	str	r2, [r3, r1]
  404426:	f000 fb77 	bl	404b18 <__malloc_unlock>
  40442a:	9b00      	ldr	r3, [sp, #0]
  40442c:	f103 0408 	add.w	r4, r3, #8
  404430:	e01e      	b.n	404470 <_malloc_r+0x18c>
  404432:	2910      	cmp	r1, #16
  404434:	d820      	bhi.n	404478 <_malloc_r+0x194>
  404436:	f000 fb69 	bl	404b0c <__malloc_lock>
  40443a:	2610      	movs	r6, #16
  40443c:	2318      	movs	r3, #24
  40443e:	2002      	movs	r0, #2
  404440:	4f79      	ldr	r7, [pc, #484]	; (404628 <_malloc_r+0x344>)
  404442:	443b      	add	r3, r7
  404444:	f1a3 0208 	sub.w	r2, r3, #8
  404448:	685c      	ldr	r4, [r3, #4]
  40444a:	4294      	cmp	r4, r2
  40444c:	f000 813d 	beq.w	4046ca <_malloc_r+0x3e6>
  404450:	6863      	ldr	r3, [r4, #4]
  404452:	68e1      	ldr	r1, [r4, #12]
  404454:	68a6      	ldr	r6, [r4, #8]
  404456:	f023 0303 	bic.w	r3, r3, #3
  40445a:	4423      	add	r3, r4
  40445c:	4628      	mov	r0, r5
  40445e:	685a      	ldr	r2, [r3, #4]
  404460:	60f1      	str	r1, [r6, #12]
  404462:	f042 0201 	orr.w	r2, r2, #1
  404466:	608e      	str	r6, [r1, #8]
  404468:	605a      	str	r2, [r3, #4]
  40446a:	f000 fb55 	bl	404b18 <__malloc_unlock>
  40446e:	3408      	adds	r4, #8
  404470:	4620      	mov	r0, r4
  404472:	b003      	add	sp, #12
  404474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404478:	2400      	movs	r4, #0
  40447a:	230c      	movs	r3, #12
  40447c:	4620      	mov	r0, r4
  40447e:	602b      	str	r3, [r5, #0]
  404480:	b003      	add	sp, #12
  404482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404486:	2040      	movs	r0, #64	; 0x40
  404488:	f44f 7300 	mov.w	r3, #512	; 0x200
  40448c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404490:	e74a      	b.n	404328 <_malloc_r+0x44>
  404492:	4423      	add	r3, r4
  404494:	68e1      	ldr	r1, [r4, #12]
  404496:	685a      	ldr	r2, [r3, #4]
  404498:	68a6      	ldr	r6, [r4, #8]
  40449a:	f042 0201 	orr.w	r2, r2, #1
  40449e:	60f1      	str	r1, [r6, #12]
  4044a0:	4628      	mov	r0, r5
  4044a2:	608e      	str	r6, [r1, #8]
  4044a4:	605a      	str	r2, [r3, #4]
  4044a6:	f000 fb37 	bl	404b18 <__malloc_unlock>
  4044aa:	3408      	adds	r4, #8
  4044ac:	4620      	mov	r0, r4
  4044ae:	b003      	add	sp, #12
  4044b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044b4:	4423      	add	r3, r4
  4044b6:	4628      	mov	r0, r5
  4044b8:	685a      	ldr	r2, [r3, #4]
  4044ba:	f042 0201 	orr.w	r2, r2, #1
  4044be:	605a      	str	r2, [r3, #4]
  4044c0:	f000 fb2a 	bl	404b18 <__malloc_unlock>
  4044c4:	3408      	adds	r4, #8
  4044c6:	4620      	mov	r0, r4
  4044c8:	b003      	add	sp, #12
  4044ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044ce:	68bc      	ldr	r4, [r7, #8]
  4044d0:	6863      	ldr	r3, [r4, #4]
  4044d2:	f023 0803 	bic.w	r8, r3, #3
  4044d6:	45b0      	cmp	r8, r6
  4044d8:	d304      	bcc.n	4044e4 <_malloc_r+0x200>
  4044da:	eba8 0306 	sub.w	r3, r8, r6
  4044de:	2b0f      	cmp	r3, #15
  4044e0:	f300 8085 	bgt.w	4045ee <_malloc_r+0x30a>
  4044e4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404640 <_malloc_r+0x35c>
  4044e8:	4b50      	ldr	r3, [pc, #320]	; (40462c <_malloc_r+0x348>)
  4044ea:	f8d9 2000 	ldr.w	r2, [r9]
  4044ee:	681b      	ldr	r3, [r3, #0]
  4044f0:	3201      	adds	r2, #1
  4044f2:	4433      	add	r3, r6
  4044f4:	eb04 0a08 	add.w	sl, r4, r8
  4044f8:	f000 8155 	beq.w	4047a6 <_malloc_r+0x4c2>
  4044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404500:	330f      	adds	r3, #15
  404502:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404506:	f02b 0b0f 	bic.w	fp, fp, #15
  40450a:	4659      	mov	r1, fp
  40450c:	4628      	mov	r0, r5
  40450e:	f000 fcaf 	bl	404e70 <_sbrk_r>
  404512:	1c41      	adds	r1, r0, #1
  404514:	4602      	mov	r2, r0
  404516:	f000 80fc 	beq.w	404712 <_malloc_r+0x42e>
  40451a:	4582      	cmp	sl, r0
  40451c:	f200 80f7 	bhi.w	40470e <_malloc_r+0x42a>
  404520:	4b43      	ldr	r3, [pc, #268]	; (404630 <_malloc_r+0x34c>)
  404522:	6819      	ldr	r1, [r3, #0]
  404524:	4459      	add	r1, fp
  404526:	6019      	str	r1, [r3, #0]
  404528:	f000 814d 	beq.w	4047c6 <_malloc_r+0x4e2>
  40452c:	f8d9 0000 	ldr.w	r0, [r9]
  404530:	3001      	adds	r0, #1
  404532:	bf1b      	ittet	ne
  404534:	eba2 0a0a 	subne.w	sl, r2, sl
  404538:	4451      	addne	r1, sl
  40453a:	f8c9 2000 	streq.w	r2, [r9]
  40453e:	6019      	strne	r1, [r3, #0]
  404540:	f012 0107 	ands.w	r1, r2, #7
  404544:	f000 8115 	beq.w	404772 <_malloc_r+0x48e>
  404548:	f1c1 0008 	rsb	r0, r1, #8
  40454c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404550:	4402      	add	r2, r0
  404552:	3108      	adds	r1, #8
  404554:	eb02 090b 	add.w	r9, r2, fp
  404558:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40455c:	eba1 0909 	sub.w	r9, r1, r9
  404560:	4649      	mov	r1, r9
  404562:	4628      	mov	r0, r5
  404564:	9301      	str	r3, [sp, #4]
  404566:	9200      	str	r2, [sp, #0]
  404568:	f000 fc82 	bl	404e70 <_sbrk_r>
  40456c:	1c43      	adds	r3, r0, #1
  40456e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404572:	f000 8143 	beq.w	4047fc <_malloc_r+0x518>
  404576:	1a80      	subs	r0, r0, r2
  404578:	4448      	add	r0, r9
  40457a:	f040 0001 	orr.w	r0, r0, #1
  40457e:	6819      	ldr	r1, [r3, #0]
  404580:	60ba      	str	r2, [r7, #8]
  404582:	4449      	add	r1, r9
  404584:	42bc      	cmp	r4, r7
  404586:	6050      	str	r0, [r2, #4]
  404588:	6019      	str	r1, [r3, #0]
  40458a:	d017      	beq.n	4045bc <_malloc_r+0x2d8>
  40458c:	f1b8 0f0f 	cmp.w	r8, #15
  404590:	f240 80fb 	bls.w	40478a <_malloc_r+0x4a6>
  404594:	6860      	ldr	r0, [r4, #4]
  404596:	f1a8 020c 	sub.w	r2, r8, #12
  40459a:	f022 0207 	bic.w	r2, r2, #7
  40459e:	eb04 0e02 	add.w	lr, r4, r2
  4045a2:	f000 0001 	and.w	r0, r0, #1
  4045a6:	f04f 0c05 	mov.w	ip, #5
  4045aa:	4310      	orrs	r0, r2
  4045ac:	2a0f      	cmp	r2, #15
  4045ae:	6060      	str	r0, [r4, #4]
  4045b0:	f8ce c004 	str.w	ip, [lr, #4]
  4045b4:	f8ce c008 	str.w	ip, [lr, #8]
  4045b8:	f200 8117 	bhi.w	4047ea <_malloc_r+0x506>
  4045bc:	4b1d      	ldr	r3, [pc, #116]	; (404634 <_malloc_r+0x350>)
  4045be:	68bc      	ldr	r4, [r7, #8]
  4045c0:	681a      	ldr	r2, [r3, #0]
  4045c2:	4291      	cmp	r1, r2
  4045c4:	bf88      	it	hi
  4045c6:	6019      	strhi	r1, [r3, #0]
  4045c8:	4b1b      	ldr	r3, [pc, #108]	; (404638 <_malloc_r+0x354>)
  4045ca:	681a      	ldr	r2, [r3, #0]
  4045cc:	4291      	cmp	r1, r2
  4045ce:	6862      	ldr	r2, [r4, #4]
  4045d0:	bf88      	it	hi
  4045d2:	6019      	strhi	r1, [r3, #0]
  4045d4:	f022 0203 	bic.w	r2, r2, #3
  4045d8:	4296      	cmp	r6, r2
  4045da:	eba2 0306 	sub.w	r3, r2, r6
  4045de:	d801      	bhi.n	4045e4 <_malloc_r+0x300>
  4045e0:	2b0f      	cmp	r3, #15
  4045e2:	dc04      	bgt.n	4045ee <_malloc_r+0x30a>
  4045e4:	4628      	mov	r0, r5
  4045e6:	f000 fa97 	bl	404b18 <__malloc_unlock>
  4045ea:	2400      	movs	r4, #0
  4045ec:	e740      	b.n	404470 <_malloc_r+0x18c>
  4045ee:	19a2      	adds	r2, r4, r6
  4045f0:	f043 0301 	orr.w	r3, r3, #1
  4045f4:	f046 0601 	orr.w	r6, r6, #1
  4045f8:	6066      	str	r6, [r4, #4]
  4045fa:	4628      	mov	r0, r5
  4045fc:	60ba      	str	r2, [r7, #8]
  4045fe:	6053      	str	r3, [r2, #4]
  404600:	f000 fa8a 	bl	404b18 <__malloc_unlock>
  404604:	3408      	adds	r4, #8
  404606:	4620      	mov	r0, r4
  404608:	b003      	add	sp, #12
  40460a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40460e:	2b14      	cmp	r3, #20
  404610:	d971      	bls.n	4046f6 <_malloc_r+0x412>
  404612:	2b54      	cmp	r3, #84	; 0x54
  404614:	f200 80a3 	bhi.w	40475e <_malloc_r+0x47a>
  404618:	0b33      	lsrs	r3, r6, #12
  40461a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40461e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404622:	00c3      	lsls	r3, r0, #3
  404624:	e680      	b.n	404328 <_malloc_r+0x44>
  404626:	bf00      	nop
  404628:	204005b0 	.word	0x204005b0
  40462c:	20400a88 	.word	0x20400a88
  404630:	20400a58 	.word	0x20400a58
  404634:	20400a80 	.word	0x20400a80
  404638:	20400a84 	.word	0x20400a84
  40463c:	204005b8 	.word	0x204005b8
  404640:	204009b8 	.word	0x204009b8
  404644:	0a5a      	lsrs	r2, r3, #9
  404646:	2a04      	cmp	r2, #4
  404648:	d95b      	bls.n	404702 <_malloc_r+0x41e>
  40464a:	2a14      	cmp	r2, #20
  40464c:	f200 80ae 	bhi.w	4047ac <_malloc_r+0x4c8>
  404650:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404654:	00c9      	lsls	r1, r1, #3
  404656:	325b      	adds	r2, #91	; 0x5b
  404658:	eb07 0c01 	add.w	ip, r7, r1
  40465c:	5879      	ldr	r1, [r7, r1]
  40465e:	f1ac 0c08 	sub.w	ip, ip, #8
  404662:	458c      	cmp	ip, r1
  404664:	f000 8088 	beq.w	404778 <_malloc_r+0x494>
  404668:	684a      	ldr	r2, [r1, #4]
  40466a:	f022 0203 	bic.w	r2, r2, #3
  40466e:	4293      	cmp	r3, r2
  404670:	d273      	bcs.n	40475a <_malloc_r+0x476>
  404672:	6889      	ldr	r1, [r1, #8]
  404674:	458c      	cmp	ip, r1
  404676:	d1f7      	bne.n	404668 <_malloc_r+0x384>
  404678:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40467c:	687b      	ldr	r3, [r7, #4]
  40467e:	60e2      	str	r2, [r4, #12]
  404680:	f8c4 c008 	str.w	ip, [r4, #8]
  404684:	6094      	str	r4, [r2, #8]
  404686:	f8cc 400c 	str.w	r4, [ip, #12]
  40468a:	e68f      	b.n	4043ac <_malloc_r+0xc8>
  40468c:	19a1      	adds	r1, r4, r6
  40468e:	f046 0c01 	orr.w	ip, r6, #1
  404692:	f042 0601 	orr.w	r6, r2, #1
  404696:	f8c4 c004 	str.w	ip, [r4, #4]
  40469a:	4628      	mov	r0, r5
  40469c:	6179      	str	r1, [r7, #20]
  40469e:	6139      	str	r1, [r7, #16]
  4046a0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4046a4:	f8c1 e008 	str.w	lr, [r1, #8]
  4046a8:	604e      	str	r6, [r1, #4]
  4046aa:	50e2      	str	r2, [r4, r3]
  4046ac:	f000 fa34 	bl	404b18 <__malloc_unlock>
  4046b0:	3408      	adds	r4, #8
  4046b2:	e6dd      	b.n	404470 <_malloc_r+0x18c>
  4046b4:	687b      	ldr	r3, [r7, #4]
  4046b6:	e679      	b.n	4043ac <_malloc_r+0xc8>
  4046b8:	f108 0801 	add.w	r8, r8, #1
  4046bc:	f018 0f03 	tst.w	r8, #3
  4046c0:	f10c 0c08 	add.w	ip, ip, #8
  4046c4:	f47f ae85 	bne.w	4043d2 <_malloc_r+0xee>
  4046c8:	e02d      	b.n	404726 <_malloc_r+0x442>
  4046ca:	68dc      	ldr	r4, [r3, #12]
  4046cc:	42a3      	cmp	r3, r4
  4046ce:	bf08      	it	eq
  4046d0:	3002      	addeq	r0, #2
  4046d2:	f43f ae3e 	beq.w	404352 <_malloc_r+0x6e>
  4046d6:	e6bb      	b.n	404450 <_malloc_r+0x16c>
  4046d8:	4419      	add	r1, r3
  4046da:	461c      	mov	r4, r3
  4046dc:	684a      	ldr	r2, [r1, #4]
  4046de:	68db      	ldr	r3, [r3, #12]
  4046e0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4046e4:	f042 0201 	orr.w	r2, r2, #1
  4046e8:	604a      	str	r2, [r1, #4]
  4046ea:	4628      	mov	r0, r5
  4046ec:	60f3      	str	r3, [r6, #12]
  4046ee:	609e      	str	r6, [r3, #8]
  4046f0:	f000 fa12 	bl	404b18 <__malloc_unlock>
  4046f4:	e6bc      	b.n	404470 <_malloc_r+0x18c>
  4046f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4046fa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4046fe:	00c3      	lsls	r3, r0, #3
  404700:	e612      	b.n	404328 <_malloc_r+0x44>
  404702:	099a      	lsrs	r2, r3, #6
  404704:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404708:	00c9      	lsls	r1, r1, #3
  40470a:	3238      	adds	r2, #56	; 0x38
  40470c:	e7a4      	b.n	404658 <_malloc_r+0x374>
  40470e:	42bc      	cmp	r4, r7
  404710:	d054      	beq.n	4047bc <_malloc_r+0x4d8>
  404712:	68bc      	ldr	r4, [r7, #8]
  404714:	6862      	ldr	r2, [r4, #4]
  404716:	f022 0203 	bic.w	r2, r2, #3
  40471a:	e75d      	b.n	4045d8 <_malloc_r+0x2f4>
  40471c:	f859 3908 	ldr.w	r3, [r9], #-8
  404720:	4599      	cmp	r9, r3
  404722:	f040 8086 	bne.w	404832 <_malloc_r+0x54e>
  404726:	f010 0f03 	tst.w	r0, #3
  40472a:	f100 30ff 	add.w	r0, r0, #4294967295
  40472e:	d1f5      	bne.n	40471c <_malloc_r+0x438>
  404730:	687b      	ldr	r3, [r7, #4]
  404732:	ea23 0304 	bic.w	r3, r3, r4
  404736:	607b      	str	r3, [r7, #4]
  404738:	0064      	lsls	r4, r4, #1
  40473a:	429c      	cmp	r4, r3
  40473c:	f63f aec7 	bhi.w	4044ce <_malloc_r+0x1ea>
  404740:	2c00      	cmp	r4, #0
  404742:	f43f aec4 	beq.w	4044ce <_malloc_r+0x1ea>
  404746:	421c      	tst	r4, r3
  404748:	4640      	mov	r0, r8
  40474a:	f47f ae3e 	bne.w	4043ca <_malloc_r+0xe6>
  40474e:	0064      	lsls	r4, r4, #1
  404750:	421c      	tst	r4, r3
  404752:	f100 0004 	add.w	r0, r0, #4
  404756:	d0fa      	beq.n	40474e <_malloc_r+0x46a>
  404758:	e637      	b.n	4043ca <_malloc_r+0xe6>
  40475a:	468c      	mov	ip, r1
  40475c:	e78c      	b.n	404678 <_malloc_r+0x394>
  40475e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404762:	d815      	bhi.n	404790 <_malloc_r+0x4ac>
  404764:	0bf3      	lsrs	r3, r6, #15
  404766:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40476a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40476e:	00c3      	lsls	r3, r0, #3
  404770:	e5da      	b.n	404328 <_malloc_r+0x44>
  404772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404776:	e6ed      	b.n	404554 <_malloc_r+0x270>
  404778:	687b      	ldr	r3, [r7, #4]
  40477a:	1092      	asrs	r2, r2, #2
  40477c:	2101      	movs	r1, #1
  40477e:	fa01 f202 	lsl.w	r2, r1, r2
  404782:	4313      	orrs	r3, r2
  404784:	607b      	str	r3, [r7, #4]
  404786:	4662      	mov	r2, ip
  404788:	e779      	b.n	40467e <_malloc_r+0x39a>
  40478a:	2301      	movs	r3, #1
  40478c:	6053      	str	r3, [r2, #4]
  40478e:	e729      	b.n	4045e4 <_malloc_r+0x300>
  404790:	f240 5254 	movw	r2, #1364	; 0x554
  404794:	4293      	cmp	r3, r2
  404796:	d822      	bhi.n	4047de <_malloc_r+0x4fa>
  404798:	0cb3      	lsrs	r3, r6, #18
  40479a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40479e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4047a2:	00c3      	lsls	r3, r0, #3
  4047a4:	e5c0      	b.n	404328 <_malloc_r+0x44>
  4047a6:	f103 0b10 	add.w	fp, r3, #16
  4047aa:	e6ae      	b.n	40450a <_malloc_r+0x226>
  4047ac:	2a54      	cmp	r2, #84	; 0x54
  4047ae:	d829      	bhi.n	404804 <_malloc_r+0x520>
  4047b0:	0b1a      	lsrs	r2, r3, #12
  4047b2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4047b6:	00c9      	lsls	r1, r1, #3
  4047b8:	326e      	adds	r2, #110	; 0x6e
  4047ba:	e74d      	b.n	404658 <_malloc_r+0x374>
  4047bc:	4b20      	ldr	r3, [pc, #128]	; (404840 <_malloc_r+0x55c>)
  4047be:	6819      	ldr	r1, [r3, #0]
  4047c0:	4459      	add	r1, fp
  4047c2:	6019      	str	r1, [r3, #0]
  4047c4:	e6b2      	b.n	40452c <_malloc_r+0x248>
  4047c6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4047ca:	2800      	cmp	r0, #0
  4047cc:	f47f aeae 	bne.w	40452c <_malloc_r+0x248>
  4047d0:	eb08 030b 	add.w	r3, r8, fp
  4047d4:	68ba      	ldr	r2, [r7, #8]
  4047d6:	f043 0301 	orr.w	r3, r3, #1
  4047da:	6053      	str	r3, [r2, #4]
  4047dc:	e6ee      	b.n	4045bc <_malloc_r+0x2d8>
  4047de:	207f      	movs	r0, #127	; 0x7f
  4047e0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4047e4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4047e8:	e59e      	b.n	404328 <_malloc_r+0x44>
  4047ea:	f104 0108 	add.w	r1, r4, #8
  4047ee:	4628      	mov	r0, r5
  4047f0:	9300      	str	r3, [sp, #0]
  4047f2:	f7ff fa59 	bl	403ca8 <_free_r>
  4047f6:	9b00      	ldr	r3, [sp, #0]
  4047f8:	6819      	ldr	r1, [r3, #0]
  4047fa:	e6df      	b.n	4045bc <_malloc_r+0x2d8>
  4047fc:	2001      	movs	r0, #1
  4047fe:	f04f 0900 	mov.w	r9, #0
  404802:	e6bc      	b.n	40457e <_malloc_r+0x29a>
  404804:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404808:	d805      	bhi.n	404816 <_malloc_r+0x532>
  40480a:	0bda      	lsrs	r2, r3, #15
  40480c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404810:	00c9      	lsls	r1, r1, #3
  404812:	3277      	adds	r2, #119	; 0x77
  404814:	e720      	b.n	404658 <_malloc_r+0x374>
  404816:	f240 5154 	movw	r1, #1364	; 0x554
  40481a:	428a      	cmp	r2, r1
  40481c:	d805      	bhi.n	40482a <_malloc_r+0x546>
  40481e:	0c9a      	lsrs	r2, r3, #18
  404820:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404824:	00c9      	lsls	r1, r1, #3
  404826:	327c      	adds	r2, #124	; 0x7c
  404828:	e716      	b.n	404658 <_malloc_r+0x374>
  40482a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40482e:	227e      	movs	r2, #126	; 0x7e
  404830:	e712      	b.n	404658 <_malloc_r+0x374>
  404832:	687b      	ldr	r3, [r7, #4]
  404834:	e780      	b.n	404738 <_malloc_r+0x454>
  404836:	08f0      	lsrs	r0, r6, #3
  404838:	f106 0308 	add.w	r3, r6, #8
  40483c:	e600      	b.n	404440 <_malloc_r+0x15c>
  40483e:	bf00      	nop
  404840:	20400a58 	.word	0x20400a58

00404844 <__ascii_mbtowc>:
  404844:	b082      	sub	sp, #8
  404846:	b149      	cbz	r1, 40485c <__ascii_mbtowc+0x18>
  404848:	b15a      	cbz	r2, 404862 <__ascii_mbtowc+0x1e>
  40484a:	b16b      	cbz	r3, 404868 <__ascii_mbtowc+0x24>
  40484c:	7813      	ldrb	r3, [r2, #0]
  40484e:	600b      	str	r3, [r1, #0]
  404850:	7812      	ldrb	r2, [r2, #0]
  404852:	1c10      	adds	r0, r2, #0
  404854:	bf18      	it	ne
  404856:	2001      	movne	r0, #1
  404858:	b002      	add	sp, #8
  40485a:	4770      	bx	lr
  40485c:	a901      	add	r1, sp, #4
  40485e:	2a00      	cmp	r2, #0
  404860:	d1f3      	bne.n	40484a <__ascii_mbtowc+0x6>
  404862:	4610      	mov	r0, r2
  404864:	b002      	add	sp, #8
  404866:	4770      	bx	lr
  404868:	f06f 0001 	mvn.w	r0, #1
  40486c:	e7f4      	b.n	404858 <__ascii_mbtowc+0x14>
  40486e:	bf00      	nop

00404870 <memchr>:
  404870:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404874:	2a10      	cmp	r2, #16
  404876:	db2b      	blt.n	4048d0 <memchr+0x60>
  404878:	f010 0f07 	tst.w	r0, #7
  40487c:	d008      	beq.n	404890 <memchr+0x20>
  40487e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404882:	3a01      	subs	r2, #1
  404884:	428b      	cmp	r3, r1
  404886:	d02d      	beq.n	4048e4 <memchr+0x74>
  404888:	f010 0f07 	tst.w	r0, #7
  40488c:	b342      	cbz	r2, 4048e0 <memchr+0x70>
  40488e:	d1f6      	bne.n	40487e <memchr+0xe>
  404890:	b4f0      	push	{r4, r5, r6, r7}
  404892:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404896:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40489a:	f022 0407 	bic.w	r4, r2, #7
  40489e:	f07f 0700 	mvns.w	r7, #0
  4048a2:	2300      	movs	r3, #0
  4048a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4048a8:	3c08      	subs	r4, #8
  4048aa:	ea85 0501 	eor.w	r5, r5, r1
  4048ae:	ea86 0601 	eor.w	r6, r6, r1
  4048b2:	fa85 f547 	uadd8	r5, r5, r7
  4048b6:	faa3 f587 	sel	r5, r3, r7
  4048ba:	fa86 f647 	uadd8	r6, r6, r7
  4048be:	faa5 f687 	sel	r6, r5, r7
  4048c2:	b98e      	cbnz	r6, 4048e8 <memchr+0x78>
  4048c4:	d1ee      	bne.n	4048a4 <memchr+0x34>
  4048c6:	bcf0      	pop	{r4, r5, r6, r7}
  4048c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4048cc:	f002 0207 	and.w	r2, r2, #7
  4048d0:	b132      	cbz	r2, 4048e0 <memchr+0x70>
  4048d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4048d6:	3a01      	subs	r2, #1
  4048d8:	ea83 0301 	eor.w	r3, r3, r1
  4048dc:	b113      	cbz	r3, 4048e4 <memchr+0x74>
  4048de:	d1f8      	bne.n	4048d2 <memchr+0x62>
  4048e0:	2000      	movs	r0, #0
  4048e2:	4770      	bx	lr
  4048e4:	3801      	subs	r0, #1
  4048e6:	4770      	bx	lr
  4048e8:	2d00      	cmp	r5, #0
  4048ea:	bf06      	itte	eq
  4048ec:	4635      	moveq	r5, r6
  4048ee:	3803      	subeq	r0, #3
  4048f0:	3807      	subne	r0, #7
  4048f2:	f015 0f01 	tst.w	r5, #1
  4048f6:	d107      	bne.n	404908 <memchr+0x98>
  4048f8:	3001      	adds	r0, #1
  4048fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4048fe:	bf02      	ittt	eq
  404900:	3001      	addeq	r0, #1
  404902:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404906:	3001      	addeq	r0, #1
  404908:	bcf0      	pop	{r4, r5, r6, r7}
  40490a:	3801      	subs	r0, #1
  40490c:	4770      	bx	lr
  40490e:	bf00      	nop

00404910 <memcpy>:
  404910:	4684      	mov	ip, r0
  404912:	ea41 0300 	orr.w	r3, r1, r0
  404916:	f013 0303 	ands.w	r3, r3, #3
  40491a:	d16d      	bne.n	4049f8 <memcpy+0xe8>
  40491c:	3a40      	subs	r2, #64	; 0x40
  40491e:	d341      	bcc.n	4049a4 <memcpy+0x94>
  404920:	f851 3b04 	ldr.w	r3, [r1], #4
  404924:	f840 3b04 	str.w	r3, [r0], #4
  404928:	f851 3b04 	ldr.w	r3, [r1], #4
  40492c:	f840 3b04 	str.w	r3, [r0], #4
  404930:	f851 3b04 	ldr.w	r3, [r1], #4
  404934:	f840 3b04 	str.w	r3, [r0], #4
  404938:	f851 3b04 	ldr.w	r3, [r1], #4
  40493c:	f840 3b04 	str.w	r3, [r0], #4
  404940:	f851 3b04 	ldr.w	r3, [r1], #4
  404944:	f840 3b04 	str.w	r3, [r0], #4
  404948:	f851 3b04 	ldr.w	r3, [r1], #4
  40494c:	f840 3b04 	str.w	r3, [r0], #4
  404950:	f851 3b04 	ldr.w	r3, [r1], #4
  404954:	f840 3b04 	str.w	r3, [r0], #4
  404958:	f851 3b04 	ldr.w	r3, [r1], #4
  40495c:	f840 3b04 	str.w	r3, [r0], #4
  404960:	f851 3b04 	ldr.w	r3, [r1], #4
  404964:	f840 3b04 	str.w	r3, [r0], #4
  404968:	f851 3b04 	ldr.w	r3, [r1], #4
  40496c:	f840 3b04 	str.w	r3, [r0], #4
  404970:	f851 3b04 	ldr.w	r3, [r1], #4
  404974:	f840 3b04 	str.w	r3, [r0], #4
  404978:	f851 3b04 	ldr.w	r3, [r1], #4
  40497c:	f840 3b04 	str.w	r3, [r0], #4
  404980:	f851 3b04 	ldr.w	r3, [r1], #4
  404984:	f840 3b04 	str.w	r3, [r0], #4
  404988:	f851 3b04 	ldr.w	r3, [r1], #4
  40498c:	f840 3b04 	str.w	r3, [r0], #4
  404990:	f851 3b04 	ldr.w	r3, [r1], #4
  404994:	f840 3b04 	str.w	r3, [r0], #4
  404998:	f851 3b04 	ldr.w	r3, [r1], #4
  40499c:	f840 3b04 	str.w	r3, [r0], #4
  4049a0:	3a40      	subs	r2, #64	; 0x40
  4049a2:	d2bd      	bcs.n	404920 <memcpy+0x10>
  4049a4:	3230      	adds	r2, #48	; 0x30
  4049a6:	d311      	bcc.n	4049cc <memcpy+0xbc>
  4049a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049ac:	f840 3b04 	str.w	r3, [r0], #4
  4049b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049b4:	f840 3b04 	str.w	r3, [r0], #4
  4049b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049bc:	f840 3b04 	str.w	r3, [r0], #4
  4049c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049c4:	f840 3b04 	str.w	r3, [r0], #4
  4049c8:	3a10      	subs	r2, #16
  4049ca:	d2ed      	bcs.n	4049a8 <memcpy+0x98>
  4049cc:	320c      	adds	r2, #12
  4049ce:	d305      	bcc.n	4049dc <memcpy+0xcc>
  4049d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049d4:	f840 3b04 	str.w	r3, [r0], #4
  4049d8:	3a04      	subs	r2, #4
  4049da:	d2f9      	bcs.n	4049d0 <memcpy+0xc0>
  4049dc:	3204      	adds	r2, #4
  4049de:	d008      	beq.n	4049f2 <memcpy+0xe2>
  4049e0:	07d2      	lsls	r2, r2, #31
  4049e2:	bf1c      	itt	ne
  4049e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4049e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4049ec:	d301      	bcc.n	4049f2 <memcpy+0xe2>
  4049ee:	880b      	ldrh	r3, [r1, #0]
  4049f0:	8003      	strh	r3, [r0, #0]
  4049f2:	4660      	mov	r0, ip
  4049f4:	4770      	bx	lr
  4049f6:	bf00      	nop
  4049f8:	2a08      	cmp	r2, #8
  4049fa:	d313      	bcc.n	404a24 <memcpy+0x114>
  4049fc:	078b      	lsls	r3, r1, #30
  4049fe:	d08d      	beq.n	40491c <memcpy+0xc>
  404a00:	f010 0303 	ands.w	r3, r0, #3
  404a04:	d08a      	beq.n	40491c <memcpy+0xc>
  404a06:	f1c3 0304 	rsb	r3, r3, #4
  404a0a:	1ad2      	subs	r2, r2, r3
  404a0c:	07db      	lsls	r3, r3, #31
  404a0e:	bf1c      	itt	ne
  404a10:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404a14:	f800 3b01 	strbne.w	r3, [r0], #1
  404a18:	d380      	bcc.n	40491c <memcpy+0xc>
  404a1a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404a1e:	f820 3b02 	strh.w	r3, [r0], #2
  404a22:	e77b      	b.n	40491c <memcpy+0xc>
  404a24:	3a04      	subs	r2, #4
  404a26:	d3d9      	bcc.n	4049dc <memcpy+0xcc>
  404a28:	3a01      	subs	r2, #1
  404a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404a2e:	f800 3b01 	strb.w	r3, [r0], #1
  404a32:	d2f9      	bcs.n	404a28 <memcpy+0x118>
  404a34:	780b      	ldrb	r3, [r1, #0]
  404a36:	7003      	strb	r3, [r0, #0]
  404a38:	784b      	ldrb	r3, [r1, #1]
  404a3a:	7043      	strb	r3, [r0, #1]
  404a3c:	788b      	ldrb	r3, [r1, #2]
  404a3e:	7083      	strb	r3, [r0, #2]
  404a40:	4660      	mov	r0, ip
  404a42:	4770      	bx	lr

00404a44 <memmove>:
  404a44:	4288      	cmp	r0, r1
  404a46:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a48:	d90d      	bls.n	404a66 <memmove+0x22>
  404a4a:	188b      	adds	r3, r1, r2
  404a4c:	4298      	cmp	r0, r3
  404a4e:	d20a      	bcs.n	404a66 <memmove+0x22>
  404a50:	1884      	adds	r4, r0, r2
  404a52:	2a00      	cmp	r2, #0
  404a54:	d051      	beq.n	404afa <memmove+0xb6>
  404a56:	4622      	mov	r2, r4
  404a58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404a5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404a60:	4299      	cmp	r1, r3
  404a62:	d1f9      	bne.n	404a58 <memmove+0x14>
  404a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404a66:	2a0f      	cmp	r2, #15
  404a68:	d948      	bls.n	404afc <memmove+0xb8>
  404a6a:	ea41 0300 	orr.w	r3, r1, r0
  404a6e:	079b      	lsls	r3, r3, #30
  404a70:	d146      	bne.n	404b00 <memmove+0xbc>
  404a72:	f100 0410 	add.w	r4, r0, #16
  404a76:	f101 0310 	add.w	r3, r1, #16
  404a7a:	4615      	mov	r5, r2
  404a7c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404a80:	f844 6c10 	str.w	r6, [r4, #-16]
  404a84:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404a88:	f844 6c0c 	str.w	r6, [r4, #-12]
  404a8c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404a90:	f844 6c08 	str.w	r6, [r4, #-8]
  404a94:	3d10      	subs	r5, #16
  404a96:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404a9a:	f844 6c04 	str.w	r6, [r4, #-4]
  404a9e:	2d0f      	cmp	r5, #15
  404aa0:	f103 0310 	add.w	r3, r3, #16
  404aa4:	f104 0410 	add.w	r4, r4, #16
  404aa8:	d8e8      	bhi.n	404a7c <memmove+0x38>
  404aaa:	f1a2 0310 	sub.w	r3, r2, #16
  404aae:	f023 030f 	bic.w	r3, r3, #15
  404ab2:	f002 0e0f 	and.w	lr, r2, #15
  404ab6:	3310      	adds	r3, #16
  404ab8:	f1be 0f03 	cmp.w	lr, #3
  404abc:	4419      	add	r1, r3
  404abe:	4403      	add	r3, r0
  404ac0:	d921      	bls.n	404b06 <memmove+0xc2>
  404ac2:	1f1e      	subs	r6, r3, #4
  404ac4:	460d      	mov	r5, r1
  404ac6:	4674      	mov	r4, lr
  404ac8:	3c04      	subs	r4, #4
  404aca:	f855 7b04 	ldr.w	r7, [r5], #4
  404ace:	f846 7f04 	str.w	r7, [r6, #4]!
  404ad2:	2c03      	cmp	r4, #3
  404ad4:	d8f8      	bhi.n	404ac8 <memmove+0x84>
  404ad6:	f1ae 0404 	sub.w	r4, lr, #4
  404ada:	f024 0403 	bic.w	r4, r4, #3
  404ade:	3404      	adds	r4, #4
  404ae0:	4421      	add	r1, r4
  404ae2:	4423      	add	r3, r4
  404ae4:	f002 0203 	and.w	r2, r2, #3
  404ae8:	b162      	cbz	r2, 404b04 <memmove+0xc0>
  404aea:	3b01      	subs	r3, #1
  404aec:	440a      	add	r2, r1
  404aee:	f811 4b01 	ldrb.w	r4, [r1], #1
  404af2:	f803 4f01 	strb.w	r4, [r3, #1]!
  404af6:	428a      	cmp	r2, r1
  404af8:	d1f9      	bne.n	404aee <memmove+0xaa>
  404afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404afc:	4603      	mov	r3, r0
  404afe:	e7f3      	b.n	404ae8 <memmove+0xa4>
  404b00:	4603      	mov	r3, r0
  404b02:	e7f2      	b.n	404aea <memmove+0xa6>
  404b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b06:	4672      	mov	r2, lr
  404b08:	e7ee      	b.n	404ae8 <memmove+0xa4>
  404b0a:	bf00      	nop

00404b0c <__malloc_lock>:
  404b0c:	4801      	ldr	r0, [pc, #4]	; (404b14 <__malloc_lock+0x8>)
  404b0e:	f7ff bb65 	b.w	4041dc <__retarget_lock_acquire_recursive>
  404b12:	bf00      	nop
  404b14:	20400aa8 	.word	0x20400aa8

00404b18 <__malloc_unlock>:
  404b18:	4801      	ldr	r0, [pc, #4]	; (404b20 <__malloc_unlock+0x8>)
  404b1a:	f7ff bb61 	b.w	4041e0 <__retarget_lock_release_recursive>
  404b1e:	bf00      	nop
  404b20:	20400aa8 	.word	0x20400aa8

00404b24 <_realloc_r>:
  404b24:	2900      	cmp	r1, #0
  404b26:	f000 8095 	beq.w	404c54 <_realloc_r+0x130>
  404b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b2e:	460d      	mov	r5, r1
  404b30:	4616      	mov	r6, r2
  404b32:	b083      	sub	sp, #12
  404b34:	4680      	mov	r8, r0
  404b36:	f106 070b 	add.w	r7, r6, #11
  404b3a:	f7ff ffe7 	bl	404b0c <__malloc_lock>
  404b3e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404b42:	2f16      	cmp	r7, #22
  404b44:	f02e 0403 	bic.w	r4, lr, #3
  404b48:	f1a5 0908 	sub.w	r9, r5, #8
  404b4c:	d83c      	bhi.n	404bc8 <_realloc_r+0xa4>
  404b4e:	2210      	movs	r2, #16
  404b50:	4617      	mov	r7, r2
  404b52:	42be      	cmp	r6, r7
  404b54:	d83d      	bhi.n	404bd2 <_realloc_r+0xae>
  404b56:	4294      	cmp	r4, r2
  404b58:	da43      	bge.n	404be2 <_realloc_r+0xbe>
  404b5a:	4bc4      	ldr	r3, [pc, #784]	; (404e6c <_realloc_r+0x348>)
  404b5c:	6899      	ldr	r1, [r3, #8]
  404b5e:	eb09 0004 	add.w	r0, r9, r4
  404b62:	4288      	cmp	r0, r1
  404b64:	f000 80b4 	beq.w	404cd0 <_realloc_r+0x1ac>
  404b68:	6843      	ldr	r3, [r0, #4]
  404b6a:	f023 0101 	bic.w	r1, r3, #1
  404b6e:	4401      	add	r1, r0
  404b70:	6849      	ldr	r1, [r1, #4]
  404b72:	07c9      	lsls	r1, r1, #31
  404b74:	d54c      	bpl.n	404c10 <_realloc_r+0xec>
  404b76:	f01e 0f01 	tst.w	lr, #1
  404b7a:	f000 809b 	beq.w	404cb4 <_realloc_r+0x190>
  404b7e:	4631      	mov	r1, r6
  404b80:	4640      	mov	r0, r8
  404b82:	f7ff fbaf 	bl	4042e4 <_malloc_r>
  404b86:	4606      	mov	r6, r0
  404b88:	2800      	cmp	r0, #0
  404b8a:	d03a      	beq.n	404c02 <_realloc_r+0xde>
  404b8c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404b90:	f023 0301 	bic.w	r3, r3, #1
  404b94:	444b      	add	r3, r9
  404b96:	f1a0 0208 	sub.w	r2, r0, #8
  404b9a:	429a      	cmp	r2, r3
  404b9c:	f000 8121 	beq.w	404de2 <_realloc_r+0x2be>
  404ba0:	1f22      	subs	r2, r4, #4
  404ba2:	2a24      	cmp	r2, #36	; 0x24
  404ba4:	f200 8107 	bhi.w	404db6 <_realloc_r+0x292>
  404ba8:	2a13      	cmp	r2, #19
  404baa:	f200 80db 	bhi.w	404d64 <_realloc_r+0x240>
  404bae:	4603      	mov	r3, r0
  404bb0:	462a      	mov	r2, r5
  404bb2:	6811      	ldr	r1, [r2, #0]
  404bb4:	6019      	str	r1, [r3, #0]
  404bb6:	6851      	ldr	r1, [r2, #4]
  404bb8:	6059      	str	r1, [r3, #4]
  404bba:	6892      	ldr	r2, [r2, #8]
  404bbc:	609a      	str	r2, [r3, #8]
  404bbe:	4629      	mov	r1, r5
  404bc0:	4640      	mov	r0, r8
  404bc2:	f7ff f871 	bl	403ca8 <_free_r>
  404bc6:	e01c      	b.n	404c02 <_realloc_r+0xde>
  404bc8:	f027 0707 	bic.w	r7, r7, #7
  404bcc:	2f00      	cmp	r7, #0
  404bce:	463a      	mov	r2, r7
  404bd0:	dabf      	bge.n	404b52 <_realloc_r+0x2e>
  404bd2:	2600      	movs	r6, #0
  404bd4:	230c      	movs	r3, #12
  404bd6:	4630      	mov	r0, r6
  404bd8:	f8c8 3000 	str.w	r3, [r8]
  404bdc:	b003      	add	sp, #12
  404bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404be2:	462e      	mov	r6, r5
  404be4:	1be3      	subs	r3, r4, r7
  404be6:	2b0f      	cmp	r3, #15
  404be8:	d81e      	bhi.n	404c28 <_realloc_r+0x104>
  404bea:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404bee:	f003 0301 	and.w	r3, r3, #1
  404bf2:	4323      	orrs	r3, r4
  404bf4:	444c      	add	r4, r9
  404bf6:	f8c9 3004 	str.w	r3, [r9, #4]
  404bfa:	6863      	ldr	r3, [r4, #4]
  404bfc:	f043 0301 	orr.w	r3, r3, #1
  404c00:	6063      	str	r3, [r4, #4]
  404c02:	4640      	mov	r0, r8
  404c04:	f7ff ff88 	bl	404b18 <__malloc_unlock>
  404c08:	4630      	mov	r0, r6
  404c0a:	b003      	add	sp, #12
  404c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c10:	f023 0303 	bic.w	r3, r3, #3
  404c14:	18e1      	adds	r1, r4, r3
  404c16:	4291      	cmp	r1, r2
  404c18:	db1f      	blt.n	404c5a <_realloc_r+0x136>
  404c1a:	68c3      	ldr	r3, [r0, #12]
  404c1c:	6882      	ldr	r2, [r0, #8]
  404c1e:	462e      	mov	r6, r5
  404c20:	60d3      	str	r3, [r2, #12]
  404c22:	460c      	mov	r4, r1
  404c24:	609a      	str	r2, [r3, #8]
  404c26:	e7dd      	b.n	404be4 <_realloc_r+0xc0>
  404c28:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404c2c:	eb09 0107 	add.w	r1, r9, r7
  404c30:	f002 0201 	and.w	r2, r2, #1
  404c34:	444c      	add	r4, r9
  404c36:	f043 0301 	orr.w	r3, r3, #1
  404c3a:	4317      	orrs	r7, r2
  404c3c:	f8c9 7004 	str.w	r7, [r9, #4]
  404c40:	604b      	str	r3, [r1, #4]
  404c42:	6863      	ldr	r3, [r4, #4]
  404c44:	f043 0301 	orr.w	r3, r3, #1
  404c48:	3108      	adds	r1, #8
  404c4a:	6063      	str	r3, [r4, #4]
  404c4c:	4640      	mov	r0, r8
  404c4e:	f7ff f82b 	bl	403ca8 <_free_r>
  404c52:	e7d6      	b.n	404c02 <_realloc_r+0xde>
  404c54:	4611      	mov	r1, r2
  404c56:	f7ff bb45 	b.w	4042e4 <_malloc_r>
  404c5a:	f01e 0f01 	tst.w	lr, #1
  404c5e:	d18e      	bne.n	404b7e <_realloc_r+0x5a>
  404c60:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404c64:	eba9 0a01 	sub.w	sl, r9, r1
  404c68:	f8da 1004 	ldr.w	r1, [sl, #4]
  404c6c:	f021 0103 	bic.w	r1, r1, #3
  404c70:	440b      	add	r3, r1
  404c72:	4423      	add	r3, r4
  404c74:	4293      	cmp	r3, r2
  404c76:	db25      	blt.n	404cc4 <_realloc_r+0x1a0>
  404c78:	68c2      	ldr	r2, [r0, #12]
  404c7a:	6881      	ldr	r1, [r0, #8]
  404c7c:	4656      	mov	r6, sl
  404c7e:	60ca      	str	r2, [r1, #12]
  404c80:	6091      	str	r1, [r2, #8]
  404c82:	f8da 100c 	ldr.w	r1, [sl, #12]
  404c86:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404c8a:	1f22      	subs	r2, r4, #4
  404c8c:	2a24      	cmp	r2, #36	; 0x24
  404c8e:	60c1      	str	r1, [r0, #12]
  404c90:	6088      	str	r0, [r1, #8]
  404c92:	f200 8094 	bhi.w	404dbe <_realloc_r+0x29a>
  404c96:	2a13      	cmp	r2, #19
  404c98:	d96f      	bls.n	404d7a <_realloc_r+0x256>
  404c9a:	6829      	ldr	r1, [r5, #0]
  404c9c:	f8ca 1008 	str.w	r1, [sl, #8]
  404ca0:	6869      	ldr	r1, [r5, #4]
  404ca2:	f8ca 100c 	str.w	r1, [sl, #12]
  404ca6:	2a1b      	cmp	r2, #27
  404ca8:	f200 80a2 	bhi.w	404df0 <_realloc_r+0x2cc>
  404cac:	3508      	adds	r5, #8
  404cae:	f10a 0210 	add.w	r2, sl, #16
  404cb2:	e063      	b.n	404d7c <_realloc_r+0x258>
  404cb4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404cb8:	eba9 0a03 	sub.w	sl, r9, r3
  404cbc:	f8da 1004 	ldr.w	r1, [sl, #4]
  404cc0:	f021 0103 	bic.w	r1, r1, #3
  404cc4:	1863      	adds	r3, r4, r1
  404cc6:	4293      	cmp	r3, r2
  404cc8:	f6ff af59 	blt.w	404b7e <_realloc_r+0x5a>
  404ccc:	4656      	mov	r6, sl
  404cce:	e7d8      	b.n	404c82 <_realloc_r+0x15e>
  404cd0:	6841      	ldr	r1, [r0, #4]
  404cd2:	f021 0b03 	bic.w	fp, r1, #3
  404cd6:	44a3      	add	fp, r4
  404cd8:	f107 0010 	add.w	r0, r7, #16
  404cdc:	4583      	cmp	fp, r0
  404cde:	da56      	bge.n	404d8e <_realloc_r+0x26a>
  404ce0:	f01e 0f01 	tst.w	lr, #1
  404ce4:	f47f af4b 	bne.w	404b7e <_realloc_r+0x5a>
  404ce8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404cec:	eba9 0a01 	sub.w	sl, r9, r1
  404cf0:	f8da 1004 	ldr.w	r1, [sl, #4]
  404cf4:	f021 0103 	bic.w	r1, r1, #3
  404cf8:	448b      	add	fp, r1
  404cfa:	4558      	cmp	r0, fp
  404cfc:	dce2      	bgt.n	404cc4 <_realloc_r+0x1a0>
  404cfe:	4656      	mov	r6, sl
  404d00:	f8da 100c 	ldr.w	r1, [sl, #12]
  404d04:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404d08:	1f22      	subs	r2, r4, #4
  404d0a:	2a24      	cmp	r2, #36	; 0x24
  404d0c:	60c1      	str	r1, [r0, #12]
  404d0e:	6088      	str	r0, [r1, #8]
  404d10:	f200 808f 	bhi.w	404e32 <_realloc_r+0x30e>
  404d14:	2a13      	cmp	r2, #19
  404d16:	f240 808a 	bls.w	404e2e <_realloc_r+0x30a>
  404d1a:	6829      	ldr	r1, [r5, #0]
  404d1c:	f8ca 1008 	str.w	r1, [sl, #8]
  404d20:	6869      	ldr	r1, [r5, #4]
  404d22:	f8ca 100c 	str.w	r1, [sl, #12]
  404d26:	2a1b      	cmp	r2, #27
  404d28:	f200 808a 	bhi.w	404e40 <_realloc_r+0x31c>
  404d2c:	3508      	adds	r5, #8
  404d2e:	f10a 0210 	add.w	r2, sl, #16
  404d32:	6829      	ldr	r1, [r5, #0]
  404d34:	6011      	str	r1, [r2, #0]
  404d36:	6869      	ldr	r1, [r5, #4]
  404d38:	6051      	str	r1, [r2, #4]
  404d3a:	68a9      	ldr	r1, [r5, #8]
  404d3c:	6091      	str	r1, [r2, #8]
  404d3e:	eb0a 0107 	add.w	r1, sl, r7
  404d42:	ebab 0207 	sub.w	r2, fp, r7
  404d46:	f042 0201 	orr.w	r2, r2, #1
  404d4a:	6099      	str	r1, [r3, #8]
  404d4c:	604a      	str	r2, [r1, #4]
  404d4e:	f8da 3004 	ldr.w	r3, [sl, #4]
  404d52:	f003 0301 	and.w	r3, r3, #1
  404d56:	431f      	orrs	r7, r3
  404d58:	4640      	mov	r0, r8
  404d5a:	f8ca 7004 	str.w	r7, [sl, #4]
  404d5e:	f7ff fedb 	bl	404b18 <__malloc_unlock>
  404d62:	e751      	b.n	404c08 <_realloc_r+0xe4>
  404d64:	682b      	ldr	r3, [r5, #0]
  404d66:	6003      	str	r3, [r0, #0]
  404d68:	686b      	ldr	r3, [r5, #4]
  404d6a:	6043      	str	r3, [r0, #4]
  404d6c:	2a1b      	cmp	r2, #27
  404d6e:	d82d      	bhi.n	404dcc <_realloc_r+0x2a8>
  404d70:	f100 0308 	add.w	r3, r0, #8
  404d74:	f105 0208 	add.w	r2, r5, #8
  404d78:	e71b      	b.n	404bb2 <_realloc_r+0x8e>
  404d7a:	4632      	mov	r2, r6
  404d7c:	6829      	ldr	r1, [r5, #0]
  404d7e:	6011      	str	r1, [r2, #0]
  404d80:	6869      	ldr	r1, [r5, #4]
  404d82:	6051      	str	r1, [r2, #4]
  404d84:	68a9      	ldr	r1, [r5, #8]
  404d86:	6091      	str	r1, [r2, #8]
  404d88:	461c      	mov	r4, r3
  404d8a:	46d1      	mov	r9, sl
  404d8c:	e72a      	b.n	404be4 <_realloc_r+0xc0>
  404d8e:	eb09 0107 	add.w	r1, r9, r7
  404d92:	ebab 0b07 	sub.w	fp, fp, r7
  404d96:	f04b 0201 	orr.w	r2, fp, #1
  404d9a:	6099      	str	r1, [r3, #8]
  404d9c:	604a      	str	r2, [r1, #4]
  404d9e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404da2:	f003 0301 	and.w	r3, r3, #1
  404da6:	431f      	orrs	r7, r3
  404da8:	4640      	mov	r0, r8
  404daa:	f845 7c04 	str.w	r7, [r5, #-4]
  404dae:	f7ff feb3 	bl	404b18 <__malloc_unlock>
  404db2:	462e      	mov	r6, r5
  404db4:	e728      	b.n	404c08 <_realloc_r+0xe4>
  404db6:	4629      	mov	r1, r5
  404db8:	f7ff fe44 	bl	404a44 <memmove>
  404dbc:	e6ff      	b.n	404bbe <_realloc_r+0x9a>
  404dbe:	4629      	mov	r1, r5
  404dc0:	4630      	mov	r0, r6
  404dc2:	461c      	mov	r4, r3
  404dc4:	46d1      	mov	r9, sl
  404dc6:	f7ff fe3d 	bl	404a44 <memmove>
  404dca:	e70b      	b.n	404be4 <_realloc_r+0xc0>
  404dcc:	68ab      	ldr	r3, [r5, #8]
  404dce:	6083      	str	r3, [r0, #8]
  404dd0:	68eb      	ldr	r3, [r5, #12]
  404dd2:	60c3      	str	r3, [r0, #12]
  404dd4:	2a24      	cmp	r2, #36	; 0x24
  404dd6:	d017      	beq.n	404e08 <_realloc_r+0x2e4>
  404dd8:	f100 0310 	add.w	r3, r0, #16
  404ddc:	f105 0210 	add.w	r2, r5, #16
  404de0:	e6e7      	b.n	404bb2 <_realloc_r+0x8e>
  404de2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404de6:	f023 0303 	bic.w	r3, r3, #3
  404dea:	441c      	add	r4, r3
  404dec:	462e      	mov	r6, r5
  404dee:	e6f9      	b.n	404be4 <_realloc_r+0xc0>
  404df0:	68a9      	ldr	r1, [r5, #8]
  404df2:	f8ca 1010 	str.w	r1, [sl, #16]
  404df6:	68e9      	ldr	r1, [r5, #12]
  404df8:	f8ca 1014 	str.w	r1, [sl, #20]
  404dfc:	2a24      	cmp	r2, #36	; 0x24
  404dfe:	d00c      	beq.n	404e1a <_realloc_r+0x2f6>
  404e00:	3510      	adds	r5, #16
  404e02:	f10a 0218 	add.w	r2, sl, #24
  404e06:	e7b9      	b.n	404d7c <_realloc_r+0x258>
  404e08:	692b      	ldr	r3, [r5, #16]
  404e0a:	6103      	str	r3, [r0, #16]
  404e0c:	696b      	ldr	r3, [r5, #20]
  404e0e:	6143      	str	r3, [r0, #20]
  404e10:	f105 0218 	add.w	r2, r5, #24
  404e14:	f100 0318 	add.w	r3, r0, #24
  404e18:	e6cb      	b.n	404bb2 <_realloc_r+0x8e>
  404e1a:	692a      	ldr	r2, [r5, #16]
  404e1c:	f8ca 2018 	str.w	r2, [sl, #24]
  404e20:	696a      	ldr	r2, [r5, #20]
  404e22:	f8ca 201c 	str.w	r2, [sl, #28]
  404e26:	3518      	adds	r5, #24
  404e28:	f10a 0220 	add.w	r2, sl, #32
  404e2c:	e7a6      	b.n	404d7c <_realloc_r+0x258>
  404e2e:	4632      	mov	r2, r6
  404e30:	e77f      	b.n	404d32 <_realloc_r+0x20e>
  404e32:	4629      	mov	r1, r5
  404e34:	4630      	mov	r0, r6
  404e36:	9301      	str	r3, [sp, #4]
  404e38:	f7ff fe04 	bl	404a44 <memmove>
  404e3c:	9b01      	ldr	r3, [sp, #4]
  404e3e:	e77e      	b.n	404d3e <_realloc_r+0x21a>
  404e40:	68a9      	ldr	r1, [r5, #8]
  404e42:	f8ca 1010 	str.w	r1, [sl, #16]
  404e46:	68e9      	ldr	r1, [r5, #12]
  404e48:	f8ca 1014 	str.w	r1, [sl, #20]
  404e4c:	2a24      	cmp	r2, #36	; 0x24
  404e4e:	d003      	beq.n	404e58 <_realloc_r+0x334>
  404e50:	3510      	adds	r5, #16
  404e52:	f10a 0218 	add.w	r2, sl, #24
  404e56:	e76c      	b.n	404d32 <_realloc_r+0x20e>
  404e58:	692a      	ldr	r2, [r5, #16]
  404e5a:	f8ca 2018 	str.w	r2, [sl, #24]
  404e5e:	696a      	ldr	r2, [r5, #20]
  404e60:	f8ca 201c 	str.w	r2, [sl, #28]
  404e64:	3518      	adds	r5, #24
  404e66:	f10a 0220 	add.w	r2, sl, #32
  404e6a:	e762      	b.n	404d32 <_realloc_r+0x20e>
  404e6c:	204005b0 	.word	0x204005b0

00404e70 <_sbrk_r>:
  404e70:	b538      	push	{r3, r4, r5, lr}
  404e72:	4c07      	ldr	r4, [pc, #28]	; (404e90 <_sbrk_r+0x20>)
  404e74:	2300      	movs	r3, #0
  404e76:	4605      	mov	r5, r0
  404e78:	4608      	mov	r0, r1
  404e7a:	6023      	str	r3, [r4, #0]
  404e7c:	f7fc fcce 	bl	40181c <_sbrk>
  404e80:	1c43      	adds	r3, r0, #1
  404e82:	d000      	beq.n	404e86 <_sbrk_r+0x16>
  404e84:	bd38      	pop	{r3, r4, r5, pc}
  404e86:	6823      	ldr	r3, [r4, #0]
  404e88:	2b00      	cmp	r3, #0
  404e8a:	d0fb      	beq.n	404e84 <_sbrk_r+0x14>
  404e8c:	602b      	str	r3, [r5, #0]
  404e8e:	bd38      	pop	{r3, r4, r5, pc}
  404e90:	20400abc 	.word	0x20400abc

00404e94 <__sread>:
  404e94:	b510      	push	{r4, lr}
  404e96:	460c      	mov	r4, r1
  404e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404e9c:	f000 fa76 	bl	40538c <_read_r>
  404ea0:	2800      	cmp	r0, #0
  404ea2:	db03      	blt.n	404eac <__sread+0x18>
  404ea4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404ea6:	4403      	add	r3, r0
  404ea8:	6523      	str	r3, [r4, #80]	; 0x50
  404eaa:	bd10      	pop	{r4, pc}
  404eac:	89a3      	ldrh	r3, [r4, #12]
  404eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404eb2:	81a3      	strh	r3, [r4, #12]
  404eb4:	bd10      	pop	{r4, pc}
  404eb6:	bf00      	nop

00404eb8 <__swrite>:
  404eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ebc:	4616      	mov	r6, r2
  404ebe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404ec2:	461f      	mov	r7, r3
  404ec4:	05d3      	lsls	r3, r2, #23
  404ec6:	460c      	mov	r4, r1
  404ec8:	4605      	mov	r5, r0
  404eca:	d507      	bpl.n	404edc <__swrite+0x24>
  404ecc:	2200      	movs	r2, #0
  404ece:	2302      	movs	r3, #2
  404ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ed4:	f000 fa44 	bl	405360 <_lseek_r>
  404ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404ee0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404ee4:	81a2      	strh	r2, [r4, #12]
  404ee6:	463b      	mov	r3, r7
  404ee8:	4632      	mov	r2, r6
  404eea:	4628      	mov	r0, r5
  404eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404ef0:	f000 b924 	b.w	40513c <_write_r>

00404ef4 <__sseek>:
  404ef4:	b510      	push	{r4, lr}
  404ef6:	460c      	mov	r4, r1
  404ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404efc:	f000 fa30 	bl	405360 <_lseek_r>
  404f00:	89a3      	ldrh	r3, [r4, #12]
  404f02:	1c42      	adds	r2, r0, #1
  404f04:	bf0e      	itee	eq
  404f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404f0e:	6520      	strne	r0, [r4, #80]	; 0x50
  404f10:	81a3      	strh	r3, [r4, #12]
  404f12:	bd10      	pop	{r4, pc}

00404f14 <__sclose>:
  404f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f18:	f000 b988 	b.w	40522c <_close_r>
	...

00404f40 <strlen>:
  404f40:	f890 f000 	pld	[r0]
  404f44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404f48:	f020 0107 	bic.w	r1, r0, #7
  404f4c:	f06f 0c00 	mvn.w	ip, #0
  404f50:	f010 0407 	ands.w	r4, r0, #7
  404f54:	f891 f020 	pld	[r1, #32]
  404f58:	f040 8049 	bne.w	404fee <strlen+0xae>
  404f5c:	f04f 0400 	mov.w	r4, #0
  404f60:	f06f 0007 	mvn.w	r0, #7
  404f64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404f68:	f891 f040 	pld	[r1, #64]	; 0x40
  404f6c:	f100 0008 	add.w	r0, r0, #8
  404f70:	fa82 f24c 	uadd8	r2, r2, ip
  404f74:	faa4 f28c 	sel	r2, r4, ip
  404f78:	fa83 f34c 	uadd8	r3, r3, ip
  404f7c:	faa2 f38c 	sel	r3, r2, ip
  404f80:	bb4b      	cbnz	r3, 404fd6 <strlen+0x96>
  404f82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404f86:	fa82 f24c 	uadd8	r2, r2, ip
  404f8a:	f100 0008 	add.w	r0, r0, #8
  404f8e:	faa4 f28c 	sel	r2, r4, ip
  404f92:	fa83 f34c 	uadd8	r3, r3, ip
  404f96:	faa2 f38c 	sel	r3, r2, ip
  404f9a:	b9e3      	cbnz	r3, 404fd6 <strlen+0x96>
  404f9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404fa0:	fa82 f24c 	uadd8	r2, r2, ip
  404fa4:	f100 0008 	add.w	r0, r0, #8
  404fa8:	faa4 f28c 	sel	r2, r4, ip
  404fac:	fa83 f34c 	uadd8	r3, r3, ip
  404fb0:	faa2 f38c 	sel	r3, r2, ip
  404fb4:	b97b      	cbnz	r3, 404fd6 <strlen+0x96>
  404fb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404fba:	f101 0120 	add.w	r1, r1, #32
  404fbe:	fa82 f24c 	uadd8	r2, r2, ip
  404fc2:	f100 0008 	add.w	r0, r0, #8
  404fc6:	faa4 f28c 	sel	r2, r4, ip
  404fca:	fa83 f34c 	uadd8	r3, r3, ip
  404fce:	faa2 f38c 	sel	r3, r2, ip
  404fd2:	2b00      	cmp	r3, #0
  404fd4:	d0c6      	beq.n	404f64 <strlen+0x24>
  404fd6:	2a00      	cmp	r2, #0
  404fd8:	bf04      	itt	eq
  404fda:	3004      	addeq	r0, #4
  404fdc:	461a      	moveq	r2, r3
  404fde:	ba12      	rev	r2, r2
  404fe0:	fab2 f282 	clz	r2, r2
  404fe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404fe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404fec:	4770      	bx	lr
  404fee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404ff2:	f004 0503 	and.w	r5, r4, #3
  404ff6:	f1c4 0000 	rsb	r0, r4, #0
  404ffa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404ffe:	f014 0f04 	tst.w	r4, #4
  405002:	f891 f040 	pld	[r1, #64]	; 0x40
  405006:	fa0c f505 	lsl.w	r5, ip, r5
  40500a:	ea62 0205 	orn	r2, r2, r5
  40500e:	bf1c      	itt	ne
  405010:	ea63 0305 	ornne	r3, r3, r5
  405014:	4662      	movne	r2, ip
  405016:	f04f 0400 	mov.w	r4, #0
  40501a:	e7a9      	b.n	404f70 <strlen+0x30>

0040501c <__swbuf_r>:
  40501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40501e:	460d      	mov	r5, r1
  405020:	4614      	mov	r4, r2
  405022:	4606      	mov	r6, r0
  405024:	b110      	cbz	r0, 40502c <__swbuf_r+0x10>
  405026:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405028:	2b00      	cmp	r3, #0
  40502a:	d04b      	beq.n	4050c4 <__swbuf_r+0xa8>
  40502c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405030:	69a3      	ldr	r3, [r4, #24]
  405032:	60a3      	str	r3, [r4, #8]
  405034:	b291      	uxth	r1, r2
  405036:	0708      	lsls	r0, r1, #28
  405038:	d539      	bpl.n	4050ae <__swbuf_r+0x92>
  40503a:	6923      	ldr	r3, [r4, #16]
  40503c:	2b00      	cmp	r3, #0
  40503e:	d036      	beq.n	4050ae <__swbuf_r+0x92>
  405040:	b2ed      	uxtb	r5, r5
  405042:	0489      	lsls	r1, r1, #18
  405044:	462f      	mov	r7, r5
  405046:	d515      	bpl.n	405074 <__swbuf_r+0x58>
  405048:	6822      	ldr	r2, [r4, #0]
  40504a:	6961      	ldr	r1, [r4, #20]
  40504c:	1ad3      	subs	r3, r2, r3
  40504e:	428b      	cmp	r3, r1
  405050:	da1c      	bge.n	40508c <__swbuf_r+0x70>
  405052:	3301      	adds	r3, #1
  405054:	68a1      	ldr	r1, [r4, #8]
  405056:	1c50      	adds	r0, r2, #1
  405058:	3901      	subs	r1, #1
  40505a:	60a1      	str	r1, [r4, #8]
  40505c:	6020      	str	r0, [r4, #0]
  40505e:	7015      	strb	r5, [r2, #0]
  405060:	6962      	ldr	r2, [r4, #20]
  405062:	429a      	cmp	r2, r3
  405064:	d01a      	beq.n	40509c <__swbuf_r+0x80>
  405066:	89a3      	ldrh	r3, [r4, #12]
  405068:	07db      	lsls	r3, r3, #31
  40506a:	d501      	bpl.n	405070 <__swbuf_r+0x54>
  40506c:	2d0a      	cmp	r5, #10
  40506e:	d015      	beq.n	40509c <__swbuf_r+0x80>
  405070:	4638      	mov	r0, r7
  405072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405074:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40507a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40507e:	81a2      	strh	r2, [r4, #12]
  405080:	6822      	ldr	r2, [r4, #0]
  405082:	6661      	str	r1, [r4, #100]	; 0x64
  405084:	6961      	ldr	r1, [r4, #20]
  405086:	1ad3      	subs	r3, r2, r3
  405088:	428b      	cmp	r3, r1
  40508a:	dbe2      	blt.n	405052 <__swbuf_r+0x36>
  40508c:	4621      	mov	r1, r4
  40508e:	4630      	mov	r0, r6
  405090:	f7fe fc8c 	bl	4039ac <_fflush_r>
  405094:	b940      	cbnz	r0, 4050a8 <__swbuf_r+0x8c>
  405096:	6822      	ldr	r2, [r4, #0]
  405098:	2301      	movs	r3, #1
  40509a:	e7db      	b.n	405054 <__swbuf_r+0x38>
  40509c:	4621      	mov	r1, r4
  40509e:	4630      	mov	r0, r6
  4050a0:	f7fe fc84 	bl	4039ac <_fflush_r>
  4050a4:	2800      	cmp	r0, #0
  4050a6:	d0e3      	beq.n	405070 <__swbuf_r+0x54>
  4050a8:	f04f 37ff 	mov.w	r7, #4294967295
  4050ac:	e7e0      	b.n	405070 <__swbuf_r+0x54>
  4050ae:	4621      	mov	r1, r4
  4050b0:	4630      	mov	r0, r6
  4050b2:	f7fe fb67 	bl	403784 <__swsetup_r>
  4050b6:	2800      	cmp	r0, #0
  4050b8:	d1f6      	bne.n	4050a8 <__swbuf_r+0x8c>
  4050ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050be:	6923      	ldr	r3, [r4, #16]
  4050c0:	b291      	uxth	r1, r2
  4050c2:	e7bd      	b.n	405040 <__swbuf_r+0x24>
  4050c4:	f7fe fcca 	bl	403a5c <__sinit>
  4050c8:	e7b0      	b.n	40502c <__swbuf_r+0x10>
  4050ca:	bf00      	nop

004050cc <_wcrtomb_r>:
  4050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4050ce:	4606      	mov	r6, r0
  4050d0:	b085      	sub	sp, #20
  4050d2:	461f      	mov	r7, r3
  4050d4:	b189      	cbz	r1, 4050fa <_wcrtomb_r+0x2e>
  4050d6:	4c10      	ldr	r4, [pc, #64]	; (405118 <_wcrtomb_r+0x4c>)
  4050d8:	4d10      	ldr	r5, [pc, #64]	; (40511c <_wcrtomb_r+0x50>)
  4050da:	6824      	ldr	r4, [r4, #0]
  4050dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4050de:	2c00      	cmp	r4, #0
  4050e0:	bf08      	it	eq
  4050e2:	462c      	moveq	r4, r5
  4050e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4050e8:	47a0      	blx	r4
  4050ea:	1c43      	adds	r3, r0, #1
  4050ec:	d103      	bne.n	4050f6 <_wcrtomb_r+0x2a>
  4050ee:	2200      	movs	r2, #0
  4050f0:	238a      	movs	r3, #138	; 0x8a
  4050f2:	603a      	str	r2, [r7, #0]
  4050f4:	6033      	str	r3, [r6, #0]
  4050f6:	b005      	add	sp, #20
  4050f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050fa:	460c      	mov	r4, r1
  4050fc:	4906      	ldr	r1, [pc, #24]	; (405118 <_wcrtomb_r+0x4c>)
  4050fe:	4a07      	ldr	r2, [pc, #28]	; (40511c <_wcrtomb_r+0x50>)
  405100:	6809      	ldr	r1, [r1, #0]
  405102:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405104:	2900      	cmp	r1, #0
  405106:	bf08      	it	eq
  405108:	4611      	moveq	r1, r2
  40510a:	4622      	mov	r2, r4
  40510c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405110:	a901      	add	r1, sp, #4
  405112:	47a0      	blx	r4
  405114:	e7e9      	b.n	4050ea <_wcrtomb_r+0x1e>
  405116:	bf00      	nop
  405118:	20400010 	.word	0x20400010
  40511c:	20400444 	.word	0x20400444

00405120 <__ascii_wctomb>:
  405120:	b121      	cbz	r1, 40512c <__ascii_wctomb+0xc>
  405122:	2aff      	cmp	r2, #255	; 0xff
  405124:	d804      	bhi.n	405130 <__ascii_wctomb+0x10>
  405126:	700a      	strb	r2, [r1, #0]
  405128:	2001      	movs	r0, #1
  40512a:	4770      	bx	lr
  40512c:	4608      	mov	r0, r1
  40512e:	4770      	bx	lr
  405130:	238a      	movs	r3, #138	; 0x8a
  405132:	6003      	str	r3, [r0, #0]
  405134:	f04f 30ff 	mov.w	r0, #4294967295
  405138:	4770      	bx	lr
  40513a:	bf00      	nop

0040513c <_write_r>:
  40513c:	b570      	push	{r4, r5, r6, lr}
  40513e:	460d      	mov	r5, r1
  405140:	4c08      	ldr	r4, [pc, #32]	; (405164 <_write_r+0x28>)
  405142:	4611      	mov	r1, r2
  405144:	4606      	mov	r6, r0
  405146:	461a      	mov	r2, r3
  405148:	4628      	mov	r0, r5
  40514a:	2300      	movs	r3, #0
  40514c:	6023      	str	r3, [r4, #0]
  40514e:	f7fb fa15 	bl	40057c <_write>
  405152:	1c43      	adds	r3, r0, #1
  405154:	d000      	beq.n	405158 <_write_r+0x1c>
  405156:	bd70      	pop	{r4, r5, r6, pc}
  405158:	6823      	ldr	r3, [r4, #0]
  40515a:	2b00      	cmp	r3, #0
  40515c:	d0fb      	beq.n	405156 <_write_r+0x1a>
  40515e:	6033      	str	r3, [r6, #0]
  405160:	bd70      	pop	{r4, r5, r6, pc}
  405162:	bf00      	nop
  405164:	20400abc 	.word	0x20400abc

00405168 <__register_exitproc>:
  405168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40516c:	4d2c      	ldr	r5, [pc, #176]	; (405220 <__register_exitproc+0xb8>)
  40516e:	4606      	mov	r6, r0
  405170:	6828      	ldr	r0, [r5, #0]
  405172:	4698      	mov	r8, r3
  405174:	460f      	mov	r7, r1
  405176:	4691      	mov	r9, r2
  405178:	f7ff f830 	bl	4041dc <__retarget_lock_acquire_recursive>
  40517c:	4b29      	ldr	r3, [pc, #164]	; (405224 <__register_exitproc+0xbc>)
  40517e:	681c      	ldr	r4, [r3, #0]
  405180:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405184:	2b00      	cmp	r3, #0
  405186:	d03e      	beq.n	405206 <__register_exitproc+0x9e>
  405188:	685a      	ldr	r2, [r3, #4]
  40518a:	2a1f      	cmp	r2, #31
  40518c:	dc1c      	bgt.n	4051c8 <__register_exitproc+0x60>
  40518e:	f102 0e01 	add.w	lr, r2, #1
  405192:	b176      	cbz	r6, 4051b2 <__register_exitproc+0x4a>
  405194:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405198:	2401      	movs	r4, #1
  40519a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40519e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4051a2:	4094      	lsls	r4, r2
  4051a4:	4320      	orrs	r0, r4
  4051a6:	2e02      	cmp	r6, #2
  4051a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4051ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4051b0:	d023      	beq.n	4051fa <__register_exitproc+0x92>
  4051b2:	3202      	adds	r2, #2
  4051b4:	f8c3 e004 	str.w	lr, [r3, #4]
  4051b8:	6828      	ldr	r0, [r5, #0]
  4051ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4051be:	f7ff f80f 	bl	4041e0 <__retarget_lock_release_recursive>
  4051c2:	2000      	movs	r0, #0
  4051c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051c8:	4b17      	ldr	r3, [pc, #92]	; (405228 <__register_exitproc+0xc0>)
  4051ca:	b30b      	cbz	r3, 405210 <__register_exitproc+0xa8>
  4051cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4051d0:	f7ff f880 	bl	4042d4 <malloc>
  4051d4:	4603      	mov	r3, r0
  4051d6:	b1d8      	cbz	r0, 405210 <__register_exitproc+0xa8>
  4051d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4051dc:	6002      	str	r2, [r0, #0]
  4051de:	2100      	movs	r1, #0
  4051e0:	6041      	str	r1, [r0, #4]
  4051e2:	460a      	mov	r2, r1
  4051e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4051e8:	f04f 0e01 	mov.w	lr, #1
  4051ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4051f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4051f4:	2e00      	cmp	r6, #0
  4051f6:	d0dc      	beq.n	4051b2 <__register_exitproc+0x4a>
  4051f8:	e7cc      	b.n	405194 <__register_exitproc+0x2c>
  4051fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4051fe:	430c      	orrs	r4, r1
  405200:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405204:	e7d5      	b.n	4051b2 <__register_exitproc+0x4a>
  405206:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40520a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40520e:	e7bb      	b.n	405188 <__register_exitproc+0x20>
  405210:	6828      	ldr	r0, [r5, #0]
  405212:	f7fe ffe5 	bl	4041e0 <__retarget_lock_release_recursive>
  405216:	f04f 30ff 	mov.w	r0, #4294967295
  40521a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40521e:	bf00      	nop
  405220:	20400440 	.word	0x20400440
  405224:	0040540c 	.word	0x0040540c
  405228:	004042d5 	.word	0x004042d5

0040522c <_close_r>:
  40522c:	b538      	push	{r3, r4, r5, lr}
  40522e:	4c07      	ldr	r4, [pc, #28]	; (40524c <_close_r+0x20>)
  405230:	2300      	movs	r3, #0
  405232:	4605      	mov	r5, r0
  405234:	4608      	mov	r0, r1
  405236:	6023      	str	r3, [r4, #0]
  405238:	f7fc fb1c 	bl	401874 <_close>
  40523c:	1c43      	adds	r3, r0, #1
  40523e:	d000      	beq.n	405242 <_close_r+0x16>
  405240:	bd38      	pop	{r3, r4, r5, pc}
  405242:	6823      	ldr	r3, [r4, #0]
  405244:	2b00      	cmp	r3, #0
  405246:	d0fb      	beq.n	405240 <_close_r+0x14>
  405248:	602b      	str	r3, [r5, #0]
  40524a:	bd38      	pop	{r3, r4, r5, pc}
  40524c:	20400abc 	.word	0x20400abc

00405250 <_fclose_r>:
  405250:	b570      	push	{r4, r5, r6, lr}
  405252:	b159      	cbz	r1, 40526c <_fclose_r+0x1c>
  405254:	4605      	mov	r5, r0
  405256:	460c      	mov	r4, r1
  405258:	b110      	cbz	r0, 405260 <_fclose_r+0x10>
  40525a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40525c:	2b00      	cmp	r3, #0
  40525e:	d03c      	beq.n	4052da <_fclose_r+0x8a>
  405260:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405262:	07d8      	lsls	r0, r3, #31
  405264:	d505      	bpl.n	405272 <_fclose_r+0x22>
  405266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40526a:	b92b      	cbnz	r3, 405278 <_fclose_r+0x28>
  40526c:	2600      	movs	r6, #0
  40526e:	4630      	mov	r0, r6
  405270:	bd70      	pop	{r4, r5, r6, pc}
  405272:	89a3      	ldrh	r3, [r4, #12]
  405274:	0599      	lsls	r1, r3, #22
  405276:	d53c      	bpl.n	4052f2 <_fclose_r+0xa2>
  405278:	4621      	mov	r1, r4
  40527a:	4628      	mov	r0, r5
  40527c:	f7fe faf6 	bl	40386c <__sflush_r>
  405280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405282:	4606      	mov	r6, r0
  405284:	b133      	cbz	r3, 405294 <_fclose_r+0x44>
  405286:	69e1      	ldr	r1, [r4, #28]
  405288:	4628      	mov	r0, r5
  40528a:	4798      	blx	r3
  40528c:	2800      	cmp	r0, #0
  40528e:	bfb8      	it	lt
  405290:	f04f 36ff 	movlt.w	r6, #4294967295
  405294:	89a3      	ldrh	r3, [r4, #12]
  405296:	061a      	lsls	r2, r3, #24
  405298:	d422      	bmi.n	4052e0 <_fclose_r+0x90>
  40529a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40529c:	b141      	cbz	r1, 4052b0 <_fclose_r+0x60>
  40529e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4052a2:	4299      	cmp	r1, r3
  4052a4:	d002      	beq.n	4052ac <_fclose_r+0x5c>
  4052a6:	4628      	mov	r0, r5
  4052a8:	f7fe fcfe 	bl	403ca8 <_free_r>
  4052ac:	2300      	movs	r3, #0
  4052ae:	6323      	str	r3, [r4, #48]	; 0x30
  4052b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4052b2:	b121      	cbz	r1, 4052be <_fclose_r+0x6e>
  4052b4:	4628      	mov	r0, r5
  4052b6:	f7fe fcf7 	bl	403ca8 <_free_r>
  4052ba:	2300      	movs	r3, #0
  4052bc:	6463      	str	r3, [r4, #68]	; 0x44
  4052be:	f7fe fbf9 	bl	403ab4 <__sfp_lock_acquire>
  4052c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4052c4:	2200      	movs	r2, #0
  4052c6:	07db      	lsls	r3, r3, #31
  4052c8:	81a2      	strh	r2, [r4, #12]
  4052ca:	d50e      	bpl.n	4052ea <_fclose_r+0x9a>
  4052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052ce:	f7fe ff83 	bl	4041d8 <__retarget_lock_close_recursive>
  4052d2:	f7fe fbf5 	bl	403ac0 <__sfp_lock_release>
  4052d6:	4630      	mov	r0, r6
  4052d8:	bd70      	pop	{r4, r5, r6, pc}
  4052da:	f7fe fbbf 	bl	403a5c <__sinit>
  4052de:	e7bf      	b.n	405260 <_fclose_r+0x10>
  4052e0:	6921      	ldr	r1, [r4, #16]
  4052e2:	4628      	mov	r0, r5
  4052e4:	f7fe fce0 	bl	403ca8 <_free_r>
  4052e8:	e7d7      	b.n	40529a <_fclose_r+0x4a>
  4052ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052ec:	f7fe ff78 	bl	4041e0 <__retarget_lock_release_recursive>
  4052f0:	e7ec      	b.n	4052cc <_fclose_r+0x7c>
  4052f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052f4:	f7fe ff72 	bl	4041dc <__retarget_lock_acquire_recursive>
  4052f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052fc:	2b00      	cmp	r3, #0
  4052fe:	d1bb      	bne.n	405278 <_fclose_r+0x28>
  405300:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405302:	f016 0601 	ands.w	r6, r6, #1
  405306:	d1b1      	bne.n	40526c <_fclose_r+0x1c>
  405308:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40530a:	f7fe ff69 	bl	4041e0 <__retarget_lock_release_recursive>
  40530e:	4630      	mov	r0, r6
  405310:	bd70      	pop	{r4, r5, r6, pc}
  405312:	bf00      	nop

00405314 <_fstat_r>:
  405314:	b538      	push	{r3, r4, r5, lr}
  405316:	460b      	mov	r3, r1
  405318:	4c07      	ldr	r4, [pc, #28]	; (405338 <_fstat_r+0x24>)
  40531a:	4605      	mov	r5, r0
  40531c:	4611      	mov	r1, r2
  40531e:	4618      	mov	r0, r3
  405320:	2300      	movs	r3, #0
  405322:	6023      	str	r3, [r4, #0]
  405324:	f7fc fab2 	bl	40188c <_fstat>
  405328:	1c43      	adds	r3, r0, #1
  40532a:	d000      	beq.n	40532e <_fstat_r+0x1a>
  40532c:	bd38      	pop	{r3, r4, r5, pc}
  40532e:	6823      	ldr	r3, [r4, #0]
  405330:	2b00      	cmp	r3, #0
  405332:	d0fb      	beq.n	40532c <_fstat_r+0x18>
  405334:	602b      	str	r3, [r5, #0]
  405336:	bd38      	pop	{r3, r4, r5, pc}
  405338:	20400abc 	.word	0x20400abc

0040533c <_isatty_r>:
  40533c:	b538      	push	{r3, r4, r5, lr}
  40533e:	4c07      	ldr	r4, [pc, #28]	; (40535c <_isatty_r+0x20>)
  405340:	2300      	movs	r3, #0
  405342:	4605      	mov	r5, r0
  405344:	4608      	mov	r0, r1
  405346:	6023      	str	r3, [r4, #0]
  405348:	f7fc fab0 	bl	4018ac <_isatty>
  40534c:	1c43      	adds	r3, r0, #1
  40534e:	d000      	beq.n	405352 <_isatty_r+0x16>
  405350:	bd38      	pop	{r3, r4, r5, pc}
  405352:	6823      	ldr	r3, [r4, #0]
  405354:	2b00      	cmp	r3, #0
  405356:	d0fb      	beq.n	405350 <_isatty_r+0x14>
  405358:	602b      	str	r3, [r5, #0]
  40535a:	bd38      	pop	{r3, r4, r5, pc}
  40535c:	20400abc 	.word	0x20400abc

00405360 <_lseek_r>:
  405360:	b570      	push	{r4, r5, r6, lr}
  405362:	460d      	mov	r5, r1
  405364:	4c08      	ldr	r4, [pc, #32]	; (405388 <_lseek_r+0x28>)
  405366:	4611      	mov	r1, r2
  405368:	4606      	mov	r6, r0
  40536a:	461a      	mov	r2, r3
  40536c:	4628      	mov	r0, r5
  40536e:	2300      	movs	r3, #0
  405370:	6023      	str	r3, [r4, #0]
  405372:	f7fc faa6 	bl	4018c2 <_lseek>
  405376:	1c43      	adds	r3, r0, #1
  405378:	d000      	beq.n	40537c <_lseek_r+0x1c>
  40537a:	bd70      	pop	{r4, r5, r6, pc}
  40537c:	6823      	ldr	r3, [r4, #0]
  40537e:	2b00      	cmp	r3, #0
  405380:	d0fb      	beq.n	40537a <_lseek_r+0x1a>
  405382:	6033      	str	r3, [r6, #0]
  405384:	bd70      	pop	{r4, r5, r6, pc}
  405386:	bf00      	nop
  405388:	20400abc 	.word	0x20400abc

0040538c <_read_r>:
  40538c:	b570      	push	{r4, r5, r6, lr}
  40538e:	460d      	mov	r5, r1
  405390:	4c08      	ldr	r4, [pc, #32]	; (4053b4 <_read_r+0x28>)
  405392:	4611      	mov	r1, r2
  405394:	4606      	mov	r6, r0
  405396:	461a      	mov	r2, r3
  405398:	4628      	mov	r0, r5
  40539a:	2300      	movs	r3, #0
  40539c:	6023      	str	r3, [r4, #0]
  40539e:	f7fb f8c3 	bl	400528 <_read>
  4053a2:	1c43      	adds	r3, r0, #1
  4053a4:	d000      	beq.n	4053a8 <_read_r+0x1c>
  4053a6:	bd70      	pop	{r4, r5, r6, pc}
  4053a8:	6823      	ldr	r3, [r4, #0]
  4053aa:	2b00      	cmp	r3, #0
  4053ac:	d0fb      	beq.n	4053a6 <_read_r+0x1a>
  4053ae:	6033      	str	r3, [r6, #0]
  4053b0:	bd70      	pop	{r4, r5, r6, pc}
  4053b2:	bf00      	nop
  4053b4:	20400abc 	.word	0x20400abc
  4053b8:	20636553 	.word	0x20636553
  4053bc:	72616c61 	.word	0x72616c61
  4053c0:	000a206d 	.word	0x000a206d
  4053c4:	656d6954 	.word	0x656d6954
  4053c8:	616c6120 	.word	0x616c6120
  4053cc:	0a206d72 	.word	0x0a206d72
  4053d0:	00000000 	.word	0x00000000
  4053d4:	0001c200 	.word	0x0001c200
  4053d8:	000000c0 	.word	0x000000c0
  4053dc:	00000800 	.word	0x00000800
  4053e0:	00000000 	.word	0x00000000
  4053e4:	67656843 	.word	0x67656843
  4053e8:	0a20756f 	.word	0x0a20756f
  4053ec:	00000000 	.word	0x00000000
  4053f0:	000007e2 	.word	0x000007e2
  4053f4:	00000003 	.word	0x00000003
  4053f8:	00000013 	.word	0x00000013
  4053fc:	0000000c 	.word	0x0000000c
  405400:	0000000f 	.word	0x0000000f
  405404:	0000002d 	.word	0x0000002d
  405408:	00000001 	.word	0x00000001

0040540c <_global_impure_ptr>:
  40540c:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  40541c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40542c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40543c:	0000296c                                l)..

00405440 <blanks.7217>:
  405440:	20202020 20202020 20202020 20202020                     

00405450 <zeroes.7218>:
  405450:	30303030 30303030 30303030 30303030     0000000000000000
  405460:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405470 <_ctype_>:
  405470:	20202000 20202020 28282020 20282828     .         ((((( 
  405480:	20202020 20202020 20202020 20202020                     
  405490:	10108820 10101010 10101010 10101010      ...............
  4054a0:	04040410 04040404 10040404 10101010     ................
  4054b0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4054c0:	01010101 01010101 01010101 10101010     ................
  4054d0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4054e0:	02020202 02020202 02020202 10101010     ................
  4054f0:	00000020 00000000 00000000 00000000      ...............
	...

00405574 <_init>:
  405574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405576:	bf00      	nop
  405578:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40557a:	bc08      	pop	{r3}
  40557c:	469e      	mov	lr, r3
  40557e:	4770      	bx	lr

00405580 <__init_array_start>:
  405580:	0040384d 	.word	0x0040384d

00405584 <__frame_dummy_init_array_entry>:
  405584:	00400165                                e.@.

00405588 <_fini>:
  405588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40558a:	bf00      	nop
  40558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40558e:	bc08      	pop	{r3}
  405590:	469e      	mov	lr, r3
  405592:	4770      	bx	lr

00405594 <__fini_array_start>:
  405594:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	0a98 2040                                   ..@ 

20400444 <__global_locale>:
20400444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	5121 0040 4845 0040 0000 0000 5470 0040     !Q@.EH@.....pT@.
20400534:	546c 0040 5420 0040 5420 0040 5420 0040     lT@. T@. T@. T@.
20400544:	5420 0040 5420 0040 5420 0040 5420 0040      T@. T@. T@. T@.
20400554:	5420 0040 5420 0040 ffff ffff ffff ffff      T@. T@.........
20400564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b0 <__malloc_av_>:
	...
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 

204009b8 <__malloc_sbrk_base>:
204009b8:	ffff ffff                                   ....

204009bc <__malloc_trim_threshold>:
204009bc:	0000 0002                                   ....
