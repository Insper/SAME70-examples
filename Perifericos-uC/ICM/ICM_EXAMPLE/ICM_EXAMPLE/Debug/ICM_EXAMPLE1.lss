
ICM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000412c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040412c  0040412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a80  20400000  00404134  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000248  20400a80  00404c00  00020a80  2**7
                  ALLOC
  4 .stack        00002000  20400cc8  00404e48  00020a80  2**0
                  ALLOC
  5 .heap         00000200  20402cc8  00406e48  00020a80  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020aae  2**0
                  CONTENTS, READONLY
  8 .debug_info   00015909  00000000  00000000  00020b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002f04  00000000  00000000  00036410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000041d3  00000000  00000000  00039314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a40  00000000  00000000  0003d4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a98  00000000  00000000  0003df27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002133c  00000000  00000000  0003e9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c5b1  00000000  00000000  0005fcfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009440d  00000000  00000000  0006c2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000220c  00000000  00000000  001006bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 2c 40 20 d9 08 40 00 d7 08 40 00 d7 08 40 00     .,@ ..@...@...@.
  400010:	d7 08 40 00 d7 08 40 00 d7 08 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d7 08 40 00 d7 08 40 00 00 00 00 00 d7 08 40 00     ..@...@.......@.
  40003c:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  40004c:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  40005c:	d7 08 40 00 d7 08 40 00 00 00 00 00 fd 05 40 00     ..@...@.......@.
  40006c:	11 06 40 00 25 06 40 00 d7 08 40 00 d7 08 40 00     ..@.%.@...@...@.
  40007c:	d7 08 40 00 39 06 40 00 4d 06 40 00 d7 08 40 00     ..@.9.@.M.@...@.
  40008c:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  40009c:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  4000ac:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  4000bc:	d7 08 40 00 71 04 40 00 d7 08 40 00 d7 08 40 00     ..@.q.@...@...@.
  4000cc:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  4000dc:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  4000ec:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  4000fc:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  40010c:	d7 08 40 00 d7 08 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ......@...@...@.
  40012c:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  40013c:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  40014c:	d7 08 40 00 d7 08 40 00 d7 08 40 00 d7 08 40 00     ..@...@...@...@.
  40015c:	d7 08 40 00 d7 08 40 00 d7 08 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a80 	.word	0x20400a80
  400184:	00000000 	.word	0x00000000
  400188:	00404134 	.word	0x00404134

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404134 	.word	0x00404134
  4001c8:	20400a84 	.word	0x20400a84
  4001cc:	00404134 	.word	0x00404134
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400aad 	.word	0x00400aad
  400220:	004006fd 	.word	0x004006fd
  400224:	00400751 	.word	0x00400751
  400228:	00400761 	.word	0x00400761
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400771 	.word	0x00400771
  400238:	00400661 	.word	0x00400661
  40023c:	00400699 	.word	0x00400699
  400240:	004009a1 	.word	0x004009a1

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400b58 	.word	0x20400b58
  40027c:	20400b50 	.word	0x20400b50

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400b54 	.word	0x20400b54
  4002cc:	20400b58 	.word	0x20400b58

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b3b      	ldr	r3, [pc, #236]	; (4003c4 <board_init+0xf4>)
  4002d8:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002da:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  4002de:	4a3a      	ldr	r2, [pc, #232]	; (4003c8 <board_init+0xf8>)
  4002e0:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002e2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4002e6:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ec:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002f0:	4b36      	ldr	r3, [pc, #216]	; (4003cc <board_init+0xfc>)
  4002f2:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002f6:	f022 0201 	bic.w	r2, r2, #1
  4002fa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4002fe:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400302:	f022 0201 	bic.w	r2, r2, #1
  400306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40030a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40030e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400312:	200a      	movs	r0, #10
  400314:	4c2e      	ldr	r4, [pc, #184]	; (4003d0 <board_init+0x100>)
  400316:	47a0      	blx	r4
  400318:	200b      	movs	r0, #11
  40031a:	47a0      	blx	r4
  40031c:	200c      	movs	r0, #12
  40031e:	47a0      	blx	r4
  400320:	2010      	movs	r0, #16
  400322:	47a0      	blx	r4
  400324:	2011      	movs	r0, #17
  400326:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400328:	4b2a      	ldr	r3, [pc, #168]	; (4003d4 <board_init+0x104>)
  40032a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40032e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400330:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400334:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400336:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40033a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40033e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400340:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400344:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40034a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40034c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40034e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400352:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400354:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400358:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40035a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40035c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400360:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400362:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400366:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40036a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40036e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400372:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400378:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40037a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40037c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400380:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400382:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400386:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400388:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40038a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40038e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400390:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400392:	4a11      	ldr	r2, [pc, #68]	; (4003d8 <board_init+0x108>)
  400394:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400398:	f043 0310 	orr.w	r3, r3, #16
  40039c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003a0:	4b0e      	ldr	r3, [pc, #56]	; (4003dc <board_init+0x10c>)
  4003a2:	2210      	movs	r2, #16
  4003a4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003aa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003ac:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4003b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b4:	4311      	orrs	r1, r2
  4003b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4003b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003ba:	4311      	orrs	r1, r2
  4003bc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003be:	605a      	str	r2, [r3, #4]
  4003c0:	bd10      	pop	{r4, pc}
  4003c2:	bf00      	nop
  4003c4:	400e1850 	.word	0x400e1850
  4003c8:	5a00080c 	.word	0x5a00080c
  4003cc:	e000ed00 	.word	0xe000ed00
  4003d0:	00400781 	.word	0x00400781
  4003d4:	400e1200 	.word	0x400e1200
  4003d8:	40088000 	.word	0x40088000
  4003dc:	400e1000 	.word	0x400e1000

004003e0 <icm_enable>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4003e0:	4b10      	ldr	r3, [pc, #64]	; (400424 <icm_enable+0x44>)
  4003e2:	789b      	ldrb	r3, [r3, #2]
  4003e4:	2bff      	cmp	r3, #255	; 0xff
  4003e6:	d01c      	beq.n	400422 <icm_enable+0x42>
		icm_set_algo(p_icm, icm_cfg->ualgo);
	}
}

void icm_enable(Icm *p_icm)
{
  4003e8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003ea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003ee:	fab3 f383 	clz	r3, r3
  4003f2:	095b      	lsrs	r3, r3, #5
  4003f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003f6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4003f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003fc:	2200      	movs	r2, #0
  4003fe:	4b0a      	ldr	r3, [pc, #40]	; (400428 <icm_enable+0x48>)
  400400:	701a      	strb	r2, [r3, #0]
	return flags;
  400402:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400404:	4a07      	ldr	r2, [pc, #28]	; (400424 <icm_enable+0x44>)
  400406:	7893      	ldrb	r3, [r2, #2]
  400408:	3301      	adds	r3, #1
  40040a:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40040c:	b129      	cbz	r1, 40041a <icm_enable+0x3a>
		cpu_irq_enable();
  40040e:	2201      	movs	r2, #1
  400410:	4b05      	ldr	r3, [pc, #20]	; (400428 <icm_enable+0x48>)
  400412:	701a      	strb	r2, [r3, #0]
  400414:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400418:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
	p_icm->ICM_CTRL = ICM_CTRL_ENABLE;
  40041a:	2301      	movs	r3, #1
  40041c:	6043      	str	r3, [r0, #4]
}
  40041e:	b002      	add	sp, #8
  400420:	4770      	bx	lr
  400422:	e7fe      	b.n	400422 <icm_enable+0x42>
  400424:	20400b48 	.word	0x20400b48
  400428:	2040000a 	.word	0x2040000a

0040042c <icm_set_callback>:
}

void icm_set_callback(Icm *p_icm, icm_callback_t callback,
		enum icm_region_num reg_num, enum icm_interrupt_source interrupt_source,
		uint8_t irq_level)
{
  40042c:	b430      	push	{r4, r5}
	Assert(p_icm);
	Assert(callback);

	icm_callback_pointer[interrupt_source] = callback;
  40042e:	4c0e      	ldr	r4, [pc, #56]	; (400468 <icm_set_callback+0x3c>)
  400430:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400434:	4c0d      	ldr	r4, [pc, #52]	; (40046c <icm_set_callback+0x40>)
  400436:	2501      	movs	r5, #1
  400438:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40043c:	f89d 1008 	ldrb.w	r1, [sp, #8]
  400440:	0149      	lsls	r1, r1, #5
  400442:	b2c9      	uxtb	r1, r1
  400444:	f884 1320 	strb.w	r1, [r4, #800]	; 0x320
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400448:	6065      	str	r5, [r4, #4]
	irq_register_handler(ICM_IRQn, irq_level);
	if(interrupt_source == ICM_INTERRUPT_URAD) {
  40044a:	2b06      	cmp	r3, #6
  40044c:	d007      	beq.n	40045e <icm_set_callback+0x32>
		icm_enable_interrupt(p_icm,
				1 << (uint32_t)(_ICM_NUM_OF_REGION * (uint32_t)interrupt_source));
	} else {
		icm_enable_interrupt(p_icm,
				1 << (_ICM_NUM_OF_REGION * (uint32_t)interrupt_source + reg_num));
  40044e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400452:	2201      	movs	r2, #1
  400454:	fa02 f303 	lsl.w	r3, r2, r3
 * \param p_icm Pointer to an ICM instance.
 * \param ul_sources Interrupt sources to be enabled.
 */
static inline void icm_enable_interrupt(Icm *p_icm, uint32_t ul_sources)
{
	p_icm->ICM_IER = ul_sources;
  400458:	6103      	str	r3, [r0, #16]
	}
}
  40045a:	bc30      	pop	{r4, r5}
  40045c:	4770      	bx	lr
  40045e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400462:	6103      	str	r3, [r0, #16]
  400464:	e7f9      	b.n	40045a <icm_set_callback+0x2e>
  400466:	bf00      	nop
  400468:	20400b5c 	.word	0x20400b5c
  40046c:	e000e100 	.word	0xe000e100

00400470 <ICM_Handler>:

/**
 * \brief Interrupt handler for ICM.
 */
void ICM_Handler(void)
{
  400470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400474:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t icm_get_interrupt_status(Icm *p_icm)
{
	return p_icm->ICM_ISR;
  400476:	4a16      	ldr	r2, [pc, #88]	; (4004d0 <ICM_Handler+0x60>)
  400478:	69d1      	ldr	r1, [r2, #28]
	return p_icm->ICM_IMR;
  40047a:	6993      	ldr	r3, [r2, #24]
	volatile uint32_t status;
	uint8_t i, j;

	status = (icm_get_interrupt_status(ICM) & icm_get_interrupt_mask(ICM));
  40047c:	400b      	ands	r3, r1
  40047e:	9301      	str	r3, [sp, #4]
  400480:	2500      	movs	r5, #0
			if (status & (1 << (_ICM_NUM_OF_REGION * i))) {
				icm_interrupt((enum icm_interrupt_source)i, (enum icm_region_num)0);
			}
		} else {
			for (j = 0; j < _ICM_NUM_OF_REGION; j++) {
				if (status & (1 << (_ICM_NUM_OF_REGION * i + j))) {
  400482:	2601      	movs	r6, #1
	if (icm_callback_pointer[source]) {
  400484:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4004d4 <ICM_Handler+0x64>
  400488:	e01d      	b.n	4004c6 <ICM_Handler+0x56>
			if (status & (1 << (_ICM_NUM_OF_REGION * i))) {
  40048a:	9b01      	ldr	r3, [sp, #4]
  40048c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400490:	d004      	beq.n	40049c <ICM_Handler+0x2c>
	if (icm_callback_pointer[source]) {
  400492:	4b10      	ldr	r3, [pc, #64]	; (4004d4 <ICM_Handler+0x64>)
  400494:	699b      	ldr	r3, [r3, #24]
  400496:	b10b      	cbz	r3, 40049c <ICM_Handler+0x2c>
		icm_callback_pointer[source](reg_num);
  400498:	2000      	movs	r0, #0
  40049a:	4798      	blx	r3
					icm_interrupt((enum icm_interrupt_source)i, (enum icm_region_num)j);
				}
			}
		}
	}
}
  40049c:	b002      	add	sp, #8
  40049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a2:	3401      	adds	r4, #1
			for (j = 0; j < _ICM_NUM_OF_REGION; j++) {
  4004a4:	2c04      	cmp	r4, #4
  4004a6:	d00b      	beq.n	4004c0 <ICM_Handler+0x50>
  4004a8:	b2e0      	uxtb	r0, r4
				if (status & (1 << (_ICM_NUM_OF_REGION * i + j))) {
  4004aa:	9a01      	ldr	r2, [sp, #4]
  4004ac:	192b      	adds	r3, r5, r4
  4004ae:	fa06 f303 	lsl.w	r3, r6, r3
  4004b2:	4213      	tst	r3, r2
  4004b4:	d0f5      	beq.n	4004a2 <ICM_Handler+0x32>
	if (icm_callback_pointer[source]) {
  4004b6:	683b      	ldr	r3, [r7, #0]
  4004b8:	2b00      	cmp	r3, #0
  4004ba:	d0f2      	beq.n	4004a2 <ICM_Handler+0x32>
		icm_callback_pointer[source](reg_num);
  4004bc:	4798      	blx	r3
  4004be:	e7f0      	b.n	4004a2 <ICM_Handler+0x32>
  4004c0:	3504      	adds	r5, #4
		if(i == ICM_INTERRUPT_URAD) {
  4004c2:	2d18      	cmp	r5, #24
  4004c4:	d0e1      	beq.n	40048a <ICM_Handler+0x1a>
	status = (icm_get_interrupt_status(ICM) & icm_get_interrupt_mask(ICM));
  4004c6:	2400      	movs	r4, #0
	if (icm_callback_pointer[source]) {
  4004c8:	eb05 0708 	add.w	r7, r5, r8
  4004cc:	e7ec      	b.n	4004a8 <ICM_Handler+0x38>
  4004ce:	bf00      	nop
  4004d0:	40048000 	.word	0x40048000
  4004d4:	20400b5c 	.word	0x20400b5c

004004d8 <icm_set_algo>:

void icm_set_algo(Icm *p_icm, enum icm_algo algo)
{
	p_icm->ICM_CFG &= ~ICM_CFG_UALGO_Msk;
  4004d8:	6803      	ldr	r3, [r0, #0]
  4004da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  4004de:	6003      	str	r3, [r0, #0]

	switch(algo) {
  4004e0:	2901      	cmp	r1, #1
  4004e2:	d00b      	beq.n	4004fc <icm_set_algo+0x24>
  4004e4:	b111      	cbz	r1, 4004ec <icm_set_algo+0x14>
  4004e6:	2904      	cmp	r1, #4
  4004e8:	d003      	beq.n	4004f2 <icm_set_algo+0x1a>
  4004ea:	4770      	bx	lr
		case ICM_SHA_1:
			p_icm->ICM_CFG |= ICM_CFG_UALGO_SHA1;
  4004ec:	6803      	ldr	r3, [r0, #0]
  4004ee:	6003      	str	r3, [r0, #0]
			break;
  4004f0:	4770      	bx	lr
		case ICM_SHA_224:
			p_icm->ICM_CFG |= ICM_CFG_UALGO_SHA224;
  4004f2:	6803      	ldr	r3, [r0, #0]
  4004f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4004f8:	6003      	str	r3, [r0, #0]
			break;
  4004fa:	4770      	bx	lr
		case ICM_SHA_256:
			p_icm->ICM_CFG |= ICM_CFG_UALGO_SHA256;
  4004fc:	6803      	ldr	r3, [r0, #0]
  4004fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400502:	6003      	str	r3, [r0, #0]
  400504:	4770      	bx	lr
	...

00400508 <icm_init>:
{
  400508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40050a:	4605      	mov	r5, r0
  40050c:	460c      	mov	r4, r1
  40050e:	2020      	movs	r0, #32
  400510:	4b21      	ldr	r3, [pc, #132]	; (400598 <icm_init+0x90>)
  400512:	4798      	blx	r3
	p_icm->ICM_CTRL = ICM_CTRL_SWRST;
  400514:	2204      	movs	r2, #4
  400516:	4b21      	ldr	r3, [pc, #132]	; (40059c <icm_init+0x94>)
  400518:	605a      	str	r2, [r3, #4]
	p_icm->ICM_CFG = (icm_cfg->is_write_back ? ICM_CFG_WBDIS : 0) |
  40051a:	f894 c000 	ldrb.w	ip, [r4]
			(icm_cfg->is_dis_end_mon ? ICM_CFG_EOMDIS : 0) |
  40051e:	7863      	ldrb	r3, [r4, #1]
  400520:	2b00      	cmp	r3, #0
  400522:	bf14      	ite	ne
  400524:	f04f 0e02 	movne.w	lr, #2
  400528:	f04f 0e00 	moveq.w	lr, #0
			(icm_cfg->is_sec_list_branch ? ICM_CFG_SLBDIS : 0) |
  40052c:	78a3      	ldrb	r3, [r4, #2]
  40052e:	2b00      	cmp	r3, #0
  400530:	bf14      	ite	ne
  400532:	4617      	movne	r7, r2
  400534:	2700      	moveq	r7, #0
			 ICM_CFG_BBC(icm_cfg->bbc) | (icm_cfg->is_auto_mode ? ICM_CFG_ASCD : 0) |
  400536:	78e2      	ldrb	r2, [r4, #3]
  400538:	0112      	lsls	r2, r2, #4
  40053a:	b2d3      	uxtb	r3, r2
  40053c:	7922      	ldrb	r2, [r4, #4]
  40053e:	2a00      	cmp	r2, #0
  400540:	bf14      	ite	ne
  400542:	f44f 7680 	movne.w	r6, #256	; 0x100
  400546:	2600      	moveq	r6, #0
			(icm_cfg->is_dual_buf ? ICM_CFG_DUALBUFF : 0) |
  400548:	7962      	ldrb	r2, [r4, #5]
  40054a:	2a00      	cmp	r2, #0
  40054c:	bf14      	ite	ne
  40054e:	f44f 7000 	movne.w	r0, #512	; 0x200
  400552:	2000      	moveq	r0, #0
			(icm_cfg->is_user_hash ? ICM_CFG_UIHASH : 0) |
  400554:	79a2      	ldrb	r2, [r4, #6]
  400556:	2a00      	cmp	r2, #0
  400558:	bf14      	ite	ne
  40055a:	f44f 5180 	movne.w	r1, #4096	; 0x1000
  40055e:	2100      	moveq	r1, #0
			ICM_CFG_HAPROT(icm_cfg->hash_area_val) |
  400560:	7a22      	ldrb	r2, [r4, #8]
  400562:	0412      	lsls	r2, r2, #16
  400564:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
  400568:	431a      	orrs	r2, r3
  40056a:	ea42 020c 	orr.w	r2, r2, ip
			ICM_CFG_DAPROT(icm_cfg->des_area_val);
  40056e:	7a63      	ldrb	r3, [r4, #9]
  400570:	061b      	lsls	r3, r3, #24
  400572:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
			ICM_CFG_HAPROT(icm_cfg->hash_area_val) |
  400576:	4313      	orrs	r3, r2
  400578:	ea43 030e 	orr.w	r3, r3, lr
  40057c:	433b      	orrs	r3, r7
  40057e:	4333      	orrs	r3, r6
  400580:	4303      	orrs	r3, r0
  400582:	430b      	orrs	r3, r1
	p_icm->ICM_CFG = (icm_cfg->is_write_back ? ICM_CFG_WBDIS : 0) |
  400584:	602b      	str	r3, [r5, #0]
	if(icm_cfg->is_user_hash) {
  400586:	79a3      	ldrb	r3, [r4, #6]
  400588:	b903      	cbnz	r3, 40058c <icm_init+0x84>
  40058a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		icm_set_algo(p_icm, icm_cfg->ualgo);
  40058c:	79e1      	ldrb	r1, [r4, #7]
  40058e:	4628      	mov	r0, r5
  400590:	4b03      	ldr	r3, [pc, #12]	; (4005a0 <icm_init+0x98>)
  400592:	4798      	blx	r3
}
  400594:	e7f9      	b.n	40058a <icm_init+0x82>
  400596:	bf00      	nop
  400598:	00400781 	.word	0x00400781
  40059c:	40048000 	.word	0x40048000
  4005a0:	004004d9 	.word	0x004004d9

004005a4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4005a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4005a6:	4770      	bx	lr

004005a8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4005a8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4005aa:	4770      	bx	lr

004005ac <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005b0:	4604      	mov	r4, r0
  4005b2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005b4:	4b0e      	ldr	r3, [pc, #56]	; (4005f0 <pio_handler_process+0x44>)
  4005b6:	4798      	blx	r3
  4005b8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4005ba:	4620      	mov	r0, r4
  4005bc:	4b0d      	ldr	r3, [pc, #52]	; (4005f4 <pio_handler_process+0x48>)
  4005be:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4005c0:	4005      	ands	r5, r0
  4005c2:	d013      	beq.n	4005ec <pio_handler_process+0x40>
  4005c4:	4c0c      	ldr	r4, [pc, #48]	; (4005f8 <pio_handler_process+0x4c>)
  4005c6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4005ca:	e003      	b.n	4005d4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4005cc:	42b4      	cmp	r4, r6
  4005ce:	d00d      	beq.n	4005ec <pio_handler_process+0x40>
  4005d0:	3410      	adds	r4, #16
		while (status != 0) {
  4005d2:	b15d      	cbz	r5, 4005ec <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4005d4:	6820      	ldr	r0, [r4, #0]
  4005d6:	4540      	cmp	r0, r8
  4005d8:	d1f8      	bne.n	4005cc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4005da:	6861      	ldr	r1, [r4, #4]
  4005dc:	4229      	tst	r1, r5
  4005de:	d0f5      	beq.n	4005cc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4005e0:	68e3      	ldr	r3, [r4, #12]
  4005e2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4005e4:	6863      	ldr	r3, [r4, #4]
  4005e6:	ea25 0503 	bic.w	r5, r5, r3
  4005ea:	e7ef      	b.n	4005cc <pio_handler_process+0x20>
  4005ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005f0:	004005a5 	.word	0x004005a5
  4005f4:	004005a9 	.word	0x004005a9
  4005f8:	20400a9c 	.word	0x20400a9c

004005fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4005fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4005fe:	210a      	movs	r1, #10
  400600:	4801      	ldr	r0, [pc, #4]	; (400608 <PIOA_Handler+0xc>)
  400602:	4b02      	ldr	r3, [pc, #8]	; (40060c <PIOA_Handler+0x10>)
  400604:	4798      	blx	r3
  400606:	bd08      	pop	{r3, pc}
  400608:	400e0e00 	.word	0x400e0e00
  40060c:	004005ad 	.word	0x004005ad

00400610 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400610:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400612:	210b      	movs	r1, #11
  400614:	4801      	ldr	r0, [pc, #4]	; (40061c <PIOB_Handler+0xc>)
  400616:	4b02      	ldr	r3, [pc, #8]	; (400620 <PIOB_Handler+0x10>)
  400618:	4798      	blx	r3
  40061a:	bd08      	pop	{r3, pc}
  40061c:	400e1000 	.word	0x400e1000
  400620:	004005ad 	.word	0x004005ad

00400624 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400624:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400626:	210c      	movs	r1, #12
  400628:	4801      	ldr	r0, [pc, #4]	; (400630 <PIOC_Handler+0xc>)
  40062a:	4b02      	ldr	r3, [pc, #8]	; (400634 <PIOC_Handler+0x10>)
  40062c:	4798      	blx	r3
  40062e:	bd08      	pop	{r3, pc}
  400630:	400e1200 	.word	0x400e1200
  400634:	004005ad 	.word	0x004005ad

00400638 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400638:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40063a:	2110      	movs	r1, #16
  40063c:	4801      	ldr	r0, [pc, #4]	; (400644 <PIOD_Handler+0xc>)
  40063e:	4b02      	ldr	r3, [pc, #8]	; (400648 <PIOD_Handler+0x10>)
  400640:	4798      	blx	r3
  400642:	bd08      	pop	{r3, pc}
  400644:	400e1400 	.word	0x400e1400
  400648:	004005ad 	.word	0x004005ad

0040064c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40064c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40064e:	2111      	movs	r1, #17
  400650:	4801      	ldr	r0, [pc, #4]	; (400658 <PIOE_Handler+0xc>)
  400652:	4b02      	ldr	r3, [pc, #8]	; (40065c <PIOE_Handler+0x10>)
  400654:	4798      	blx	r3
  400656:	bd08      	pop	{r3, pc}
  400658:	400e1600 	.word	0x400e1600
  40065c:	004005ad 	.word	0x004005ad

00400660 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400660:	2803      	cmp	r0, #3
  400662:	d011      	beq.n	400688 <pmc_mck_set_division+0x28>
  400664:	2804      	cmp	r0, #4
  400666:	d012      	beq.n	40068e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400668:	2802      	cmp	r0, #2
  40066a:	bf0c      	ite	eq
  40066c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400670:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400672:	4a08      	ldr	r2, [pc, #32]	; (400694 <pmc_mck_set_division+0x34>)
  400674:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40067a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40067c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40067e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400680:	f013 0f08 	tst.w	r3, #8
  400684:	d0fb      	beq.n	40067e <pmc_mck_set_division+0x1e>
}
  400686:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400688:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40068c:	e7f1      	b.n	400672 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40068e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400692:	e7ee      	b.n	400672 <pmc_mck_set_division+0x12>
  400694:	400e0600 	.word	0x400e0600

00400698 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400698:	4a17      	ldr	r2, [pc, #92]	; (4006f8 <pmc_switch_mck_to_pllack+0x60>)
  40069a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40069c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006a0:	4318      	orrs	r0, r3
  4006a2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006a6:	f013 0f08 	tst.w	r3, #8
  4006aa:	d10a      	bne.n	4006c2 <pmc_switch_mck_to_pllack+0x2a>
  4006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006b0:	4911      	ldr	r1, [pc, #68]	; (4006f8 <pmc_switch_mck_to_pllack+0x60>)
  4006b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006b4:	f012 0f08 	tst.w	r2, #8
  4006b8:	d103      	bne.n	4006c2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006ba:	3b01      	subs	r3, #1
  4006bc:	d1f9      	bne.n	4006b2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4006be:	2001      	movs	r0, #1
  4006c0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006c2:	4a0d      	ldr	r2, [pc, #52]	; (4006f8 <pmc_switch_mck_to_pllack+0x60>)
  4006c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006c6:	f023 0303 	bic.w	r3, r3, #3
  4006ca:	f043 0302 	orr.w	r3, r3, #2
  4006ce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006d2:	f013 0f08 	tst.w	r3, #8
  4006d6:	d10a      	bne.n	4006ee <pmc_switch_mck_to_pllack+0x56>
  4006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006dc:	4906      	ldr	r1, [pc, #24]	; (4006f8 <pmc_switch_mck_to_pllack+0x60>)
  4006de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006e0:	f012 0f08 	tst.w	r2, #8
  4006e4:	d105      	bne.n	4006f2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006e6:	3b01      	subs	r3, #1
  4006e8:	d1f9      	bne.n	4006de <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4006ea:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4006ec:	4770      	bx	lr
	return 0;
  4006ee:	2000      	movs	r0, #0
  4006f0:	4770      	bx	lr
  4006f2:	2000      	movs	r0, #0
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	400e0600 	.word	0x400e0600

004006fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4006fc:	b9a0      	cbnz	r0, 400728 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006fe:	480e      	ldr	r0, [pc, #56]	; (400738 <pmc_switch_mainck_to_xtal+0x3c>)
  400700:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400702:	0209      	lsls	r1, r1, #8
  400704:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400706:	4a0d      	ldr	r2, [pc, #52]	; (40073c <pmc_switch_mainck_to_xtal+0x40>)
  400708:	401a      	ands	r2, r3
  40070a:	4b0d      	ldr	r3, [pc, #52]	; (400740 <pmc_switch_mainck_to_xtal+0x44>)
  40070c:	4313      	orrs	r3, r2
  40070e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400710:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400712:	4602      	mov	r2, r0
  400714:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400716:	f013 0f01 	tst.w	r3, #1
  40071a:	d0fb      	beq.n	400714 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40071c:	4a06      	ldr	r2, [pc, #24]	; (400738 <pmc_switch_mainck_to_xtal+0x3c>)
  40071e:	6a11      	ldr	r1, [r2, #32]
  400720:	4b08      	ldr	r3, [pc, #32]	; (400744 <pmc_switch_mainck_to_xtal+0x48>)
  400722:	430b      	orrs	r3, r1
  400724:	6213      	str	r3, [r2, #32]
  400726:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400728:	4903      	ldr	r1, [pc, #12]	; (400738 <pmc_switch_mainck_to_xtal+0x3c>)
  40072a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40072c:	4a06      	ldr	r2, [pc, #24]	; (400748 <pmc_switch_mainck_to_xtal+0x4c>)
  40072e:	401a      	ands	r2, r3
  400730:	4b06      	ldr	r3, [pc, #24]	; (40074c <pmc_switch_mainck_to_xtal+0x50>)
  400732:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400734:	620b      	str	r3, [r1, #32]
  400736:	4770      	bx	lr
  400738:	400e0600 	.word	0x400e0600
  40073c:	ffc8fffc 	.word	0xffc8fffc
  400740:	00370001 	.word	0x00370001
  400744:	01370000 	.word	0x01370000
  400748:	fec8fffc 	.word	0xfec8fffc
  40074c:	01370002 	.word	0x01370002

00400750 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400750:	4b02      	ldr	r3, [pc, #8]	; (40075c <pmc_osc_is_ready_mainck+0xc>)
  400752:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400754:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400758:	4770      	bx	lr
  40075a:	bf00      	nop
  40075c:	400e0600 	.word	0x400e0600

00400760 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400760:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400764:	4b01      	ldr	r3, [pc, #4]	; (40076c <pmc_disable_pllack+0xc>)
  400766:	629a      	str	r2, [r3, #40]	; 0x28
  400768:	4770      	bx	lr
  40076a:	bf00      	nop
  40076c:	400e0600 	.word	0x400e0600

00400770 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400770:	4b02      	ldr	r3, [pc, #8]	; (40077c <pmc_is_locked_pllack+0xc>)
  400772:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400774:	f000 0002 	and.w	r0, r0, #2
  400778:	4770      	bx	lr
  40077a:	bf00      	nop
  40077c:	400e0600 	.word	0x400e0600

00400780 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400780:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400784:	4b05      	ldr	r3, [pc, #20]	; (40079c <pmc_enable_periph_clk+0x1c>)
  400786:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40078a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40078e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400792:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400796:	2000      	movs	r0, #0
  400798:	4770      	bx	lr
  40079a:	bf00      	nop
  40079c:	400e0600 	.word	0x400e0600

004007a0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4007a0:	6943      	ldr	r3, [r0, #20]
  4007a2:	f013 0f02 	tst.w	r3, #2
  4007a6:	d002      	beq.n	4007ae <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4007a8:	61c1      	str	r1, [r0, #28]
	return 0;
  4007aa:	2000      	movs	r0, #0
  4007ac:	4770      	bx	lr
		return 1;
  4007ae:	2001      	movs	r0, #1
}
  4007b0:	4770      	bx	lr

004007b2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4007b2:	6943      	ldr	r3, [r0, #20]
  4007b4:	f013 0f01 	tst.w	r3, #1
  4007b8:	d003      	beq.n	4007c2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4007ba:	6983      	ldr	r3, [r0, #24]
  4007bc:	700b      	strb	r3, [r1, #0]
	return 0;
  4007be:	2000      	movs	r0, #0
  4007c0:	4770      	bx	lr
		return 1;
  4007c2:	2001      	movs	r0, #1
}
  4007c4:	4770      	bx	lr

004007c6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4007c6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4007c8:	010b      	lsls	r3, r1, #4
  4007ca:	4293      	cmp	r3, r2
  4007cc:	d914      	bls.n	4007f8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4007ce:	00c9      	lsls	r1, r1, #3
  4007d0:	084b      	lsrs	r3, r1, #1
  4007d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4007d6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4007da:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4007dc:	1e5c      	subs	r4, r3, #1
  4007de:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4007e2:	428c      	cmp	r4, r1
  4007e4:	d901      	bls.n	4007ea <usart_set_async_baudrate+0x24>
		return 1;
  4007e6:	2001      	movs	r0, #1
  4007e8:	e017      	b.n	40081a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4007ea:	6841      	ldr	r1, [r0, #4]
  4007ec:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4007f0:	6041      	str	r1, [r0, #4]
  4007f2:	e00c      	b.n	40080e <usart_set_async_baudrate+0x48>
		return 1;
  4007f4:	2001      	movs	r0, #1
  4007f6:	e010      	b.n	40081a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4007f8:	0859      	lsrs	r1, r3, #1
  4007fa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4007fe:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400802:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400804:	1e5c      	subs	r4, r3, #1
  400806:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40080a:	428c      	cmp	r4, r1
  40080c:	d8f2      	bhi.n	4007f4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40080e:	0412      	lsls	r2, r2, #16
  400810:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400814:	431a      	orrs	r2, r3
  400816:	6202      	str	r2, [r0, #32]

	return 0;
  400818:	2000      	movs	r0, #0
}
  40081a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40081e:	4770      	bx	lr

00400820 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400820:	4b08      	ldr	r3, [pc, #32]	; (400844 <usart_reset+0x24>)
  400822:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400826:	2300      	movs	r3, #0
  400828:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40082a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40082c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40082e:	2388      	movs	r3, #136	; 0x88
  400830:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400832:	2324      	movs	r3, #36	; 0x24
  400834:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400836:	f44f 7380 	mov.w	r3, #256	; 0x100
  40083a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40083c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400840:	6003      	str	r3, [r0, #0]
  400842:	4770      	bx	lr
  400844:	55534100 	.word	0x55534100

00400848 <usart_init_rs232>:
{
  400848:	b570      	push	{r4, r5, r6, lr}
  40084a:	4605      	mov	r5, r0
  40084c:	460c      	mov	r4, r1
  40084e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400850:	4b0f      	ldr	r3, [pc, #60]	; (400890 <usart_init_rs232+0x48>)
  400852:	4798      	blx	r3
	ul_reg_val = 0;
  400854:	2200      	movs	r2, #0
  400856:	4b0f      	ldr	r3, [pc, #60]	; (400894 <usart_init_rs232+0x4c>)
  400858:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40085a:	b1a4      	cbz	r4, 400886 <usart_init_rs232+0x3e>
  40085c:	4632      	mov	r2, r6
  40085e:	6821      	ldr	r1, [r4, #0]
  400860:	4628      	mov	r0, r5
  400862:	4b0d      	ldr	r3, [pc, #52]	; (400898 <usart_init_rs232+0x50>)
  400864:	4798      	blx	r3
  400866:	4602      	mov	r2, r0
  400868:	b978      	cbnz	r0, 40088a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40086a:	6863      	ldr	r3, [r4, #4]
  40086c:	68a1      	ldr	r1, [r4, #8]
  40086e:	430b      	orrs	r3, r1
  400870:	6921      	ldr	r1, [r4, #16]
  400872:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400874:	68e1      	ldr	r1, [r4, #12]
  400876:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400878:	4906      	ldr	r1, [pc, #24]	; (400894 <usart_init_rs232+0x4c>)
  40087a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40087c:	6869      	ldr	r1, [r5, #4]
  40087e:	430b      	orrs	r3, r1
  400880:	606b      	str	r3, [r5, #4]
}
  400882:	4610      	mov	r0, r2
  400884:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400886:	2201      	movs	r2, #1
  400888:	e7fb      	b.n	400882 <usart_init_rs232+0x3a>
  40088a:	2201      	movs	r2, #1
  40088c:	e7f9      	b.n	400882 <usart_init_rs232+0x3a>
  40088e:	bf00      	nop
  400890:	00400821 	.word	0x00400821
  400894:	20400b0c 	.word	0x20400b0c
  400898:	004007c7 	.word	0x004007c7

0040089c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40089c:	2340      	movs	r3, #64	; 0x40
  40089e:	6003      	str	r3, [r0, #0]
  4008a0:	4770      	bx	lr

004008a2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4008a2:	2310      	movs	r3, #16
  4008a4:	6003      	str	r3, [r0, #0]
  4008a6:	4770      	bx	lr

004008a8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4008a8:	6943      	ldr	r3, [r0, #20]
  4008aa:	f013 0f02 	tst.w	r3, #2
  4008ae:	d004      	beq.n	4008ba <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4008b0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4008b4:	61c1      	str	r1, [r0, #28]
	return 0;
  4008b6:	2000      	movs	r0, #0
  4008b8:	4770      	bx	lr
		return 1;
  4008ba:	2001      	movs	r0, #1
}
  4008bc:	4770      	bx	lr

004008be <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4008be:	6943      	ldr	r3, [r0, #20]
  4008c0:	f013 0f01 	tst.w	r3, #1
  4008c4:	d005      	beq.n	4008d2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4008c6:	6983      	ldr	r3, [r0, #24]
  4008c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4008cc:	600b      	str	r3, [r1, #0]
	return 0;
  4008ce:	2000      	movs	r0, #0
  4008d0:	4770      	bx	lr
		return 1;
  4008d2:	2001      	movs	r0, #1
}
  4008d4:	4770      	bx	lr

004008d6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4008d6:	e7fe      	b.n	4008d6 <Dummy_Handler>

004008d8 <Reset_Handler>:
{
  4008d8:	b500      	push	{lr}
  4008da:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4008dc:	4b25      	ldr	r3, [pc, #148]	; (400974 <Reset_Handler+0x9c>)
  4008de:	4a26      	ldr	r2, [pc, #152]	; (400978 <Reset_Handler+0xa0>)
  4008e0:	429a      	cmp	r2, r3
  4008e2:	d010      	beq.n	400906 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4008e4:	4b25      	ldr	r3, [pc, #148]	; (40097c <Reset_Handler+0xa4>)
  4008e6:	4a23      	ldr	r2, [pc, #140]	; (400974 <Reset_Handler+0x9c>)
  4008e8:	429a      	cmp	r2, r3
  4008ea:	d20c      	bcs.n	400906 <Reset_Handler+0x2e>
  4008ec:	3b01      	subs	r3, #1
  4008ee:	1a9b      	subs	r3, r3, r2
  4008f0:	f023 0303 	bic.w	r3, r3, #3
  4008f4:	3304      	adds	r3, #4
  4008f6:	4413      	add	r3, r2
  4008f8:	491f      	ldr	r1, [pc, #124]	; (400978 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4008fa:	f851 0b04 	ldr.w	r0, [r1], #4
  4008fe:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400902:	429a      	cmp	r2, r3
  400904:	d1f9      	bne.n	4008fa <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400906:	4b1e      	ldr	r3, [pc, #120]	; (400980 <Reset_Handler+0xa8>)
  400908:	4a1e      	ldr	r2, [pc, #120]	; (400984 <Reset_Handler+0xac>)
  40090a:	429a      	cmp	r2, r3
  40090c:	d20a      	bcs.n	400924 <Reset_Handler+0x4c>
  40090e:	3b01      	subs	r3, #1
  400910:	1a9b      	subs	r3, r3, r2
  400912:	f023 0303 	bic.w	r3, r3, #3
  400916:	3304      	adds	r3, #4
  400918:	4413      	add	r3, r2
                *pDest++ = 0;
  40091a:	2100      	movs	r1, #0
  40091c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400920:	4293      	cmp	r3, r2
  400922:	d1fb      	bne.n	40091c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400924:	4a18      	ldr	r2, [pc, #96]	; (400988 <Reset_Handler+0xb0>)
  400926:	4b19      	ldr	r3, [pc, #100]	; (40098c <Reset_Handler+0xb4>)
  400928:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40092c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40092e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400932:	fab3 f383 	clz	r3, r3
  400936:	095b      	lsrs	r3, r3, #5
  400938:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40093a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40093c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400940:	2200      	movs	r2, #0
  400942:	4b13      	ldr	r3, [pc, #76]	; (400990 <Reset_Handler+0xb8>)
  400944:	701a      	strb	r2, [r3, #0]
	return flags;
  400946:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400948:	4a12      	ldr	r2, [pc, #72]	; (400994 <Reset_Handler+0xbc>)
  40094a:	6813      	ldr	r3, [r2, #0]
  40094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400950:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400952:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400956:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40095a:	b129      	cbz	r1, 400968 <Reset_Handler+0x90>
		cpu_irq_enable();
  40095c:	2201      	movs	r2, #1
  40095e:	4b0c      	ldr	r3, [pc, #48]	; (400990 <Reset_Handler+0xb8>)
  400960:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400962:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400966:	b662      	cpsie	i
        __libc_init_array();
  400968:	4b0b      	ldr	r3, [pc, #44]	; (400998 <Reset_Handler+0xc0>)
  40096a:	4798      	blx	r3
        main();
  40096c:	4b0b      	ldr	r3, [pc, #44]	; (40099c <Reset_Handler+0xc4>)
  40096e:	4798      	blx	r3
  400970:	e7fe      	b.n	400970 <Reset_Handler+0x98>
  400972:	bf00      	nop
  400974:	20400000 	.word	0x20400000
  400978:	00404134 	.word	0x00404134
  40097c:	20400a80 	.word	0x20400a80
  400980:	20400cc8 	.word	0x20400cc8
  400984:	20400a80 	.word	0x20400a80
  400988:	e000ed00 	.word	0xe000ed00
  40098c:	00400000 	.word	0x00400000
  400990:	2040000a 	.word	0x2040000a
  400994:	e000ed88 	.word	0xe000ed88
  400998:	00400f69 	.word	0x00400f69
  40099c:	00400d61 	.word	0x00400d61

004009a0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4009a0:	4b3b      	ldr	r3, [pc, #236]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  4009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009a4:	f003 0303 	and.w	r3, r3, #3
  4009a8:	2b01      	cmp	r3, #1
  4009aa:	d01d      	beq.n	4009e8 <SystemCoreClockUpdate+0x48>
  4009ac:	b183      	cbz	r3, 4009d0 <SystemCoreClockUpdate+0x30>
  4009ae:	2b02      	cmp	r3, #2
  4009b0:	d036      	beq.n	400a20 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4009b2:	4b37      	ldr	r3, [pc, #220]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  4009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009ba:	2b70      	cmp	r3, #112	; 0x70
  4009bc:	d05f      	beq.n	400a7e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4009be:	4b34      	ldr	r3, [pc, #208]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  4009c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4009c2:	4934      	ldr	r1, [pc, #208]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  4009c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4009c8:	680b      	ldr	r3, [r1, #0]
  4009ca:	40d3      	lsrs	r3, r2
  4009cc:	600b      	str	r3, [r1, #0]
  4009ce:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4009d0:	4b31      	ldr	r3, [pc, #196]	; (400a98 <SystemCoreClockUpdate+0xf8>)
  4009d2:	695b      	ldr	r3, [r3, #20]
  4009d4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4009d8:	bf14      	ite	ne
  4009da:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4009de:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4009e2:	4b2c      	ldr	r3, [pc, #176]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  4009e4:	601a      	str	r2, [r3, #0]
  4009e6:	e7e4      	b.n	4009b2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4009e8:	4b29      	ldr	r3, [pc, #164]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  4009ea:	6a1b      	ldr	r3, [r3, #32]
  4009ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009f0:	d003      	beq.n	4009fa <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4009f2:	4a2a      	ldr	r2, [pc, #168]	; (400a9c <SystemCoreClockUpdate+0xfc>)
  4009f4:	4b27      	ldr	r3, [pc, #156]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  4009f6:	601a      	str	r2, [r3, #0]
  4009f8:	e7db      	b.n	4009b2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009fa:	4a29      	ldr	r2, [pc, #164]	; (400aa0 <SystemCoreClockUpdate+0x100>)
  4009fc:	4b25      	ldr	r3, [pc, #148]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  4009fe:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a00:	4b23      	ldr	r3, [pc, #140]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  400a02:	6a1b      	ldr	r3, [r3, #32]
  400a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a08:	2b10      	cmp	r3, #16
  400a0a:	d005      	beq.n	400a18 <SystemCoreClockUpdate+0x78>
  400a0c:	2b20      	cmp	r3, #32
  400a0e:	d1d0      	bne.n	4009b2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400a10:	4a22      	ldr	r2, [pc, #136]	; (400a9c <SystemCoreClockUpdate+0xfc>)
  400a12:	4b20      	ldr	r3, [pc, #128]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  400a14:	601a      	str	r2, [r3, #0]
          break;
  400a16:	e7cc      	b.n	4009b2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400a18:	4a22      	ldr	r2, [pc, #136]	; (400aa4 <SystemCoreClockUpdate+0x104>)
  400a1a:	4b1e      	ldr	r3, [pc, #120]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  400a1c:	601a      	str	r2, [r3, #0]
          break;
  400a1e:	e7c8      	b.n	4009b2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a20:	4b1b      	ldr	r3, [pc, #108]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  400a22:	6a1b      	ldr	r3, [r3, #32]
  400a24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a28:	d016      	beq.n	400a58 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400a2a:	4a1c      	ldr	r2, [pc, #112]	; (400a9c <SystemCoreClockUpdate+0xfc>)
  400a2c:	4b19      	ldr	r3, [pc, #100]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  400a2e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400a30:	4b17      	ldr	r3, [pc, #92]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  400a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a34:	f003 0303 	and.w	r3, r3, #3
  400a38:	2b02      	cmp	r3, #2
  400a3a:	d1ba      	bne.n	4009b2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400a3c:	4a14      	ldr	r2, [pc, #80]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  400a3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400a40:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400a42:	4814      	ldr	r0, [pc, #80]	; (400a94 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400a44:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400a48:	6803      	ldr	r3, [r0, #0]
  400a4a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400a4e:	b2d2      	uxtb	r2, r2
  400a50:	fbb3 f3f2 	udiv	r3, r3, r2
  400a54:	6003      	str	r3, [r0, #0]
  400a56:	e7ac      	b.n	4009b2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a58:	4a11      	ldr	r2, [pc, #68]	; (400aa0 <SystemCoreClockUpdate+0x100>)
  400a5a:	4b0e      	ldr	r3, [pc, #56]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  400a5c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a5e:	4b0c      	ldr	r3, [pc, #48]	; (400a90 <SystemCoreClockUpdate+0xf0>)
  400a60:	6a1b      	ldr	r3, [r3, #32]
  400a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a66:	2b10      	cmp	r3, #16
  400a68:	d005      	beq.n	400a76 <SystemCoreClockUpdate+0xd6>
  400a6a:	2b20      	cmp	r3, #32
  400a6c:	d1e0      	bne.n	400a30 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400a6e:	4a0b      	ldr	r2, [pc, #44]	; (400a9c <SystemCoreClockUpdate+0xfc>)
  400a70:	4b08      	ldr	r3, [pc, #32]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  400a72:	601a      	str	r2, [r3, #0]
          break;
  400a74:	e7dc      	b.n	400a30 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400a76:	4a0b      	ldr	r2, [pc, #44]	; (400aa4 <SystemCoreClockUpdate+0x104>)
  400a78:	4b06      	ldr	r3, [pc, #24]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  400a7a:	601a      	str	r2, [r3, #0]
          break;
  400a7c:	e7d8      	b.n	400a30 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400a7e:	4a05      	ldr	r2, [pc, #20]	; (400a94 <SystemCoreClockUpdate+0xf4>)
  400a80:	6813      	ldr	r3, [r2, #0]
  400a82:	4909      	ldr	r1, [pc, #36]	; (400aa8 <SystemCoreClockUpdate+0x108>)
  400a84:	fba1 1303 	umull	r1, r3, r1, r3
  400a88:	085b      	lsrs	r3, r3, #1
  400a8a:	6013      	str	r3, [r2, #0]
  400a8c:	4770      	bx	lr
  400a8e:	bf00      	nop
  400a90:	400e0600 	.word	0x400e0600
  400a94:	2040000c 	.word	0x2040000c
  400a98:	400e1810 	.word	0x400e1810
  400a9c:	00b71b00 	.word	0x00b71b00
  400aa0:	003d0900 	.word	0x003d0900
  400aa4:	007a1200 	.word	0x007a1200
  400aa8:	aaaaaaab 	.word	0xaaaaaaab

00400aac <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400aac:	4b16      	ldr	r3, [pc, #88]	; (400b08 <system_init_flash+0x5c>)
  400aae:	4298      	cmp	r0, r3
  400ab0:	d913      	bls.n	400ada <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400ab2:	4b16      	ldr	r3, [pc, #88]	; (400b0c <system_init_flash+0x60>)
  400ab4:	4298      	cmp	r0, r3
  400ab6:	d915      	bls.n	400ae4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400ab8:	4b15      	ldr	r3, [pc, #84]	; (400b10 <system_init_flash+0x64>)
  400aba:	4298      	cmp	r0, r3
  400abc:	d916      	bls.n	400aec <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <system_init_flash+0x68>)
  400ac0:	4298      	cmp	r0, r3
  400ac2:	d917      	bls.n	400af4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400ac4:	4b14      	ldr	r3, [pc, #80]	; (400b18 <system_init_flash+0x6c>)
  400ac6:	4298      	cmp	r0, r3
  400ac8:	d918      	bls.n	400afc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400aca:	4b14      	ldr	r3, [pc, #80]	; (400b1c <system_init_flash+0x70>)
  400acc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400ace:	bf94      	ite	ls
  400ad0:	4a13      	ldrls	r2, [pc, #76]	; (400b20 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400ad2:	4a14      	ldrhi	r2, [pc, #80]	; (400b24 <system_init_flash+0x78>)
  400ad4:	4b14      	ldr	r3, [pc, #80]	; (400b28 <system_init_flash+0x7c>)
  400ad6:	601a      	str	r2, [r3, #0]
  400ad8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ada:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400ade:	4b12      	ldr	r3, [pc, #72]	; (400b28 <system_init_flash+0x7c>)
  400ae0:	601a      	str	r2, [r3, #0]
  400ae2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ae4:	4a11      	ldr	r2, [pc, #68]	; (400b2c <system_init_flash+0x80>)
  400ae6:	4b10      	ldr	r3, [pc, #64]	; (400b28 <system_init_flash+0x7c>)
  400ae8:	601a      	str	r2, [r3, #0]
  400aea:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400aec:	4a10      	ldr	r2, [pc, #64]	; (400b30 <system_init_flash+0x84>)
  400aee:	4b0e      	ldr	r3, [pc, #56]	; (400b28 <system_init_flash+0x7c>)
  400af0:	601a      	str	r2, [r3, #0]
  400af2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400af4:	4a0f      	ldr	r2, [pc, #60]	; (400b34 <system_init_flash+0x88>)
  400af6:	4b0c      	ldr	r3, [pc, #48]	; (400b28 <system_init_flash+0x7c>)
  400af8:	601a      	str	r2, [r3, #0]
  400afa:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400afc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400b00:	4b09      	ldr	r3, [pc, #36]	; (400b28 <system_init_flash+0x7c>)
  400b02:	601a      	str	r2, [r3, #0]
  400b04:	4770      	bx	lr
  400b06:	bf00      	nop
  400b08:	015ef3bf 	.word	0x015ef3bf
  400b0c:	02bde77f 	.word	0x02bde77f
  400b10:	041cdb3f 	.word	0x041cdb3f
  400b14:	057bceff 	.word	0x057bceff
  400b18:	06dac2bf 	.word	0x06dac2bf
  400b1c:	0839b67f 	.word	0x0839b67f
  400b20:	04000500 	.word	0x04000500
  400b24:	04000600 	.word	0x04000600
  400b28:	400e0c00 	.word	0x400e0c00
  400b2c:	04000100 	.word	0x04000100
  400b30:	04000200 	.word	0x04000200
  400b34:	04000300 	.word	0x04000300

00400b38 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400b38:	4b0a      	ldr	r3, [pc, #40]	; (400b64 <_sbrk+0x2c>)
  400b3a:	681b      	ldr	r3, [r3, #0]
  400b3c:	b153      	cbz	r3, 400b54 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400b3e:	4b09      	ldr	r3, [pc, #36]	; (400b64 <_sbrk+0x2c>)
  400b40:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400b42:	181a      	adds	r2, r3, r0
  400b44:	4908      	ldr	r1, [pc, #32]	; (400b68 <_sbrk+0x30>)
  400b46:	4291      	cmp	r1, r2
  400b48:	db08      	blt.n	400b5c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400b4a:	4610      	mov	r0, r2
  400b4c:	4a05      	ldr	r2, [pc, #20]	; (400b64 <_sbrk+0x2c>)
  400b4e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400b50:	4618      	mov	r0, r3
  400b52:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400b54:	4a05      	ldr	r2, [pc, #20]	; (400b6c <_sbrk+0x34>)
  400b56:	4b03      	ldr	r3, [pc, #12]	; (400b64 <_sbrk+0x2c>)
  400b58:	601a      	str	r2, [r3, #0]
  400b5a:	e7f0      	b.n	400b3e <_sbrk+0x6>
		return (caddr_t) -1;	
  400b5c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	20400b10 	.word	0x20400b10
  400b68:	2045fffc 	.word	0x2045fffc
  400b6c:	20402ec8 	.word	0x20402ec8

00400b70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b70:	f04f 30ff 	mov.w	r0, #4294967295
  400b74:	4770      	bx	lr

00400b76 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b7a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b7c:	2000      	movs	r0, #0
  400b7e:	4770      	bx	lr

00400b80 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b80:	2001      	movs	r0, #1
  400b82:	4770      	bx	lr

00400b84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b84:	2000      	movs	r0, #0
  400b86:	4770      	bx	lr

00400b88 <reg_dig_mismatch_handler>:
	/* Configure console. */
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

static void reg_dig_mismatch_handler(uint8_t reg_num)
{
  400b88:	b508      	push	{r3, lr}
	if(reg_num == ICM_REGION_NUM_0) {
  400b8a:	b110      	cbz	r0, 400b92 <reg_dig_mismatch_handler+0xa>
		printf( " Memory region0 is modified \n\r");
	} else if(reg_num == ICM_REGION_NUM_1) {
  400b8c:	2801      	cmp	r0, #1
  400b8e:	d004      	beq.n	400b9a <reg_dig_mismatch_handler+0x12>
  400b90:	bd08      	pop	{r3, pc}
		printf( " Memory region0 is modified \n\r");
  400b92:	4804      	ldr	r0, [pc, #16]	; (400ba4 <reg_dig_mismatch_handler+0x1c>)
  400b94:	4b04      	ldr	r3, [pc, #16]	; (400ba8 <reg_dig_mismatch_handler+0x20>)
  400b96:	4798      	blx	r3
  400b98:	bd08      	pop	{r3, pc}
		printf( " Memory region1 is modified \n\r");
  400b9a:	4804      	ldr	r0, [pc, #16]	; (400bac <reg_dig_mismatch_handler+0x24>)
  400b9c:	4b02      	ldr	r3, [pc, #8]	; (400ba8 <reg_dig_mismatch_handler+0x20>)
  400b9e:	4798      	blx	r3
	}
}
  400ba0:	e7f6      	b.n	400b90 <reg_dig_mismatch_handler+0x8>
  400ba2:	bf00      	nop
  400ba4:	00403f60 	.word	0x00403f60
  400ba8:	00400fb9 	.word	0x00400fb9
  400bac:	00403f80 	.word	0x00403f80

00400bb0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400bb2:	b083      	sub	sp, #12
  400bb4:	4605      	mov	r5, r0
  400bb6:	460c      	mov	r4, r1
	uint32_t val = 0;
  400bb8:	2300      	movs	r3, #0
  400bba:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400bbc:	4b2a      	ldr	r3, [pc, #168]	; (400c68 <usart_serial_getchar+0xb8>)
  400bbe:	4298      	cmp	r0, r3
  400bc0:	d013      	beq.n	400bea <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400bc2:	4b2a      	ldr	r3, [pc, #168]	; (400c6c <usart_serial_getchar+0xbc>)
  400bc4:	4298      	cmp	r0, r3
  400bc6:	d018      	beq.n	400bfa <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400bc8:	4b29      	ldr	r3, [pc, #164]	; (400c70 <usart_serial_getchar+0xc0>)
  400bca:	4298      	cmp	r0, r3
  400bcc:	d01d      	beq.n	400c0a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400bce:	4b29      	ldr	r3, [pc, #164]	; (400c74 <usart_serial_getchar+0xc4>)
  400bd0:	429d      	cmp	r5, r3
  400bd2:	d022      	beq.n	400c1a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400bd4:	4b28      	ldr	r3, [pc, #160]	; (400c78 <usart_serial_getchar+0xc8>)
  400bd6:	429d      	cmp	r5, r3
  400bd8:	d027      	beq.n	400c2a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400bda:	4b28      	ldr	r3, [pc, #160]	; (400c7c <usart_serial_getchar+0xcc>)
  400bdc:	429d      	cmp	r5, r3
  400bde:	d02e      	beq.n	400c3e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400be0:	4b27      	ldr	r3, [pc, #156]	; (400c80 <usart_serial_getchar+0xd0>)
  400be2:	429d      	cmp	r5, r3
  400be4:	d035      	beq.n	400c52 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400be6:	b003      	add	sp, #12
  400be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400bea:	461f      	mov	r7, r3
  400bec:	4e25      	ldr	r6, [pc, #148]	; (400c84 <usart_serial_getchar+0xd4>)
  400bee:	4621      	mov	r1, r4
  400bf0:	4638      	mov	r0, r7
  400bf2:	47b0      	blx	r6
  400bf4:	2800      	cmp	r0, #0
  400bf6:	d1fa      	bne.n	400bee <usart_serial_getchar+0x3e>
  400bf8:	e7e9      	b.n	400bce <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400bfa:	461f      	mov	r7, r3
  400bfc:	4e21      	ldr	r6, [pc, #132]	; (400c84 <usart_serial_getchar+0xd4>)
  400bfe:	4621      	mov	r1, r4
  400c00:	4638      	mov	r0, r7
  400c02:	47b0      	blx	r6
  400c04:	2800      	cmp	r0, #0
  400c06:	d1fa      	bne.n	400bfe <usart_serial_getchar+0x4e>
  400c08:	e7e4      	b.n	400bd4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400c0a:	461f      	mov	r7, r3
  400c0c:	4e1d      	ldr	r6, [pc, #116]	; (400c84 <usart_serial_getchar+0xd4>)
  400c0e:	4621      	mov	r1, r4
  400c10:	4638      	mov	r0, r7
  400c12:	47b0      	blx	r6
  400c14:	2800      	cmp	r0, #0
  400c16:	d1fa      	bne.n	400c0e <usart_serial_getchar+0x5e>
  400c18:	e7df      	b.n	400bda <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400c1a:	461f      	mov	r7, r3
  400c1c:	4e19      	ldr	r6, [pc, #100]	; (400c84 <usart_serial_getchar+0xd4>)
  400c1e:	4621      	mov	r1, r4
  400c20:	4638      	mov	r0, r7
  400c22:	47b0      	blx	r6
  400c24:	2800      	cmp	r0, #0
  400c26:	d1fa      	bne.n	400c1e <usart_serial_getchar+0x6e>
  400c28:	e7da      	b.n	400be0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400c2a:	461e      	mov	r6, r3
  400c2c:	4d16      	ldr	r5, [pc, #88]	; (400c88 <usart_serial_getchar+0xd8>)
  400c2e:	a901      	add	r1, sp, #4
  400c30:	4630      	mov	r0, r6
  400c32:	47a8      	blx	r5
  400c34:	2800      	cmp	r0, #0
  400c36:	d1fa      	bne.n	400c2e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400c38:	9b01      	ldr	r3, [sp, #4]
  400c3a:	7023      	strb	r3, [r4, #0]
  400c3c:	e7d3      	b.n	400be6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400c3e:	461e      	mov	r6, r3
  400c40:	4d11      	ldr	r5, [pc, #68]	; (400c88 <usart_serial_getchar+0xd8>)
  400c42:	a901      	add	r1, sp, #4
  400c44:	4630      	mov	r0, r6
  400c46:	47a8      	blx	r5
  400c48:	2800      	cmp	r0, #0
  400c4a:	d1fa      	bne.n	400c42 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400c4c:	9b01      	ldr	r3, [sp, #4]
  400c4e:	7023      	strb	r3, [r4, #0]
  400c50:	e7c9      	b.n	400be6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400c52:	461e      	mov	r6, r3
  400c54:	4d0c      	ldr	r5, [pc, #48]	; (400c88 <usart_serial_getchar+0xd8>)
  400c56:	a901      	add	r1, sp, #4
  400c58:	4630      	mov	r0, r6
  400c5a:	47a8      	blx	r5
  400c5c:	2800      	cmp	r0, #0
  400c5e:	d1fa      	bne.n	400c56 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400c60:	9b01      	ldr	r3, [sp, #4]
  400c62:	7023      	strb	r3, [r4, #0]
}
  400c64:	e7bf      	b.n	400be6 <usart_serial_getchar+0x36>
  400c66:	bf00      	nop
  400c68:	400e0800 	.word	0x400e0800
  400c6c:	400e0a00 	.word	0x400e0a00
  400c70:	400e1a00 	.word	0x400e1a00
  400c74:	400e1c00 	.word	0x400e1c00
  400c78:	40024000 	.word	0x40024000
  400c7c:	40028000 	.word	0x40028000
  400c80:	4002c000 	.word	0x4002c000
  400c84:	004007b3 	.word	0x004007b3
  400c88:	004008bf 	.word	0x004008bf

00400c8c <usart_serial_putchar>:
{
  400c8c:	b570      	push	{r4, r5, r6, lr}
  400c8e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400c90:	4b2a      	ldr	r3, [pc, #168]	; (400d3c <usart_serial_putchar+0xb0>)
  400c92:	4298      	cmp	r0, r3
  400c94:	d013      	beq.n	400cbe <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400c96:	4b2a      	ldr	r3, [pc, #168]	; (400d40 <usart_serial_putchar+0xb4>)
  400c98:	4298      	cmp	r0, r3
  400c9a:	d019      	beq.n	400cd0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400c9c:	4b29      	ldr	r3, [pc, #164]	; (400d44 <usart_serial_putchar+0xb8>)
  400c9e:	4298      	cmp	r0, r3
  400ca0:	d01f      	beq.n	400ce2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400ca2:	4b29      	ldr	r3, [pc, #164]	; (400d48 <usart_serial_putchar+0xbc>)
  400ca4:	4298      	cmp	r0, r3
  400ca6:	d025      	beq.n	400cf4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400ca8:	4b28      	ldr	r3, [pc, #160]	; (400d4c <usart_serial_putchar+0xc0>)
  400caa:	4298      	cmp	r0, r3
  400cac:	d02b      	beq.n	400d06 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400cae:	4b28      	ldr	r3, [pc, #160]	; (400d50 <usart_serial_putchar+0xc4>)
  400cb0:	4298      	cmp	r0, r3
  400cb2:	d031      	beq.n	400d18 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400cb4:	4b27      	ldr	r3, [pc, #156]	; (400d54 <usart_serial_putchar+0xc8>)
  400cb6:	4298      	cmp	r0, r3
  400cb8:	d037      	beq.n	400d2a <usart_serial_putchar+0x9e>
	return 0;
  400cba:	2000      	movs	r0, #0
}
  400cbc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400cbe:	461e      	mov	r6, r3
  400cc0:	4d25      	ldr	r5, [pc, #148]	; (400d58 <usart_serial_putchar+0xcc>)
  400cc2:	4621      	mov	r1, r4
  400cc4:	4630      	mov	r0, r6
  400cc6:	47a8      	blx	r5
  400cc8:	2800      	cmp	r0, #0
  400cca:	d1fa      	bne.n	400cc2 <usart_serial_putchar+0x36>
		return 1;
  400ccc:	2001      	movs	r0, #1
  400cce:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400cd0:	461e      	mov	r6, r3
  400cd2:	4d21      	ldr	r5, [pc, #132]	; (400d58 <usart_serial_putchar+0xcc>)
  400cd4:	4621      	mov	r1, r4
  400cd6:	4630      	mov	r0, r6
  400cd8:	47a8      	blx	r5
  400cda:	2800      	cmp	r0, #0
  400cdc:	d1fa      	bne.n	400cd4 <usart_serial_putchar+0x48>
		return 1;
  400cde:	2001      	movs	r0, #1
  400ce0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400ce2:	461e      	mov	r6, r3
  400ce4:	4d1c      	ldr	r5, [pc, #112]	; (400d58 <usart_serial_putchar+0xcc>)
  400ce6:	4621      	mov	r1, r4
  400ce8:	4630      	mov	r0, r6
  400cea:	47a8      	blx	r5
  400cec:	2800      	cmp	r0, #0
  400cee:	d1fa      	bne.n	400ce6 <usart_serial_putchar+0x5a>
		return 1;
  400cf0:	2001      	movs	r0, #1
  400cf2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400cf4:	461e      	mov	r6, r3
  400cf6:	4d18      	ldr	r5, [pc, #96]	; (400d58 <usart_serial_putchar+0xcc>)
  400cf8:	4621      	mov	r1, r4
  400cfa:	4630      	mov	r0, r6
  400cfc:	47a8      	blx	r5
  400cfe:	2800      	cmp	r0, #0
  400d00:	d1fa      	bne.n	400cf8 <usart_serial_putchar+0x6c>
		return 1;
  400d02:	2001      	movs	r0, #1
  400d04:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d06:	461e      	mov	r6, r3
  400d08:	4d14      	ldr	r5, [pc, #80]	; (400d5c <usart_serial_putchar+0xd0>)
  400d0a:	4621      	mov	r1, r4
  400d0c:	4630      	mov	r0, r6
  400d0e:	47a8      	blx	r5
  400d10:	2800      	cmp	r0, #0
  400d12:	d1fa      	bne.n	400d0a <usart_serial_putchar+0x7e>
		return 1;
  400d14:	2001      	movs	r0, #1
  400d16:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d18:	461e      	mov	r6, r3
  400d1a:	4d10      	ldr	r5, [pc, #64]	; (400d5c <usart_serial_putchar+0xd0>)
  400d1c:	4621      	mov	r1, r4
  400d1e:	4630      	mov	r0, r6
  400d20:	47a8      	blx	r5
  400d22:	2800      	cmp	r0, #0
  400d24:	d1fa      	bne.n	400d1c <usart_serial_putchar+0x90>
		return 1;
  400d26:	2001      	movs	r0, #1
  400d28:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d2a:	461e      	mov	r6, r3
  400d2c:	4d0b      	ldr	r5, [pc, #44]	; (400d5c <usart_serial_putchar+0xd0>)
  400d2e:	4621      	mov	r1, r4
  400d30:	4630      	mov	r0, r6
  400d32:	47a8      	blx	r5
  400d34:	2800      	cmp	r0, #0
  400d36:	d1fa      	bne.n	400d2e <usart_serial_putchar+0xa2>
		return 1;
  400d38:	2001      	movs	r0, #1
  400d3a:	bd70      	pop	{r4, r5, r6, pc}
  400d3c:	400e0800 	.word	0x400e0800
  400d40:	400e0a00 	.word	0x400e0a00
  400d44:	400e1a00 	.word	0x400e1a00
  400d48:	400e1c00 	.word	0x400e1c00
  400d4c:	40024000 	.word	0x40024000
  400d50:	40028000 	.word	0x40028000
  400d54:	4002c000 	.word	0x4002c000
  400d58:	004007a1 	.word	0x004007a1
  400d5c:	004008a9 	.word	0x004008a9

00400d60 <main>:
 * \brief Application entry point for ICM example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400d60:	b580      	push	{r7, lr}
  400d62:	b08c      	sub	sp, #48	; 0x30
	/* ICM configuration */
	struct icm_config icm_cfg;

	/* Initialize the SAM system */
	sysclk_init();
  400d64:	4b5b      	ldr	r3, [pc, #364]	; (400ed4 <main+0x174>)
  400d66:	4798      	blx	r3
	board_init();
  400d68:	4b5b      	ldr	r3, [pc, #364]	; (400ed8 <main+0x178>)
  400d6a:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
  400d6c:	4b5b      	ldr	r3, [pc, #364]	; (400edc <main+0x17c>)
  400d6e:	2400      	movs	r4, #0
  400d70:	701c      	strb	r4, [r3, #0]
  400d72:	705c      	strb	r4, [r3, #1]
  400d74:	709c      	strb	r4, [r3, #2]
  400d76:	70dc      	strb	r4, [r3, #3]
  400d78:	711c      	strb	r4, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  400d7a:	2701      	movs	r7, #1
  400d7c:	715f      	strb	r7, [r3, #5]
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d7e:	4d58      	ldr	r5, [pc, #352]	; (400ee0 <main+0x180>)
  400d80:	4b58      	ldr	r3, [pc, #352]	; (400ee4 <main+0x184>)
  400d82:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d84:	4a58      	ldr	r2, [pc, #352]	; (400ee8 <main+0x188>)
  400d86:	4b59      	ldr	r3, [pc, #356]	; (400eec <main+0x18c>)
  400d88:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d8a:	4a59      	ldr	r2, [pc, #356]	; (400ef0 <main+0x190>)
  400d8c:	4b59      	ldr	r3, [pc, #356]	; (400ef4 <main+0x194>)
  400d8e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400d90:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400d94:	9303      	str	r3, [sp, #12]
	usart_settings.char_length = opt->charlength;
  400d96:	23c0      	movs	r3, #192	; 0xc0
  400d98:	9304      	str	r3, [sp, #16]
	usart_settings.parity_type = opt->paritytype;
  400d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d9e:	9305      	str	r3, [sp, #20]
	usart_settings.stop_bits= opt->stopbits;
  400da0:	9406      	str	r4, [sp, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400da2:	9407      	str	r4, [sp, #28]
  400da4:	200e      	movs	r0, #14
  400da6:	4b54      	ldr	r3, [pc, #336]	; (400ef8 <main+0x198>)
  400da8:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  400daa:	4a54      	ldr	r2, [pc, #336]	; (400efc <main+0x19c>)
  400dac:	a903      	add	r1, sp, #12
  400dae:	4628      	mov	r0, r5
  400db0:	4b53      	ldr	r3, [pc, #332]	; (400f00 <main+0x1a0>)
  400db2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400db4:	4628      	mov	r0, r5
  400db6:	4b53      	ldr	r3, [pc, #332]	; (400f04 <main+0x1a4>)
  400db8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400dba:	4628      	mov	r0, r5
  400dbc:	4b52      	ldr	r3, [pc, #328]	; (400f08 <main+0x1a8>)
  400dbe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400dc0:	4e52      	ldr	r6, [pc, #328]	; (400f0c <main+0x1ac>)
  400dc2:	6833      	ldr	r3, [r6, #0]
  400dc4:	4621      	mov	r1, r4
  400dc6:	6898      	ldr	r0, [r3, #8]
  400dc8:	4d51      	ldr	r5, [pc, #324]	; (400f10 <main+0x1b0>)
  400dca:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400dcc:	6833      	ldr	r3, [r6, #0]
  400dce:	4621      	mov	r1, r4
  400dd0:	6858      	ldr	r0, [r3, #4]
  400dd2:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Output example information */
	printf("-- ICM Example --\r\n");
  400dd4:	484f      	ldr	r0, [pc, #316]	; (400f14 <main+0x1b4>)
  400dd6:	4d50      	ldr	r5, [pc, #320]	; (400f18 <main+0x1b8>)
  400dd8:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  400dda:	4950      	ldr	r1, [pc, #320]	; (400f1c <main+0x1bc>)
  400ddc:	4850      	ldr	r0, [pc, #320]	; (400f20 <main+0x1c0>)
  400dde:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  400de0:	4a50      	ldr	r2, [pc, #320]	; (400f24 <main+0x1c4>)
  400de2:	4951      	ldr	r1, [pc, #324]	; (400f28 <main+0x1c8>)
  400de4:	4851      	ldr	r0, [pc, #324]	; (400f2c <main+0x1cc>)
  400de6:	47a8      	blx	r5

	/* ICM initialization */
	icm_cfg.is_write_back= false;
  400de8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	icm_cfg.is_dis_end_mon = false;
  400dec:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	icm_cfg.is_sec_list_branch = false;
  400df0:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	icm_cfg.bbc = 0;
  400df4:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
	icm_cfg.is_auto_mode = false;
  400df8:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
	icm_cfg.is_dual_buf = false;
  400dfc:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
	icm_cfg.is_user_hash = false;
  400e00:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
	icm_cfg.ualgo = ICM_SHA_1;
  400e04:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
	icm_cfg.hash_area_val = 0;
  400e08:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	icm_cfg.des_area_val = 0;
  400e0c:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	icm_init(ICM, &icm_cfg);
  400e10:	4e47      	ldr	r6, [pc, #284]	; (400f30 <main+0x1d0>)
  400e12:	a909      	add	r1, sp, #36	; 0x24
  400e14:	4630      	mov	r0, r6
  400e16:	4b47      	ldr	r3, [pc, #284]	; (400f34 <main+0x1d4>)
  400e18:	4798      	blx	r3

	/* Set region0 descriptor */
	reg_descriptor[0].start_addr = (uint32_t)message_sha_0;
  400e1a:	4d47      	ldr	r5, [pc, #284]	; (400f38 <main+0x1d8>)
  400e1c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 400f5c <main+0x1fc>
  400e20:	f8c5 8000 	str.w	r8, [r5]
	reg_descriptor[0].cfg.is_compare_mode = false;
  400e24:	792b      	ldrb	r3, [r5, #4]
	reg_descriptor[0].cfg.is_wrap = false;
	reg_descriptor[0].cfg.is_end_mon = false;
	reg_descriptor[0].cfg.reg_hash_int_en = false;
	reg_descriptor[0].cfg.dig_mis_int_en = false;
	reg_descriptor[0].cfg.bus_err_int_en = false;
	reg_descriptor[0].cfg.wrap_con_int_en = false;
  400e26:	f003 0388 	and.w	r3, r3, #136	; 0x88
  400e2a:	f364 13c7 	bfi	r3, r4, #7, #1
  400e2e:	712b      	strb	r3, [r5, #4]
	reg_descriptor[0].cfg.ebit_con_int_en = false;
  400e30:	796b      	ldrb	r3, [r5, #5]
	reg_descriptor[0].cfg.status_upt_con_int_en = false;
	reg_descriptor[0].cfg.is_pro_dly = false;
	reg_descriptor[0].cfg.mem_reg_val = 0;
  400e32:	79ea      	ldrb	r2, [r5, #7]
  400e34:	f364 0205 	bfi	r2, r4, #0, #6
  400e38:	71ea      	strb	r2, [r5, #7]
	reg_descriptor[0].cfg.algo = ICM_SHA_1;
  400e3a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  400e3e:	f364 1306 	bfi	r3, r4, #4, #3
  400e42:	716b      	strb	r3, [r5, #5]
	reg_descriptor[0].tran_size = 0;
  400e44:	60ac      	str	r4, [r5, #8]
	reg_descriptor[0].next_addr = 0;
  400e46:	60ec      	str	r4, [r5, #12]

	/* Set region1 descriptor in main list */
	reg_descriptor[1].start_addr = (uint32_t)message_sha_1_main;
  400e48:	4b3c      	ldr	r3, [pc, #240]	; (400f3c <main+0x1dc>)
  400e4a:	612b      	str	r3, [r5, #16]
	reg_descriptor[1].cfg.is_compare_mode = false;
  400e4c:	7d2b      	ldrb	r3, [r5, #20]
	reg_descriptor[1].cfg.is_wrap = false;
	reg_descriptor[1].cfg.is_end_mon = true;
  400e4e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	reg_descriptor[1].cfg.reg_hash_int_en = false;
  400e52:	f043 0304 	orr.w	r3, r3, #4
	reg_descriptor[1].cfg.dig_mis_int_en = false;
	reg_descriptor[1].cfg.bus_err_int_en = false;
	reg_descriptor[1].cfg.wrap_con_int_en = false;
  400e56:	f003 038f 	and.w	r3, r3, #143	; 0x8f
  400e5a:	f364 13c7 	bfi	r3, r4, #7, #1
  400e5e:	752b      	strb	r3, [r5, #20]
	reg_descriptor[1].cfg.ebit_con_int_en = false;
  400e60:	7d6b      	ldrb	r3, [r5, #21]
	reg_descriptor[1].cfg.status_upt_con_int_en = false;
	reg_descriptor[1].cfg.is_pro_dly = false;
	reg_descriptor[1].cfg.mem_reg_val = 0;
  400e62:	7dea      	ldrb	r2, [r5, #23]
  400e64:	f364 0205 	bfi	r2, r4, #0, #6
  400e68:	75ea      	strb	r2, [r5, #23]
	reg_descriptor[1].cfg.algo = ICM_SHA_1;
  400e6a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  400e6e:	f364 1306 	bfi	r3, r4, #4, #3
  400e72:	756b      	strb	r3, [r5, #21]
	reg_descriptor[1].tran_size = 0;
  400e74:	61ac      	str	r4, [r5, #24]
	reg_descriptor[1].next_addr = &reg_descriptor_sec;
  400e76:	4b32      	ldr	r3, [pc, #200]	; (400f40 <main+0x1e0>)
  400e78:	61eb      	str	r3, [r5, #28]

	/* Set region1 descriptor in secondary list */
	reg_descriptor_sec.start_addr = (uint32_t)message_sha_1_sec;
  400e7a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 400f60 <main+0x200>
  400e7e:	f8c3 9000 	str.w	r9, [r3]
	reg_descriptor_sec.tran_size = 0;
  400e82:	609c      	str	r4, [r3, #8]
	reg_descriptor_sec.next_addr = 0;
  400e84:	60dc      	str	r4, [r3, #12]
 * \param addr  The start address value
 *
 */
static inline void icm_set_reg_des_addr(Icm *p_icm, uint32_t addr)
{
	p_icm->ICM_DSCR = addr;
  400e86:	6335      	str	r5, [r6, #48]	; 0x30

	/* Set region descriptor start address */
	icm_set_reg_des_addr(ICM, (uint32_t)&reg_descriptor[0]);

	/* Set hash area start address */
	icm_set_hash_area_addr(ICM, (uint32_t)output_sha);
  400e88:	4b2e      	ldr	r3, [pc, #184]	; (400f44 <main+0x1e4>)
 *
 */
static inline void icm_set_hash_area_addr(Icm *p_icm, uint32_t addr)
{

	p_icm->ICM_HASH = addr;
  400e8a:	6373      	str	r3, [r6, #52]	; 0x34

	/* Enable ICM */
	icm_enable(ICM);
  400e8c:	4630      	mov	r0, r6
  400e8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 400f64 <main+0x204>
  400e92:	47d0      	blx	sl

	delay_ms(200);
  400e94:	482c      	ldr	r0, [pc, #176]	; (400f48 <main+0x1e8>)
  400e96:	4b2d      	ldr	r3, [pc, #180]	; (400f4c <main+0x1ec>)
  400e98:	4798      	blx	r3

	/* Set region monitoring mode to compare mode */
	reg_descriptor[0].cfg.is_compare_mode = true;
  400e9a:	792b      	ldrb	r3, [r5, #4]
  400e9c:	433b      	orrs	r3, r7
  400e9e:	712b      	strb	r3, [r5, #4]
	reg_descriptor[1].cfg.is_compare_mode = true;
  400ea0:	7d2b      	ldrb	r3, [r5, #20]
  400ea2:	433b      	orrs	r3, r7
  400ea4:	752b      	strb	r3, [r5, #20]

	/* Set callback function for digest mismatch interrupt handler */
	icm_set_callback(ICM, reg_dig_mismatch_handler, ICM_REGION_NUM_0,
  400ea6:	4d2a      	ldr	r5, [pc, #168]	; (400f50 <main+0x1f0>)
  400ea8:	9700      	str	r7, [sp, #0]
  400eaa:	463b      	mov	r3, r7
  400eac:	4622      	mov	r2, r4
  400eae:	4629      	mov	r1, r5
  400eb0:	4630      	mov	r0, r6
  400eb2:	4c28      	ldr	r4, [pc, #160]	; (400f54 <main+0x1f4>)
  400eb4:	47a0      	blx	r4
			ICM_INTERRUPT_RDM, 1);
	icm_set_callback(ICM, reg_dig_mismatch_handler, ICM_REGION_NUM_1,
  400eb6:	9700      	str	r7, [sp, #0]
  400eb8:	463b      	mov	r3, r7
  400eba:	463a      	mov	r2, r7
  400ebc:	4629      	mov	r1, r5
  400ebe:	4630      	mov	r0, r6
  400ec0:	47a0      	blx	r4
			ICM_INTERRUPT_RDM, 1);

	/* Modify memory region value */
	message_sha_0[0] = 0x12345678;
  400ec2:	4b25      	ldr	r3, [pc, #148]	; (400f58 <main+0x1f8>)
  400ec4:	f8c8 3000 	str.w	r3, [r8]
	message_sha_1_sec[0] = 0x12345678;
  400ec8:	f8c9 3000 	str.w	r3, [r9]

	/* Enable ICM */
	icm_enable(ICM);
  400ecc:	4630      	mov	r0, r6
  400ece:	47d0      	blx	sl
  400ed0:	e7fe      	b.n	400ed0 <main+0x170>
  400ed2:	bf00      	nop
  400ed4:	004001d5 	.word	0x004001d5
  400ed8:	004002d1 	.word	0x004002d1
  400edc:	20400b48 	.word	0x20400b48
  400ee0:	40028000 	.word	0x40028000
  400ee4:	20400b58 	.word	0x20400b58
  400ee8:	00400c8d 	.word	0x00400c8d
  400eec:	20400b54 	.word	0x20400b54
  400ef0:	00400bb1 	.word	0x00400bb1
  400ef4:	20400b50 	.word	0x20400b50
  400ef8:	00400781 	.word	0x00400781
  400efc:	08f0d180 	.word	0x08f0d180
  400f00:	00400849 	.word	0x00400849
  400f04:	0040089d 	.word	0x0040089d
  400f08:	004008a3 	.word	0x004008a3
  400f0c:	204000d0 	.word	0x204000d0
  400f10:	0040107d 	.word	0x0040107d
  400f14:	00403f08 	.word	0x00403f08
  400f18:	00400fb9 	.word	0x00400fb9
  400f1c:	00403f1c 	.word	0x00403f1c
  400f20:	00403f28 	.word	0x00403f28
  400f24:	00403f30 	.word	0x00403f30
  400f28:	00403f3c 	.word	0x00403f3c
  400f2c:	00403f48 	.word	0x00403f48
  400f30:	40048000 	.word	0x40048000
  400f34:	00400509 	.word	0x00400509
  400f38:	20400c80 	.word	0x20400c80
  400f3c:	20400050 	.word	0x20400050
  400f40:	20400b80 	.word	0x20400b80
  400f44:	20400c00 	.word	0x20400c00
  400f48:	009a5649 	.word	0x009a5649
  400f4c:	20400001 	.word	0x20400001
  400f50:	00400b89 	.word	0x00400b89
  400f54:	0040042d 	.word	0x0040042d
  400f58:	12345678 	.word	0x12345678
  400f5c:	20400010 	.word	0x20400010
  400f60:	20400090 	.word	0x20400090
  400f64:	004003e1 	.word	0x004003e1

00400f68 <__libc_init_array>:
  400f68:	b570      	push	{r4, r5, r6, lr}
  400f6a:	4e0f      	ldr	r6, [pc, #60]	; (400fa8 <__libc_init_array+0x40>)
  400f6c:	4d0f      	ldr	r5, [pc, #60]	; (400fac <__libc_init_array+0x44>)
  400f6e:	1b76      	subs	r6, r6, r5
  400f70:	10b6      	asrs	r6, r6, #2
  400f72:	bf18      	it	ne
  400f74:	2400      	movne	r4, #0
  400f76:	d005      	beq.n	400f84 <__libc_init_array+0x1c>
  400f78:	3401      	adds	r4, #1
  400f7a:	f855 3b04 	ldr.w	r3, [r5], #4
  400f7e:	4798      	blx	r3
  400f80:	42a6      	cmp	r6, r4
  400f82:	d1f9      	bne.n	400f78 <__libc_init_array+0x10>
  400f84:	4e0a      	ldr	r6, [pc, #40]	; (400fb0 <__libc_init_array+0x48>)
  400f86:	4d0b      	ldr	r5, [pc, #44]	; (400fb4 <__libc_init_array+0x4c>)
  400f88:	1b76      	subs	r6, r6, r5
  400f8a:	f003 f8bd 	bl	404108 <_init>
  400f8e:	10b6      	asrs	r6, r6, #2
  400f90:	bf18      	it	ne
  400f92:	2400      	movne	r4, #0
  400f94:	d006      	beq.n	400fa4 <__libc_init_array+0x3c>
  400f96:	3401      	adds	r4, #1
  400f98:	f855 3b04 	ldr.w	r3, [r5], #4
  400f9c:	4798      	blx	r3
  400f9e:	42a6      	cmp	r6, r4
  400fa0:	d1f9      	bne.n	400f96 <__libc_init_array+0x2e>
  400fa2:	bd70      	pop	{r4, r5, r6, pc}
  400fa4:	bd70      	pop	{r4, r5, r6, pc}
  400fa6:	bf00      	nop
  400fa8:	00404114 	.word	0x00404114
  400fac:	00404114 	.word	0x00404114
  400fb0:	0040411c 	.word	0x0040411c
  400fb4:	00404114 	.word	0x00404114

00400fb8 <iprintf>:
  400fb8:	b40f      	push	{r0, r1, r2, r3}
  400fba:	b500      	push	{lr}
  400fbc:	4907      	ldr	r1, [pc, #28]	; (400fdc <iprintf+0x24>)
  400fbe:	b083      	sub	sp, #12
  400fc0:	ab04      	add	r3, sp, #16
  400fc2:	6808      	ldr	r0, [r1, #0]
  400fc4:	f853 2b04 	ldr.w	r2, [r3], #4
  400fc8:	6881      	ldr	r1, [r0, #8]
  400fca:	9301      	str	r3, [sp, #4]
  400fcc:	f000 f966 	bl	40129c <_vfiprintf_r>
  400fd0:	b003      	add	sp, #12
  400fd2:	f85d eb04 	ldr.w	lr, [sp], #4
  400fd6:	b004      	add	sp, #16
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop
  400fdc:	204000d0 	.word	0x204000d0

00400fe0 <memset>:
  400fe0:	b470      	push	{r4, r5, r6}
  400fe2:	0786      	lsls	r6, r0, #30
  400fe4:	d046      	beq.n	401074 <memset+0x94>
  400fe6:	1e54      	subs	r4, r2, #1
  400fe8:	2a00      	cmp	r2, #0
  400fea:	d041      	beq.n	401070 <memset+0x90>
  400fec:	b2ca      	uxtb	r2, r1
  400fee:	4603      	mov	r3, r0
  400ff0:	e002      	b.n	400ff8 <memset+0x18>
  400ff2:	f114 34ff 	adds.w	r4, r4, #4294967295
  400ff6:	d33b      	bcc.n	401070 <memset+0x90>
  400ff8:	f803 2b01 	strb.w	r2, [r3], #1
  400ffc:	079d      	lsls	r5, r3, #30
  400ffe:	d1f8      	bne.n	400ff2 <memset+0x12>
  401000:	2c03      	cmp	r4, #3
  401002:	d92e      	bls.n	401062 <memset+0x82>
  401004:	b2cd      	uxtb	r5, r1
  401006:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40100a:	2c0f      	cmp	r4, #15
  40100c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401010:	d919      	bls.n	401046 <memset+0x66>
  401012:	f103 0210 	add.w	r2, r3, #16
  401016:	4626      	mov	r6, r4
  401018:	3e10      	subs	r6, #16
  40101a:	2e0f      	cmp	r6, #15
  40101c:	f842 5c10 	str.w	r5, [r2, #-16]
  401020:	f842 5c0c 	str.w	r5, [r2, #-12]
  401024:	f842 5c08 	str.w	r5, [r2, #-8]
  401028:	f842 5c04 	str.w	r5, [r2, #-4]
  40102c:	f102 0210 	add.w	r2, r2, #16
  401030:	d8f2      	bhi.n	401018 <memset+0x38>
  401032:	f1a4 0210 	sub.w	r2, r4, #16
  401036:	f022 020f 	bic.w	r2, r2, #15
  40103a:	f004 040f 	and.w	r4, r4, #15
  40103e:	3210      	adds	r2, #16
  401040:	2c03      	cmp	r4, #3
  401042:	4413      	add	r3, r2
  401044:	d90d      	bls.n	401062 <memset+0x82>
  401046:	461e      	mov	r6, r3
  401048:	4622      	mov	r2, r4
  40104a:	3a04      	subs	r2, #4
  40104c:	2a03      	cmp	r2, #3
  40104e:	f846 5b04 	str.w	r5, [r6], #4
  401052:	d8fa      	bhi.n	40104a <memset+0x6a>
  401054:	1f22      	subs	r2, r4, #4
  401056:	f022 0203 	bic.w	r2, r2, #3
  40105a:	3204      	adds	r2, #4
  40105c:	4413      	add	r3, r2
  40105e:	f004 0403 	and.w	r4, r4, #3
  401062:	b12c      	cbz	r4, 401070 <memset+0x90>
  401064:	b2c9      	uxtb	r1, r1
  401066:	441c      	add	r4, r3
  401068:	f803 1b01 	strb.w	r1, [r3], #1
  40106c:	429c      	cmp	r4, r3
  40106e:	d1fb      	bne.n	401068 <memset+0x88>
  401070:	bc70      	pop	{r4, r5, r6}
  401072:	4770      	bx	lr
  401074:	4614      	mov	r4, r2
  401076:	4603      	mov	r3, r0
  401078:	e7c2      	b.n	401000 <memset+0x20>
  40107a:	bf00      	nop

0040107c <setbuf>:
  40107c:	2900      	cmp	r1, #0
  40107e:	bf0c      	ite	eq
  401080:	2202      	moveq	r2, #2
  401082:	2200      	movne	r2, #0
  401084:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401088:	f000 b800 	b.w	40108c <setvbuf>

0040108c <setvbuf>:
  40108c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401090:	4c61      	ldr	r4, [pc, #388]	; (401218 <setvbuf+0x18c>)
  401092:	6825      	ldr	r5, [r4, #0]
  401094:	b083      	sub	sp, #12
  401096:	4604      	mov	r4, r0
  401098:	460f      	mov	r7, r1
  40109a:	4690      	mov	r8, r2
  40109c:	461e      	mov	r6, r3
  40109e:	b115      	cbz	r5, 4010a6 <setvbuf+0x1a>
  4010a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010a2:	2b00      	cmp	r3, #0
  4010a4:	d064      	beq.n	401170 <setvbuf+0xe4>
  4010a6:	f1b8 0f02 	cmp.w	r8, #2
  4010aa:	d006      	beq.n	4010ba <setvbuf+0x2e>
  4010ac:	f1b8 0f01 	cmp.w	r8, #1
  4010b0:	f200 809f 	bhi.w	4011f2 <setvbuf+0x166>
  4010b4:	2e00      	cmp	r6, #0
  4010b6:	f2c0 809c 	blt.w	4011f2 <setvbuf+0x166>
  4010ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4010bc:	07d8      	lsls	r0, r3, #31
  4010be:	d534      	bpl.n	40112a <setvbuf+0x9e>
  4010c0:	4621      	mov	r1, r4
  4010c2:	4628      	mov	r0, r5
  4010c4:	f001 f888 	bl	4021d8 <_fflush_r>
  4010c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4010ca:	b141      	cbz	r1, 4010de <setvbuf+0x52>
  4010cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4010d0:	4299      	cmp	r1, r3
  4010d2:	d002      	beq.n	4010da <setvbuf+0x4e>
  4010d4:	4628      	mov	r0, r5
  4010d6:	f001 f9fd 	bl	4024d4 <_free_r>
  4010da:	2300      	movs	r3, #0
  4010dc:	6323      	str	r3, [r4, #48]	; 0x30
  4010de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010e2:	2200      	movs	r2, #0
  4010e4:	61a2      	str	r2, [r4, #24]
  4010e6:	6062      	str	r2, [r4, #4]
  4010e8:	061a      	lsls	r2, r3, #24
  4010ea:	d43a      	bmi.n	401162 <setvbuf+0xd6>
  4010ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4010f0:	f023 0303 	bic.w	r3, r3, #3
  4010f4:	f1b8 0f02 	cmp.w	r8, #2
  4010f8:	81a3      	strh	r3, [r4, #12]
  4010fa:	d01d      	beq.n	401138 <setvbuf+0xac>
  4010fc:	ab01      	add	r3, sp, #4
  4010fe:	466a      	mov	r2, sp
  401100:	4621      	mov	r1, r4
  401102:	4628      	mov	r0, r5
  401104:	f001 fc84 	bl	402a10 <__swhatbuf_r>
  401108:	89a3      	ldrh	r3, [r4, #12]
  40110a:	4318      	orrs	r0, r3
  40110c:	81a0      	strh	r0, [r4, #12]
  40110e:	2e00      	cmp	r6, #0
  401110:	d132      	bne.n	401178 <setvbuf+0xec>
  401112:	9e00      	ldr	r6, [sp, #0]
  401114:	4630      	mov	r0, r6
  401116:	f001 fcf3 	bl	402b00 <malloc>
  40111a:	4607      	mov	r7, r0
  40111c:	2800      	cmp	r0, #0
  40111e:	d06b      	beq.n	4011f8 <setvbuf+0x16c>
  401120:	89a3      	ldrh	r3, [r4, #12]
  401122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401126:	81a3      	strh	r3, [r4, #12]
  401128:	e028      	b.n	40117c <setvbuf+0xf0>
  40112a:	89a3      	ldrh	r3, [r4, #12]
  40112c:	0599      	lsls	r1, r3, #22
  40112e:	d4c7      	bmi.n	4010c0 <setvbuf+0x34>
  401130:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401132:	f001 fc69 	bl	402a08 <__retarget_lock_acquire_recursive>
  401136:	e7c3      	b.n	4010c0 <setvbuf+0x34>
  401138:	2500      	movs	r5, #0
  40113a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40113c:	2600      	movs	r6, #0
  40113e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401142:	f043 0302 	orr.w	r3, r3, #2
  401146:	2001      	movs	r0, #1
  401148:	60a6      	str	r6, [r4, #8]
  40114a:	07ce      	lsls	r6, r1, #31
  40114c:	81a3      	strh	r3, [r4, #12]
  40114e:	6022      	str	r2, [r4, #0]
  401150:	6122      	str	r2, [r4, #16]
  401152:	6160      	str	r0, [r4, #20]
  401154:	d401      	bmi.n	40115a <setvbuf+0xce>
  401156:	0598      	lsls	r0, r3, #22
  401158:	d53e      	bpl.n	4011d8 <setvbuf+0x14c>
  40115a:	4628      	mov	r0, r5
  40115c:	b003      	add	sp, #12
  40115e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401162:	6921      	ldr	r1, [r4, #16]
  401164:	4628      	mov	r0, r5
  401166:	f001 f9b5 	bl	4024d4 <_free_r>
  40116a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40116e:	e7bd      	b.n	4010ec <setvbuf+0x60>
  401170:	4628      	mov	r0, r5
  401172:	f001 f889 	bl	402288 <__sinit>
  401176:	e796      	b.n	4010a6 <setvbuf+0x1a>
  401178:	2f00      	cmp	r7, #0
  40117a:	d0cb      	beq.n	401114 <setvbuf+0x88>
  40117c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40117e:	2b00      	cmp	r3, #0
  401180:	d033      	beq.n	4011ea <setvbuf+0x15e>
  401182:	9b00      	ldr	r3, [sp, #0]
  401184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401188:	6027      	str	r7, [r4, #0]
  40118a:	429e      	cmp	r6, r3
  40118c:	bf1c      	itt	ne
  40118e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401192:	81a2      	strhne	r2, [r4, #12]
  401194:	f1b8 0f01 	cmp.w	r8, #1
  401198:	bf04      	itt	eq
  40119a:	f042 0201 	orreq.w	r2, r2, #1
  40119e:	81a2      	strheq	r2, [r4, #12]
  4011a0:	b292      	uxth	r2, r2
  4011a2:	f012 0308 	ands.w	r3, r2, #8
  4011a6:	6127      	str	r7, [r4, #16]
  4011a8:	6166      	str	r6, [r4, #20]
  4011aa:	d00e      	beq.n	4011ca <setvbuf+0x13e>
  4011ac:	07d1      	lsls	r1, r2, #31
  4011ae:	d51a      	bpl.n	4011e6 <setvbuf+0x15a>
  4011b0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4011b2:	4276      	negs	r6, r6
  4011b4:	2300      	movs	r3, #0
  4011b6:	f015 0501 	ands.w	r5, r5, #1
  4011ba:	61a6      	str	r6, [r4, #24]
  4011bc:	60a3      	str	r3, [r4, #8]
  4011be:	d009      	beq.n	4011d4 <setvbuf+0x148>
  4011c0:	2500      	movs	r5, #0
  4011c2:	4628      	mov	r0, r5
  4011c4:	b003      	add	sp, #12
  4011c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011ca:	60a3      	str	r3, [r4, #8]
  4011cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4011ce:	f015 0501 	ands.w	r5, r5, #1
  4011d2:	d1f5      	bne.n	4011c0 <setvbuf+0x134>
  4011d4:	0593      	lsls	r3, r2, #22
  4011d6:	d4c0      	bmi.n	40115a <setvbuf+0xce>
  4011d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4011da:	f001 fc17 	bl	402a0c <__retarget_lock_release_recursive>
  4011de:	4628      	mov	r0, r5
  4011e0:	b003      	add	sp, #12
  4011e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011e6:	60a6      	str	r6, [r4, #8]
  4011e8:	e7f0      	b.n	4011cc <setvbuf+0x140>
  4011ea:	4628      	mov	r0, r5
  4011ec:	f001 f84c 	bl	402288 <__sinit>
  4011f0:	e7c7      	b.n	401182 <setvbuf+0xf6>
  4011f2:	f04f 35ff 	mov.w	r5, #4294967295
  4011f6:	e7b0      	b.n	40115a <setvbuf+0xce>
  4011f8:	f8dd 9000 	ldr.w	r9, [sp]
  4011fc:	45b1      	cmp	r9, r6
  4011fe:	d004      	beq.n	40120a <setvbuf+0x17e>
  401200:	4648      	mov	r0, r9
  401202:	f001 fc7d 	bl	402b00 <malloc>
  401206:	4607      	mov	r7, r0
  401208:	b920      	cbnz	r0, 401214 <setvbuf+0x188>
  40120a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40120e:	f04f 35ff 	mov.w	r5, #4294967295
  401212:	e792      	b.n	40113a <setvbuf+0xae>
  401214:	464e      	mov	r6, r9
  401216:	e783      	b.n	401120 <setvbuf+0x94>
  401218:	204000d0 	.word	0x204000d0

0040121c <__sprint_r.part.0>:
  40121c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401220:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401222:	049c      	lsls	r4, r3, #18
  401224:	4693      	mov	fp, r2
  401226:	d52f      	bpl.n	401288 <__sprint_r.part.0+0x6c>
  401228:	6893      	ldr	r3, [r2, #8]
  40122a:	6812      	ldr	r2, [r2, #0]
  40122c:	b353      	cbz	r3, 401284 <__sprint_r.part.0+0x68>
  40122e:	460e      	mov	r6, r1
  401230:	4607      	mov	r7, r0
  401232:	f102 0908 	add.w	r9, r2, #8
  401236:	e919 0420 	ldmdb	r9, {r5, sl}
  40123a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40123e:	d017      	beq.n	401270 <__sprint_r.part.0+0x54>
  401240:	3d04      	subs	r5, #4
  401242:	2400      	movs	r4, #0
  401244:	e001      	b.n	40124a <__sprint_r.part.0+0x2e>
  401246:	45a0      	cmp	r8, r4
  401248:	d010      	beq.n	40126c <__sprint_r.part.0+0x50>
  40124a:	4632      	mov	r2, r6
  40124c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401250:	4638      	mov	r0, r7
  401252:	f001 f8bb 	bl	4023cc <_fputwc_r>
  401256:	1c43      	adds	r3, r0, #1
  401258:	f104 0401 	add.w	r4, r4, #1
  40125c:	d1f3      	bne.n	401246 <__sprint_r.part.0+0x2a>
  40125e:	2300      	movs	r3, #0
  401260:	f8cb 3008 	str.w	r3, [fp, #8]
  401264:	f8cb 3004 	str.w	r3, [fp, #4]
  401268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40126c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401270:	f02a 0a03 	bic.w	sl, sl, #3
  401274:	eba3 030a 	sub.w	r3, r3, sl
  401278:	f8cb 3008 	str.w	r3, [fp, #8]
  40127c:	f109 0908 	add.w	r9, r9, #8
  401280:	2b00      	cmp	r3, #0
  401282:	d1d8      	bne.n	401236 <__sprint_r.part.0+0x1a>
  401284:	2000      	movs	r0, #0
  401286:	e7ea      	b.n	40125e <__sprint_r.part.0+0x42>
  401288:	f001 fa0a 	bl	4026a0 <__sfvwrite_r>
  40128c:	2300      	movs	r3, #0
  40128e:	f8cb 3008 	str.w	r3, [fp, #8]
  401292:	f8cb 3004 	str.w	r3, [fp, #4]
  401296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40129a:	bf00      	nop

0040129c <_vfiprintf_r>:
  40129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012a0:	b0ad      	sub	sp, #180	; 0xb4
  4012a2:	461d      	mov	r5, r3
  4012a4:	468b      	mov	fp, r1
  4012a6:	4690      	mov	r8, r2
  4012a8:	9307      	str	r3, [sp, #28]
  4012aa:	9006      	str	r0, [sp, #24]
  4012ac:	b118      	cbz	r0, 4012b6 <_vfiprintf_r+0x1a>
  4012ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4012b0:	2b00      	cmp	r3, #0
  4012b2:	f000 80f3 	beq.w	40149c <_vfiprintf_r+0x200>
  4012b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4012ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4012be:	07df      	lsls	r7, r3, #31
  4012c0:	b281      	uxth	r1, r0
  4012c2:	d402      	bmi.n	4012ca <_vfiprintf_r+0x2e>
  4012c4:	058e      	lsls	r6, r1, #22
  4012c6:	f140 80fc 	bpl.w	4014c2 <_vfiprintf_r+0x226>
  4012ca:	048c      	lsls	r4, r1, #18
  4012cc:	d40a      	bmi.n	4012e4 <_vfiprintf_r+0x48>
  4012ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4012d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4012d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4012da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4012de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4012e2:	b289      	uxth	r1, r1
  4012e4:	0708      	lsls	r0, r1, #28
  4012e6:	f140 80b3 	bpl.w	401450 <_vfiprintf_r+0x1b4>
  4012ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4012ee:	2b00      	cmp	r3, #0
  4012f0:	f000 80ae 	beq.w	401450 <_vfiprintf_r+0x1b4>
  4012f4:	f001 031a 	and.w	r3, r1, #26
  4012f8:	2b0a      	cmp	r3, #10
  4012fa:	f000 80b5 	beq.w	401468 <_vfiprintf_r+0x1cc>
  4012fe:	2300      	movs	r3, #0
  401300:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401304:	930b      	str	r3, [sp, #44]	; 0x2c
  401306:	9311      	str	r3, [sp, #68]	; 0x44
  401308:	9310      	str	r3, [sp, #64]	; 0x40
  40130a:	9303      	str	r3, [sp, #12]
  40130c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401310:	46ca      	mov	sl, r9
  401312:	f8cd b010 	str.w	fp, [sp, #16]
  401316:	f898 3000 	ldrb.w	r3, [r8]
  40131a:	4644      	mov	r4, r8
  40131c:	b1fb      	cbz	r3, 40135e <_vfiprintf_r+0xc2>
  40131e:	2b25      	cmp	r3, #37	; 0x25
  401320:	d102      	bne.n	401328 <_vfiprintf_r+0x8c>
  401322:	e01c      	b.n	40135e <_vfiprintf_r+0xc2>
  401324:	2b25      	cmp	r3, #37	; 0x25
  401326:	d003      	beq.n	401330 <_vfiprintf_r+0x94>
  401328:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40132c:	2b00      	cmp	r3, #0
  40132e:	d1f9      	bne.n	401324 <_vfiprintf_r+0x88>
  401330:	eba4 0508 	sub.w	r5, r4, r8
  401334:	b19d      	cbz	r5, 40135e <_vfiprintf_r+0xc2>
  401336:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401338:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40133a:	f8ca 8000 	str.w	r8, [sl]
  40133e:	3301      	adds	r3, #1
  401340:	442a      	add	r2, r5
  401342:	2b07      	cmp	r3, #7
  401344:	f8ca 5004 	str.w	r5, [sl, #4]
  401348:	9211      	str	r2, [sp, #68]	; 0x44
  40134a:	9310      	str	r3, [sp, #64]	; 0x40
  40134c:	dd7a      	ble.n	401444 <_vfiprintf_r+0x1a8>
  40134e:	2a00      	cmp	r2, #0
  401350:	f040 84b0 	bne.w	401cb4 <_vfiprintf_r+0xa18>
  401354:	9b03      	ldr	r3, [sp, #12]
  401356:	9210      	str	r2, [sp, #64]	; 0x40
  401358:	442b      	add	r3, r5
  40135a:	46ca      	mov	sl, r9
  40135c:	9303      	str	r3, [sp, #12]
  40135e:	7823      	ldrb	r3, [r4, #0]
  401360:	2b00      	cmp	r3, #0
  401362:	f000 83e0 	beq.w	401b26 <_vfiprintf_r+0x88a>
  401366:	2000      	movs	r0, #0
  401368:	f04f 0300 	mov.w	r3, #0
  40136c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401370:	f104 0801 	add.w	r8, r4, #1
  401374:	7862      	ldrb	r2, [r4, #1]
  401376:	4605      	mov	r5, r0
  401378:	4606      	mov	r6, r0
  40137a:	4603      	mov	r3, r0
  40137c:	f04f 34ff 	mov.w	r4, #4294967295
  401380:	f108 0801 	add.w	r8, r8, #1
  401384:	f1a2 0120 	sub.w	r1, r2, #32
  401388:	2958      	cmp	r1, #88	; 0x58
  40138a:	f200 82de 	bhi.w	40194a <_vfiprintf_r+0x6ae>
  40138e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401392:	0221      	.short	0x0221
  401394:	02dc02dc 	.word	0x02dc02dc
  401398:	02dc0229 	.word	0x02dc0229
  40139c:	02dc02dc 	.word	0x02dc02dc
  4013a0:	02dc02dc 	.word	0x02dc02dc
  4013a4:	028902dc 	.word	0x028902dc
  4013a8:	02dc0295 	.word	0x02dc0295
  4013ac:	02bd00a2 	.word	0x02bd00a2
  4013b0:	019f02dc 	.word	0x019f02dc
  4013b4:	01a401a4 	.word	0x01a401a4
  4013b8:	01a401a4 	.word	0x01a401a4
  4013bc:	01a401a4 	.word	0x01a401a4
  4013c0:	01a401a4 	.word	0x01a401a4
  4013c4:	02dc01a4 	.word	0x02dc01a4
  4013c8:	02dc02dc 	.word	0x02dc02dc
  4013cc:	02dc02dc 	.word	0x02dc02dc
  4013d0:	02dc02dc 	.word	0x02dc02dc
  4013d4:	02dc02dc 	.word	0x02dc02dc
  4013d8:	01b202dc 	.word	0x01b202dc
  4013dc:	02dc02dc 	.word	0x02dc02dc
  4013e0:	02dc02dc 	.word	0x02dc02dc
  4013e4:	02dc02dc 	.word	0x02dc02dc
  4013e8:	02dc02dc 	.word	0x02dc02dc
  4013ec:	02dc02dc 	.word	0x02dc02dc
  4013f0:	02dc0197 	.word	0x02dc0197
  4013f4:	02dc02dc 	.word	0x02dc02dc
  4013f8:	02dc02dc 	.word	0x02dc02dc
  4013fc:	02dc019b 	.word	0x02dc019b
  401400:	025302dc 	.word	0x025302dc
  401404:	02dc02dc 	.word	0x02dc02dc
  401408:	02dc02dc 	.word	0x02dc02dc
  40140c:	02dc02dc 	.word	0x02dc02dc
  401410:	02dc02dc 	.word	0x02dc02dc
  401414:	02dc02dc 	.word	0x02dc02dc
  401418:	021b025a 	.word	0x021b025a
  40141c:	02dc02dc 	.word	0x02dc02dc
  401420:	026e02dc 	.word	0x026e02dc
  401424:	02dc021b 	.word	0x02dc021b
  401428:	027302dc 	.word	0x027302dc
  40142c:	01f502dc 	.word	0x01f502dc
  401430:	02090182 	.word	0x02090182
  401434:	02dc02d7 	.word	0x02dc02d7
  401438:	02dc029a 	.word	0x02dc029a
  40143c:	02dc00a7 	.word	0x02dc00a7
  401440:	022e02dc 	.word	0x022e02dc
  401444:	f10a 0a08 	add.w	sl, sl, #8
  401448:	9b03      	ldr	r3, [sp, #12]
  40144a:	442b      	add	r3, r5
  40144c:	9303      	str	r3, [sp, #12]
  40144e:	e786      	b.n	40135e <_vfiprintf_r+0xc2>
  401450:	4659      	mov	r1, fp
  401452:	9806      	ldr	r0, [sp, #24]
  401454:	f000 fdac 	bl	401fb0 <__swsetup_r>
  401458:	bb18      	cbnz	r0, 4014a2 <_vfiprintf_r+0x206>
  40145a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40145e:	f001 031a 	and.w	r3, r1, #26
  401462:	2b0a      	cmp	r3, #10
  401464:	f47f af4b 	bne.w	4012fe <_vfiprintf_r+0x62>
  401468:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40146c:	2b00      	cmp	r3, #0
  40146e:	f6ff af46 	blt.w	4012fe <_vfiprintf_r+0x62>
  401472:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401476:	07db      	lsls	r3, r3, #31
  401478:	d405      	bmi.n	401486 <_vfiprintf_r+0x1ea>
  40147a:	058f      	lsls	r7, r1, #22
  40147c:	d403      	bmi.n	401486 <_vfiprintf_r+0x1ea>
  40147e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401482:	f001 fac3 	bl	402a0c <__retarget_lock_release_recursive>
  401486:	462b      	mov	r3, r5
  401488:	4642      	mov	r2, r8
  40148a:	4659      	mov	r1, fp
  40148c:	9806      	ldr	r0, [sp, #24]
  40148e:	f000 fd4d 	bl	401f2c <__sbprintf>
  401492:	9003      	str	r0, [sp, #12]
  401494:	9803      	ldr	r0, [sp, #12]
  401496:	b02d      	add	sp, #180	; 0xb4
  401498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40149c:	f000 fef4 	bl	402288 <__sinit>
  4014a0:	e709      	b.n	4012b6 <_vfiprintf_r+0x1a>
  4014a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4014a6:	07d9      	lsls	r1, r3, #31
  4014a8:	d404      	bmi.n	4014b4 <_vfiprintf_r+0x218>
  4014aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4014ae:	059a      	lsls	r2, r3, #22
  4014b0:	f140 84aa 	bpl.w	401e08 <_vfiprintf_r+0xb6c>
  4014b4:	f04f 33ff 	mov.w	r3, #4294967295
  4014b8:	9303      	str	r3, [sp, #12]
  4014ba:	9803      	ldr	r0, [sp, #12]
  4014bc:	b02d      	add	sp, #180	; 0xb4
  4014be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4014c6:	f001 fa9f 	bl	402a08 <__retarget_lock_acquire_recursive>
  4014ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4014ce:	b281      	uxth	r1, r0
  4014d0:	e6fb      	b.n	4012ca <_vfiprintf_r+0x2e>
  4014d2:	4276      	negs	r6, r6
  4014d4:	9207      	str	r2, [sp, #28]
  4014d6:	f043 0304 	orr.w	r3, r3, #4
  4014da:	f898 2000 	ldrb.w	r2, [r8]
  4014de:	e74f      	b.n	401380 <_vfiprintf_r+0xe4>
  4014e0:	9608      	str	r6, [sp, #32]
  4014e2:	069e      	lsls	r6, r3, #26
  4014e4:	f100 8450 	bmi.w	401d88 <_vfiprintf_r+0xaec>
  4014e8:	9907      	ldr	r1, [sp, #28]
  4014ea:	06dd      	lsls	r5, r3, #27
  4014ec:	460a      	mov	r2, r1
  4014ee:	f100 83ef 	bmi.w	401cd0 <_vfiprintf_r+0xa34>
  4014f2:	0658      	lsls	r0, r3, #25
  4014f4:	f140 83ec 	bpl.w	401cd0 <_vfiprintf_r+0xa34>
  4014f8:	880e      	ldrh	r6, [r1, #0]
  4014fa:	3104      	adds	r1, #4
  4014fc:	2700      	movs	r7, #0
  4014fe:	2201      	movs	r2, #1
  401500:	9107      	str	r1, [sp, #28]
  401502:	f04f 0100 	mov.w	r1, #0
  401506:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40150a:	2500      	movs	r5, #0
  40150c:	1c61      	adds	r1, r4, #1
  40150e:	f000 8116 	beq.w	40173e <_vfiprintf_r+0x4a2>
  401512:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401516:	9102      	str	r1, [sp, #8]
  401518:	ea56 0107 	orrs.w	r1, r6, r7
  40151c:	f040 8114 	bne.w	401748 <_vfiprintf_r+0x4ac>
  401520:	2c00      	cmp	r4, #0
  401522:	f040 835c 	bne.w	401bde <_vfiprintf_r+0x942>
  401526:	2a00      	cmp	r2, #0
  401528:	f040 83b7 	bne.w	401c9a <_vfiprintf_r+0x9fe>
  40152c:	f013 0301 	ands.w	r3, r3, #1
  401530:	9305      	str	r3, [sp, #20]
  401532:	f000 8457 	beq.w	401de4 <_vfiprintf_r+0xb48>
  401536:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40153a:	2330      	movs	r3, #48	; 0x30
  40153c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401540:	9b05      	ldr	r3, [sp, #20]
  401542:	42a3      	cmp	r3, r4
  401544:	bfb8      	it	lt
  401546:	4623      	movlt	r3, r4
  401548:	9301      	str	r3, [sp, #4]
  40154a:	b10d      	cbz	r5, 401550 <_vfiprintf_r+0x2b4>
  40154c:	3301      	adds	r3, #1
  40154e:	9301      	str	r3, [sp, #4]
  401550:	9b02      	ldr	r3, [sp, #8]
  401552:	f013 0302 	ands.w	r3, r3, #2
  401556:	9309      	str	r3, [sp, #36]	; 0x24
  401558:	d002      	beq.n	401560 <_vfiprintf_r+0x2c4>
  40155a:	9b01      	ldr	r3, [sp, #4]
  40155c:	3302      	adds	r3, #2
  40155e:	9301      	str	r3, [sp, #4]
  401560:	9b02      	ldr	r3, [sp, #8]
  401562:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401566:	930a      	str	r3, [sp, #40]	; 0x28
  401568:	f040 8217 	bne.w	40199a <_vfiprintf_r+0x6fe>
  40156c:	9b08      	ldr	r3, [sp, #32]
  40156e:	9a01      	ldr	r2, [sp, #4]
  401570:	1a9d      	subs	r5, r3, r2
  401572:	2d00      	cmp	r5, #0
  401574:	f340 8211 	ble.w	40199a <_vfiprintf_r+0x6fe>
  401578:	2d10      	cmp	r5, #16
  40157a:	f340 8490 	ble.w	401e9e <_vfiprintf_r+0xc02>
  40157e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401580:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401582:	4ec4      	ldr	r6, [pc, #784]	; (401894 <_vfiprintf_r+0x5f8>)
  401584:	46d6      	mov	lr, sl
  401586:	2710      	movs	r7, #16
  401588:	46a2      	mov	sl, r4
  40158a:	4619      	mov	r1, r3
  40158c:	9c06      	ldr	r4, [sp, #24]
  40158e:	e007      	b.n	4015a0 <_vfiprintf_r+0x304>
  401590:	f101 0c02 	add.w	ip, r1, #2
  401594:	f10e 0e08 	add.w	lr, lr, #8
  401598:	4601      	mov	r1, r0
  40159a:	3d10      	subs	r5, #16
  40159c:	2d10      	cmp	r5, #16
  40159e:	dd11      	ble.n	4015c4 <_vfiprintf_r+0x328>
  4015a0:	1c48      	adds	r0, r1, #1
  4015a2:	3210      	adds	r2, #16
  4015a4:	2807      	cmp	r0, #7
  4015a6:	9211      	str	r2, [sp, #68]	; 0x44
  4015a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4015ac:	9010      	str	r0, [sp, #64]	; 0x40
  4015ae:	ddef      	ble.n	401590 <_vfiprintf_r+0x2f4>
  4015b0:	2a00      	cmp	r2, #0
  4015b2:	f040 81e4 	bne.w	40197e <_vfiprintf_r+0x6e2>
  4015b6:	3d10      	subs	r5, #16
  4015b8:	2d10      	cmp	r5, #16
  4015ba:	4611      	mov	r1, r2
  4015bc:	f04f 0c01 	mov.w	ip, #1
  4015c0:	46ce      	mov	lr, r9
  4015c2:	dced      	bgt.n	4015a0 <_vfiprintf_r+0x304>
  4015c4:	4654      	mov	r4, sl
  4015c6:	4661      	mov	r1, ip
  4015c8:	46f2      	mov	sl, lr
  4015ca:	442a      	add	r2, r5
  4015cc:	2907      	cmp	r1, #7
  4015ce:	9211      	str	r2, [sp, #68]	; 0x44
  4015d0:	f8ca 6000 	str.w	r6, [sl]
  4015d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4015d8:	9110      	str	r1, [sp, #64]	; 0x40
  4015da:	f300 82ec 	bgt.w	401bb6 <_vfiprintf_r+0x91a>
  4015de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4015e2:	f10a 0a08 	add.w	sl, sl, #8
  4015e6:	1c48      	adds	r0, r1, #1
  4015e8:	2d00      	cmp	r5, #0
  4015ea:	f040 81de 	bne.w	4019aa <_vfiprintf_r+0x70e>
  4015ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015f0:	2b00      	cmp	r3, #0
  4015f2:	f000 81f8 	beq.w	4019e6 <_vfiprintf_r+0x74a>
  4015f6:	3202      	adds	r2, #2
  4015f8:	a90e      	add	r1, sp, #56	; 0x38
  4015fa:	2302      	movs	r3, #2
  4015fc:	2807      	cmp	r0, #7
  4015fe:	9211      	str	r2, [sp, #68]	; 0x44
  401600:	9010      	str	r0, [sp, #64]	; 0x40
  401602:	e88a 000a 	stmia.w	sl, {r1, r3}
  401606:	f340 81ea 	ble.w	4019de <_vfiprintf_r+0x742>
  40160a:	2a00      	cmp	r2, #0
  40160c:	f040 838c 	bne.w	401d28 <_vfiprintf_r+0xa8c>
  401610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401612:	2b80      	cmp	r3, #128	; 0x80
  401614:	f04f 0001 	mov.w	r0, #1
  401618:	4611      	mov	r1, r2
  40161a:	46ca      	mov	sl, r9
  40161c:	f040 81e7 	bne.w	4019ee <_vfiprintf_r+0x752>
  401620:	9b08      	ldr	r3, [sp, #32]
  401622:	9d01      	ldr	r5, [sp, #4]
  401624:	1b5e      	subs	r6, r3, r5
  401626:	2e00      	cmp	r6, #0
  401628:	f340 81e1 	ble.w	4019ee <_vfiprintf_r+0x752>
  40162c:	2e10      	cmp	r6, #16
  40162e:	4d9a      	ldr	r5, [pc, #616]	; (401898 <_vfiprintf_r+0x5fc>)
  401630:	f340 8450 	ble.w	401ed4 <_vfiprintf_r+0xc38>
  401634:	46d4      	mov	ip, sl
  401636:	2710      	movs	r7, #16
  401638:	46a2      	mov	sl, r4
  40163a:	9c06      	ldr	r4, [sp, #24]
  40163c:	e007      	b.n	40164e <_vfiprintf_r+0x3b2>
  40163e:	f101 0e02 	add.w	lr, r1, #2
  401642:	f10c 0c08 	add.w	ip, ip, #8
  401646:	4601      	mov	r1, r0
  401648:	3e10      	subs	r6, #16
  40164a:	2e10      	cmp	r6, #16
  40164c:	dd11      	ble.n	401672 <_vfiprintf_r+0x3d6>
  40164e:	1c48      	adds	r0, r1, #1
  401650:	3210      	adds	r2, #16
  401652:	2807      	cmp	r0, #7
  401654:	9211      	str	r2, [sp, #68]	; 0x44
  401656:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40165a:	9010      	str	r0, [sp, #64]	; 0x40
  40165c:	ddef      	ble.n	40163e <_vfiprintf_r+0x3a2>
  40165e:	2a00      	cmp	r2, #0
  401660:	f040 829d 	bne.w	401b9e <_vfiprintf_r+0x902>
  401664:	3e10      	subs	r6, #16
  401666:	2e10      	cmp	r6, #16
  401668:	f04f 0e01 	mov.w	lr, #1
  40166c:	4611      	mov	r1, r2
  40166e:	46cc      	mov	ip, r9
  401670:	dced      	bgt.n	40164e <_vfiprintf_r+0x3b2>
  401672:	4654      	mov	r4, sl
  401674:	46e2      	mov	sl, ip
  401676:	4432      	add	r2, r6
  401678:	f1be 0f07 	cmp.w	lr, #7
  40167c:	9211      	str	r2, [sp, #68]	; 0x44
  40167e:	e88a 0060 	stmia.w	sl, {r5, r6}
  401682:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401686:	f300 8369 	bgt.w	401d5c <_vfiprintf_r+0xac0>
  40168a:	f10a 0a08 	add.w	sl, sl, #8
  40168e:	f10e 0001 	add.w	r0, lr, #1
  401692:	4671      	mov	r1, lr
  401694:	e1ab      	b.n	4019ee <_vfiprintf_r+0x752>
  401696:	9608      	str	r6, [sp, #32]
  401698:	f013 0220 	ands.w	r2, r3, #32
  40169c:	f040 838c 	bne.w	401db8 <_vfiprintf_r+0xb1c>
  4016a0:	f013 0110 	ands.w	r1, r3, #16
  4016a4:	f040 831a 	bne.w	401cdc <_vfiprintf_r+0xa40>
  4016a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4016ac:	f000 8316 	beq.w	401cdc <_vfiprintf_r+0xa40>
  4016b0:	9807      	ldr	r0, [sp, #28]
  4016b2:	460a      	mov	r2, r1
  4016b4:	4601      	mov	r1, r0
  4016b6:	3104      	adds	r1, #4
  4016b8:	8806      	ldrh	r6, [r0, #0]
  4016ba:	9107      	str	r1, [sp, #28]
  4016bc:	2700      	movs	r7, #0
  4016be:	e720      	b.n	401502 <_vfiprintf_r+0x266>
  4016c0:	9608      	str	r6, [sp, #32]
  4016c2:	f043 0310 	orr.w	r3, r3, #16
  4016c6:	e7e7      	b.n	401698 <_vfiprintf_r+0x3fc>
  4016c8:	9608      	str	r6, [sp, #32]
  4016ca:	f043 0310 	orr.w	r3, r3, #16
  4016ce:	e708      	b.n	4014e2 <_vfiprintf_r+0x246>
  4016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4016d4:	f898 2000 	ldrb.w	r2, [r8]
  4016d8:	e652      	b.n	401380 <_vfiprintf_r+0xe4>
  4016da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4016de:	2600      	movs	r6, #0
  4016e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4016e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4016e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4016ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4016f0:	2909      	cmp	r1, #9
  4016f2:	d9f5      	bls.n	4016e0 <_vfiprintf_r+0x444>
  4016f4:	e646      	b.n	401384 <_vfiprintf_r+0xe8>
  4016f6:	9608      	str	r6, [sp, #32]
  4016f8:	2800      	cmp	r0, #0
  4016fa:	f040 8408 	bne.w	401f0e <_vfiprintf_r+0xc72>
  4016fe:	f043 0310 	orr.w	r3, r3, #16
  401702:	069e      	lsls	r6, r3, #26
  401704:	f100 834c 	bmi.w	401da0 <_vfiprintf_r+0xb04>
  401708:	06dd      	lsls	r5, r3, #27
  40170a:	f100 82f3 	bmi.w	401cf4 <_vfiprintf_r+0xa58>
  40170e:	0658      	lsls	r0, r3, #25
  401710:	f140 82f0 	bpl.w	401cf4 <_vfiprintf_r+0xa58>
  401714:	9d07      	ldr	r5, [sp, #28]
  401716:	f9b5 6000 	ldrsh.w	r6, [r5]
  40171a:	462a      	mov	r2, r5
  40171c:	17f7      	asrs	r7, r6, #31
  40171e:	3204      	adds	r2, #4
  401720:	4630      	mov	r0, r6
  401722:	4639      	mov	r1, r7
  401724:	9207      	str	r2, [sp, #28]
  401726:	2800      	cmp	r0, #0
  401728:	f171 0200 	sbcs.w	r2, r1, #0
  40172c:	f2c0 835d 	blt.w	401dea <_vfiprintf_r+0xb4e>
  401730:	1c61      	adds	r1, r4, #1
  401732:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401736:	f04f 0201 	mov.w	r2, #1
  40173a:	f47f aeea 	bne.w	401512 <_vfiprintf_r+0x276>
  40173e:	ea56 0107 	orrs.w	r1, r6, r7
  401742:	f000 824d 	beq.w	401be0 <_vfiprintf_r+0x944>
  401746:	9302      	str	r3, [sp, #8]
  401748:	2a01      	cmp	r2, #1
  40174a:	f000 828c 	beq.w	401c66 <_vfiprintf_r+0x9ca>
  40174e:	2a02      	cmp	r2, #2
  401750:	f040 825c 	bne.w	401c0c <_vfiprintf_r+0x970>
  401754:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401756:	46cb      	mov	fp, r9
  401758:	0933      	lsrs	r3, r6, #4
  40175a:	f006 010f 	and.w	r1, r6, #15
  40175e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401762:	093a      	lsrs	r2, r7, #4
  401764:	461e      	mov	r6, r3
  401766:	4617      	mov	r7, r2
  401768:	5c43      	ldrb	r3, [r0, r1]
  40176a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40176e:	ea56 0307 	orrs.w	r3, r6, r7
  401772:	d1f1      	bne.n	401758 <_vfiprintf_r+0x4bc>
  401774:	eba9 030b 	sub.w	r3, r9, fp
  401778:	9305      	str	r3, [sp, #20]
  40177a:	e6e1      	b.n	401540 <_vfiprintf_r+0x2a4>
  40177c:	2800      	cmp	r0, #0
  40177e:	f040 83c0 	bne.w	401f02 <_vfiprintf_r+0xc66>
  401782:	0699      	lsls	r1, r3, #26
  401784:	f100 8367 	bmi.w	401e56 <_vfiprintf_r+0xbba>
  401788:	06da      	lsls	r2, r3, #27
  40178a:	f100 80f1 	bmi.w	401970 <_vfiprintf_r+0x6d4>
  40178e:	065b      	lsls	r3, r3, #25
  401790:	f140 80ee 	bpl.w	401970 <_vfiprintf_r+0x6d4>
  401794:	9a07      	ldr	r2, [sp, #28]
  401796:	6813      	ldr	r3, [r2, #0]
  401798:	3204      	adds	r2, #4
  40179a:	9207      	str	r2, [sp, #28]
  40179c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4017a0:	801a      	strh	r2, [r3, #0]
  4017a2:	e5b8      	b.n	401316 <_vfiprintf_r+0x7a>
  4017a4:	9807      	ldr	r0, [sp, #28]
  4017a6:	4a3d      	ldr	r2, [pc, #244]	; (40189c <_vfiprintf_r+0x600>)
  4017a8:	9608      	str	r6, [sp, #32]
  4017aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4017ac:	6806      	ldr	r6, [r0, #0]
  4017ae:	2278      	movs	r2, #120	; 0x78
  4017b0:	2130      	movs	r1, #48	; 0x30
  4017b2:	3004      	adds	r0, #4
  4017b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4017b8:	f043 0302 	orr.w	r3, r3, #2
  4017bc:	9007      	str	r0, [sp, #28]
  4017be:	2700      	movs	r7, #0
  4017c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4017c4:	2202      	movs	r2, #2
  4017c6:	e69c      	b.n	401502 <_vfiprintf_r+0x266>
  4017c8:	9608      	str	r6, [sp, #32]
  4017ca:	2800      	cmp	r0, #0
  4017cc:	d099      	beq.n	401702 <_vfiprintf_r+0x466>
  4017ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4017d2:	e796      	b.n	401702 <_vfiprintf_r+0x466>
  4017d4:	f898 2000 	ldrb.w	r2, [r8]
  4017d8:	2d00      	cmp	r5, #0
  4017da:	f47f add1 	bne.w	401380 <_vfiprintf_r+0xe4>
  4017de:	2001      	movs	r0, #1
  4017e0:	2520      	movs	r5, #32
  4017e2:	e5cd      	b.n	401380 <_vfiprintf_r+0xe4>
  4017e4:	f043 0301 	orr.w	r3, r3, #1
  4017e8:	f898 2000 	ldrb.w	r2, [r8]
  4017ec:	e5c8      	b.n	401380 <_vfiprintf_r+0xe4>
  4017ee:	9608      	str	r6, [sp, #32]
  4017f0:	2800      	cmp	r0, #0
  4017f2:	f040 8393 	bne.w	401f1c <_vfiprintf_r+0xc80>
  4017f6:	4929      	ldr	r1, [pc, #164]	; (40189c <_vfiprintf_r+0x600>)
  4017f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4017fa:	069f      	lsls	r7, r3, #26
  4017fc:	f100 82e8 	bmi.w	401dd0 <_vfiprintf_r+0xb34>
  401800:	9807      	ldr	r0, [sp, #28]
  401802:	06de      	lsls	r6, r3, #27
  401804:	4601      	mov	r1, r0
  401806:	f100 8270 	bmi.w	401cea <_vfiprintf_r+0xa4e>
  40180a:	065d      	lsls	r5, r3, #25
  40180c:	f140 826d 	bpl.w	401cea <_vfiprintf_r+0xa4e>
  401810:	3104      	adds	r1, #4
  401812:	8806      	ldrh	r6, [r0, #0]
  401814:	9107      	str	r1, [sp, #28]
  401816:	2700      	movs	r7, #0
  401818:	07d8      	lsls	r0, r3, #31
  40181a:	f140 8222 	bpl.w	401c62 <_vfiprintf_r+0x9c6>
  40181e:	ea56 0107 	orrs.w	r1, r6, r7
  401822:	f000 821e 	beq.w	401c62 <_vfiprintf_r+0x9c6>
  401826:	2130      	movs	r1, #48	; 0x30
  401828:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40182c:	f043 0302 	orr.w	r3, r3, #2
  401830:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401834:	2202      	movs	r2, #2
  401836:	e664      	b.n	401502 <_vfiprintf_r+0x266>
  401838:	9608      	str	r6, [sp, #32]
  40183a:	2800      	cmp	r0, #0
  40183c:	f040 836b 	bne.w	401f16 <_vfiprintf_r+0xc7a>
  401840:	4917      	ldr	r1, [pc, #92]	; (4018a0 <_vfiprintf_r+0x604>)
  401842:	910b      	str	r1, [sp, #44]	; 0x2c
  401844:	e7d9      	b.n	4017fa <_vfiprintf_r+0x55e>
  401846:	9907      	ldr	r1, [sp, #28]
  401848:	9608      	str	r6, [sp, #32]
  40184a:	680a      	ldr	r2, [r1, #0]
  40184c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401850:	f04f 0000 	mov.w	r0, #0
  401854:	460a      	mov	r2, r1
  401856:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40185a:	3204      	adds	r2, #4
  40185c:	2001      	movs	r0, #1
  40185e:	9001      	str	r0, [sp, #4]
  401860:	9207      	str	r2, [sp, #28]
  401862:	9005      	str	r0, [sp, #20]
  401864:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401868:	9302      	str	r3, [sp, #8]
  40186a:	2400      	movs	r4, #0
  40186c:	e670      	b.n	401550 <_vfiprintf_r+0x2b4>
  40186e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401872:	f898 2000 	ldrb.w	r2, [r8]
  401876:	e583      	b.n	401380 <_vfiprintf_r+0xe4>
  401878:	f898 2000 	ldrb.w	r2, [r8]
  40187c:	2a6c      	cmp	r2, #108	; 0x6c
  40187e:	bf03      	ittte	eq
  401880:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401884:	f043 0320 	orreq.w	r3, r3, #32
  401888:	f108 0801 	addeq.w	r8, r8, #1
  40188c:	f043 0310 	orrne.w	r3, r3, #16
  401890:	e576      	b.n	401380 <_vfiprintf_r+0xe4>
  401892:	bf00      	nop
  401894:	00403fd4 	.word	0x00403fd4
  401898:	00403fe4 	.word	0x00403fe4
  40189c:	00403fb8 	.word	0x00403fb8
  4018a0:	00403fa4 	.word	0x00403fa4
  4018a4:	9907      	ldr	r1, [sp, #28]
  4018a6:	680e      	ldr	r6, [r1, #0]
  4018a8:	460a      	mov	r2, r1
  4018aa:	2e00      	cmp	r6, #0
  4018ac:	f102 0204 	add.w	r2, r2, #4
  4018b0:	f6ff ae0f 	blt.w	4014d2 <_vfiprintf_r+0x236>
  4018b4:	9207      	str	r2, [sp, #28]
  4018b6:	f898 2000 	ldrb.w	r2, [r8]
  4018ba:	e561      	b.n	401380 <_vfiprintf_r+0xe4>
  4018bc:	f898 2000 	ldrb.w	r2, [r8]
  4018c0:	2001      	movs	r0, #1
  4018c2:	252b      	movs	r5, #43	; 0x2b
  4018c4:	e55c      	b.n	401380 <_vfiprintf_r+0xe4>
  4018c6:	9907      	ldr	r1, [sp, #28]
  4018c8:	9608      	str	r6, [sp, #32]
  4018ca:	f8d1 b000 	ldr.w	fp, [r1]
  4018ce:	f04f 0200 	mov.w	r2, #0
  4018d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4018d6:	1d0e      	adds	r6, r1, #4
  4018d8:	f1bb 0f00 	cmp.w	fp, #0
  4018dc:	f000 82e5 	beq.w	401eaa <_vfiprintf_r+0xc0e>
  4018e0:	1c67      	adds	r7, r4, #1
  4018e2:	f000 82c4 	beq.w	401e6e <_vfiprintf_r+0xbd2>
  4018e6:	4622      	mov	r2, r4
  4018e8:	2100      	movs	r1, #0
  4018ea:	4658      	mov	r0, fp
  4018ec:	9301      	str	r3, [sp, #4]
  4018ee:	f001 fbd7 	bl	4030a0 <memchr>
  4018f2:	9b01      	ldr	r3, [sp, #4]
  4018f4:	2800      	cmp	r0, #0
  4018f6:	f000 82e5 	beq.w	401ec4 <_vfiprintf_r+0xc28>
  4018fa:	eba0 020b 	sub.w	r2, r0, fp
  4018fe:	9205      	str	r2, [sp, #20]
  401900:	9607      	str	r6, [sp, #28]
  401902:	9302      	str	r3, [sp, #8]
  401904:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401908:	2400      	movs	r4, #0
  40190a:	e619      	b.n	401540 <_vfiprintf_r+0x2a4>
  40190c:	f898 2000 	ldrb.w	r2, [r8]
  401910:	2a2a      	cmp	r2, #42	; 0x2a
  401912:	f108 0701 	add.w	r7, r8, #1
  401916:	f000 82e9 	beq.w	401eec <_vfiprintf_r+0xc50>
  40191a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40191e:	2909      	cmp	r1, #9
  401920:	46b8      	mov	r8, r7
  401922:	f04f 0400 	mov.w	r4, #0
  401926:	f63f ad2d 	bhi.w	401384 <_vfiprintf_r+0xe8>
  40192a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40192e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401932:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401936:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40193a:	2909      	cmp	r1, #9
  40193c:	d9f5      	bls.n	40192a <_vfiprintf_r+0x68e>
  40193e:	e521      	b.n	401384 <_vfiprintf_r+0xe8>
  401940:	f043 0320 	orr.w	r3, r3, #32
  401944:	f898 2000 	ldrb.w	r2, [r8]
  401948:	e51a      	b.n	401380 <_vfiprintf_r+0xe4>
  40194a:	9608      	str	r6, [sp, #32]
  40194c:	2800      	cmp	r0, #0
  40194e:	f040 82db 	bne.w	401f08 <_vfiprintf_r+0xc6c>
  401952:	2a00      	cmp	r2, #0
  401954:	f000 80e7 	beq.w	401b26 <_vfiprintf_r+0x88a>
  401958:	2101      	movs	r1, #1
  40195a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40195e:	f04f 0200 	mov.w	r2, #0
  401962:	9101      	str	r1, [sp, #4]
  401964:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401968:	9105      	str	r1, [sp, #20]
  40196a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40196e:	e77b      	b.n	401868 <_vfiprintf_r+0x5cc>
  401970:	9a07      	ldr	r2, [sp, #28]
  401972:	6813      	ldr	r3, [r2, #0]
  401974:	3204      	adds	r2, #4
  401976:	9207      	str	r2, [sp, #28]
  401978:	9a03      	ldr	r2, [sp, #12]
  40197a:	601a      	str	r2, [r3, #0]
  40197c:	e4cb      	b.n	401316 <_vfiprintf_r+0x7a>
  40197e:	aa0f      	add	r2, sp, #60	; 0x3c
  401980:	9904      	ldr	r1, [sp, #16]
  401982:	4620      	mov	r0, r4
  401984:	f7ff fc4a 	bl	40121c <__sprint_r.part.0>
  401988:	2800      	cmp	r0, #0
  40198a:	f040 8139 	bne.w	401c00 <_vfiprintf_r+0x964>
  40198e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401990:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401992:	f101 0c01 	add.w	ip, r1, #1
  401996:	46ce      	mov	lr, r9
  401998:	e5ff      	b.n	40159a <_vfiprintf_r+0x2fe>
  40199a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40199c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40199e:	1c48      	adds	r0, r1, #1
  4019a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4019a4:	2d00      	cmp	r5, #0
  4019a6:	f43f ae22 	beq.w	4015ee <_vfiprintf_r+0x352>
  4019aa:	3201      	adds	r2, #1
  4019ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4019b0:	2101      	movs	r1, #1
  4019b2:	2807      	cmp	r0, #7
  4019b4:	9211      	str	r2, [sp, #68]	; 0x44
  4019b6:	9010      	str	r0, [sp, #64]	; 0x40
  4019b8:	f8ca 5000 	str.w	r5, [sl]
  4019bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4019c0:	f340 8108 	ble.w	401bd4 <_vfiprintf_r+0x938>
  4019c4:	2a00      	cmp	r2, #0
  4019c6:	f040 81bc 	bne.w	401d42 <_vfiprintf_r+0xaa6>
  4019ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4019cc:	2b00      	cmp	r3, #0
  4019ce:	f43f ae1f 	beq.w	401610 <_vfiprintf_r+0x374>
  4019d2:	ab0e      	add	r3, sp, #56	; 0x38
  4019d4:	2202      	movs	r2, #2
  4019d6:	4608      	mov	r0, r1
  4019d8:	931c      	str	r3, [sp, #112]	; 0x70
  4019da:	921d      	str	r2, [sp, #116]	; 0x74
  4019dc:	46ca      	mov	sl, r9
  4019de:	4601      	mov	r1, r0
  4019e0:	f10a 0a08 	add.w	sl, sl, #8
  4019e4:	3001      	adds	r0, #1
  4019e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4019e8:	2b80      	cmp	r3, #128	; 0x80
  4019ea:	f43f ae19 	beq.w	401620 <_vfiprintf_r+0x384>
  4019ee:	9b05      	ldr	r3, [sp, #20]
  4019f0:	1ae4      	subs	r4, r4, r3
  4019f2:	2c00      	cmp	r4, #0
  4019f4:	dd2e      	ble.n	401a54 <_vfiprintf_r+0x7b8>
  4019f6:	2c10      	cmp	r4, #16
  4019f8:	4db3      	ldr	r5, [pc, #716]	; (401cc8 <_vfiprintf_r+0xa2c>)
  4019fa:	dd1e      	ble.n	401a3a <_vfiprintf_r+0x79e>
  4019fc:	46d6      	mov	lr, sl
  4019fe:	2610      	movs	r6, #16
  401a00:	9f06      	ldr	r7, [sp, #24]
  401a02:	f8dd a010 	ldr.w	sl, [sp, #16]
  401a06:	e006      	b.n	401a16 <_vfiprintf_r+0x77a>
  401a08:	1c88      	adds	r0, r1, #2
  401a0a:	f10e 0e08 	add.w	lr, lr, #8
  401a0e:	4619      	mov	r1, r3
  401a10:	3c10      	subs	r4, #16
  401a12:	2c10      	cmp	r4, #16
  401a14:	dd10      	ble.n	401a38 <_vfiprintf_r+0x79c>
  401a16:	1c4b      	adds	r3, r1, #1
  401a18:	3210      	adds	r2, #16
  401a1a:	2b07      	cmp	r3, #7
  401a1c:	9211      	str	r2, [sp, #68]	; 0x44
  401a1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  401a22:	9310      	str	r3, [sp, #64]	; 0x40
  401a24:	ddf0      	ble.n	401a08 <_vfiprintf_r+0x76c>
  401a26:	2a00      	cmp	r2, #0
  401a28:	d165      	bne.n	401af6 <_vfiprintf_r+0x85a>
  401a2a:	3c10      	subs	r4, #16
  401a2c:	2c10      	cmp	r4, #16
  401a2e:	f04f 0001 	mov.w	r0, #1
  401a32:	4611      	mov	r1, r2
  401a34:	46ce      	mov	lr, r9
  401a36:	dcee      	bgt.n	401a16 <_vfiprintf_r+0x77a>
  401a38:	46f2      	mov	sl, lr
  401a3a:	4422      	add	r2, r4
  401a3c:	2807      	cmp	r0, #7
  401a3e:	9211      	str	r2, [sp, #68]	; 0x44
  401a40:	f8ca 5000 	str.w	r5, [sl]
  401a44:	f8ca 4004 	str.w	r4, [sl, #4]
  401a48:	9010      	str	r0, [sp, #64]	; 0x40
  401a4a:	f300 8085 	bgt.w	401b58 <_vfiprintf_r+0x8bc>
  401a4e:	f10a 0a08 	add.w	sl, sl, #8
  401a52:	3001      	adds	r0, #1
  401a54:	9905      	ldr	r1, [sp, #20]
  401a56:	f8ca b000 	str.w	fp, [sl]
  401a5a:	440a      	add	r2, r1
  401a5c:	2807      	cmp	r0, #7
  401a5e:	9211      	str	r2, [sp, #68]	; 0x44
  401a60:	f8ca 1004 	str.w	r1, [sl, #4]
  401a64:	9010      	str	r0, [sp, #64]	; 0x40
  401a66:	f340 8082 	ble.w	401b6e <_vfiprintf_r+0x8d2>
  401a6a:	2a00      	cmp	r2, #0
  401a6c:	f040 8118 	bne.w	401ca0 <_vfiprintf_r+0xa04>
  401a70:	9b02      	ldr	r3, [sp, #8]
  401a72:	9210      	str	r2, [sp, #64]	; 0x40
  401a74:	0758      	lsls	r0, r3, #29
  401a76:	d535      	bpl.n	401ae4 <_vfiprintf_r+0x848>
  401a78:	9b08      	ldr	r3, [sp, #32]
  401a7a:	9901      	ldr	r1, [sp, #4]
  401a7c:	1a5c      	subs	r4, r3, r1
  401a7e:	2c00      	cmp	r4, #0
  401a80:	f340 80e7 	ble.w	401c52 <_vfiprintf_r+0x9b6>
  401a84:	46ca      	mov	sl, r9
  401a86:	2c10      	cmp	r4, #16
  401a88:	f340 8218 	ble.w	401ebc <_vfiprintf_r+0xc20>
  401a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401a8e:	4e8f      	ldr	r6, [pc, #572]	; (401ccc <_vfiprintf_r+0xa30>)
  401a90:	9f06      	ldr	r7, [sp, #24]
  401a92:	f8dd b010 	ldr.w	fp, [sp, #16]
  401a96:	2510      	movs	r5, #16
  401a98:	e006      	b.n	401aa8 <_vfiprintf_r+0x80c>
  401a9a:	1c88      	adds	r0, r1, #2
  401a9c:	f10a 0a08 	add.w	sl, sl, #8
  401aa0:	4619      	mov	r1, r3
  401aa2:	3c10      	subs	r4, #16
  401aa4:	2c10      	cmp	r4, #16
  401aa6:	dd11      	ble.n	401acc <_vfiprintf_r+0x830>
  401aa8:	1c4b      	adds	r3, r1, #1
  401aaa:	3210      	adds	r2, #16
  401aac:	2b07      	cmp	r3, #7
  401aae:	9211      	str	r2, [sp, #68]	; 0x44
  401ab0:	f8ca 6000 	str.w	r6, [sl]
  401ab4:	f8ca 5004 	str.w	r5, [sl, #4]
  401ab8:	9310      	str	r3, [sp, #64]	; 0x40
  401aba:	ddee      	ble.n	401a9a <_vfiprintf_r+0x7fe>
  401abc:	bb42      	cbnz	r2, 401b10 <_vfiprintf_r+0x874>
  401abe:	3c10      	subs	r4, #16
  401ac0:	2c10      	cmp	r4, #16
  401ac2:	f04f 0001 	mov.w	r0, #1
  401ac6:	4611      	mov	r1, r2
  401ac8:	46ca      	mov	sl, r9
  401aca:	dced      	bgt.n	401aa8 <_vfiprintf_r+0x80c>
  401acc:	4422      	add	r2, r4
  401ace:	2807      	cmp	r0, #7
  401ad0:	9211      	str	r2, [sp, #68]	; 0x44
  401ad2:	f8ca 6000 	str.w	r6, [sl]
  401ad6:	f8ca 4004 	str.w	r4, [sl, #4]
  401ada:	9010      	str	r0, [sp, #64]	; 0x40
  401adc:	dd51      	ble.n	401b82 <_vfiprintf_r+0x8e6>
  401ade:	2a00      	cmp	r2, #0
  401ae0:	f040 819b 	bne.w	401e1a <_vfiprintf_r+0xb7e>
  401ae4:	9b03      	ldr	r3, [sp, #12]
  401ae6:	9a08      	ldr	r2, [sp, #32]
  401ae8:	9901      	ldr	r1, [sp, #4]
  401aea:	428a      	cmp	r2, r1
  401aec:	bfac      	ite	ge
  401aee:	189b      	addge	r3, r3, r2
  401af0:	185b      	addlt	r3, r3, r1
  401af2:	9303      	str	r3, [sp, #12]
  401af4:	e04e      	b.n	401b94 <_vfiprintf_r+0x8f8>
  401af6:	aa0f      	add	r2, sp, #60	; 0x3c
  401af8:	4651      	mov	r1, sl
  401afa:	4638      	mov	r0, r7
  401afc:	f7ff fb8e 	bl	40121c <__sprint_r.part.0>
  401b00:	2800      	cmp	r0, #0
  401b02:	f040 813f 	bne.w	401d84 <_vfiprintf_r+0xae8>
  401b06:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401b0a:	1c48      	adds	r0, r1, #1
  401b0c:	46ce      	mov	lr, r9
  401b0e:	e77f      	b.n	401a10 <_vfiprintf_r+0x774>
  401b10:	aa0f      	add	r2, sp, #60	; 0x3c
  401b12:	4659      	mov	r1, fp
  401b14:	4638      	mov	r0, r7
  401b16:	f7ff fb81 	bl	40121c <__sprint_r.part.0>
  401b1a:	b960      	cbnz	r0, 401b36 <_vfiprintf_r+0x89a>
  401b1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401b20:	1c48      	adds	r0, r1, #1
  401b22:	46ca      	mov	sl, r9
  401b24:	e7bd      	b.n	401aa2 <_vfiprintf_r+0x806>
  401b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b28:	f8dd b010 	ldr.w	fp, [sp, #16]
  401b2c:	2b00      	cmp	r3, #0
  401b2e:	f040 81d4 	bne.w	401eda <_vfiprintf_r+0xc3e>
  401b32:	2300      	movs	r3, #0
  401b34:	9310      	str	r3, [sp, #64]	; 0x40
  401b36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401b3a:	f013 0f01 	tst.w	r3, #1
  401b3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401b42:	d102      	bne.n	401b4a <_vfiprintf_r+0x8ae>
  401b44:	059a      	lsls	r2, r3, #22
  401b46:	f140 80de 	bpl.w	401d06 <_vfiprintf_r+0xa6a>
  401b4a:	065b      	lsls	r3, r3, #25
  401b4c:	f53f acb2 	bmi.w	4014b4 <_vfiprintf_r+0x218>
  401b50:	9803      	ldr	r0, [sp, #12]
  401b52:	b02d      	add	sp, #180	; 0xb4
  401b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b58:	2a00      	cmp	r2, #0
  401b5a:	f040 8106 	bne.w	401d6a <_vfiprintf_r+0xace>
  401b5e:	9a05      	ldr	r2, [sp, #20]
  401b60:	921d      	str	r2, [sp, #116]	; 0x74
  401b62:	2301      	movs	r3, #1
  401b64:	9211      	str	r2, [sp, #68]	; 0x44
  401b66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401b6a:	9310      	str	r3, [sp, #64]	; 0x40
  401b6c:	46ca      	mov	sl, r9
  401b6e:	f10a 0a08 	add.w	sl, sl, #8
  401b72:	9b02      	ldr	r3, [sp, #8]
  401b74:	0759      	lsls	r1, r3, #29
  401b76:	d504      	bpl.n	401b82 <_vfiprintf_r+0x8e6>
  401b78:	9b08      	ldr	r3, [sp, #32]
  401b7a:	9901      	ldr	r1, [sp, #4]
  401b7c:	1a5c      	subs	r4, r3, r1
  401b7e:	2c00      	cmp	r4, #0
  401b80:	dc81      	bgt.n	401a86 <_vfiprintf_r+0x7ea>
  401b82:	9b03      	ldr	r3, [sp, #12]
  401b84:	9908      	ldr	r1, [sp, #32]
  401b86:	9801      	ldr	r0, [sp, #4]
  401b88:	4281      	cmp	r1, r0
  401b8a:	bfac      	ite	ge
  401b8c:	185b      	addge	r3, r3, r1
  401b8e:	181b      	addlt	r3, r3, r0
  401b90:	9303      	str	r3, [sp, #12]
  401b92:	bb72      	cbnz	r2, 401bf2 <_vfiprintf_r+0x956>
  401b94:	2300      	movs	r3, #0
  401b96:	9310      	str	r3, [sp, #64]	; 0x40
  401b98:	46ca      	mov	sl, r9
  401b9a:	f7ff bbbc 	b.w	401316 <_vfiprintf_r+0x7a>
  401b9e:	aa0f      	add	r2, sp, #60	; 0x3c
  401ba0:	9904      	ldr	r1, [sp, #16]
  401ba2:	4620      	mov	r0, r4
  401ba4:	f7ff fb3a 	bl	40121c <__sprint_r.part.0>
  401ba8:	bb50      	cbnz	r0, 401c00 <_vfiprintf_r+0x964>
  401baa:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bae:	f101 0e01 	add.w	lr, r1, #1
  401bb2:	46cc      	mov	ip, r9
  401bb4:	e548      	b.n	401648 <_vfiprintf_r+0x3ac>
  401bb6:	2a00      	cmp	r2, #0
  401bb8:	f040 8140 	bne.w	401e3c <_vfiprintf_r+0xba0>
  401bbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401bc0:	2900      	cmp	r1, #0
  401bc2:	f000 811b 	beq.w	401dfc <_vfiprintf_r+0xb60>
  401bc6:	2201      	movs	r2, #1
  401bc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401bcc:	4610      	mov	r0, r2
  401bce:	921d      	str	r2, [sp, #116]	; 0x74
  401bd0:	911c      	str	r1, [sp, #112]	; 0x70
  401bd2:	46ca      	mov	sl, r9
  401bd4:	4601      	mov	r1, r0
  401bd6:	f10a 0a08 	add.w	sl, sl, #8
  401bda:	3001      	adds	r0, #1
  401bdc:	e507      	b.n	4015ee <_vfiprintf_r+0x352>
  401bde:	9b02      	ldr	r3, [sp, #8]
  401be0:	2a01      	cmp	r2, #1
  401be2:	f000 8098 	beq.w	401d16 <_vfiprintf_r+0xa7a>
  401be6:	2a02      	cmp	r2, #2
  401be8:	d10d      	bne.n	401c06 <_vfiprintf_r+0x96a>
  401bea:	9302      	str	r3, [sp, #8]
  401bec:	2600      	movs	r6, #0
  401bee:	2700      	movs	r7, #0
  401bf0:	e5b0      	b.n	401754 <_vfiprintf_r+0x4b8>
  401bf2:	aa0f      	add	r2, sp, #60	; 0x3c
  401bf4:	9904      	ldr	r1, [sp, #16]
  401bf6:	9806      	ldr	r0, [sp, #24]
  401bf8:	f7ff fb10 	bl	40121c <__sprint_r.part.0>
  401bfc:	2800      	cmp	r0, #0
  401bfe:	d0c9      	beq.n	401b94 <_vfiprintf_r+0x8f8>
  401c00:	f8dd b010 	ldr.w	fp, [sp, #16]
  401c04:	e797      	b.n	401b36 <_vfiprintf_r+0x89a>
  401c06:	9302      	str	r3, [sp, #8]
  401c08:	2600      	movs	r6, #0
  401c0a:	2700      	movs	r7, #0
  401c0c:	4649      	mov	r1, r9
  401c0e:	e000      	b.n	401c12 <_vfiprintf_r+0x976>
  401c10:	4659      	mov	r1, fp
  401c12:	08f2      	lsrs	r2, r6, #3
  401c14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401c18:	08f8      	lsrs	r0, r7, #3
  401c1a:	f006 0307 	and.w	r3, r6, #7
  401c1e:	4607      	mov	r7, r0
  401c20:	4616      	mov	r6, r2
  401c22:	3330      	adds	r3, #48	; 0x30
  401c24:	ea56 0207 	orrs.w	r2, r6, r7
  401c28:	f801 3c01 	strb.w	r3, [r1, #-1]
  401c2c:	f101 3bff 	add.w	fp, r1, #4294967295
  401c30:	d1ee      	bne.n	401c10 <_vfiprintf_r+0x974>
  401c32:	9a02      	ldr	r2, [sp, #8]
  401c34:	07d6      	lsls	r6, r2, #31
  401c36:	f57f ad9d 	bpl.w	401774 <_vfiprintf_r+0x4d8>
  401c3a:	2b30      	cmp	r3, #48	; 0x30
  401c3c:	f43f ad9a 	beq.w	401774 <_vfiprintf_r+0x4d8>
  401c40:	3902      	subs	r1, #2
  401c42:	2330      	movs	r3, #48	; 0x30
  401c44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401c48:	eba9 0301 	sub.w	r3, r9, r1
  401c4c:	9305      	str	r3, [sp, #20]
  401c4e:	468b      	mov	fp, r1
  401c50:	e476      	b.n	401540 <_vfiprintf_r+0x2a4>
  401c52:	9b03      	ldr	r3, [sp, #12]
  401c54:	9a08      	ldr	r2, [sp, #32]
  401c56:	428a      	cmp	r2, r1
  401c58:	bfac      	ite	ge
  401c5a:	189b      	addge	r3, r3, r2
  401c5c:	185b      	addlt	r3, r3, r1
  401c5e:	9303      	str	r3, [sp, #12]
  401c60:	e798      	b.n	401b94 <_vfiprintf_r+0x8f8>
  401c62:	2202      	movs	r2, #2
  401c64:	e44d      	b.n	401502 <_vfiprintf_r+0x266>
  401c66:	2f00      	cmp	r7, #0
  401c68:	bf08      	it	eq
  401c6a:	2e0a      	cmpeq	r6, #10
  401c6c:	d352      	bcc.n	401d14 <_vfiprintf_r+0xa78>
  401c6e:	46cb      	mov	fp, r9
  401c70:	4630      	mov	r0, r6
  401c72:	4639      	mov	r1, r7
  401c74:	220a      	movs	r2, #10
  401c76:	2300      	movs	r3, #0
  401c78:	f001 ffbe 	bl	403bf8 <__aeabi_uldivmod>
  401c7c:	3230      	adds	r2, #48	; 0x30
  401c7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401c82:	4630      	mov	r0, r6
  401c84:	4639      	mov	r1, r7
  401c86:	2300      	movs	r3, #0
  401c88:	220a      	movs	r2, #10
  401c8a:	f001 ffb5 	bl	403bf8 <__aeabi_uldivmod>
  401c8e:	4606      	mov	r6, r0
  401c90:	460f      	mov	r7, r1
  401c92:	ea56 0307 	orrs.w	r3, r6, r7
  401c96:	d1eb      	bne.n	401c70 <_vfiprintf_r+0x9d4>
  401c98:	e56c      	b.n	401774 <_vfiprintf_r+0x4d8>
  401c9a:	9405      	str	r4, [sp, #20]
  401c9c:	46cb      	mov	fp, r9
  401c9e:	e44f      	b.n	401540 <_vfiprintf_r+0x2a4>
  401ca0:	aa0f      	add	r2, sp, #60	; 0x3c
  401ca2:	9904      	ldr	r1, [sp, #16]
  401ca4:	9806      	ldr	r0, [sp, #24]
  401ca6:	f7ff fab9 	bl	40121c <__sprint_r.part.0>
  401caa:	2800      	cmp	r0, #0
  401cac:	d1a8      	bne.n	401c00 <_vfiprintf_r+0x964>
  401cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cb0:	46ca      	mov	sl, r9
  401cb2:	e75e      	b.n	401b72 <_vfiprintf_r+0x8d6>
  401cb4:	aa0f      	add	r2, sp, #60	; 0x3c
  401cb6:	9904      	ldr	r1, [sp, #16]
  401cb8:	9806      	ldr	r0, [sp, #24]
  401cba:	f7ff faaf 	bl	40121c <__sprint_r.part.0>
  401cbe:	2800      	cmp	r0, #0
  401cc0:	d19e      	bne.n	401c00 <_vfiprintf_r+0x964>
  401cc2:	46ca      	mov	sl, r9
  401cc4:	f7ff bbc0 	b.w	401448 <_vfiprintf_r+0x1ac>
  401cc8:	00403fe4 	.word	0x00403fe4
  401ccc:	00403fd4 	.word	0x00403fd4
  401cd0:	3104      	adds	r1, #4
  401cd2:	6816      	ldr	r6, [r2, #0]
  401cd4:	9107      	str	r1, [sp, #28]
  401cd6:	2201      	movs	r2, #1
  401cd8:	2700      	movs	r7, #0
  401cda:	e412      	b.n	401502 <_vfiprintf_r+0x266>
  401cdc:	9807      	ldr	r0, [sp, #28]
  401cde:	4601      	mov	r1, r0
  401ce0:	3104      	adds	r1, #4
  401ce2:	6806      	ldr	r6, [r0, #0]
  401ce4:	9107      	str	r1, [sp, #28]
  401ce6:	2700      	movs	r7, #0
  401ce8:	e40b      	b.n	401502 <_vfiprintf_r+0x266>
  401cea:	680e      	ldr	r6, [r1, #0]
  401cec:	3104      	adds	r1, #4
  401cee:	9107      	str	r1, [sp, #28]
  401cf0:	2700      	movs	r7, #0
  401cf2:	e591      	b.n	401818 <_vfiprintf_r+0x57c>
  401cf4:	9907      	ldr	r1, [sp, #28]
  401cf6:	680e      	ldr	r6, [r1, #0]
  401cf8:	460a      	mov	r2, r1
  401cfa:	17f7      	asrs	r7, r6, #31
  401cfc:	3204      	adds	r2, #4
  401cfe:	9207      	str	r2, [sp, #28]
  401d00:	4630      	mov	r0, r6
  401d02:	4639      	mov	r1, r7
  401d04:	e50f      	b.n	401726 <_vfiprintf_r+0x48a>
  401d06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401d0a:	f000 fe7f 	bl	402a0c <__retarget_lock_release_recursive>
  401d0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401d12:	e71a      	b.n	401b4a <_vfiprintf_r+0x8ae>
  401d14:	9b02      	ldr	r3, [sp, #8]
  401d16:	9302      	str	r3, [sp, #8]
  401d18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401d1c:	3630      	adds	r6, #48	; 0x30
  401d1e:	2301      	movs	r3, #1
  401d20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401d24:	9305      	str	r3, [sp, #20]
  401d26:	e40b      	b.n	401540 <_vfiprintf_r+0x2a4>
  401d28:	aa0f      	add	r2, sp, #60	; 0x3c
  401d2a:	9904      	ldr	r1, [sp, #16]
  401d2c:	9806      	ldr	r0, [sp, #24]
  401d2e:	f7ff fa75 	bl	40121c <__sprint_r.part.0>
  401d32:	2800      	cmp	r0, #0
  401d34:	f47f af64 	bne.w	401c00 <_vfiprintf_r+0x964>
  401d38:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d3c:	1c48      	adds	r0, r1, #1
  401d3e:	46ca      	mov	sl, r9
  401d40:	e651      	b.n	4019e6 <_vfiprintf_r+0x74a>
  401d42:	aa0f      	add	r2, sp, #60	; 0x3c
  401d44:	9904      	ldr	r1, [sp, #16]
  401d46:	9806      	ldr	r0, [sp, #24]
  401d48:	f7ff fa68 	bl	40121c <__sprint_r.part.0>
  401d4c:	2800      	cmp	r0, #0
  401d4e:	f47f af57 	bne.w	401c00 <_vfiprintf_r+0x964>
  401d52:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d56:	1c48      	adds	r0, r1, #1
  401d58:	46ca      	mov	sl, r9
  401d5a:	e448      	b.n	4015ee <_vfiprintf_r+0x352>
  401d5c:	2a00      	cmp	r2, #0
  401d5e:	f040 8091 	bne.w	401e84 <_vfiprintf_r+0xbe8>
  401d62:	2001      	movs	r0, #1
  401d64:	4611      	mov	r1, r2
  401d66:	46ca      	mov	sl, r9
  401d68:	e641      	b.n	4019ee <_vfiprintf_r+0x752>
  401d6a:	aa0f      	add	r2, sp, #60	; 0x3c
  401d6c:	9904      	ldr	r1, [sp, #16]
  401d6e:	9806      	ldr	r0, [sp, #24]
  401d70:	f7ff fa54 	bl	40121c <__sprint_r.part.0>
  401d74:	2800      	cmp	r0, #0
  401d76:	f47f af43 	bne.w	401c00 <_vfiprintf_r+0x964>
  401d7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  401d7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d7e:	3001      	adds	r0, #1
  401d80:	46ca      	mov	sl, r9
  401d82:	e667      	b.n	401a54 <_vfiprintf_r+0x7b8>
  401d84:	46d3      	mov	fp, sl
  401d86:	e6d6      	b.n	401b36 <_vfiprintf_r+0x89a>
  401d88:	9e07      	ldr	r6, [sp, #28]
  401d8a:	3607      	adds	r6, #7
  401d8c:	f026 0207 	bic.w	r2, r6, #7
  401d90:	f102 0108 	add.w	r1, r2, #8
  401d94:	e9d2 6700 	ldrd	r6, r7, [r2]
  401d98:	9107      	str	r1, [sp, #28]
  401d9a:	2201      	movs	r2, #1
  401d9c:	f7ff bbb1 	b.w	401502 <_vfiprintf_r+0x266>
  401da0:	9e07      	ldr	r6, [sp, #28]
  401da2:	3607      	adds	r6, #7
  401da4:	f026 0607 	bic.w	r6, r6, #7
  401da8:	e9d6 0100 	ldrd	r0, r1, [r6]
  401dac:	f106 0208 	add.w	r2, r6, #8
  401db0:	9207      	str	r2, [sp, #28]
  401db2:	4606      	mov	r6, r0
  401db4:	460f      	mov	r7, r1
  401db6:	e4b6      	b.n	401726 <_vfiprintf_r+0x48a>
  401db8:	9e07      	ldr	r6, [sp, #28]
  401dba:	3607      	adds	r6, #7
  401dbc:	f026 0207 	bic.w	r2, r6, #7
  401dc0:	f102 0108 	add.w	r1, r2, #8
  401dc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  401dc8:	9107      	str	r1, [sp, #28]
  401dca:	2200      	movs	r2, #0
  401dcc:	f7ff bb99 	b.w	401502 <_vfiprintf_r+0x266>
  401dd0:	9e07      	ldr	r6, [sp, #28]
  401dd2:	3607      	adds	r6, #7
  401dd4:	f026 0107 	bic.w	r1, r6, #7
  401dd8:	f101 0008 	add.w	r0, r1, #8
  401ddc:	9007      	str	r0, [sp, #28]
  401dde:	e9d1 6700 	ldrd	r6, r7, [r1]
  401de2:	e519      	b.n	401818 <_vfiprintf_r+0x57c>
  401de4:	46cb      	mov	fp, r9
  401de6:	f7ff bbab 	b.w	401540 <_vfiprintf_r+0x2a4>
  401dea:	252d      	movs	r5, #45	; 0x2d
  401dec:	4276      	negs	r6, r6
  401dee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401df2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401df6:	2201      	movs	r2, #1
  401df8:	f7ff bb88 	b.w	40150c <_vfiprintf_r+0x270>
  401dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401dfe:	b9b3      	cbnz	r3, 401e2e <_vfiprintf_r+0xb92>
  401e00:	4611      	mov	r1, r2
  401e02:	2001      	movs	r0, #1
  401e04:	46ca      	mov	sl, r9
  401e06:	e5f2      	b.n	4019ee <_vfiprintf_r+0x752>
  401e08:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e0c:	f000 fdfe 	bl	402a0c <__retarget_lock_release_recursive>
  401e10:	f04f 33ff 	mov.w	r3, #4294967295
  401e14:	9303      	str	r3, [sp, #12]
  401e16:	f7ff bb50 	b.w	4014ba <_vfiprintf_r+0x21e>
  401e1a:	aa0f      	add	r2, sp, #60	; 0x3c
  401e1c:	9904      	ldr	r1, [sp, #16]
  401e1e:	9806      	ldr	r0, [sp, #24]
  401e20:	f7ff f9fc 	bl	40121c <__sprint_r.part.0>
  401e24:	2800      	cmp	r0, #0
  401e26:	f47f aeeb 	bne.w	401c00 <_vfiprintf_r+0x964>
  401e2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e2c:	e6a9      	b.n	401b82 <_vfiprintf_r+0x8e6>
  401e2e:	ab0e      	add	r3, sp, #56	; 0x38
  401e30:	2202      	movs	r2, #2
  401e32:	931c      	str	r3, [sp, #112]	; 0x70
  401e34:	921d      	str	r2, [sp, #116]	; 0x74
  401e36:	2001      	movs	r0, #1
  401e38:	46ca      	mov	sl, r9
  401e3a:	e5d0      	b.n	4019de <_vfiprintf_r+0x742>
  401e3c:	aa0f      	add	r2, sp, #60	; 0x3c
  401e3e:	9904      	ldr	r1, [sp, #16]
  401e40:	9806      	ldr	r0, [sp, #24]
  401e42:	f7ff f9eb 	bl	40121c <__sprint_r.part.0>
  401e46:	2800      	cmp	r0, #0
  401e48:	f47f aeda 	bne.w	401c00 <_vfiprintf_r+0x964>
  401e4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e50:	1c48      	adds	r0, r1, #1
  401e52:	46ca      	mov	sl, r9
  401e54:	e5a4      	b.n	4019a0 <_vfiprintf_r+0x704>
  401e56:	9a07      	ldr	r2, [sp, #28]
  401e58:	9903      	ldr	r1, [sp, #12]
  401e5a:	6813      	ldr	r3, [r2, #0]
  401e5c:	17cd      	asrs	r5, r1, #31
  401e5e:	4608      	mov	r0, r1
  401e60:	3204      	adds	r2, #4
  401e62:	4629      	mov	r1, r5
  401e64:	9207      	str	r2, [sp, #28]
  401e66:	e9c3 0100 	strd	r0, r1, [r3]
  401e6a:	f7ff ba54 	b.w	401316 <_vfiprintf_r+0x7a>
  401e6e:	4658      	mov	r0, fp
  401e70:	9607      	str	r6, [sp, #28]
  401e72:	9302      	str	r3, [sp, #8]
  401e74:	f001 fc84 	bl	403780 <strlen>
  401e78:	2400      	movs	r4, #0
  401e7a:	9005      	str	r0, [sp, #20]
  401e7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401e80:	f7ff bb5e 	b.w	401540 <_vfiprintf_r+0x2a4>
  401e84:	aa0f      	add	r2, sp, #60	; 0x3c
  401e86:	9904      	ldr	r1, [sp, #16]
  401e88:	9806      	ldr	r0, [sp, #24]
  401e8a:	f7ff f9c7 	bl	40121c <__sprint_r.part.0>
  401e8e:	2800      	cmp	r0, #0
  401e90:	f47f aeb6 	bne.w	401c00 <_vfiprintf_r+0x964>
  401e94:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e98:	1c48      	adds	r0, r1, #1
  401e9a:	46ca      	mov	sl, r9
  401e9c:	e5a7      	b.n	4019ee <_vfiprintf_r+0x752>
  401e9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ea2:	4e20      	ldr	r6, [pc, #128]	; (401f24 <_vfiprintf_r+0xc88>)
  401ea4:	3101      	adds	r1, #1
  401ea6:	f7ff bb90 	b.w	4015ca <_vfiprintf_r+0x32e>
  401eaa:	2c06      	cmp	r4, #6
  401eac:	bf28      	it	cs
  401eae:	2406      	movcs	r4, #6
  401eb0:	9405      	str	r4, [sp, #20]
  401eb2:	9607      	str	r6, [sp, #28]
  401eb4:	9401      	str	r4, [sp, #4]
  401eb6:	f8df b070 	ldr.w	fp, [pc, #112]	; 401f28 <_vfiprintf_r+0xc8c>
  401eba:	e4d5      	b.n	401868 <_vfiprintf_r+0x5cc>
  401ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
  401ebe:	4e19      	ldr	r6, [pc, #100]	; (401f24 <_vfiprintf_r+0xc88>)
  401ec0:	3001      	adds	r0, #1
  401ec2:	e603      	b.n	401acc <_vfiprintf_r+0x830>
  401ec4:	9405      	str	r4, [sp, #20]
  401ec6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401eca:	9607      	str	r6, [sp, #28]
  401ecc:	9302      	str	r3, [sp, #8]
  401ece:	4604      	mov	r4, r0
  401ed0:	f7ff bb36 	b.w	401540 <_vfiprintf_r+0x2a4>
  401ed4:	4686      	mov	lr, r0
  401ed6:	f7ff bbce 	b.w	401676 <_vfiprintf_r+0x3da>
  401eda:	9806      	ldr	r0, [sp, #24]
  401edc:	aa0f      	add	r2, sp, #60	; 0x3c
  401ede:	4659      	mov	r1, fp
  401ee0:	f7ff f99c 	bl	40121c <__sprint_r.part.0>
  401ee4:	2800      	cmp	r0, #0
  401ee6:	f43f ae24 	beq.w	401b32 <_vfiprintf_r+0x896>
  401eea:	e624      	b.n	401b36 <_vfiprintf_r+0x89a>
  401eec:	9907      	ldr	r1, [sp, #28]
  401eee:	f898 2001 	ldrb.w	r2, [r8, #1]
  401ef2:	680c      	ldr	r4, [r1, #0]
  401ef4:	3104      	adds	r1, #4
  401ef6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  401efa:	46b8      	mov	r8, r7
  401efc:	9107      	str	r1, [sp, #28]
  401efe:	f7ff ba3f 	b.w	401380 <_vfiprintf_r+0xe4>
  401f02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f06:	e43c      	b.n	401782 <_vfiprintf_r+0x4e6>
  401f08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f0c:	e521      	b.n	401952 <_vfiprintf_r+0x6b6>
  401f0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f12:	f7ff bbf4 	b.w	4016fe <_vfiprintf_r+0x462>
  401f16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f1a:	e491      	b.n	401840 <_vfiprintf_r+0x5a4>
  401f1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f20:	e469      	b.n	4017f6 <_vfiprintf_r+0x55a>
  401f22:	bf00      	nop
  401f24:	00403fd4 	.word	0x00403fd4
  401f28:	00403fcc 	.word	0x00403fcc

00401f2c <__sbprintf>:
  401f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f30:	460c      	mov	r4, r1
  401f32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401f36:	8989      	ldrh	r1, [r1, #12]
  401f38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401f3a:	89e5      	ldrh	r5, [r4, #14]
  401f3c:	9619      	str	r6, [sp, #100]	; 0x64
  401f3e:	f021 0102 	bic.w	r1, r1, #2
  401f42:	4606      	mov	r6, r0
  401f44:	69e0      	ldr	r0, [r4, #28]
  401f46:	f8ad 100c 	strh.w	r1, [sp, #12]
  401f4a:	4617      	mov	r7, r2
  401f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401f50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401f52:	f8ad 500e 	strh.w	r5, [sp, #14]
  401f56:	4698      	mov	r8, r3
  401f58:	ad1a      	add	r5, sp, #104	; 0x68
  401f5a:	2300      	movs	r3, #0
  401f5c:	9007      	str	r0, [sp, #28]
  401f5e:	a816      	add	r0, sp, #88	; 0x58
  401f60:	9209      	str	r2, [sp, #36]	; 0x24
  401f62:	9306      	str	r3, [sp, #24]
  401f64:	9500      	str	r5, [sp, #0]
  401f66:	9504      	str	r5, [sp, #16]
  401f68:	9102      	str	r1, [sp, #8]
  401f6a:	9105      	str	r1, [sp, #20]
  401f6c:	f000 fd48 	bl	402a00 <__retarget_lock_init_recursive>
  401f70:	4643      	mov	r3, r8
  401f72:	463a      	mov	r2, r7
  401f74:	4669      	mov	r1, sp
  401f76:	4630      	mov	r0, r6
  401f78:	f7ff f990 	bl	40129c <_vfiprintf_r>
  401f7c:	1e05      	subs	r5, r0, #0
  401f7e:	db07      	blt.n	401f90 <__sbprintf+0x64>
  401f80:	4630      	mov	r0, r6
  401f82:	4669      	mov	r1, sp
  401f84:	f000 f928 	bl	4021d8 <_fflush_r>
  401f88:	2800      	cmp	r0, #0
  401f8a:	bf18      	it	ne
  401f8c:	f04f 35ff 	movne.w	r5, #4294967295
  401f90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401f94:	065b      	lsls	r3, r3, #25
  401f96:	d503      	bpl.n	401fa0 <__sbprintf+0x74>
  401f98:	89a3      	ldrh	r3, [r4, #12]
  401f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401f9e:	81a3      	strh	r3, [r4, #12]
  401fa0:	9816      	ldr	r0, [sp, #88]	; 0x58
  401fa2:	f000 fd2f 	bl	402a04 <__retarget_lock_close_recursive>
  401fa6:	4628      	mov	r0, r5
  401fa8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  401fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00401fb0 <__swsetup_r>:
  401fb0:	b538      	push	{r3, r4, r5, lr}
  401fb2:	4b30      	ldr	r3, [pc, #192]	; (402074 <__swsetup_r+0xc4>)
  401fb4:	681b      	ldr	r3, [r3, #0]
  401fb6:	4605      	mov	r5, r0
  401fb8:	460c      	mov	r4, r1
  401fba:	b113      	cbz	r3, 401fc2 <__swsetup_r+0x12>
  401fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401fbe:	2a00      	cmp	r2, #0
  401fc0:	d038      	beq.n	402034 <__swsetup_r+0x84>
  401fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401fc6:	b293      	uxth	r3, r2
  401fc8:	0718      	lsls	r0, r3, #28
  401fca:	d50c      	bpl.n	401fe6 <__swsetup_r+0x36>
  401fcc:	6920      	ldr	r0, [r4, #16]
  401fce:	b1a8      	cbz	r0, 401ffc <__swsetup_r+0x4c>
  401fd0:	f013 0201 	ands.w	r2, r3, #1
  401fd4:	d01e      	beq.n	402014 <__swsetup_r+0x64>
  401fd6:	6963      	ldr	r3, [r4, #20]
  401fd8:	2200      	movs	r2, #0
  401fda:	425b      	negs	r3, r3
  401fdc:	61a3      	str	r3, [r4, #24]
  401fde:	60a2      	str	r2, [r4, #8]
  401fe0:	b1f0      	cbz	r0, 402020 <__swsetup_r+0x70>
  401fe2:	2000      	movs	r0, #0
  401fe4:	bd38      	pop	{r3, r4, r5, pc}
  401fe6:	06d9      	lsls	r1, r3, #27
  401fe8:	d53c      	bpl.n	402064 <__swsetup_r+0xb4>
  401fea:	0758      	lsls	r0, r3, #29
  401fec:	d426      	bmi.n	40203c <__swsetup_r+0x8c>
  401fee:	6920      	ldr	r0, [r4, #16]
  401ff0:	f042 0308 	orr.w	r3, r2, #8
  401ff4:	81a3      	strh	r3, [r4, #12]
  401ff6:	b29b      	uxth	r3, r3
  401ff8:	2800      	cmp	r0, #0
  401ffa:	d1e9      	bne.n	401fd0 <__swsetup_r+0x20>
  401ffc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402000:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402004:	d0e4      	beq.n	401fd0 <__swsetup_r+0x20>
  402006:	4628      	mov	r0, r5
  402008:	4621      	mov	r1, r4
  40200a:	f000 fd2f 	bl	402a6c <__smakebuf_r>
  40200e:	89a3      	ldrh	r3, [r4, #12]
  402010:	6920      	ldr	r0, [r4, #16]
  402012:	e7dd      	b.n	401fd0 <__swsetup_r+0x20>
  402014:	0799      	lsls	r1, r3, #30
  402016:	bf58      	it	pl
  402018:	6962      	ldrpl	r2, [r4, #20]
  40201a:	60a2      	str	r2, [r4, #8]
  40201c:	2800      	cmp	r0, #0
  40201e:	d1e0      	bne.n	401fe2 <__swsetup_r+0x32>
  402020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402024:	061a      	lsls	r2, r3, #24
  402026:	d5dd      	bpl.n	401fe4 <__swsetup_r+0x34>
  402028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40202c:	81a3      	strh	r3, [r4, #12]
  40202e:	f04f 30ff 	mov.w	r0, #4294967295
  402032:	bd38      	pop	{r3, r4, r5, pc}
  402034:	4618      	mov	r0, r3
  402036:	f000 f927 	bl	402288 <__sinit>
  40203a:	e7c2      	b.n	401fc2 <__swsetup_r+0x12>
  40203c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40203e:	b151      	cbz	r1, 402056 <__swsetup_r+0xa6>
  402040:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402044:	4299      	cmp	r1, r3
  402046:	d004      	beq.n	402052 <__swsetup_r+0xa2>
  402048:	4628      	mov	r0, r5
  40204a:	f000 fa43 	bl	4024d4 <_free_r>
  40204e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402052:	2300      	movs	r3, #0
  402054:	6323      	str	r3, [r4, #48]	; 0x30
  402056:	2300      	movs	r3, #0
  402058:	6920      	ldr	r0, [r4, #16]
  40205a:	6063      	str	r3, [r4, #4]
  40205c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402060:	6020      	str	r0, [r4, #0]
  402062:	e7c5      	b.n	401ff0 <__swsetup_r+0x40>
  402064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402068:	2309      	movs	r3, #9
  40206a:	602b      	str	r3, [r5, #0]
  40206c:	f04f 30ff 	mov.w	r0, #4294967295
  402070:	81a2      	strh	r2, [r4, #12]
  402072:	bd38      	pop	{r3, r4, r5, pc}
  402074:	204000d0 	.word	0x204000d0

00402078 <register_fini>:
  402078:	4b02      	ldr	r3, [pc, #8]	; (402084 <register_fini+0xc>)
  40207a:	b113      	cbz	r3, 402082 <register_fini+0xa>
  40207c:	4802      	ldr	r0, [pc, #8]	; (402088 <register_fini+0x10>)
  40207e:	f000 b805 	b.w	40208c <atexit>
  402082:	4770      	bx	lr
  402084:	00000000 	.word	0x00000000
  402088:	004022f9 	.word	0x004022f9

0040208c <atexit>:
  40208c:	2300      	movs	r3, #0
  40208e:	4601      	mov	r1, r0
  402090:	461a      	mov	r2, r3
  402092:	4618      	mov	r0, r3
  402094:	f001 bc88 	b.w	4039a8 <__register_exitproc>

00402098 <__sflush_r>:
  402098:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40209c:	b29a      	uxth	r2, r3
  40209e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020a2:	460d      	mov	r5, r1
  4020a4:	0711      	lsls	r1, r2, #28
  4020a6:	4680      	mov	r8, r0
  4020a8:	d43a      	bmi.n	402120 <__sflush_r+0x88>
  4020aa:	686a      	ldr	r2, [r5, #4]
  4020ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4020b0:	2a00      	cmp	r2, #0
  4020b2:	81ab      	strh	r3, [r5, #12]
  4020b4:	dd6f      	ble.n	402196 <__sflush_r+0xfe>
  4020b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4020b8:	2c00      	cmp	r4, #0
  4020ba:	d049      	beq.n	402150 <__sflush_r+0xb8>
  4020bc:	2200      	movs	r2, #0
  4020be:	b29b      	uxth	r3, r3
  4020c0:	f8d8 6000 	ldr.w	r6, [r8]
  4020c4:	f8c8 2000 	str.w	r2, [r8]
  4020c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4020cc:	d067      	beq.n	40219e <__sflush_r+0x106>
  4020ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4020d0:	075f      	lsls	r7, r3, #29
  4020d2:	d505      	bpl.n	4020e0 <__sflush_r+0x48>
  4020d4:	6869      	ldr	r1, [r5, #4]
  4020d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4020d8:	1a52      	subs	r2, r2, r1
  4020da:	b10b      	cbz	r3, 4020e0 <__sflush_r+0x48>
  4020dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4020de:	1ad2      	subs	r2, r2, r3
  4020e0:	2300      	movs	r3, #0
  4020e2:	69e9      	ldr	r1, [r5, #28]
  4020e4:	4640      	mov	r0, r8
  4020e6:	47a0      	blx	r4
  4020e8:	1c44      	adds	r4, r0, #1
  4020ea:	d03c      	beq.n	402166 <__sflush_r+0xce>
  4020ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4020f0:	692a      	ldr	r2, [r5, #16]
  4020f2:	602a      	str	r2, [r5, #0]
  4020f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4020f8:	2200      	movs	r2, #0
  4020fa:	81ab      	strh	r3, [r5, #12]
  4020fc:	04db      	lsls	r3, r3, #19
  4020fe:	606a      	str	r2, [r5, #4]
  402100:	d447      	bmi.n	402192 <__sflush_r+0xfa>
  402102:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402104:	f8c8 6000 	str.w	r6, [r8]
  402108:	b311      	cbz	r1, 402150 <__sflush_r+0xb8>
  40210a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40210e:	4299      	cmp	r1, r3
  402110:	d002      	beq.n	402118 <__sflush_r+0x80>
  402112:	4640      	mov	r0, r8
  402114:	f000 f9de 	bl	4024d4 <_free_r>
  402118:	2000      	movs	r0, #0
  40211a:	6328      	str	r0, [r5, #48]	; 0x30
  40211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402120:	692e      	ldr	r6, [r5, #16]
  402122:	b1ae      	cbz	r6, 402150 <__sflush_r+0xb8>
  402124:	682c      	ldr	r4, [r5, #0]
  402126:	602e      	str	r6, [r5, #0]
  402128:	0791      	lsls	r1, r2, #30
  40212a:	bf0c      	ite	eq
  40212c:	696b      	ldreq	r3, [r5, #20]
  40212e:	2300      	movne	r3, #0
  402130:	1ba4      	subs	r4, r4, r6
  402132:	60ab      	str	r3, [r5, #8]
  402134:	e00a      	b.n	40214c <__sflush_r+0xb4>
  402136:	4623      	mov	r3, r4
  402138:	4632      	mov	r2, r6
  40213a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40213c:	69e9      	ldr	r1, [r5, #28]
  40213e:	4640      	mov	r0, r8
  402140:	47b8      	blx	r7
  402142:	2800      	cmp	r0, #0
  402144:	eba4 0400 	sub.w	r4, r4, r0
  402148:	4406      	add	r6, r0
  40214a:	dd04      	ble.n	402156 <__sflush_r+0xbe>
  40214c:	2c00      	cmp	r4, #0
  40214e:	dcf2      	bgt.n	402136 <__sflush_r+0x9e>
  402150:	2000      	movs	r0, #0
  402152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402156:	89ab      	ldrh	r3, [r5, #12]
  402158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40215c:	81ab      	strh	r3, [r5, #12]
  40215e:	f04f 30ff 	mov.w	r0, #4294967295
  402162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402166:	f8d8 4000 	ldr.w	r4, [r8]
  40216a:	2c1d      	cmp	r4, #29
  40216c:	d8f3      	bhi.n	402156 <__sflush_r+0xbe>
  40216e:	4b19      	ldr	r3, [pc, #100]	; (4021d4 <__sflush_r+0x13c>)
  402170:	40e3      	lsrs	r3, r4
  402172:	43db      	mvns	r3, r3
  402174:	f013 0301 	ands.w	r3, r3, #1
  402178:	d1ed      	bne.n	402156 <__sflush_r+0xbe>
  40217a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40217e:	606b      	str	r3, [r5, #4]
  402180:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402184:	6929      	ldr	r1, [r5, #16]
  402186:	81ab      	strh	r3, [r5, #12]
  402188:	04da      	lsls	r2, r3, #19
  40218a:	6029      	str	r1, [r5, #0]
  40218c:	d5b9      	bpl.n	402102 <__sflush_r+0x6a>
  40218e:	2c00      	cmp	r4, #0
  402190:	d1b7      	bne.n	402102 <__sflush_r+0x6a>
  402192:	6528      	str	r0, [r5, #80]	; 0x50
  402194:	e7b5      	b.n	402102 <__sflush_r+0x6a>
  402196:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402198:	2a00      	cmp	r2, #0
  40219a:	dc8c      	bgt.n	4020b6 <__sflush_r+0x1e>
  40219c:	e7d8      	b.n	402150 <__sflush_r+0xb8>
  40219e:	2301      	movs	r3, #1
  4021a0:	69e9      	ldr	r1, [r5, #28]
  4021a2:	4640      	mov	r0, r8
  4021a4:	47a0      	blx	r4
  4021a6:	1c43      	adds	r3, r0, #1
  4021a8:	4602      	mov	r2, r0
  4021aa:	d002      	beq.n	4021b2 <__sflush_r+0x11a>
  4021ac:	89ab      	ldrh	r3, [r5, #12]
  4021ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4021b0:	e78e      	b.n	4020d0 <__sflush_r+0x38>
  4021b2:	f8d8 3000 	ldr.w	r3, [r8]
  4021b6:	2b00      	cmp	r3, #0
  4021b8:	d0f8      	beq.n	4021ac <__sflush_r+0x114>
  4021ba:	2b1d      	cmp	r3, #29
  4021bc:	d001      	beq.n	4021c2 <__sflush_r+0x12a>
  4021be:	2b16      	cmp	r3, #22
  4021c0:	d102      	bne.n	4021c8 <__sflush_r+0x130>
  4021c2:	f8c8 6000 	str.w	r6, [r8]
  4021c6:	e7c3      	b.n	402150 <__sflush_r+0xb8>
  4021c8:	89ab      	ldrh	r3, [r5, #12]
  4021ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021ce:	81ab      	strh	r3, [r5, #12]
  4021d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021d4:	20400001 	.word	0x20400001

004021d8 <_fflush_r>:
  4021d8:	b538      	push	{r3, r4, r5, lr}
  4021da:	460d      	mov	r5, r1
  4021dc:	4604      	mov	r4, r0
  4021de:	b108      	cbz	r0, 4021e4 <_fflush_r+0xc>
  4021e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4021e2:	b1bb      	cbz	r3, 402214 <_fflush_r+0x3c>
  4021e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4021e8:	b188      	cbz	r0, 40220e <_fflush_r+0x36>
  4021ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4021ec:	07db      	lsls	r3, r3, #31
  4021ee:	d401      	bmi.n	4021f4 <_fflush_r+0x1c>
  4021f0:	0581      	lsls	r1, r0, #22
  4021f2:	d517      	bpl.n	402224 <_fflush_r+0x4c>
  4021f4:	4620      	mov	r0, r4
  4021f6:	4629      	mov	r1, r5
  4021f8:	f7ff ff4e 	bl	402098 <__sflush_r>
  4021fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4021fe:	07da      	lsls	r2, r3, #31
  402200:	4604      	mov	r4, r0
  402202:	d402      	bmi.n	40220a <_fflush_r+0x32>
  402204:	89ab      	ldrh	r3, [r5, #12]
  402206:	059b      	lsls	r3, r3, #22
  402208:	d507      	bpl.n	40221a <_fflush_r+0x42>
  40220a:	4620      	mov	r0, r4
  40220c:	bd38      	pop	{r3, r4, r5, pc}
  40220e:	4604      	mov	r4, r0
  402210:	4620      	mov	r0, r4
  402212:	bd38      	pop	{r3, r4, r5, pc}
  402214:	f000 f838 	bl	402288 <__sinit>
  402218:	e7e4      	b.n	4021e4 <_fflush_r+0xc>
  40221a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40221c:	f000 fbf6 	bl	402a0c <__retarget_lock_release_recursive>
  402220:	4620      	mov	r0, r4
  402222:	bd38      	pop	{r3, r4, r5, pc}
  402224:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402226:	f000 fbef 	bl	402a08 <__retarget_lock_acquire_recursive>
  40222a:	e7e3      	b.n	4021f4 <_fflush_r+0x1c>

0040222c <_cleanup_r>:
  40222c:	4901      	ldr	r1, [pc, #4]	; (402234 <_cleanup_r+0x8>)
  40222e:	f000 bbaf 	b.w	402990 <_fwalk_reent>
  402232:	bf00      	nop
  402234:	00403a91 	.word	0x00403a91

00402238 <std.isra.0>:
  402238:	b510      	push	{r4, lr}
  40223a:	2300      	movs	r3, #0
  40223c:	4604      	mov	r4, r0
  40223e:	8181      	strh	r1, [r0, #12]
  402240:	81c2      	strh	r2, [r0, #14]
  402242:	6003      	str	r3, [r0, #0]
  402244:	6043      	str	r3, [r0, #4]
  402246:	6083      	str	r3, [r0, #8]
  402248:	6643      	str	r3, [r0, #100]	; 0x64
  40224a:	6103      	str	r3, [r0, #16]
  40224c:	6143      	str	r3, [r0, #20]
  40224e:	6183      	str	r3, [r0, #24]
  402250:	4619      	mov	r1, r3
  402252:	2208      	movs	r2, #8
  402254:	305c      	adds	r0, #92	; 0x5c
  402256:	f7fe fec3 	bl	400fe0 <memset>
  40225a:	4807      	ldr	r0, [pc, #28]	; (402278 <std.isra.0+0x40>)
  40225c:	4907      	ldr	r1, [pc, #28]	; (40227c <std.isra.0+0x44>)
  40225e:	4a08      	ldr	r2, [pc, #32]	; (402280 <std.isra.0+0x48>)
  402260:	4b08      	ldr	r3, [pc, #32]	; (402284 <std.isra.0+0x4c>)
  402262:	6220      	str	r0, [r4, #32]
  402264:	61e4      	str	r4, [r4, #28]
  402266:	6261      	str	r1, [r4, #36]	; 0x24
  402268:	62a2      	str	r2, [r4, #40]	; 0x28
  40226a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40226c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402274:	f000 bbc4 	b.w	402a00 <__retarget_lock_init_recursive>
  402278:	004036c5 	.word	0x004036c5
  40227c:	004036e9 	.word	0x004036e9
  402280:	00403725 	.word	0x00403725
  402284:	00403745 	.word	0x00403745

00402288 <__sinit>:
  402288:	b510      	push	{r4, lr}
  40228a:	4604      	mov	r4, r0
  40228c:	4812      	ldr	r0, [pc, #72]	; (4022d8 <__sinit+0x50>)
  40228e:	f000 fbbb 	bl	402a08 <__retarget_lock_acquire_recursive>
  402292:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402294:	b9d2      	cbnz	r2, 4022cc <__sinit+0x44>
  402296:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40229a:	4810      	ldr	r0, [pc, #64]	; (4022dc <__sinit+0x54>)
  40229c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4022a0:	2103      	movs	r1, #3
  4022a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4022a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4022a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4022ac:	6860      	ldr	r0, [r4, #4]
  4022ae:	2104      	movs	r1, #4
  4022b0:	f7ff ffc2 	bl	402238 <std.isra.0>
  4022b4:	2201      	movs	r2, #1
  4022b6:	2109      	movs	r1, #9
  4022b8:	68a0      	ldr	r0, [r4, #8]
  4022ba:	f7ff ffbd 	bl	402238 <std.isra.0>
  4022be:	2202      	movs	r2, #2
  4022c0:	2112      	movs	r1, #18
  4022c2:	68e0      	ldr	r0, [r4, #12]
  4022c4:	f7ff ffb8 	bl	402238 <std.isra.0>
  4022c8:	2301      	movs	r3, #1
  4022ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4022cc:	4802      	ldr	r0, [pc, #8]	; (4022d8 <__sinit+0x50>)
  4022ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4022d2:	f000 bb9b 	b.w	402a0c <__retarget_lock_release_recursive>
  4022d6:	bf00      	nop
  4022d8:	20400cac 	.word	0x20400cac
  4022dc:	0040222d 	.word	0x0040222d

004022e0 <__sfp_lock_acquire>:
  4022e0:	4801      	ldr	r0, [pc, #4]	; (4022e8 <__sfp_lock_acquire+0x8>)
  4022e2:	f000 bb91 	b.w	402a08 <__retarget_lock_acquire_recursive>
  4022e6:	bf00      	nop
  4022e8:	20400cc0 	.word	0x20400cc0

004022ec <__sfp_lock_release>:
  4022ec:	4801      	ldr	r0, [pc, #4]	; (4022f4 <__sfp_lock_release+0x8>)
  4022ee:	f000 bb8d 	b.w	402a0c <__retarget_lock_release_recursive>
  4022f2:	bf00      	nop
  4022f4:	20400cc0 	.word	0x20400cc0

004022f8 <__libc_fini_array>:
  4022f8:	b538      	push	{r3, r4, r5, lr}
  4022fa:	4c0a      	ldr	r4, [pc, #40]	; (402324 <__libc_fini_array+0x2c>)
  4022fc:	4d0a      	ldr	r5, [pc, #40]	; (402328 <__libc_fini_array+0x30>)
  4022fe:	1b64      	subs	r4, r4, r5
  402300:	10a4      	asrs	r4, r4, #2
  402302:	d00a      	beq.n	40231a <__libc_fini_array+0x22>
  402304:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402308:	3b01      	subs	r3, #1
  40230a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40230e:	3c01      	subs	r4, #1
  402310:	f855 3904 	ldr.w	r3, [r5], #-4
  402314:	4798      	blx	r3
  402316:	2c00      	cmp	r4, #0
  402318:	d1f9      	bne.n	40230e <__libc_fini_array+0x16>
  40231a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40231e:	f001 befd 	b.w	40411c <_fini>
  402322:	bf00      	nop
  402324:	0040412c 	.word	0x0040412c
  402328:	00404128 	.word	0x00404128

0040232c <__fputwc>:
  40232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402330:	b082      	sub	sp, #8
  402332:	4680      	mov	r8, r0
  402334:	4689      	mov	r9, r1
  402336:	4614      	mov	r4, r2
  402338:	f000 fb54 	bl	4029e4 <__locale_mb_cur_max>
  40233c:	2801      	cmp	r0, #1
  40233e:	d036      	beq.n	4023ae <__fputwc+0x82>
  402340:	464a      	mov	r2, r9
  402342:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402346:	a901      	add	r1, sp, #4
  402348:	4640      	mov	r0, r8
  40234a:	f001 fadf 	bl	40390c <_wcrtomb_r>
  40234e:	1c42      	adds	r2, r0, #1
  402350:	4606      	mov	r6, r0
  402352:	d025      	beq.n	4023a0 <__fputwc+0x74>
  402354:	b3a8      	cbz	r0, 4023c2 <__fputwc+0x96>
  402356:	f89d e004 	ldrb.w	lr, [sp, #4]
  40235a:	2500      	movs	r5, #0
  40235c:	f10d 0a04 	add.w	sl, sp, #4
  402360:	e009      	b.n	402376 <__fputwc+0x4a>
  402362:	6823      	ldr	r3, [r4, #0]
  402364:	1c5a      	adds	r2, r3, #1
  402366:	6022      	str	r2, [r4, #0]
  402368:	f883 e000 	strb.w	lr, [r3]
  40236c:	3501      	adds	r5, #1
  40236e:	42b5      	cmp	r5, r6
  402370:	d227      	bcs.n	4023c2 <__fputwc+0x96>
  402372:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402376:	68a3      	ldr	r3, [r4, #8]
  402378:	3b01      	subs	r3, #1
  40237a:	2b00      	cmp	r3, #0
  40237c:	60a3      	str	r3, [r4, #8]
  40237e:	daf0      	bge.n	402362 <__fputwc+0x36>
  402380:	69a7      	ldr	r7, [r4, #24]
  402382:	42bb      	cmp	r3, r7
  402384:	4671      	mov	r1, lr
  402386:	4622      	mov	r2, r4
  402388:	4640      	mov	r0, r8
  40238a:	db02      	blt.n	402392 <__fputwc+0x66>
  40238c:	f1be 0f0a 	cmp.w	lr, #10
  402390:	d1e7      	bne.n	402362 <__fputwc+0x36>
  402392:	f001 fa63 	bl	40385c <__swbuf_r>
  402396:	1c43      	adds	r3, r0, #1
  402398:	d1e8      	bne.n	40236c <__fputwc+0x40>
  40239a:	b002      	add	sp, #8
  40239c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023a0:	89a3      	ldrh	r3, [r4, #12]
  4023a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023a6:	81a3      	strh	r3, [r4, #12]
  4023a8:	b002      	add	sp, #8
  4023aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4023b2:	2bfe      	cmp	r3, #254	; 0xfe
  4023b4:	d8c4      	bhi.n	402340 <__fputwc+0x14>
  4023b6:	fa5f fe89 	uxtb.w	lr, r9
  4023ba:	4606      	mov	r6, r0
  4023bc:	f88d e004 	strb.w	lr, [sp, #4]
  4023c0:	e7cb      	b.n	40235a <__fputwc+0x2e>
  4023c2:	4648      	mov	r0, r9
  4023c4:	b002      	add	sp, #8
  4023c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023ca:	bf00      	nop

004023cc <_fputwc_r>:
  4023cc:	b530      	push	{r4, r5, lr}
  4023ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4023d0:	f013 0f01 	tst.w	r3, #1
  4023d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4023d8:	4614      	mov	r4, r2
  4023da:	b083      	sub	sp, #12
  4023dc:	4605      	mov	r5, r0
  4023de:	b29a      	uxth	r2, r3
  4023e0:	d101      	bne.n	4023e6 <_fputwc_r+0x1a>
  4023e2:	0590      	lsls	r0, r2, #22
  4023e4:	d51c      	bpl.n	402420 <_fputwc_r+0x54>
  4023e6:	0490      	lsls	r0, r2, #18
  4023e8:	d406      	bmi.n	4023f8 <_fputwc_r+0x2c>
  4023ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4023ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4023f4:	81a3      	strh	r3, [r4, #12]
  4023f6:	6662      	str	r2, [r4, #100]	; 0x64
  4023f8:	4628      	mov	r0, r5
  4023fa:	4622      	mov	r2, r4
  4023fc:	f7ff ff96 	bl	40232c <__fputwc>
  402400:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402402:	07da      	lsls	r2, r3, #31
  402404:	4605      	mov	r5, r0
  402406:	d402      	bmi.n	40240e <_fputwc_r+0x42>
  402408:	89a3      	ldrh	r3, [r4, #12]
  40240a:	059b      	lsls	r3, r3, #22
  40240c:	d502      	bpl.n	402414 <_fputwc_r+0x48>
  40240e:	4628      	mov	r0, r5
  402410:	b003      	add	sp, #12
  402412:	bd30      	pop	{r4, r5, pc}
  402414:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402416:	f000 faf9 	bl	402a0c <__retarget_lock_release_recursive>
  40241a:	4628      	mov	r0, r5
  40241c:	b003      	add	sp, #12
  40241e:	bd30      	pop	{r4, r5, pc}
  402420:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402422:	9101      	str	r1, [sp, #4]
  402424:	f000 faf0 	bl	402a08 <__retarget_lock_acquire_recursive>
  402428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40242c:	9901      	ldr	r1, [sp, #4]
  40242e:	b29a      	uxth	r2, r3
  402430:	e7d9      	b.n	4023e6 <_fputwc_r+0x1a>
  402432:	bf00      	nop

00402434 <_malloc_trim_r>:
  402434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402436:	4f24      	ldr	r7, [pc, #144]	; (4024c8 <_malloc_trim_r+0x94>)
  402438:	460c      	mov	r4, r1
  40243a:	4606      	mov	r6, r0
  40243c:	f000 ff7e 	bl	40333c <__malloc_lock>
  402440:	68bb      	ldr	r3, [r7, #8]
  402442:	685d      	ldr	r5, [r3, #4]
  402444:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402448:	310f      	adds	r1, #15
  40244a:	f025 0503 	bic.w	r5, r5, #3
  40244e:	4429      	add	r1, r5
  402450:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402454:	f021 010f 	bic.w	r1, r1, #15
  402458:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40245c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402460:	db07      	blt.n	402472 <_malloc_trim_r+0x3e>
  402462:	2100      	movs	r1, #0
  402464:	4630      	mov	r0, r6
  402466:	f001 f91b 	bl	4036a0 <_sbrk_r>
  40246a:	68bb      	ldr	r3, [r7, #8]
  40246c:	442b      	add	r3, r5
  40246e:	4298      	cmp	r0, r3
  402470:	d004      	beq.n	40247c <_malloc_trim_r+0x48>
  402472:	4630      	mov	r0, r6
  402474:	f000 ff68 	bl	403348 <__malloc_unlock>
  402478:	2000      	movs	r0, #0
  40247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40247c:	4261      	negs	r1, r4
  40247e:	4630      	mov	r0, r6
  402480:	f001 f90e 	bl	4036a0 <_sbrk_r>
  402484:	3001      	adds	r0, #1
  402486:	d00d      	beq.n	4024a4 <_malloc_trim_r+0x70>
  402488:	4b10      	ldr	r3, [pc, #64]	; (4024cc <_malloc_trim_r+0x98>)
  40248a:	68ba      	ldr	r2, [r7, #8]
  40248c:	6819      	ldr	r1, [r3, #0]
  40248e:	1b2d      	subs	r5, r5, r4
  402490:	f045 0501 	orr.w	r5, r5, #1
  402494:	4630      	mov	r0, r6
  402496:	1b09      	subs	r1, r1, r4
  402498:	6055      	str	r5, [r2, #4]
  40249a:	6019      	str	r1, [r3, #0]
  40249c:	f000 ff54 	bl	403348 <__malloc_unlock>
  4024a0:	2001      	movs	r0, #1
  4024a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024a4:	2100      	movs	r1, #0
  4024a6:	4630      	mov	r0, r6
  4024a8:	f001 f8fa 	bl	4036a0 <_sbrk_r>
  4024ac:	68ba      	ldr	r2, [r7, #8]
  4024ae:	1a83      	subs	r3, r0, r2
  4024b0:	2b0f      	cmp	r3, #15
  4024b2:	ddde      	ble.n	402472 <_malloc_trim_r+0x3e>
  4024b4:	4c06      	ldr	r4, [pc, #24]	; (4024d0 <_malloc_trim_r+0x9c>)
  4024b6:	4905      	ldr	r1, [pc, #20]	; (4024cc <_malloc_trim_r+0x98>)
  4024b8:	6824      	ldr	r4, [r4, #0]
  4024ba:	f043 0301 	orr.w	r3, r3, #1
  4024be:	1b00      	subs	r0, r0, r4
  4024c0:	6053      	str	r3, [r2, #4]
  4024c2:	6008      	str	r0, [r1, #0]
  4024c4:	e7d5      	b.n	402472 <_malloc_trim_r+0x3e>
  4024c6:	bf00      	nop
  4024c8:	20400670 	.word	0x20400670
  4024cc:	20400b14 	.word	0x20400b14
  4024d0:	20400a78 	.word	0x20400a78

004024d4 <_free_r>:
  4024d4:	2900      	cmp	r1, #0
  4024d6:	d044      	beq.n	402562 <_free_r+0x8e>
  4024d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4024dc:	460d      	mov	r5, r1
  4024de:	4680      	mov	r8, r0
  4024e0:	f000 ff2c 	bl	40333c <__malloc_lock>
  4024e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4024e8:	4969      	ldr	r1, [pc, #420]	; (402690 <_free_r+0x1bc>)
  4024ea:	f027 0301 	bic.w	r3, r7, #1
  4024ee:	f1a5 0408 	sub.w	r4, r5, #8
  4024f2:	18e2      	adds	r2, r4, r3
  4024f4:	688e      	ldr	r6, [r1, #8]
  4024f6:	6850      	ldr	r0, [r2, #4]
  4024f8:	42b2      	cmp	r2, r6
  4024fa:	f020 0003 	bic.w	r0, r0, #3
  4024fe:	d05e      	beq.n	4025be <_free_r+0xea>
  402500:	07fe      	lsls	r6, r7, #31
  402502:	6050      	str	r0, [r2, #4]
  402504:	d40b      	bmi.n	40251e <_free_r+0x4a>
  402506:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40250a:	1be4      	subs	r4, r4, r7
  40250c:	f101 0e08 	add.w	lr, r1, #8
  402510:	68a5      	ldr	r5, [r4, #8]
  402512:	4575      	cmp	r5, lr
  402514:	443b      	add	r3, r7
  402516:	d06d      	beq.n	4025f4 <_free_r+0x120>
  402518:	68e7      	ldr	r7, [r4, #12]
  40251a:	60ef      	str	r7, [r5, #12]
  40251c:	60bd      	str	r5, [r7, #8]
  40251e:	1815      	adds	r5, r2, r0
  402520:	686d      	ldr	r5, [r5, #4]
  402522:	07ed      	lsls	r5, r5, #31
  402524:	d53e      	bpl.n	4025a4 <_free_r+0xd0>
  402526:	f043 0201 	orr.w	r2, r3, #1
  40252a:	6062      	str	r2, [r4, #4]
  40252c:	50e3      	str	r3, [r4, r3]
  40252e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402532:	d217      	bcs.n	402564 <_free_r+0x90>
  402534:	08db      	lsrs	r3, r3, #3
  402536:	1c58      	adds	r0, r3, #1
  402538:	109a      	asrs	r2, r3, #2
  40253a:	684d      	ldr	r5, [r1, #4]
  40253c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402540:	60a7      	str	r7, [r4, #8]
  402542:	2301      	movs	r3, #1
  402544:	4093      	lsls	r3, r2
  402546:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40254a:	432b      	orrs	r3, r5
  40254c:	3a08      	subs	r2, #8
  40254e:	60e2      	str	r2, [r4, #12]
  402550:	604b      	str	r3, [r1, #4]
  402552:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402556:	60fc      	str	r4, [r7, #12]
  402558:	4640      	mov	r0, r8
  40255a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40255e:	f000 bef3 	b.w	403348 <__malloc_unlock>
  402562:	4770      	bx	lr
  402564:	0a5a      	lsrs	r2, r3, #9
  402566:	2a04      	cmp	r2, #4
  402568:	d852      	bhi.n	402610 <_free_r+0x13c>
  40256a:	099a      	lsrs	r2, r3, #6
  40256c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402570:	00ff      	lsls	r7, r7, #3
  402572:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402576:	19c8      	adds	r0, r1, r7
  402578:	59ca      	ldr	r2, [r1, r7]
  40257a:	3808      	subs	r0, #8
  40257c:	4290      	cmp	r0, r2
  40257e:	d04f      	beq.n	402620 <_free_r+0x14c>
  402580:	6851      	ldr	r1, [r2, #4]
  402582:	f021 0103 	bic.w	r1, r1, #3
  402586:	428b      	cmp	r3, r1
  402588:	d232      	bcs.n	4025f0 <_free_r+0x11c>
  40258a:	6892      	ldr	r2, [r2, #8]
  40258c:	4290      	cmp	r0, r2
  40258e:	d1f7      	bne.n	402580 <_free_r+0xac>
  402590:	68c3      	ldr	r3, [r0, #12]
  402592:	60a0      	str	r0, [r4, #8]
  402594:	60e3      	str	r3, [r4, #12]
  402596:	609c      	str	r4, [r3, #8]
  402598:	60c4      	str	r4, [r0, #12]
  40259a:	4640      	mov	r0, r8
  40259c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4025a0:	f000 bed2 	b.w	403348 <__malloc_unlock>
  4025a4:	6895      	ldr	r5, [r2, #8]
  4025a6:	4f3b      	ldr	r7, [pc, #236]	; (402694 <_free_r+0x1c0>)
  4025a8:	42bd      	cmp	r5, r7
  4025aa:	4403      	add	r3, r0
  4025ac:	d040      	beq.n	402630 <_free_r+0x15c>
  4025ae:	68d0      	ldr	r0, [r2, #12]
  4025b0:	60e8      	str	r0, [r5, #12]
  4025b2:	f043 0201 	orr.w	r2, r3, #1
  4025b6:	6085      	str	r5, [r0, #8]
  4025b8:	6062      	str	r2, [r4, #4]
  4025ba:	50e3      	str	r3, [r4, r3]
  4025bc:	e7b7      	b.n	40252e <_free_r+0x5a>
  4025be:	07ff      	lsls	r7, r7, #31
  4025c0:	4403      	add	r3, r0
  4025c2:	d407      	bmi.n	4025d4 <_free_r+0x100>
  4025c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4025c8:	1aa4      	subs	r4, r4, r2
  4025ca:	4413      	add	r3, r2
  4025cc:	68a0      	ldr	r0, [r4, #8]
  4025ce:	68e2      	ldr	r2, [r4, #12]
  4025d0:	60c2      	str	r2, [r0, #12]
  4025d2:	6090      	str	r0, [r2, #8]
  4025d4:	4a30      	ldr	r2, [pc, #192]	; (402698 <_free_r+0x1c4>)
  4025d6:	6812      	ldr	r2, [r2, #0]
  4025d8:	f043 0001 	orr.w	r0, r3, #1
  4025dc:	4293      	cmp	r3, r2
  4025de:	6060      	str	r0, [r4, #4]
  4025e0:	608c      	str	r4, [r1, #8]
  4025e2:	d3b9      	bcc.n	402558 <_free_r+0x84>
  4025e4:	4b2d      	ldr	r3, [pc, #180]	; (40269c <_free_r+0x1c8>)
  4025e6:	4640      	mov	r0, r8
  4025e8:	6819      	ldr	r1, [r3, #0]
  4025ea:	f7ff ff23 	bl	402434 <_malloc_trim_r>
  4025ee:	e7b3      	b.n	402558 <_free_r+0x84>
  4025f0:	4610      	mov	r0, r2
  4025f2:	e7cd      	b.n	402590 <_free_r+0xbc>
  4025f4:	1811      	adds	r1, r2, r0
  4025f6:	6849      	ldr	r1, [r1, #4]
  4025f8:	07c9      	lsls	r1, r1, #31
  4025fa:	d444      	bmi.n	402686 <_free_r+0x1b2>
  4025fc:	6891      	ldr	r1, [r2, #8]
  4025fe:	68d2      	ldr	r2, [r2, #12]
  402600:	60ca      	str	r2, [r1, #12]
  402602:	4403      	add	r3, r0
  402604:	f043 0001 	orr.w	r0, r3, #1
  402608:	6091      	str	r1, [r2, #8]
  40260a:	6060      	str	r0, [r4, #4]
  40260c:	50e3      	str	r3, [r4, r3]
  40260e:	e7a3      	b.n	402558 <_free_r+0x84>
  402610:	2a14      	cmp	r2, #20
  402612:	d816      	bhi.n	402642 <_free_r+0x16e>
  402614:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402618:	00ff      	lsls	r7, r7, #3
  40261a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40261e:	e7aa      	b.n	402576 <_free_r+0xa2>
  402620:	10aa      	asrs	r2, r5, #2
  402622:	2301      	movs	r3, #1
  402624:	684d      	ldr	r5, [r1, #4]
  402626:	4093      	lsls	r3, r2
  402628:	432b      	orrs	r3, r5
  40262a:	604b      	str	r3, [r1, #4]
  40262c:	4603      	mov	r3, r0
  40262e:	e7b0      	b.n	402592 <_free_r+0xbe>
  402630:	f043 0201 	orr.w	r2, r3, #1
  402634:	614c      	str	r4, [r1, #20]
  402636:	610c      	str	r4, [r1, #16]
  402638:	60e5      	str	r5, [r4, #12]
  40263a:	60a5      	str	r5, [r4, #8]
  40263c:	6062      	str	r2, [r4, #4]
  40263e:	50e3      	str	r3, [r4, r3]
  402640:	e78a      	b.n	402558 <_free_r+0x84>
  402642:	2a54      	cmp	r2, #84	; 0x54
  402644:	d806      	bhi.n	402654 <_free_r+0x180>
  402646:	0b1a      	lsrs	r2, r3, #12
  402648:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40264c:	00ff      	lsls	r7, r7, #3
  40264e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402652:	e790      	b.n	402576 <_free_r+0xa2>
  402654:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402658:	d806      	bhi.n	402668 <_free_r+0x194>
  40265a:	0bda      	lsrs	r2, r3, #15
  40265c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402660:	00ff      	lsls	r7, r7, #3
  402662:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402666:	e786      	b.n	402576 <_free_r+0xa2>
  402668:	f240 5054 	movw	r0, #1364	; 0x554
  40266c:	4282      	cmp	r2, r0
  40266e:	d806      	bhi.n	40267e <_free_r+0x1aa>
  402670:	0c9a      	lsrs	r2, r3, #18
  402672:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402676:	00ff      	lsls	r7, r7, #3
  402678:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40267c:	e77b      	b.n	402576 <_free_r+0xa2>
  40267e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402682:	257e      	movs	r5, #126	; 0x7e
  402684:	e777      	b.n	402576 <_free_r+0xa2>
  402686:	f043 0101 	orr.w	r1, r3, #1
  40268a:	6061      	str	r1, [r4, #4]
  40268c:	6013      	str	r3, [r2, #0]
  40268e:	e763      	b.n	402558 <_free_r+0x84>
  402690:	20400670 	.word	0x20400670
  402694:	20400678 	.word	0x20400678
  402698:	20400a7c 	.word	0x20400a7c
  40269c:	20400b44 	.word	0x20400b44

004026a0 <__sfvwrite_r>:
  4026a0:	6893      	ldr	r3, [r2, #8]
  4026a2:	2b00      	cmp	r3, #0
  4026a4:	d073      	beq.n	40278e <__sfvwrite_r+0xee>
  4026a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026aa:	898b      	ldrh	r3, [r1, #12]
  4026ac:	b083      	sub	sp, #12
  4026ae:	460c      	mov	r4, r1
  4026b0:	0719      	lsls	r1, r3, #28
  4026b2:	9000      	str	r0, [sp, #0]
  4026b4:	4616      	mov	r6, r2
  4026b6:	d526      	bpl.n	402706 <__sfvwrite_r+0x66>
  4026b8:	6922      	ldr	r2, [r4, #16]
  4026ba:	b322      	cbz	r2, 402706 <__sfvwrite_r+0x66>
  4026bc:	f013 0002 	ands.w	r0, r3, #2
  4026c0:	6835      	ldr	r5, [r6, #0]
  4026c2:	d02c      	beq.n	40271e <__sfvwrite_r+0x7e>
  4026c4:	f04f 0900 	mov.w	r9, #0
  4026c8:	4fb0      	ldr	r7, [pc, #704]	; (40298c <__sfvwrite_r+0x2ec>)
  4026ca:	46c8      	mov	r8, r9
  4026cc:	46b2      	mov	sl, r6
  4026ce:	45b8      	cmp	r8, r7
  4026d0:	4643      	mov	r3, r8
  4026d2:	464a      	mov	r2, r9
  4026d4:	bf28      	it	cs
  4026d6:	463b      	movcs	r3, r7
  4026d8:	9800      	ldr	r0, [sp, #0]
  4026da:	f1b8 0f00 	cmp.w	r8, #0
  4026de:	d050      	beq.n	402782 <__sfvwrite_r+0xe2>
  4026e0:	69e1      	ldr	r1, [r4, #28]
  4026e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4026e4:	47b0      	blx	r6
  4026e6:	2800      	cmp	r0, #0
  4026e8:	dd58      	ble.n	40279c <__sfvwrite_r+0xfc>
  4026ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4026ee:	1a1b      	subs	r3, r3, r0
  4026f0:	4481      	add	r9, r0
  4026f2:	eba8 0800 	sub.w	r8, r8, r0
  4026f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4026fa:	2b00      	cmp	r3, #0
  4026fc:	d1e7      	bne.n	4026ce <__sfvwrite_r+0x2e>
  4026fe:	2000      	movs	r0, #0
  402700:	b003      	add	sp, #12
  402702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402706:	4621      	mov	r1, r4
  402708:	9800      	ldr	r0, [sp, #0]
  40270a:	f7ff fc51 	bl	401fb0 <__swsetup_r>
  40270e:	2800      	cmp	r0, #0
  402710:	f040 8133 	bne.w	40297a <__sfvwrite_r+0x2da>
  402714:	89a3      	ldrh	r3, [r4, #12]
  402716:	6835      	ldr	r5, [r6, #0]
  402718:	f013 0002 	ands.w	r0, r3, #2
  40271c:	d1d2      	bne.n	4026c4 <__sfvwrite_r+0x24>
  40271e:	f013 0901 	ands.w	r9, r3, #1
  402722:	d145      	bne.n	4027b0 <__sfvwrite_r+0x110>
  402724:	464f      	mov	r7, r9
  402726:	9601      	str	r6, [sp, #4]
  402728:	b337      	cbz	r7, 402778 <__sfvwrite_r+0xd8>
  40272a:	059a      	lsls	r2, r3, #22
  40272c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402730:	f140 8083 	bpl.w	40283a <__sfvwrite_r+0x19a>
  402734:	4547      	cmp	r7, r8
  402736:	46c3      	mov	fp, r8
  402738:	f0c0 80ab 	bcc.w	402892 <__sfvwrite_r+0x1f2>
  40273c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402740:	f040 80ac 	bne.w	40289c <__sfvwrite_r+0x1fc>
  402744:	6820      	ldr	r0, [r4, #0]
  402746:	46ba      	mov	sl, r7
  402748:	465a      	mov	r2, fp
  40274a:	4649      	mov	r1, r9
  40274c:	f000 fd92 	bl	403274 <memmove>
  402750:	68a2      	ldr	r2, [r4, #8]
  402752:	6823      	ldr	r3, [r4, #0]
  402754:	eba2 0208 	sub.w	r2, r2, r8
  402758:	445b      	add	r3, fp
  40275a:	60a2      	str	r2, [r4, #8]
  40275c:	6023      	str	r3, [r4, #0]
  40275e:	9a01      	ldr	r2, [sp, #4]
  402760:	6893      	ldr	r3, [r2, #8]
  402762:	eba3 030a 	sub.w	r3, r3, sl
  402766:	44d1      	add	r9, sl
  402768:	eba7 070a 	sub.w	r7, r7, sl
  40276c:	6093      	str	r3, [r2, #8]
  40276e:	2b00      	cmp	r3, #0
  402770:	d0c5      	beq.n	4026fe <__sfvwrite_r+0x5e>
  402772:	89a3      	ldrh	r3, [r4, #12]
  402774:	2f00      	cmp	r7, #0
  402776:	d1d8      	bne.n	40272a <__sfvwrite_r+0x8a>
  402778:	f8d5 9000 	ldr.w	r9, [r5]
  40277c:	686f      	ldr	r7, [r5, #4]
  40277e:	3508      	adds	r5, #8
  402780:	e7d2      	b.n	402728 <__sfvwrite_r+0x88>
  402782:	f8d5 9000 	ldr.w	r9, [r5]
  402786:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40278a:	3508      	adds	r5, #8
  40278c:	e79f      	b.n	4026ce <__sfvwrite_r+0x2e>
  40278e:	2000      	movs	r0, #0
  402790:	4770      	bx	lr
  402792:	4621      	mov	r1, r4
  402794:	9800      	ldr	r0, [sp, #0]
  402796:	f7ff fd1f 	bl	4021d8 <_fflush_r>
  40279a:	b370      	cbz	r0, 4027fa <__sfvwrite_r+0x15a>
  40279c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027a4:	f04f 30ff 	mov.w	r0, #4294967295
  4027a8:	81a3      	strh	r3, [r4, #12]
  4027aa:	b003      	add	sp, #12
  4027ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027b0:	4681      	mov	r9, r0
  4027b2:	4633      	mov	r3, r6
  4027b4:	464e      	mov	r6, r9
  4027b6:	46a8      	mov	r8, r5
  4027b8:	469a      	mov	sl, r3
  4027ba:	464d      	mov	r5, r9
  4027bc:	b34e      	cbz	r6, 402812 <__sfvwrite_r+0x172>
  4027be:	b380      	cbz	r0, 402822 <__sfvwrite_r+0x182>
  4027c0:	6820      	ldr	r0, [r4, #0]
  4027c2:	6923      	ldr	r3, [r4, #16]
  4027c4:	6962      	ldr	r2, [r4, #20]
  4027c6:	45b1      	cmp	r9, r6
  4027c8:	46cb      	mov	fp, r9
  4027ca:	bf28      	it	cs
  4027cc:	46b3      	movcs	fp, r6
  4027ce:	4298      	cmp	r0, r3
  4027d0:	465f      	mov	r7, fp
  4027d2:	d904      	bls.n	4027de <__sfvwrite_r+0x13e>
  4027d4:	68a3      	ldr	r3, [r4, #8]
  4027d6:	4413      	add	r3, r2
  4027d8:	459b      	cmp	fp, r3
  4027da:	f300 80a6 	bgt.w	40292a <__sfvwrite_r+0x28a>
  4027de:	4593      	cmp	fp, r2
  4027e0:	db4b      	blt.n	40287a <__sfvwrite_r+0x1da>
  4027e2:	4613      	mov	r3, r2
  4027e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4027e6:	69e1      	ldr	r1, [r4, #28]
  4027e8:	9800      	ldr	r0, [sp, #0]
  4027ea:	462a      	mov	r2, r5
  4027ec:	47b8      	blx	r7
  4027ee:	1e07      	subs	r7, r0, #0
  4027f0:	ddd4      	ble.n	40279c <__sfvwrite_r+0xfc>
  4027f2:	ebb9 0907 	subs.w	r9, r9, r7
  4027f6:	d0cc      	beq.n	402792 <__sfvwrite_r+0xf2>
  4027f8:	2001      	movs	r0, #1
  4027fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4027fe:	1bdb      	subs	r3, r3, r7
  402800:	443d      	add	r5, r7
  402802:	1bf6      	subs	r6, r6, r7
  402804:	f8ca 3008 	str.w	r3, [sl, #8]
  402808:	2b00      	cmp	r3, #0
  40280a:	f43f af78 	beq.w	4026fe <__sfvwrite_r+0x5e>
  40280e:	2e00      	cmp	r6, #0
  402810:	d1d5      	bne.n	4027be <__sfvwrite_r+0x11e>
  402812:	f108 0308 	add.w	r3, r8, #8
  402816:	e913 0060 	ldmdb	r3, {r5, r6}
  40281a:	4698      	mov	r8, r3
  40281c:	3308      	adds	r3, #8
  40281e:	2e00      	cmp	r6, #0
  402820:	d0f9      	beq.n	402816 <__sfvwrite_r+0x176>
  402822:	4632      	mov	r2, r6
  402824:	210a      	movs	r1, #10
  402826:	4628      	mov	r0, r5
  402828:	f000 fc3a 	bl	4030a0 <memchr>
  40282c:	2800      	cmp	r0, #0
  40282e:	f000 80a1 	beq.w	402974 <__sfvwrite_r+0x2d4>
  402832:	3001      	adds	r0, #1
  402834:	eba0 0905 	sub.w	r9, r0, r5
  402838:	e7c2      	b.n	4027c0 <__sfvwrite_r+0x120>
  40283a:	6820      	ldr	r0, [r4, #0]
  40283c:	6923      	ldr	r3, [r4, #16]
  40283e:	4298      	cmp	r0, r3
  402840:	d802      	bhi.n	402848 <__sfvwrite_r+0x1a8>
  402842:	6963      	ldr	r3, [r4, #20]
  402844:	429f      	cmp	r7, r3
  402846:	d25d      	bcs.n	402904 <__sfvwrite_r+0x264>
  402848:	45b8      	cmp	r8, r7
  40284a:	bf28      	it	cs
  40284c:	46b8      	movcs	r8, r7
  40284e:	4642      	mov	r2, r8
  402850:	4649      	mov	r1, r9
  402852:	f000 fd0f 	bl	403274 <memmove>
  402856:	68a3      	ldr	r3, [r4, #8]
  402858:	6822      	ldr	r2, [r4, #0]
  40285a:	eba3 0308 	sub.w	r3, r3, r8
  40285e:	4442      	add	r2, r8
  402860:	60a3      	str	r3, [r4, #8]
  402862:	6022      	str	r2, [r4, #0]
  402864:	b10b      	cbz	r3, 40286a <__sfvwrite_r+0x1ca>
  402866:	46c2      	mov	sl, r8
  402868:	e779      	b.n	40275e <__sfvwrite_r+0xbe>
  40286a:	4621      	mov	r1, r4
  40286c:	9800      	ldr	r0, [sp, #0]
  40286e:	f7ff fcb3 	bl	4021d8 <_fflush_r>
  402872:	2800      	cmp	r0, #0
  402874:	d192      	bne.n	40279c <__sfvwrite_r+0xfc>
  402876:	46c2      	mov	sl, r8
  402878:	e771      	b.n	40275e <__sfvwrite_r+0xbe>
  40287a:	465a      	mov	r2, fp
  40287c:	4629      	mov	r1, r5
  40287e:	f000 fcf9 	bl	403274 <memmove>
  402882:	68a2      	ldr	r2, [r4, #8]
  402884:	6823      	ldr	r3, [r4, #0]
  402886:	eba2 020b 	sub.w	r2, r2, fp
  40288a:	445b      	add	r3, fp
  40288c:	60a2      	str	r2, [r4, #8]
  40288e:	6023      	str	r3, [r4, #0]
  402890:	e7af      	b.n	4027f2 <__sfvwrite_r+0x152>
  402892:	6820      	ldr	r0, [r4, #0]
  402894:	46b8      	mov	r8, r7
  402896:	46ba      	mov	sl, r7
  402898:	46bb      	mov	fp, r7
  40289a:	e755      	b.n	402748 <__sfvwrite_r+0xa8>
  40289c:	6962      	ldr	r2, [r4, #20]
  40289e:	6820      	ldr	r0, [r4, #0]
  4028a0:	6921      	ldr	r1, [r4, #16]
  4028a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4028a6:	eba0 0a01 	sub.w	sl, r0, r1
  4028aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4028ae:	f10a 0001 	add.w	r0, sl, #1
  4028b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4028b6:	4438      	add	r0, r7
  4028b8:	4540      	cmp	r0, r8
  4028ba:	4642      	mov	r2, r8
  4028bc:	bf84      	itt	hi
  4028be:	4680      	movhi	r8, r0
  4028c0:	4642      	movhi	r2, r8
  4028c2:	055b      	lsls	r3, r3, #21
  4028c4:	d544      	bpl.n	402950 <__sfvwrite_r+0x2b0>
  4028c6:	4611      	mov	r1, r2
  4028c8:	9800      	ldr	r0, [sp, #0]
  4028ca:	f000 f921 	bl	402b10 <_malloc_r>
  4028ce:	4683      	mov	fp, r0
  4028d0:	2800      	cmp	r0, #0
  4028d2:	d055      	beq.n	402980 <__sfvwrite_r+0x2e0>
  4028d4:	4652      	mov	r2, sl
  4028d6:	6921      	ldr	r1, [r4, #16]
  4028d8:	f000 fc32 	bl	403140 <memcpy>
  4028dc:	89a3      	ldrh	r3, [r4, #12]
  4028de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4028e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4028e6:	81a3      	strh	r3, [r4, #12]
  4028e8:	eb0b 000a 	add.w	r0, fp, sl
  4028ec:	eba8 030a 	sub.w	r3, r8, sl
  4028f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4028f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4028f8:	6020      	str	r0, [r4, #0]
  4028fa:	60a3      	str	r3, [r4, #8]
  4028fc:	46b8      	mov	r8, r7
  4028fe:	46ba      	mov	sl, r7
  402900:	46bb      	mov	fp, r7
  402902:	e721      	b.n	402748 <__sfvwrite_r+0xa8>
  402904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402908:	42b9      	cmp	r1, r7
  40290a:	bf28      	it	cs
  40290c:	4639      	movcs	r1, r7
  40290e:	464a      	mov	r2, r9
  402910:	fb91 f1f3 	sdiv	r1, r1, r3
  402914:	9800      	ldr	r0, [sp, #0]
  402916:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402918:	fb03 f301 	mul.w	r3, r3, r1
  40291c:	69e1      	ldr	r1, [r4, #28]
  40291e:	47b0      	blx	r6
  402920:	f1b0 0a00 	subs.w	sl, r0, #0
  402924:	f73f af1b 	bgt.w	40275e <__sfvwrite_r+0xbe>
  402928:	e738      	b.n	40279c <__sfvwrite_r+0xfc>
  40292a:	461a      	mov	r2, r3
  40292c:	4629      	mov	r1, r5
  40292e:	9301      	str	r3, [sp, #4]
  402930:	f000 fca0 	bl	403274 <memmove>
  402934:	6822      	ldr	r2, [r4, #0]
  402936:	9b01      	ldr	r3, [sp, #4]
  402938:	9800      	ldr	r0, [sp, #0]
  40293a:	441a      	add	r2, r3
  40293c:	6022      	str	r2, [r4, #0]
  40293e:	4621      	mov	r1, r4
  402940:	f7ff fc4a 	bl	4021d8 <_fflush_r>
  402944:	9b01      	ldr	r3, [sp, #4]
  402946:	2800      	cmp	r0, #0
  402948:	f47f af28 	bne.w	40279c <__sfvwrite_r+0xfc>
  40294c:	461f      	mov	r7, r3
  40294e:	e750      	b.n	4027f2 <__sfvwrite_r+0x152>
  402950:	9800      	ldr	r0, [sp, #0]
  402952:	f000 fcff 	bl	403354 <_realloc_r>
  402956:	4683      	mov	fp, r0
  402958:	2800      	cmp	r0, #0
  40295a:	d1c5      	bne.n	4028e8 <__sfvwrite_r+0x248>
  40295c:	9d00      	ldr	r5, [sp, #0]
  40295e:	6921      	ldr	r1, [r4, #16]
  402960:	4628      	mov	r0, r5
  402962:	f7ff fdb7 	bl	4024d4 <_free_r>
  402966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40296a:	220c      	movs	r2, #12
  40296c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402970:	602a      	str	r2, [r5, #0]
  402972:	e715      	b.n	4027a0 <__sfvwrite_r+0x100>
  402974:	f106 0901 	add.w	r9, r6, #1
  402978:	e722      	b.n	4027c0 <__sfvwrite_r+0x120>
  40297a:	f04f 30ff 	mov.w	r0, #4294967295
  40297e:	e6bf      	b.n	402700 <__sfvwrite_r+0x60>
  402980:	9a00      	ldr	r2, [sp, #0]
  402982:	230c      	movs	r3, #12
  402984:	6013      	str	r3, [r2, #0]
  402986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40298a:	e709      	b.n	4027a0 <__sfvwrite_r+0x100>
  40298c:	7ffffc00 	.word	0x7ffffc00

00402990 <_fwalk_reent>:
  402990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402994:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402998:	d01f      	beq.n	4029da <_fwalk_reent+0x4a>
  40299a:	4688      	mov	r8, r1
  40299c:	4606      	mov	r6, r0
  40299e:	f04f 0900 	mov.w	r9, #0
  4029a2:	687d      	ldr	r5, [r7, #4]
  4029a4:	68bc      	ldr	r4, [r7, #8]
  4029a6:	3d01      	subs	r5, #1
  4029a8:	d411      	bmi.n	4029ce <_fwalk_reent+0x3e>
  4029aa:	89a3      	ldrh	r3, [r4, #12]
  4029ac:	2b01      	cmp	r3, #1
  4029ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4029b2:	d908      	bls.n	4029c6 <_fwalk_reent+0x36>
  4029b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4029b8:	3301      	adds	r3, #1
  4029ba:	4621      	mov	r1, r4
  4029bc:	4630      	mov	r0, r6
  4029be:	d002      	beq.n	4029c6 <_fwalk_reent+0x36>
  4029c0:	47c0      	blx	r8
  4029c2:	ea49 0900 	orr.w	r9, r9, r0
  4029c6:	1c6b      	adds	r3, r5, #1
  4029c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4029cc:	d1ed      	bne.n	4029aa <_fwalk_reent+0x1a>
  4029ce:	683f      	ldr	r7, [r7, #0]
  4029d0:	2f00      	cmp	r7, #0
  4029d2:	d1e6      	bne.n	4029a2 <_fwalk_reent+0x12>
  4029d4:	4648      	mov	r0, r9
  4029d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4029da:	46b9      	mov	r9, r7
  4029dc:	4648      	mov	r0, r9
  4029de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4029e2:	bf00      	nop

004029e4 <__locale_mb_cur_max>:
  4029e4:	4b04      	ldr	r3, [pc, #16]	; (4029f8 <__locale_mb_cur_max+0x14>)
  4029e6:	4a05      	ldr	r2, [pc, #20]	; (4029fc <__locale_mb_cur_max+0x18>)
  4029e8:	681b      	ldr	r3, [r3, #0]
  4029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4029ec:	2b00      	cmp	r3, #0
  4029ee:	bf08      	it	eq
  4029f0:	4613      	moveq	r3, r2
  4029f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4029f6:	4770      	bx	lr
  4029f8:	204000d0 	.word	0x204000d0
  4029fc:	20400504 	.word	0x20400504

00402a00 <__retarget_lock_init_recursive>:
  402a00:	4770      	bx	lr
  402a02:	bf00      	nop

00402a04 <__retarget_lock_close_recursive>:
  402a04:	4770      	bx	lr
  402a06:	bf00      	nop

00402a08 <__retarget_lock_acquire_recursive>:
  402a08:	4770      	bx	lr
  402a0a:	bf00      	nop

00402a0c <__retarget_lock_release_recursive>:
  402a0c:	4770      	bx	lr
  402a0e:	bf00      	nop

00402a10 <__swhatbuf_r>:
  402a10:	b570      	push	{r4, r5, r6, lr}
  402a12:	460c      	mov	r4, r1
  402a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a18:	2900      	cmp	r1, #0
  402a1a:	b090      	sub	sp, #64	; 0x40
  402a1c:	4615      	mov	r5, r2
  402a1e:	461e      	mov	r6, r3
  402a20:	db14      	blt.n	402a4c <__swhatbuf_r+0x3c>
  402a22:	aa01      	add	r2, sp, #4
  402a24:	f001 f896 	bl	403b54 <_fstat_r>
  402a28:	2800      	cmp	r0, #0
  402a2a:	db0f      	blt.n	402a4c <__swhatbuf_r+0x3c>
  402a2c:	9a02      	ldr	r2, [sp, #8]
  402a2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402a32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402a36:	fab2 f282 	clz	r2, r2
  402a3a:	0952      	lsrs	r2, r2, #5
  402a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402a44:	6032      	str	r2, [r6, #0]
  402a46:	602b      	str	r3, [r5, #0]
  402a48:	b010      	add	sp, #64	; 0x40
  402a4a:	bd70      	pop	{r4, r5, r6, pc}
  402a4c:	89a2      	ldrh	r2, [r4, #12]
  402a4e:	2300      	movs	r3, #0
  402a50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402a54:	6033      	str	r3, [r6, #0]
  402a56:	d004      	beq.n	402a62 <__swhatbuf_r+0x52>
  402a58:	2240      	movs	r2, #64	; 0x40
  402a5a:	4618      	mov	r0, r3
  402a5c:	602a      	str	r2, [r5, #0]
  402a5e:	b010      	add	sp, #64	; 0x40
  402a60:	bd70      	pop	{r4, r5, r6, pc}
  402a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a66:	602b      	str	r3, [r5, #0]
  402a68:	b010      	add	sp, #64	; 0x40
  402a6a:	bd70      	pop	{r4, r5, r6, pc}

00402a6c <__smakebuf_r>:
  402a6c:	898a      	ldrh	r2, [r1, #12]
  402a6e:	0792      	lsls	r2, r2, #30
  402a70:	460b      	mov	r3, r1
  402a72:	d506      	bpl.n	402a82 <__smakebuf_r+0x16>
  402a74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402a78:	2101      	movs	r1, #1
  402a7a:	601a      	str	r2, [r3, #0]
  402a7c:	611a      	str	r2, [r3, #16]
  402a7e:	6159      	str	r1, [r3, #20]
  402a80:	4770      	bx	lr
  402a82:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a84:	b083      	sub	sp, #12
  402a86:	ab01      	add	r3, sp, #4
  402a88:	466a      	mov	r2, sp
  402a8a:	460c      	mov	r4, r1
  402a8c:	4606      	mov	r6, r0
  402a8e:	f7ff ffbf 	bl	402a10 <__swhatbuf_r>
  402a92:	9900      	ldr	r1, [sp, #0]
  402a94:	4605      	mov	r5, r0
  402a96:	4630      	mov	r0, r6
  402a98:	f000 f83a 	bl	402b10 <_malloc_r>
  402a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402aa0:	b1d8      	cbz	r0, 402ada <__smakebuf_r+0x6e>
  402aa2:	9a01      	ldr	r2, [sp, #4]
  402aa4:	4f15      	ldr	r7, [pc, #84]	; (402afc <__smakebuf_r+0x90>)
  402aa6:	9900      	ldr	r1, [sp, #0]
  402aa8:	63f7      	str	r7, [r6, #60]	; 0x3c
  402aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402aae:	81a3      	strh	r3, [r4, #12]
  402ab0:	6020      	str	r0, [r4, #0]
  402ab2:	6120      	str	r0, [r4, #16]
  402ab4:	6161      	str	r1, [r4, #20]
  402ab6:	b91a      	cbnz	r2, 402ac0 <__smakebuf_r+0x54>
  402ab8:	432b      	orrs	r3, r5
  402aba:	81a3      	strh	r3, [r4, #12]
  402abc:	b003      	add	sp, #12
  402abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ac0:	4630      	mov	r0, r6
  402ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402ac6:	f001 f859 	bl	403b7c <_isatty_r>
  402aca:	b1a0      	cbz	r0, 402af6 <__smakebuf_r+0x8a>
  402acc:	89a3      	ldrh	r3, [r4, #12]
  402ace:	f023 0303 	bic.w	r3, r3, #3
  402ad2:	f043 0301 	orr.w	r3, r3, #1
  402ad6:	b21b      	sxth	r3, r3
  402ad8:	e7ee      	b.n	402ab8 <__smakebuf_r+0x4c>
  402ada:	059a      	lsls	r2, r3, #22
  402adc:	d4ee      	bmi.n	402abc <__smakebuf_r+0x50>
  402ade:	f023 0303 	bic.w	r3, r3, #3
  402ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402ae6:	f043 0302 	orr.w	r3, r3, #2
  402aea:	2101      	movs	r1, #1
  402aec:	81a3      	strh	r3, [r4, #12]
  402aee:	6022      	str	r2, [r4, #0]
  402af0:	6122      	str	r2, [r4, #16]
  402af2:	6161      	str	r1, [r4, #20]
  402af4:	e7e2      	b.n	402abc <__smakebuf_r+0x50>
  402af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402afa:	e7dd      	b.n	402ab8 <__smakebuf_r+0x4c>
  402afc:	0040222d 	.word	0x0040222d

00402b00 <malloc>:
  402b00:	4b02      	ldr	r3, [pc, #8]	; (402b0c <malloc+0xc>)
  402b02:	4601      	mov	r1, r0
  402b04:	6818      	ldr	r0, [r3, #0]
  402b06:	f000 b803 	b.w	402b10 <_malloc_r>
  402b0a:	bf00      	nop
  402b0c:	204000d0 	.word	0x204000d0

00402b10 <_malloc_r>:
  402b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b14:	f101 060b 	add.w	r6, r1, #11
  402b18:	2e16      	cmp	r6, #22
  402b1a:	b083      	sub	sp, #12
  402b1c:	4605      	mov	r5, r0
  402b1e:	f240 809e 	bls.w	402c5e <_malloc_r+0x14e>
  402b22:	f036 0607 	bics.w	r6, r6, #7
  402b26:	f100 80bd 	bmi.w	402ca4 <_malloc_r+0x194>
  402b2a:	42b1      	cmp	r1, r6
  402b2c:	f200 80ba 	bhi.w	402ca4 <_malloc_r+0x194>
  402b30:	f000 fc04 	bl	40333c <__malloc_lock>
  402b34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402b38:	f0c0 8293 	bcc.w	403062 <_malloc_r+0x552>
  402b3c:	0a73      	lsrs	r3, r6, #9
  402b3e:	f000 80b8 	beq.w	402cb2 <_malloc_r+0x1a2>
  402b42:	2b04      	cmp	r3, #4
  402b44:	f200 8179 	bhi.w	402e3a <_malloc_r+0x32a>
  402b48:	09b3      	lsrs	r3, r6, #6
  402b4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402b4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402b52:	00c3      	lsls	r3, r0, #3
  402b54:	4fbf      	ldr	r7, [pc, #764]	; (402e54 <_malloc_r+0x344>)
  402b56:	443b      	add	r3, r7
  402b58:	f1a3 0108 	sub.w	r1, r3, #8
  402b5c:	685c      	ldr	r4, [r3, #4]
  402b5e:	42a1      	cmp	r1, r4
  402b60:	d106      	bne.n	402b70 <_malloc_r+0x60>
  402b62:	e00c      	b.n	402b7e <_malloc_r+0x6e>
  402b64:	2a00      	cmp	r2, #0
  402b66:	f280 80aa 	bge.w	402cbe <_malloc_r+0x1ae>
  402b6a:	68e4      	ldr	r4, [r4, #12]
  402b6c:	42a1      	cmp	r1, r4
  402b6e:	d006      	beq.n	402b7e <_malloc_r+0x6e>
  402b70:	6863      	ldr	r3, [r4, #4]
  402b72:	f023 0303 	bic.w	r3, r3, #3
  402b76:	1b9a      	subs	r2, r3, r6
  402b78:	2a0f      	cmp	r2, #15
  402b7a:	ddf3      	ble.n	402b64 <_malloc_r+0x54>
  402b7c:	4670      	mov	r0, lr
  402b7e:	693c      	ldr	r4, [r7, #16]
  402b80:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402e68 <_malloc_r+0x358>
  402b84:	4574      	cmp	r4, lr
  402b86:	f000 81ab 	beq.w	402ee0 <_malloc_r+0x3d0>
  402b8a:	6863      	ldr	r3, [r4, #4]
  402b8c:	f023 0303 	bic.w	r3, r3, #3
  402b90:	1b9a      	subs	r2, r3, r6
  402b92:	2a0f      	cmp	r2, #15
  402b94:	f300 8190 	bgt.w	402eb8 <_malloc_r+0x3a8>
  402b98:	2a00      	cmp	r2, #0
  402b9a:	f8c7 e014 	str.w	lr, [r7, #20]
  402b9e:	f8c7 e010 	str.w	lr, [r7, #16]
  402ba2:	f280 809d 	bge.w	402ce0 <_malloc_r+0x1d0>
  402ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402baa:	f080 8161 	bcs.w	402e70 <_malloc_r+0x360>
  402bae:	08db      	lsrs	r3, r3, #3
  402bb0:	f103 0c01 	add.w	ip, r3, #1
  402bb4:	1099      	asrs	r1, r3, #2
  402bb6:	687a      	ldr	r2, [r7, #4]
  402bb8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402bbc:	f8c4 8008 	str.w	r8, [r4, #8]
  402bc0:	2301      	movs	r3, #1
  402bc2:	408b      	lsls	r3, r1
  402bc4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402bc8:	4313      	orrs	r3, r2
  402bca:	3908      	subs	r1, #8
  402bcc:	60e1      	str	r1, [r4, #12]
  402bce:	607b      	str	r3, [r7, #4]
  402bd0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402bd4:	f8c8 400c 	str.w	r4, [r8, #12]
  402bd8:	1082      	asrs	r2, r0, #2
  402bda:	2401      	movs	r4, #1
  402bdc:	4094      	lsls	r4, r2
  402bde:	429c      	cmp	r4, r3
  402be0:	f200 808b 	bhi.w	402cfa <_malloc_r+0x1ea>
  402be4:	421c      	tst	r4, r3
  402be6:	d106      	bne.n	402bf6 <_malloc_r+0xe6>
  402be8:	f020 0003 	bic.w	r0, r0, #3
  402bec:	0064      	lsls	r4, r4, #1
  402bee:	421c      	tst	r4, r3
  402bf0:	f100 0004 	add.w	r0, r0, #4
  402bf4:	d0fa      	beq.n	402bec <_malloc_r+0xdc>
  402bf6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402bfa:	46cc      	mov	ip, r9
  402bfc:	4680      	mov	r8, r0
  402bfe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402c02:	459c      	cmp	ip, r3
  402c04:	d107      	bne.n	402c16 <_malloc_r+0x106>
  402c06:	e16d      	b.n	402ee4 <_malloc_r+0x3d4>
  402c08:	2a00      	cmp	r2, #0
  402c0a:	f280 817b 	bge.w	402f04 <_malloc_r+0x3f4>
  402c0e:	68db      	ldr	r3, [r3, #12]
  402c10:	459c      	cmp	ip, r3
  402c12:	f000 8167 	beq.w	402ee4 <_malloc_r+0x3d4>
  402c16:	6859      	ldr	r1, [r3, #4]
  402c18:	f021 0103 	bic.w	r1, r1, #3
  402c1c:	1b8a      	subs	r2, r1, r6
  402c1e:	2a0f      	cmp	r2, #15
  402c20:	ddf2      	ble.n	402c08 <_malloc_r+0xf8>
  402c22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402c26:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402c2a:	9300      	str	r3, [sp, #0]
  402c2c:	199c      	adds	r4, r3, r6
  402c2e:	4628      	mov	r0, r5
  402c30:	f046 0601 	orr.w	r6, r6, #1
  402c34:	f042 0501 	orr.w	r5, r2, #1
  402c38:	605e      	str	r6, [r3, #4]
  402c3a:	f8c8 c00c 	str.w	ip, [r8, #12]
  402c3e:	f8cc 8008 	str.w	r8, [ip, #8]
  402c42:	617c      	str	r4, [r7, #20]
  402c44:	613c      	str	r4, [r7, #16]
  402c46:	f8c4 e00c 	str.w	lr, [r4, #12]
  402c4a:	f8c4 e008 	str.w	lr, [r4, #8]
  402c4e:	6065      	str	r5, [r4, #4]
  402c50:	505a      	str	r2, [r3, r1]
  402c52:	f000 fb79 	bl	403348 <__malloc_unlock>
  402c56:	9b00      	ldr	r3, [sp, #0]
  402c58:	f103 0408 	add.w	r4, r3, #8
  402c5c:	e01e      	b.n	402c9c <_malloc_r+0x18c>
  402c5e:	2910      	cmp	r1, #16
  402c60:	d820      	bhi.n	402ca4 <_malloc_r+0x194>
  402c62:	f000 fb6b 	bl	40333c <__malloc_lock>
  402c66:	2610      	movs	r6, #16
  402c68:	2318      	movs	r3, #24
  402c6a:	2002      	movs	r0, #2
  402c6c:	4f79      	ldr	r7, [pc, #484]	; (402e54 <_malloc_r+0x344>)
  402c6e:	443b      	add	r3, r7
  402c70:	f1a3 0208 	sub.w	r2, r3, #8
  402c74:	685c      	ldr	r4, [r3, #4]
  402c76:	4294      	cmp	r4, r2
  402c78:	f000 813d 	beq.w	402ef6 <_malloc_r+0x3e6>
  402c7c:	6863      	ldr	r3, [r4, #4]
  402c7e:	68e1      	ldr	r1, [r4, #12]
  402c80:	68a6      	ldr	r6, [r4, #8]
  402c82:	f023 0303 	bic.w	r3, r3, #3
  402c86:	4423      	add	r3, r4
  402c88:	4628      	mov	r0, r5
  402c8a:	685a      	ldr	r2, [r3, #4]
  402c8c:	60f1      	str	r1, [r6, #12]
  402c8e:	f042 0201 	orr.w	r2, r2, #1
  402c92:	608e      	str	r6, [r1, #8]
  402c94:	605a      	str	r2, [r3, #4]
  402c96:	f000 fb57 	bl	403348 <__malloc_unlock>
  402c9a:	3408      	adds	r4, #8
  402c9c:	4620      	mov	r0, r4
  402c9e:	b003      	add	sp, #12
  402ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ca4:	2400      	movs	r4, #0
  402ca6:	230c      	movs	r3, #12
  402ca8:	4620      	mov	r0, r4
  402caa:	602b      	str	r3, [r5, #0]
  402cac:	b003      	add	sp, #12
  402cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cb2:	2040      	movs	r0, #64	; 0x40
  402cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
  402cb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402cbc:	e74a      	b.n	402b54 <_malloc_r+0x44>
  402cbe:	4423      	add	r3, r4
  402cc0:	68e1      	ldr	r1, [r4, #12]
  402cc2:	685a      	ldr	r2, [r3, #4]
  402cc4:	68a6      	ldr	r6, [r4, #8]
  402cc6:	f042 0201 	orr.w	r2, r2, #1
  402cca:	60f1      	str	r1, [r6, #12]
  402ccc:	4628      	mov	r0, r5
  402cce:	608e      	str	r6, [r1, #8]
  402cd0:	605a      	str	r2, [r3, #4]
  402cd2:	f000 fb39 	bl	403348 <__malloc_unlock>
  402cd6:	3408      	adds	r4, #8
  402cd8:	4620      	mov	r0, r4
  402cda:	b003      	add	sp, #12
  402cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ce0:	4423      	add	r3, r4
  402ce2:	4628      	mov	r0, r5
  402ce4:	685a      	ldr	r2, [r3, #4]
  402ce6:	f042 0201 	orr.w	r2, r2, #1
  402cea:	605a      	str	r2, [r3, #4]
  402cec:	f000 fb2c 	bl	403348 <__malloc_unlock>
  402cf0:	3408      	adds	r4, #8
  402cf2:	4620      	mov	r0, r4
  402cf4:	b003      	add	sp, #12
  402cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cfa:	68bc      	ldr	r4, [r7, #8]
  402cfc:	6863      	ldr	r3, [r4, #4]
  402cfe:	f023 0803 	bic.w	r8, r3, #3
  402d02:	45b0      	cmp	r8, r6
  402d04:	d304      	bcc.n	402d10 <_malloc_r+0x200>
  402d06:	eba8 0306 	sub.w	r3, r8, r6
  402d0a:	2b0f      	cmp	r3, #15
  402d0c:	f300 8085 	bgt.w	402e1a <_malloc_r+0x30a>
  402d10:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402e6c <_malloc_r+0x35c>
  402d14:	4b50      	ldr	r3, [pc, #320]	; (402e58 <_malloc_r+0x348>)
  402d16:	f8d9 2000 	ldr.w	r2, [r9]
  402d1a:	681b      	ldr	r3, [r3, #0]
  402d1c:	3201      	adds	r2, #1
  402d1e:	4433      	add	r3, r6
  402d20:	eb04 0a08 	add.w	sl, r4, r8
  402d24:	f000 8155 	beq.w	402fd2 <_malloc_r+0x4c2>
  402d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402d2c:	330f      	adds	r3, #15
  402d2e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402d32:	f02b 0b0f 	bic.w	fp, fp, #15
  402d36:	4659      	mov	r1, fp
  402d38:	4628      	mov	r0, r5
  402d3a:	f000 fcb1 	bl	4036a0 <_sbrk_r>
  402d3e:	1c41      	adds	r1, r0, #1
  402d40:	4602      	mov	r2, r0
  402d42:	f000 80fc 	beq.w	402f3e <_malloc_r+0x42e>
  402d46:	4582      	cmp	sl, r0
  402d48:	f200 80f7 	bhi.w	402f3a <_malloc_r+0x42a>
  402d4c:	4b43      	ldr	r3, [pc, #268]	; (402e5c <_malloc_r+0x34c>)
  402d4e:	6819      	ldr	r1, [r3, #0]
  402d50:	4459      	add	r1, fp
  402d52:	6019      	str	r1, [r3, #0]
  402d54:	f000 814d 	beq.w	402ff2 <_malloc_r+0x4e2>
  402d58:	f8d9 0000 	ldr.w	r0, [r9]
  402d5c:	3001      	adds	r0, #1
  402d5e:	bf1b      	ittet	ne
  402d60:	eba2 0a0a 	subne.w	sl, r2, sl
  402d64:	4451      	addne	r1, sl
  402d66:	f8c9 2000 	streq.w	r2, [r9]
  402d6a:	6019      	strne	r1, [r3, #0]
  402d6c:	f012 0107 	ands.w	r1, r2, #7
  402d70:	f000 8115 	beq.w	402f9e <_malloc_r+0x48e>
  402d74:	f1c1 0008 	rsb	r0, r1, #8
  402d78:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402d7c:	4402      	add	r2, r0
  402d7e:	3108      	adds	r1, #8
  402d80:	eb02 090b 	add.w	r9, r2, fp
  402d84:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402d88:	eba1 0909 	sub.w	r9, r1, r9
  402d8c:	4649      	mov	r1, r9
  402d8e:	4628      	mov	r0, r5
  402d90:	9301      	str	r3, [sp, #4]
  402d92:	9200      	str	r2, [sp, #0]
  402d94:	f000 fc84 	bl	4036a0 <_sbrk_r>
  402d98:	1c43      	adds	r3, r0, #1
  402d9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402d9e:	f000 8143 	beq.w	403028 <_malloc_r+0x518>
  402da2:	1a80      	subs	r0, r0, r2
  402da4:	4448      	add	r0, r9
  402da6:	f040 0001 	orr.w	r0, r0, #1
  402daa:	6819      	ldr	r1, [r3, #0]
  402dac:	60ba      	str	r2, [r7, #8]
  402dae:	4449      	add	r1, r9
  402db0:	42bc      	cmp	r4, r7
  402db2:	6050      	str	r0, [r2, #4]
  402db4:	6019      	str	r1, [r3, #0]
  402db6:	d017      	beq.n	402de8 <_malloc_r+0x2d8>
  402db8:	f1b8 0f0f 	cmp.w	r8, #15
  402dbc:	f240 80fb 	bls.w	402fb6 <_malloc_r+0x4a6>
  402dc0:	6860      	ldr	r0, [r4, #4]
  402dc2:	f1a8 020c 	sub.w	r2, r8, #12
  402dc6:	f022 0207 	bic.w	r2, r2, #7
  402dca:	eb04 0e02 	add.w	lr, r4, r2
  402dce:	f000 0001 	and.w	r0, r0, #1
  402dd2:	f04f 0c05 	mov.w	ip, #5
  402dd6:	4310      	orrs	r0, r2
  402dd8:	2a0f      	cmp	r2, #15
  402dda:	6060      	str	r0, [r4, #4]
  402ddc:	f8ce c004 	str.w	ip, [lr, #4]
  402de0:	f8ce c008 	str.w	ip, [lr, #8]
  402de4:	f200 8117 	bhi.w	403016 <_malloc_r+0x506>
  402de8:	4b1d      	ldr	r3, [pc, #116]	; (402e60 <_malloc_r+0x350>)
  402dea:	68bc      	ldr	r4, [r7, #8]
  402dec:	681a      	ldr	r2, [r3, #0]
  402dee:	4291      	cmp	r1, r2
  402df0:	bf88      	it	hi
  402df2:	6019      	strhi	r1, [r3, #0]
  402df4:	4b1b      	ldr	r3, [pc, #108]	; (402e64 <_malloc_r+0x354>)
  402df6:	681a      	ldr	r2, [r3, #0]
  402df8:	4291      	cmp	r1, r2
  402dfa:	6862      	ldr	r2, [r4, #4]
  402dfc:	bf88      	it	hi
  402dfe:	6019      	strhi	r1, [r3, #0]
  402e00:	f022 0203 	bic.w	r2, r2, #3
  402e04:	4296      	cmp	r6, r2
  402e06:	eba2 0306 	sub.w	r3, r2, r6
  402e0a:	d801      	bhi.n	402e10 <_malloc_r+0x300>
  402e0c:	2b0f      	cmp	r3, #15
  402e0e:	dc04      	bgt.n	402e1a <_malloc_r+0x30a>
  402e10:	4628      	mov	r0, r5
  402e12:	f000 fa99 	bl	403348 <__malloc_unlock>
  402e16:	2400      	movs	r4, #0
  402e18:	e740      	b.n	402c9c <_malloc_r+0x18c>
  402e1a:	19a2      	adds	r2, r4, r6
  402e1c:	f043 0301 	orr.w	r3, r3, #1
  402e20:	f046 0601 	orr.w	r6, r6, #1
  402e24:	6066      	str	r6, [r4, #4]
  402e26:	4628      	mov	r0, r5
  402e28:	60ba      	str	r2, [r7, #8]
  402e2a:	6053      	str	r3, [r2, #4]
  402e2c:	f000 fa8c 	bl	403348 <__malloc_unlock>
  402e30:	3408      	adds	r4, #8
  402e32:	4620      	mov	r0, r4
  402e34:	b003      	add	sp, #12
  402e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e3a:	2b14      	cmp	r3, #20
  402e3c:	d971      	bls.n	402f22 <_malloc_r+0x412>
  402e3e:	2b54      	cmp	r3, #84	; 0x54
  402e40:	f200 80a3 	bhi.w	402f8a <_malloc_r+0x47a>
  402e44:	0b33      	lsrs	r3, r6, #12
  402e46:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402e4a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402e4e:	00c3      	lsls	r3, r0, #3
  402e50:	e680      	b.n	402b54 <_malloc_r+0x44>
  402e52:	bf00      	nop
  402e54:	20400670 	.word	0x20400670
  402e58:	20400b44 	.word	0x20400b44
  402e5c:	20400b14 	.word	0x20400b14
  402e60:	20400b3c 	.word	0x20400b3c
  402e64:	20400b40 	.word	0x20400b40
  402e68:	20400678 	.word	0x20400678
  402e6c:	20400a78 	.word	0x20400a78
  402e70:	0a5a      	lsrs	r2, r3, #9
  402e72:	2a04      	cmp	r2, #4
  402e74:	d95b      	bls.n	402f2e <_malloc_r+0x41e>
  402e76:	2a14      	cmp	r2, #20
  402e78:	f200 80ae 	bhi.w	402fd8 <_malloc_r+0x4c8>
  402e7c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402e80:	00c9      	lsls	r1, r1, #3
  402e82:	325b      	adds	r2, #91	; 0x5b
  402e84:	eb07 0c01 	add.w	ip, r7, r1
  402e88:	5879      	ldr	r1, [r7, r1]
  402e8a:	f1ac 0c08 	sub.w	ip, ip, #8
  402e8e:	458c      	cmp	ip, r1
  402e90:	f000 8088 	beq.w	402fa4 <_malloc_r+0x494>
  402e94:	684a      	ldr	r2, [r1, #4]
  402e96:	f022 0203 	bic.w	r2, r2, #3
  402e9a:	4293      	cmp	r3, r2
  402e9c:	d273      	bcs.n	402f86 <_malloc_r+0x476>
  402e9e:	6889      	ldr	r1, [r1, #8]
  402ea0:	458c      	cmp	ip, r1
  402ea2:	d1f7      	bne.n	402e94 <_malloc_r+0x384>
  402ea4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402ea8:	687b      	ldr	r3, [r7, #4]
  402eaa:	60e2      	str	r2, [r4, #12]
  402eac:	f8c4 c008 	str.w	ip, [r4, #8]
  402eb0:	6094      	str	r4, [r2, #8]
  402eb2:	f8cc 400c 	str.w	r4, [ip, #12]
  402eb6:	e68f      	b.n	402bd8 <_malloc_r+0xc8>
  402eb8:	19a1      	adds	r1, r4, r6
  402eba:	f046 0c01 	orr.w	ip, r6, #1
  402ebe:	f042 0601 	orr.w	r6, r2, #1
  402ec2:	f8c4 c004 	str.w	ip, [r4, #4]
  402ec6:	4628      	mov	r0, r5
  402ec8:	6179      	str	r1, [r7, #20]
  402eca:	6139      	str	r1, [r7, #16]
  402ecc:	f8c1 e00c 	str.w	lr, [r1, #12]
  402ed0:	f8c1 e008 	str.w	lr, [r1, #8]
  402ed4:	604e      	str	r6, [r1, #4]
  402ed6:	50e2      	str	r2, [r4, r3]
  402ed8:	f000 fa36 	bl	403348 <__malloc_unlock>
  402edc:	3408      	adds	r4, #8
  402ede:	e6dd      	b.n	402c9c <_malloc_r+0x18c>
  402ee0:	687b      	ldr	r3, [r7, #4]
  402ee2:	e679      	b.n	402bd8 <_malloc_r+0xc8>
  402ee4:	f108 0801 	add.w	r8, r8, #1
  402ee8:	f018 0f03 	tst.w	r8, #3
  402eec:	f10c 0c08 	add.w	ip, ip, #8
  402ef0:	f47f ae85 	bne.w	402bfe <_malloc_r+0xee>
  402ef4:	e02d      	b.n	402f52 <_malloc_r+0x442>
  402ef6:	68dc      	ldr	r4, [r3, #12]
  402ef8:	42a3      	cmp	r3, r4
  402efa:	bf08      	it	eq
  402efc:	3002      	addeq	r0, #2
  402efe:	f43f ae3e 	beq.w	402b7e <_malloc_r+0x6e>
  402f02:	e6bb      	b.n	402c7c <_malloc_r+0x16c>
  402f04:	4419      	add	r1, r3
  402f06:	461c      	mov	r4, r3
  402f08:	684a      	ldr	r2, [r1, #4]
  402f0a:	68db      	ldr	r3, [r3, #12]
  402f0c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402f10:	f042 0201 	orr.w	r2, r2, #1
  402f14:	604a      	str	r2, [r1, #4]
  402f16:	4628      	mov	r0, r5
  402f18:	60f3      	str	r3, [r6, #12]
  402f1a:	609e      	str	r6, [r3, #8]
  402f1c:	f000 fa14 	bl	403348 <__malloc_unlock>
  402f20:	e6bc      	b.n	402c9c <_malloc_r+0x18c>
  402f22:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402f26:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402f2a:	00c3      	lsls	r3, r0, #3
  402f2c:	e612      	b.n	402b54 <_malloc_r+0x44>
  402f2e:	099a      	lsrs	r2, r3, #6
  402f30:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402f34:	00c9      	lsls	r1, r1, #3
  402f36:	3238      	adds	r2, #56	; 0x38
  402f38:	e7a4      	b.n	402e84 <_malloc_r+0x374>
  402f3a:	42bc      	cmp	r4, r7
  402f3c:	d054      	beq.n	402fe8 <_malloc_r+0x4d8>
  402f3e:	68bc      	ldr	r4, [r7, #8]
  402f40:	6862      	ldr	r2, [r4, #4]
  402f42:	f022 0203 	bic.w	r2, r2, #3
  402f46:	e75d      	b.n	402e04 <_malloc_r+0x2f4>
  402f48:	f859 3908 	ldr.w	r3, [r9], #-8
  402f4c:	4599      	cmp	r9, r3
  402f4e:	f040 8086 	bne.w	40305e <_malloc_r+0x54e>
  402f52:	f010 0f03 	tst.w	r0, #3
  402f56:	f100 30ff 	add.w	r0, r0, #4294967295
  402f5a:	d1f5      	bne.n	402f48 <_malloc_r+0x438>
  402f5c:	687b      	ldr	r3, [r7, #4]
  402f5e:	ea23 0304 	bic.w	r3, r3, r4
  402f62:	607b      	str	r3, [r7, #4]
  402f64:	0064      	lsls	r4, r4, #1
  402f66:	429c      	cmp	r4, r3
  402f68:	f63f aec7 	bhi.w	402cfa <_malloc_r+0x1ea>
  402f6c:	2c00      	cmp	r4, #0
  402f6e:	f43f aec4 	beq.w	402cfa <_malloc_r+0x1ea>
  402f72:	421c      	tst	r4, r3
  402f74:	4640      	mov	r0, r8
  402f76:	f47f ae3e 	bne.w	402bf6 <_malloc_r+0xe6>
  402f7a:	0064      	lsls	r4, r4, #1
  402f7c:	421c      	tst	r4, r3
  402f7e:	f100 0004 	add.w	r0, r0, #4
  402f82:	d0fa      	beq.n	402f7a <_malloc_r+0x46a>
  402f84:	e637      	b.n	402bf6 <_malloc_r+0xe6>
  402f86:	468c      	mov	ip, r1
  402f88:	e78c      	b.n	402ea4 <_malloc_r+0x394>
  402f8a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402f8e:	d815      	bhi.n	402fbc <_malloc_r+0x4ac>
  402f90:	0bf3      	lsrs	r3, r6, #15
  402f92:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402f96:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402f9a:	00c3      	lsls	r3, r0, #3
  402f9c:	e5da      	b.n	402b54 <_malloc_r+0x44>
  402f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402fa2:	e6ed      	b.n	402d80 <_malloc_r+0x270>
  402fa4:	687b      	ldr	r3, [r7, #4]
  402fa6:	1092      	asrs	r2, r2, #2
  402fa8:	2101      	movs	r1, #1
  402faa:	fa01 f202 	lsl.w	r2, r1, r2
  402fae:	4313      	orrs	r3, r2
  402fb0:	607b      	str	r3, [r7, #4]
  402fb2:	4662      	mov	r2, ip
  402fb4:	e779      	b.n	402eaa <_malloc_r+0x39a>
  402fb6:	2301      	movs	r3, #1
  402fb8:	6053      	str	r3, [r2, #4]
  402fba:	e729      	b.n	402e10 <_malloc_r+0x300>
  402fbc:	f240 5254 	movw	r2, #1364	; 0x554
  402fc0:	4293      	cmp	r3, r2
  402fc2:	d822      	bhi.n	40300a <_malloc_r+0x4fa>
  402fc4:	0cb3      	lsrs	r3, r6, #18
  402fc6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402fca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402fce:	00c3      	lsls	r3, r0, #3
  402fd0:	e5c0      	b.n	402b54 <_malloc_r+0x44>
  402fd2:	f103 0b10 	add.w	fp, r3, #16
  402fd6:	e6ae      	b.n	402d36 <_malloc_r+0x226>
  402fd8:	2a54      	cmp	r2, #84	; 0x54
  402fda:	d829      	bhi.n	403030 <_malloc_r+0x520>
  402fdc:	0b1a      	lsrs	r2, r3, #12
  402fde:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402fe2:	00c9      	lsls	r1, r1, #3
  402fe4:	326e      	adds	r2, #110	; 0x6e
  402fe6:	e74d      	b.n	402e84 <_malloc_r+0x374>
  402fe8:	4b20      	ldr	r3, [pc, #128]	; (40306c <_malloc_r+0x55c>)
  402fea:	6819      	ldr	r1, [r3, #0]
  402fec:	4459      	add	r1, fp
  402fee:	6019      	str	r1, [r3, #0]
  402ff0:	e6b2      	b.n	402d58 <_malloc_r+0x248>
  402ff2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402ff6:	2800      	cmp	r0, #0
  402ff8:	f47f aeae 	bne.w	402d58 <_malloc_r+0x248>
  402ffc:	eb08 030b 	add.w	r3, r8, fp
  403000:	68ba      	ldr	r2, [r7, #8]
  403002:	f043 0301 	orr.w	r3, r3, #1
  403006:	6053      	str	r3, [r2, #4]
  403008:	e6ee      	b.n	402de8 <_malloc_r+0x2d8>
  40300a:	207f      	movs	r0, #127	; 0x7f
  40300c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403010:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403014:	e59e      	b.n	402b54 <_malloc_r+0x44>
  403016:	f104 0108 	add.w	r1, r4, #8
  40301a:	4628      	mov	r0, r5
  40301c:	9300      	str	r3, [sp, #0]
  40301e:	f7ff fa59 	bl	4024d4 <_free_r>
  403022:	9b00      	ldr	r3, [sp, #0]
  403024:	6819      	ldr	r1, [r3, #0]
  403026:	e6df      	b.n	402de8 <_malloc_r+0x2d8>
  403028:	2001      	movs	r0, #1
  40302a:	f04f 0900 	mov.w	r9, #0
  40302e:	e6bc      	b.n	402daa <_malloc_r+0x29a>
  403030:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403034:	d805      	bhi.n	403042 <_malloc_r+0x532>
  403036:	0bda      	lsrs	r2, r3, #15
  403038:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40303c:	00c9      	lsls	r1, r1, #3
  40303e:	3277      	adds	r2, #119	; 0x77
  403040:	e720      	b.n	402e84 <_malloc_r+0x374>
  403042:	f240 5154 	movw	r1, #1364	; 0x554
  403046:	428a      	cmp	r2, r1
  403048:	d805      	bhi.n	403056 <_malloc_r+0x546>
  40304a:	0c9a      	lsrs	r2, r3, #18
  40304c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403050:	00c9      	lsls	r1, r1, #3
  403052:	327c      	adds	r2, #124	; 0x7c
  403054:	e716      	b.n	402e84 <_malloc_r+0x374>
  403056:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40305a:	227e      	movs	r2, #126	; 0x7e
  40305c:	e712      	b.n	402e84 <_malloc_r+0x374>
  40305e:	687b      	ldr	r3, [r7, #4]
  403060:	e780      	b.n	402f64 <_malloc_r+0x454>
  403062:	08f0      	lsrs	r0, r6, #3
  403064:	f106 0308 	add.w	r3, r6, #8
  403068:	e600      	b.n	402c6c <_malloc_r+0x15c>
  40306a:	bf00      	nop
  40306c:	20400b14 	.word	0x20400b14

00403070 <__ascii_mbtowc>:
  403070:	b082      	sub	sp, #8
  403072:	b149      	cbz	r1, 403088 <__ascii_mbtowc+0x18>
  403074:	b15a      	cbz	r2, 40308e <__ascii_mbtowc+0x1e>
  403076:	b16b      	cbz	r3, 403094 <__ascii_mbtowc+0x24>
  403078:	7813      	ldrb	r3, [r2, #0]
  40307a:	600b      	str	r3, [r1, #0]
  40307c:	7812      	ldrb	r2, [r2, #0]
  40307e:	1c10      	adds	r0, r2, #0
  403080:	bf18      	it	ne
  403082:	2001      	movne	r0, #1
  403084:	b002      	add	sp, #8
  403086:	4770      	bx	lr
  403088:	a901      	add	r1, sp, #4
  40308a:	2a00      	cmp	r2, #0
  40308c:	d1f3      	bne.n	403076 <__ascii_mbtowc+0x6>
  40308e:	4610      	mov	r0, r2
  403090:	b002      	add	sp, #8
  403092:	4770      	bx	lr
  403094:	f06f 0001 	mvn.w	r0, #1
  403098:	e7f4      	b.n	403084 <__ascii_mbtowc+0x14>
  40309a:	bf00      	nop
  40309c:	0000      	movs	r0, r0
	...

004030a0 <memchr>:
  4030a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4030a4:	2a10      	cmp	r2, #16
  4030a6:	db2b      	blt.n	403100 <memchr+0x60>
  4030a8:	f010 0f07 	tst.w	r0, #7
  4030ac:	d008      	beq.n	4030c0 <memchr+0x20>
  4030ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4030b2:	3a01      	subs	r2, #1
  4030b4:	428b      	cmp	r3, r1
  4030b6:	d02d      	beq.n	403114 <memchr+0x74>
  4030b8:	f010 0f07 	tst.w	r0, #7
  4030bc:	b342      	cbz	r2, 403110 <memchr+0x70>
  4030be:	d1f6      	bne.n	4030ae <memchr+0xe>
  4030c0:	b4f0      	push	{r4, r5, r6, r7}
  4030c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4030c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4030ca:	f022 0407 	bic.w	r4, r2, #7
  4030ce:	f07f 0700 	mvns.w	r7, #0
  4030d2:	2300      	movs	r3, #0
  4030d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4030d8:	3c08      	subs	r4, #8
  4030da:	ea85 0501 	eor.w	r5, r5, r1
  4030de:	ea86 0601 	eor.w	r6, r6, r1
  4030e2:	fa85 f547 	uadd8	r5, r5, r7
  4030e6:	faa3 f587 	sel	r5, r3, r7
  4030ea:	fa86 f647 	uadd8	r6, r6, r7
  4030ee:	faa5 f687 	sel	r6, r5, r7
  4030f2:	b98e      	cbnz	r6, 403118 <memchr+0x78>
  4030f4:	d1ee      	bne.n	4030d4 <memchr+0x34>
  4030f6:	bcf0      	pop	{r4, r5, r6, r7}
  4030f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4030fc:	f002 0207 	and.w	r2, r2, #7
  403100:	b132      	cbz	r2, 403110 <memchr+0x70>
  403102:	f810 3b01 	ldrb.w	r3, [r0], #1
  403106:	3a01      	subs	r2, #1
  403108:	ea83 0301 	eor.w	r3, r3, r1
  40310c:	b113      	cbz	r3, 403114 <memchr+0x74>
  40310e:	d1f8      	bne.n	403102 <memchr+0x62>
  403110:	2000      	movs	r0, #0
  403112:	4770      	bx	lr
  403114:	3801      	subs	r0, #1
  403116:	4770      	bx	lr
  403118:	2d00      	cmp	r5, #0
  40311a:	bf06      	itte	eq
  40311c:	4635      	moveq	r5, r6
  40311e:	3803      	subeq	r0, #3
  403120:	3807      	subne	r0, #7
  403122:	f015 0f01 	tst.w	r5, #1
  403126:	d107      	bne.n	403138 <memchr+0x98>
  403128:	3001      	adds	r0, #1
  40312a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40312e:	bf02      	ittt	eq
  403130:	3001      	addeq	r0, #1
  403132:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403136:	3001      	addeq	r0, #1
  403138:	bcf0      	pop	{r4, r5, r6, r7}
  40313a:	3801      	subs	r0, #1
  40313c:	4770      	bx	lr
  40313e:	bf00      	nop

00403140 <memcpy>:
  403140:	4684      	mov	ip, r0
  403142:	ea41 0300 	orr.w	r3, r1, r0
  403146:	f013 0303 	ands.w	r3, r3, #3
  40314a:	d16d      	bne.n	403228 <memcpy+0xe8>
  40314c:	3a40      	subs	r2, #64	; 0x40
  40314e:	d341      	bcc.n	4031d4 <memcpy+0x94>
  403150:	f851 3b04 	ldr.w	r3, [r1], #4
  403154:	f840 3b04 	str.w	r3, [r0], #4
  403158:	f851 3b04 	ldr.w	r3, [r1], #4
  40315c:	f840 3b04 	str.w	r3, [r0], #4
  403160:	f851 3b04 	ldr.w	r3, [r1], #4
  403164:	f840 3b04 	str.w	r3, [r0], #4
  403168:	f851 3b04 	ldr.w	r3, [r1], #4
  40316c:	f840 3b04 	str.w	r3, [r0], #4
  403170:	f851 3b04 	ldr.w	r3, [r1], #4
  403174:	f840 3b04 	str.w	r3, [r0], #4
  403178:	f851 3b04 	ldr.w	r3, [r1], #4
  40317c:	f840 3b04 	str.w	r3, [r0], #4
  403180:	f851 3b04 	ldr.w	r3, [r1], #4
  403184:	f840 3b04 	str.w	r3, [r0], #4
  403188:	f851 3b04 	ldr.w	r3, [r1], #4
  40318c:	f840 3b04 	str.w	r3, [r0], #4
  403190:	f851 3b04 	ldr.w	r3, [r1], #4
  403194:	f840 3b04 	str.w	r3, [r0], #4
  403198:	f851 3b04 	ldr.w	r3, [r1], #4
  40319c:	f840 3b04 	str.w	r3, [r0], #4
  4031a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a4:	f840 3b04 	str.w	r3, [r0], #4
  4031a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ac:	f840 3b04 	str.w	r3, [r0], #4
  4031b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031b4:	f840 3b04 	str.w	r3, [r0], #4
  4031b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031bc:	f840 3b04 	str.w	r3, [r0], #4
  4031c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031c4:	f840 3b04 	str.w	r3, [r0], #4
  4031c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031cc:	f840 3b04 	str.w	r3, [r0], #4
  4031d0:	3a40      	subs	r2, #64	; 0x40
  4031d2:	d2bd      	bcs.n	403150 <memcpy+0x10>
  4031d4:	3230      	adds	r2, #48	; 0x30
  4031d6:	d311      	bcc.n	4031fc <memcpy+0xbc>
  4031d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031dc:	f840 3b04 	str.w	r3, [r0], #4
  4031e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031e4:	f840 3b04 	str.w	r3, [r0], #4
  4031e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ec:	f840 3b04 	str.w	r3, [r0], #4
  4031f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031f4:	f840 3b04 	str.w	r3, [r0], #4
  4031f8:	3a10      	subs	r2, #16
  4031fa:	d2ed      	bcs.n	4031d8 <memcpy+0x98>
  4031fc:	320c      	adds	r2, #12
  4031fe:	d305      	bcc.n	40320c <memcpy+0xcc>
  403200:	f851 3b04 	ldr.w	r3, [r1], #4
  403204:	f840 3b04 	str.w	r3, [r0], #4
  403208:	3a04      	subs	r2, #4
  40320a:	d2f9      	bcs.n	403200 <memcpy+0xc0>
  40320c:	3204      	adds	r2, #4
  40320e:	d008      	beq.n	403222 <memcpy+0xe2>
  403210:	07d2      	lsls	r2, r2, #31
  403212:	bf1c      	itt	ne
  403214:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403218:	f800 3b01 	strbne.w	r3, [r0], #1
  40321c:	d301      	bcc.n	403222 <memcpy+0xe2>
  40321e:	880b      	ldrh	r3, [r1, #0]
  403220:	8003      	strh	r3, [r0, #0]
  403222:	4660      	mov	r0, ip
  403224:	4770      	bx	lr
  403226:	bf00      	nop
  403228:	2a08      	cmp	r2, #8
  40322a:	d313      	bcc.n	403254 <memcpy+0x114>
  40322c:	078b      	lsls	r3, r1, #30
  40322e:	d08d      	beq.n	40314c <memcpy+0xc>
  403230:	f010 0303 	ands.w	r3, r0, #3
  403234:	d08a      	beq.n	40314c <memcpy+0xc>
  403236:	f1c3 0304 	rsb	r3, r3, #4
  40323a:	1ad2      	subs	r2, r2, r3
  40323c:	07db      	lsls	r3, r3, #31
  40323e:	bf1c      	itt	ne
  403240:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403244:	f800 3b01 	strbne.w	r3, [r0], #1
  403248:	d380      	bcc.n	40314c <memcpy+0xc>
  40324a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40324e:	f820 3b02 	strh.w	r3, [r0], #2
  403252:	e77b      	b.n	40314c <memcpy+0xc>
  403254:	3a04      	subs	r2, #4
  403256:	d3d9      	bcc.n	40320c <memcpy+0xcc>
  403258:	3a01      	subs	r2, #1
  40325a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40325e:	f800 3b01 	strb.w	r3, [r0], #1
  403262:	d2f9      	bcs.n	403258 <memcpy+0x118>
  403264:	780b      	ldrb	r3, [r1, #0]
  403266:	7003      	strb	r3, [r0, #0]
  403268:	784b      	ldrb	r3, [r1, #1]
  40326a:	7043      	strb	r3, [r0, #1]
  40326c:	788b      	ldrb	r3, [r1, #2]
  40326e:	7083      	strb	r3, [r0, #2]
  403270:	4660      	mov	r0, ip
  403272:	4770      	bx	lr

00403274 <memmove>:
  403274:	4288      	cmp	r0, r1
  403276:	b5f0      	push	{r4, r5, r6, r7, lr}
  403278:	d90d      	bls.n	403296 <memmove+0x22>
  40327a:	188b      	adds	r3, r1, r2
  40327c:	4298      	cmp	r0, r3
  40327e:	d20a      	bcs.n	403296 <memmove+0x22>
  403280:	1884      	adds	r4, r0, r2
  403282:	2a00      	cmp	r2, #0
  403284:	d051      	beq.n	40332a <memmove+0xb6>
  403286:	4622      	mov	r2, r4
  403288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40328c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403290:	4299      	cmp	r1, r3
  403292:	d1f9      	bne.n	403288 <memmove+0x14>
  403294:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403296:	2a0f      	cmp	r2, #15
  403298:	d948      	bls.n	40332c <memmove+0xb8>
  40329a:	ea41 0300 	orr.w	r3, r1, r0
  40329e:	079b      	lsls	r3, r3, #30
  4032a0:	d146      	bne.n	403330 <memmove+0xbc>
  4032a2:	f100 0410 	add.w	r4, r0, #16
  4032a6:	f101 0310 	add.w	r3, r1, #16
  4032aa:	4615      	mov	r5, r2
  4032ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4032b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4032b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4032b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4032bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4032c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4032c4:	3d10      	subs	r5, #16
  4032c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4032ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4032ce:	2d0f      	cmp	r5, #15
  4032d0:	f103 0310 	add.w	r3, r3, #16
  4032d4:	f104 0410 	add.w	r4, r4, #16
  4032d8:	d8e8      	bhi.n	4032ac <memmove+0x38>
  4032da:	f1a2 0310 	sub.w	r3, r2, #16
  4032de:	f023 030f 	bic.w	r3, r3, #15
  4032e2:	f002 0e0f 	and.w	lr, r2, #15
  4032e6:	3310      	adds	r3, #16
  4032e8:	f1be 0f03 	cmp.w	lr, #3
  4032ec:	4419      	add	r1, r3
  4032ee:	4403      	add	r3, r0
  4032f0:	d921      	bls.n	403336 <memmove+0xc2>
  4032f2:	1f1e      	subs	r6, r3, #4
  4032f4:	460d      	mov	r5, r1
  4032f6:	4674      	mov	r4, lr
  4032f8:	3c04      	subs	r4, #4
  4032fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4032fe:	f846 7f04 	str.w	r7, [r6, #4]!
  403302:	2c03      	cmp	r4, #3
  403304:	d8f8      	bhi.n	4032f8 <memmove+0x84>
  403306:	f1ae 0404 	sub.w	r4, lr, #4
  40330a:	f024 0403 	bic.w	r4, r4, #3
  40330e:	3404      	adds	r4, #4
  403310:	4421      	add	r1, r4
  403312:	4423      	add	r3, r4
  403314:	f002 0203 	and.w	r2, r2, #3
  403318:	b162      	cbz	r2, 403334 <memmove+0xc0>
  40331a:	3b01      	subs	r3, #1
  40331c:	440a      	add	r2, r1
  40331e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403322:	f803 4f01 	strb.w	r4, [r3, #1]!
  403326:	428a      	cmp	r2, r1
  403328:	d1f9      	bne.n	40331e <memmove+0xaa>
  40332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40332c:	4603      	mov	r3, r0
  40332e:	e7f3      	b.n	403318 <memmove+0xa4>
  403330:	4603      	mov	r3, r0
  403332:	e7f2      	b.n	40331a <memmove+0xa6>
  403334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403336:	4672      	mov	r2, lr
  403338:	e7ee      	b.n	403318 <memmove+0xa4>
  40333a:	bf00      	nop

0040333c <__malloc_lock>:
  40333c:	4801      	ldr	r0, [pc, #4]	; (403344 <__malloc_lock+0x8>)
  40333e:	f7ff bb63 	b.w	402a08 <__retarget_lock_acquire_recursive>
  403342:	bf00      	nop
  403344:	20400cb0 	.word	0x20400cb0

00403348 <__malloc_unlock>:
  403348:	4801      	ldr	r0, [pc, #4]	; (403350 <__malloc_unlock+0x8>)
  40334a:	f7ff bb5f 	b.w	402a0c <__retarget_lock_release_recursive>
  40334e:	bf00      	nop
  403350:	20400cb0 	.word	0x20400cb0

00403354 <_realloc_r>:
  403354:	2900      	cmp	r1, #0
  403356:	f000 8095 	beq.w	403484 <_realloc_r+0x130>
  40335a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40335e:	460d      	mov	r5, r1
  403360:	4616      	mov	r6, r2
  403362:	b083      	sub	sp, #12
  403364:	4680      	mov	r8, r0
  403366:	f106 070b 	add.w	r7, r6, #11
  40336a:	f7ff ffe7 	bl	40333c <__malloc_lock>
  40336e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403372:	2f16      	cmp	r7, #22
  403374:	f02e 0403 	bic.w	r4, lr, #3
  403378:	f1a5 0908 	sub.w	r9, r5, #8
  40337c:	d83c      	bhi.n	4033f8 <_realloc_r+0xa4>
  40337e:	2210      	movs	r2, #16
  403380:	4617      	mov	r7, r2
  403382:	42be      	cmp	r6, r7
  403384:	d83d      	bhi.n	403402 <_realloc_r+0xae>
  403386:	4294      	cmp	r4, r2
  403388:	da43      	bge.n	403412 <_realloc_r+0xbe>
  40338a:	4bc4      	ldr	r3, [pc, #784]	; (40369c <_realloc_r+0x348>)
  40338c:	6899      	ldr	r1, [r3, #8]
  40338e:	eb09 0004 	add.w	r0, r9, r4
  403392:	4288      	cmp	r0, r1
  403394:	f000 80b4 	beq.w	403500 <_realloc_r+0x1ac>
  403398:	6843      	ldr	r3, [r0, #4]
  40339a:	f023 0101 	bic.w	r1, r3, #1
  40339e:	4401      	add	r1, r0
  4033a0:	6849      	ldr	r1, [r1, #4]
  4033a2:	07c9      	lsls	r1, r1, #31
  4033a4:	d54c      	bpl.n	403440 <_realloc_r+0xec>
  4033a6:	f01e 0f01 	tst.w	lr, #1
  4033aa:	f000 809b 	beq.w	4034e4 <_realloc_r+0x190>
  4033ae:	4631      	mov	r1, r6
  4033b0:	4640      	mov	r0, r8
  4033b2:	f7ff fbad 	bl	402b10 <_malloc_r>
  4033b6:	4606      	mov	r6, r0
  4033b8:	2800      	cmp	r0, #0
  4033ba:	d03a      	beq.n	403432 <_realloc_r+0xde>
  4033bc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4033c0:	f023 0301 	bic.w	r3, r3, #1
  4033c4:	444b      	add	r3, r9
  4033c6:	f1a0 0208 	sub.w	r2, r0, #8
  4033ca:	429a      	cmp	r2, r3
  4033cc:	f000 8121 	beq.w	403612 <_realloc_r+0x2be>
  4033d0:	1f22      	subs	r2, r4, #4
  4033d2:	2a24      	cmp	r2, #36	; 0x24
  4033d4:	f200 8107 	bhi.w	4035e6 <_realloc_r+0x292>
  4033d8:	2a13      	cmp	r2, #19
  4033da:	f200 80db 	bhi.w	403594 <_realloc_r+0x240>
  4033de:	4603      	mov	r3, r0
  4033e0:	462a      	mov	r2, r5
  4033e2:	6811      	ldr	r1, [r2, #0]
  4033e4:	6019      	str	r1, [r3, #0]
  4033e6:	6851      	ldr	r1, [r2, #4]
  4033e8:	6059      	str	r1, [r3, #4]
  4033ea:	6892      	ldr	r2, [r2, #8]
  4033ec:	609a      	str	r2, [r3, #8]
  4033ee:	4629      	mov	r1, r5
  4033f0:	4640      	mov	r0, r8
  4033f2:	f7ff f86f 	bl	4024d4 <_free_r>
  4033f6:	e01c      	b.n	403432 <_realloc_r+0xde>
  4033f8:	f027 0707 	bic.w	r7, r7, #7
  4033fc:	2f00      	cmp	r7, #0
  4033fe:	463a      	mov	r2, r7
  403400:	dabf      	bge.n	403382 <_realloc_r+0x2e>
  403402:	2600      	movs	r6, #0
  403404:	230c      	movs	r3, #12
  403406:	4630      	mov	r0, r6
  403408:	f8c8 3000 	str.w	r3, [r8]
  40340c:	b003      	add	sp, #12
  40340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403412:	462e      	mov	r6, r5
  403414:	1be3      	subs	r3, r4, r7
  403416:	2b0f      	cmp	r3, #15
  403418:	d81e      	bhi.n	403458 <_realloc_r+0x104>
  40341a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40341e:	f003 0301 	and.w	r3, r3, #1
  403422:	4323      	orrs	r3, r4
  403424:	444c      	add	r4, r9
  403426:	f8c9 3004 	str.w	r3, [r9, #4]
  40342a:	6863      	ldr	r3, [r4, #4]
  40342c:	f043 0301 	orr.w	r3, r3, #1
  403430:	6063      	str	r3, [r4, #4]
  403432:	4640      	mov	r0, r8
  403434:	f7ff ff88 	bl	403348 <__malloc_unlock>
  403438:	4630      	mov	r0, r6
  40343a:	b003      	add	sp, #12
  40343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403440:	f023 0303 	bic.w	r3, r3, #3
  403444:	18e1      	adds	r1, r4, r3
  403446:	4291      	cmp	r1, r2
  403448:	db1f      	blt.n	40348a <_realloc_r+0x136>
  40344a:	68c3      	ldr	r3, [r0, #12]
  40344c:	6882      	ldr	r2, [r0, #8]
  40344e:	462e      	mov	r6, r5
  403450:	60d3      	str	r3, [r2, #12]
  403452:	460c      	mov	r4, r1
  403454:	609a      	str	r2, [r3, #8]
  403456:	e7dd      	b.n	403414 <_realloc_r+0xc0>
  403458:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40345c:	eb09 0107 	add.w	r1, r9, r7
  403460:	f002 0201 	and.w	r2, r2, #1
  403464:	444c      	add	r4, r9
  403466:	f043 0301 	orr.w	r3, r3, #1
  40346a:	4317      	orrs	r7, r2
  40346c:	f8c9 7004 	str.w	r7, [r9, #4]
  403470:	604b      	str	r3, [r1, #4]
  403472:	6863      	ldr	r3, [r4, #4]
  403474:	f043 0301 	orr.w	r3, r3, #1
  403478:	3108      	adds	r1, #8
  40347a:	6063      	str	r3, [r4, #4]
  40347c:	4640      	mov	r0, r8
  40347e:	f7ff f829 	bl	4024d4 <_free_r>
  403482:	e7d6      	b.n	403432 <_realloc_r+0xde>
  403484:	4611      	mov	r1, r2
  403486:	f7ff bb43 	b.w	402b10 <_malloc_r>
  40348a:	f01e 0f01 	tst.w	lr, #1
  40348e:	d18e      	bne.n	4033ae <_realloc_r+0x5a>
  403490:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403494:	eba9 0a01 	sub.w	sl, r9, r1
  403498:	f8da 1004 	ldr.w	r1, [sl, #4]
  40349c:	f021 0103 	bic.w	r1, r1, #3
  4034a0:	440b      	add	r3, r1
  4034a2:	4423      	add	r3, r4
  4034a4:	4293      	cmp	r3, r2
  4034a6:	db25      	blt.n	4034f4 <_realloc_r+0x1a0>
  4034a8:	68c2      	ldr	r2, [r0, #12]
  4034aa:	6881      	ldr	r1, [r0, #8]
  4034ac:	4656      	mov	r6, sl
  4034ae:	60ca      	str	r2, [r1, #12]
  4034b0:	6091      	str	r1, [r2, #8]
  4034b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4034b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4034ba:	1f22      	subs	r2, r4, #4
  4034bc:	2a24      	cmp	r2, #36	; 0x24
  4034be:	60c1      	str	r1, [r0, #12]
  4034c0:	6088      	str	r0, [r1, #8]
  4034c2:	f200 8094 	bhi.w	4035ee <_realloc_r+0x29a>
  4034c6:	2a13      	cmp	r2, #19
  4034c8:	d96f      	bls.n	4035aa <_realloc_r+0x256>
  4034ca:	6829      	ldr	r1, [r5, #0]
  4034cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4034d0:	6869      	ldr	r1, [r5, #4]
  4034d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4034d6:	2a1b      	cmp	r2, #27
  4034d8:	f200 80a2 	bhi.w	403620 <_realloc_r+0x2cc>
  4034dc:	3508      	adds	r5, #8
  4034de:	f10a 0210 	add.w	r2, sl, #16
  4034e2:	e063      	b.n	4035ac <_realloc_r+0x258>
  4034e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4034e8:	eba9 0a03 	sub.w	sl, r9, r3
  4034ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4034f0:	f021 0103 	bic.w	r1, r1, #3
  4034f4:	1863      	adds	r3, r4, r1
  4034f6:	4293      	cmp	r3, r2
  4034f8:	f6ff af59 	blt.w	4033ae <_realloc_r+0x5a>
  4034fc:	4656      	mov	r6, sl
  4034fe:	e7d8      	b.n	4034b2 <_realloc_r+0x15e>
  403500:	6841      	ldr	r1, [r0, #4]
  403502:	f021 0b03 	bic.w	fp, r1, #3
  403506:	44a3      	add	fp, r4
  403508:	f107 0010 	add.w	r0, r7, #16
  40350c:	4583      	cmp	fp, r0
  40350e:	da56      	bge.n	4035be <_realloc_r+0x26a>
  403510:	f01e 0f01 	tst.w	lr, #1
  403514:	f47f af4b 	bne.w	4033ae <_realloc_r+0x5a>
  403518:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40351c:	eba9 0a01 	sub.w	sl, r9, r1
  403520:	f8da 1004 	ldr.w	r1, [sl, #4]
  403524:	f021 0103 	bic.w	r1, r1, #3
  403528:	448b      	add	fp, r1
  40352a:	4558      	cmp	r0, fp
  40352c:	dce2      	bgt.n	4034f4 <_realloc_r+0x1a0>
  40352e:	4656      	mov	r6, sl
  403530:	f8da 100c 	ldr.w	r1, [sl, #12]
  403534:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403538:	1f22      	subs	r2, r4, #4
  40353a:	2a24      	cmp	r2, #36	; 0x24
  40353c:	60c1      	str	r1, [r0, #12]
  40353e:	6088      	str	r0, [r1, #8]
  403540:	f200 808f 	bhi.w	403662 <_realloc_r+0x30e>
  403544:	2a13      	cmp	r2, #19
  403546:	f240 808a 	bls.w	40365e <_realloc_r+0x30a>
  40354a:	6829      	ldr	r1, [r5, #0]
  40354c:	f8ca 1008 	str.w	r1, [sl, #8]
  403550:	6869      	ldr	r1, [r5, #4]
  403552:	f8ca 100c 	str.w	r1, [sl, #12]
  403556:	2a1b      	cmp	r2, #27
  403558:	f200 808a 	bhi.w	403670 <_realloc_r+0x31c>
  40355c:	3508      	adds	r5, #8
  40355e:	f10a 0210 	add.w	r2, sl, #16
  403562:	6829      	ldr	r1, [r5, #0]
  403564:	6011      	str	r1, [r2, #0]
  403566:	6869      	ldr	r1, [r5, #4]
  403568:	6051      	str	r1, [r2, #4]
  40356a:	68a9      	ldr	r1, [r5, #8]
  40356c:	6091      	str	r1, [r2, #8]
  40356e:	eb0a 0107 	add.w	r1, sl, r7
  403572:	ebab 0207 	sub.w	r2, fp, r7
  403576:	f042 0201 	orr.w	r2, r2, #1
  40357a:	6099      	str	r1, [r3, #8]
  40357c:	604a      	str	r2, [r1, #4]
  40357e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403582:	f003 0301 	and.w	r3, r3, #1
  403586:	431f      	orrs	r7, r3
  403588:	4640      	mov	r0, r8
  40358a:	f8ca 7004 	str.w	r7, [sl, #4]
  40358e:	f7ff fedb 	bl	403348 <__malloc_unlock>
  403592:	e751      	b.n	403438 <_realloc_r+0xe4>
  403594:	682b      	ldr	r3, [r5, #0]
  403596:	6003      	str	r3, [r0, #0]
  403598:	686b      	ldr	r3, [r5, #4]
  40359a:	6043      	str	r3, [r0, #4]
  40359c:	2a1b      	cmp	r2, #27
  40359e:	d82d      	bhi.n	4035fc <_realloc_r+0x2a8>
  4035a0:	f100 0308 	add.w	r3, r0, #8
  4035a4:	f105 0208 	add.w	r2, r5, #8
  4035a8:	e71b      	b.n	4033e2 <_realloc_r+0x8e>
  4035aa:	4632      	mov	r2, r6
  4035ac:	6829      	ldr	r1, [r5, #0]
  4035ae:	6011      	str	r1, [r2, #0]
  4035b0:	6869      	ldr	r1, [r5, #4]
  4035b2:	6051      	str	r1, [r2, #4]
  4035b4:	68a9      	ldr	r1, [r5, #8]
  4035b6:	6091      	str	r1, [r2, #8]
  4035b8:	461c      	mov	r4, r3
  4035ba:	46d1      	mov	r9, sl
  4035bc:	e72a      	b.n	403414 <_realloc_r+0xc0>
  4035be:	eb09 0107 	add.w	r1, r9, r7
  4035c2:	ebab 0b07 	sub.w	fp, fp, r7
  4035c6:	f04b 0201 	orr.w	r2, fp, #1
  4035ca:	6099      	str	r1, [r3, #8]
  4035cc:	604a      	str	r2, [r1, #4]
  4035ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4035d2:	f003 0301 	and.w	r3, r3, #1
  4035d6:	431f      	orrs	r7, r3
  4035d8:	4640      	mov	r0, r8
  4035da:	f845 7c04 	str.w	r7, [r5, #-4]
  4035de:	f7ff feb3 	bl	403348 <__malloc_unlock>
  4035e2:	462e      	mov	r6, r5
  4035e4:	e728      	b.n	403438 <_realloc_r+0xe4>
  4035e6:	4629      	mov	r1, r5
  4035e8:	f7ff fe44 	bl	403274 <memmove>
  4035ec:	e6ff      	b.n	4033ee <_realloc_r+0x9a>
  4035ee:	4629      	mov	r1, r5
  4035f0:	4630      	mov	r0, r6
  4035f2:	461c      	mov	r4, r3
  4035f4:	46d1      	mov	r9, sl
  4035f6:	f7ff fe3d 	bl	403274 <memmove>
  4035fa:	e70b      	b.n	403414 <_realloc_r+0xc0>
  4035fc:	68ab      	ldr	r3, [r5, #8]
  4035fe:	6083      	str	r3, [r0, #8]
  403600:	68eb      	ldr	r3, [r5, #12]
  403602:	60c3      	str	r3, [r0, #12]
  403604:	2a24      	cmp	r2, #36	; 0x24
  403606:	d017      	beq.n	403638 <_realloc_r+0x2e4>
  403608:	f100 0310 	add.w	r3, r0, #16
  40360c:	f105 0210 	add.w	r2, r5, #16
  403610:	e6e7      	b.n	4033e2 <_realloc_r+0x8e>
  403612:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403616:	f023 0303 	bic.w	r3, r3, #3
  40361a:	441c      	add	r4, r3
  40361c:	462e      	mov	r6, r5
  40361e:	e6f9      	b.n	403414 <_realloc_r+0xc0>
  403620:	68a9      	ldr	r1, [r5, #8]
  403622:	f8ca 1010 	str.w	r1, [sl, #16]
  403626:	68e9      	ldr	r1, [r5, #12]
  403628:	f8ca 1014 	str.w	r1, [sl, #20]
  40362c:	2a24      	cmp	r2, #36	; 0x24
  40362e:	d00c      	beq.n	40364a <_realloc_r+0x2f6>
  403630:	3510      	adds	r5, #16
  403632:	f10a 0218 	add.w	r2, sl, #24
  403636:	e7b9      	b.n	4035ac <_realloc_r+0x258>
  403638:	692b      	ldr	r3, [r5, #16]
  40363a:	6103      	str	r3, [r0, #16]
  40363c:	696b      	ldr	r3, [r5, #20]
  40363e:	6143      	str	r3, [r0, #20]
  403640:	f105 0218 	add.w	r2, r5, #24
  403644:	f100 0318 	add.w	r3, r0, #24
  403648:	e6cb      	b.n	4033e2 <_realloc_r+0x8e>
  40364a:	692a      	ldr	r2, [r5, #16]
  40364c:	f8ca 2018 	str.w	r2, [sl, #24]
  403650:	696a      	ldr	r2, [r5, #20]
  403652:	f8ca 201c 	str.w	r2, [sl, #28]
  403656:	3518      	adds	r5, #24
  403658:	f10a 0220 	add.w	r2, sl, #32
  40365c:	e7a6      	b.n	4035ac <_realloc_r+0x258>
  40365e:	4632      	mov	r2, r6
  403660:	e77f      	b.n	403562 <_realloc_r+0x20e>
  403662:	4629      	mov	r1, r5
  403664:	4630      	mov	r0, r6
  403666:	9301      	str	r3, [sp, #4]
  403668:	f7ff fe04 	bl	403274 <memmove>
  40366c:	9b01      	ldr	r3, [sp, #4]
  40366e:	e77e      	b.n	40356e <_realloc_r+0x21a>
  403670:	68a9      	ldr	r1, [r5, #8]
  403672:	f8ca 1010 	str.w	r1, [sl, #16]
  403676:	68e9      	ldr	r1, [r5, #12]
  403678:	f8ca 1014 	str.w	r1, [sl, #20]
  40367c:	2a24      	cmp	r2, #36	; 0x24
  40367e:	d003      	beq.n	403688 <_realloc_r+0x334>
  403680:	3510      	adds	r5, #16
  403682:	f10a 0218 	add.w	r2, sl, #24
  403686:	e76c      	b.n	403562 <_realloc_r+0x20e>
  403688:	692a      	ldr	r2, [r5, #16]
  40368a:	f8ca 2018 	str.w	r2, [sl, #24]
  40368e:	696a      	ldr	r2, [r5, #20]
  403690:	f8ca 201c 	str.w	r2, [sl, #28]
  403694:	3518      	adds	r5, #24
  403696:	f10a 0220 	add.w	r2, sl, #32
  40369a:	e762      	b.n	403562 <_realloc_r+0x20e>
  40369c:	20400670 	.word	0x20400670

004036a0 <_sbrk_r>:
  4036a0:	b538      	push	{r3, r4, r5, lr}
  4036a2:	4c07      	ldr	r4, [pc, #28]	; (4036c0 <_sbrk_r+0x20>)
  4036a4:	2300      	movs	r3, #0
  4036a6:	4605      	mov	r5, r0
  4036a8:	4608      	mov	r0, r1
  4036aa:	6023      	str	r3, [r4, #0]
  4036ac:	f7fd fa44 	bl	400b38 <_sbrk>
  4036b0:	1c43      	adds	r3, r0, #1
  4036b2:	d000      	beq.n	4036b6 <_sbrk_r+0x16>
  4036b4:	bd38      	pop	{r3, r4, r5, pc}
  4036b6:	6823      	ldr	r3, [r4, #0]
  4036b8:	2b00      	cmp	r3, #0
  4036ba:	d0fb      	beq.n	4036b4 <_sbrk_r+0x14>
  4036bc:	602b      	str	r3, [r5, #0]
  4036be:	bd38      	pop	{r3, r4, r5, pc}
  4036c0:	20400cc4 	.word	0x20400cc4

004036c4 <__sread>:
  4036c4:	b510      	push	{r4, lr}
  4036c6:	460c      	mov	r4, r1
  4036c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4036cc:	f000 fa7e 	bl	403bcc <_read_r>
  4036d0:	2800      	cmp	r0, #0
  4036d2:	db03      	blt.n	4036dc <__sread+0x18>
  4036d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4036d6:	4403      	add	r3, r0
  4036d8:	6523      	str	r3, [r4, #80]	; 0x50
  4036da:	bd10      	pop	{r4, pc}
  4036dc:	89a3      	ldrh	r3, [r4, #12]
  4036de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4036e2:	81a3      	strh	r3, [r4, #12]
  4036e4:	bd10      	pop	{r4, pc}
  4036e6:	bf00      	nop

004036e8 <__swrite>:
  4036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036ec:	4616      	mov	r6, r2
  4036ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4036f2:	461f      	mov	r7, r3
  4036f4:	05d3      	lsls	r3, r2, #23
  4036f6:	460c      	mov	r4, r1
  4036f8:	4605      	mov	r5, r0
  4036fa:	d507      	bpl.n	40370c <__swrite+0x24>
  4036fc:	2200      	movs	r2, #0
  4036fe:	2302      	movs	r3, #2
  403700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403704:	f000 fa4c 	bl	403ba0 <_lseek_r>
  403708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40370c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403714:	81a2      	strh	r2, [r4, #12]
  403716:	463b      	mov	r3, r7
  403718:	4632      	mov	r2, r6
  40371a:	4628      	mov	r0, r5
  40371c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403720:	f000 b92c 	b.w	40397c <_write_r>

00403724 <__sseek>:
  403724:	b510      	push	{r4, lr}
  403726:	460c      	mov	r4, r1
  403728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40372c:	f000 fa38 	bl	403ba0 <_lseek_r>
  403730:	89a3      	ldrh	r3, [r4, #12]
  403732:	1c42      	adds	r2, r0, #1
  403734:	bf0e      	itee	eq
  403736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40373a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40373e:	6520      	strne	r0, [r4, #80]	; 0x50
  403740:	81a3      	strh	r3, [r4, #12]
  403742:	bd10      	pop	{r4, pc}

00403744 <__sclose>:
  403744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403748:	f000 b990 	b.w	403a6c <_close_r>
	...

00403780 <strlen>:
  403780:	f890 f000 	pld	[r0]
  403784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403788:	f020 0107 	bic.w	r1, r0, #7
  40378c:	f06f 0c00 	mvn.w	ip, #0
  403790:	f010 0407 	ands.w	r4, r0, #7
  403794:	f891 f020 	pld	[r1, #32]
  403798:	f040 8049 	bne.w	40382e <strlen+0xae>
  40379c:	f04f 0400 	mov.w	r4, #0
  4037a0:	f06f 0007 	mvn.w	r0, #7
  4037a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4037a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4037ac:	f100 0008 	add.w	r0, r0, #8
  4037b0:	fa82 f24c 	uadd8	r2, r2, ip
  4037b4:	faa4 f28c 	sel	r2, r4, ip
  4037b8:	fa83 f34c 	uadd8	r3, r3, ip
  4037bc:	faa2 f38c 	sel	r3, r2, ip
  4037c0:	bb4b      	cbnz	r3, 403816 <strlen+0x96>
  4037c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4037c6:	fa82 f24c 	uadd8	r2, r2, ip
  4037ca:	f100 0008 	add.w	r0, r0, #8
  4037ce:	faa4 f28c 	sel	r2, r4, ip
  4037d2:	fa83 f34c 	uadd8	r3, r3, ip
  4037d6:	faa2 f38c 	sel	r3, r2, ip
  4037da:	b9e3      	cbnz	r3, 403816 <strlen+0x96>
  4037dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4037e0:	fa82 f24c 	uadd8	r2, r2, ip
  4037e4:	f100 0008 	add.w	r0, r0, #8
  4037e8:	faa4 f28c 	sel	r2, r4, ip
  4037ec:	fa83 f34c 	uadd8	r3, r3, ip
  4037f0:	faa2 f38c 	sel	r3, r2, ip
  4037f4:	b97b      	cbnz	r3, 403816 <strlen+0x96>
  4037f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4037fa:	f101 0120 	add.w	r1, r1, #32
  4037fe:	fa82 f24c 	uadd8	r2, r2, ip
  403802:	f100 0008 	add.w	r0, r0, #8
  403806:	faa4 f28c 	sel	r2, r4, ip
  40380a:	fa83 f34c 	uadd8	r3, r3, ip
  40380e:	faa2 f38c 	sel	r3, r2, ip
  403812:	2b00      	cmp	r3, #0
  403814:	d0c6      	beq.n	4037a4 <strlen+0x24>
  403816:	2a00      	cmp	r2, #0
  403818:	bf04      	itt	eq
  40381a:	3004      	addeq	r0, #4
  40381c:	461a      	moveq	r2, r3
  40381e:	ba12      	rev	r2, r2
  403820:	fab2 f282 	clz	r2, r2
  403824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40382c:	4770      	bx	lr
  40382e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403832:	f004 0503 	and.w	r5, r4, #3
  403836:	f1c4 0000 	rsb	r0, r4, #0
  40383a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40383e:	f014 0f04 	tst.w	r4, #4
  403842:	f891 f040 	pld	[r1, #64]	; 0x40
  403846:	fa0c f505 	lsl.w	r5, ip, r5
  40384a:	ea62 0205 	orn	r2, r2, r5
  40384e:	bf1c      	itt	ne
  403850:	ea63 0305 	ornne	r3, r3, r5
  403854:	4662      	movne	r2, ip
  403856:	f04f 0400 	mov.w	r4, #0
  40385a:	e7a9      	b.n	4037b0 <strlen+0x30>

0040385c <__swbuf_r>:
  40385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40385e:	460d      	mov	r5, r1
  403860:	4614      	mov	r4, r2
  403862:	4606      	mov	r6, r0
  403864:	b110      	cbz	r0, 40386c <__swbuf_r+0x10>
  403866:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403868:	2b00      	cmp	r3, #0
  40386a:	d04b      	beq.n	403904 <__swbuf_r+0xa8>
  40386c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403870:	69a3      	ldr	r3, [r4, #24]
  403872:	60a3      	str	r3, [r4, #8]
  403874:	b291      	uxth	r1, r2
  403876:	0708      	lsls	r0, r1, #28
  403878:	d539      	bpl.n	4038ee <__swbuf_r+0x92>
  40387a:	6923      	ldr	r3, [r4, #16]
  40387c:	2b00      	cmp	r3, #0
  40387e:	d036      	beq.n	4038ee <__swbuf_r+0x92>
  403880:	b2ed      	uxtb	r5, r5
  403882:	0489      	lsls	r1, r1, #18
  403884:	462f      	mov	r7, r5
  403886:	d515      	bpl.n	4038b4 <__swbuf_r+0x58>
  403888:	6822      	ldr	r2, [r4, #0]
  40388a:	6961      	ldr	r1, [r4, #20]
  40388c:	1ad3      	subs	r3, r2, r3
  40388e:	428b      	cmp	r3, r1
  403890:	da1c      	bge.n	4038cc <__swbuf_r+0x70>
  403892:	3301      	adds	r3, #1
  403894:	68a1      	ldr	r1, [r4, #8]
  403896:	1c50      	adds	r0, r2, #1
  403898:	3901      	subs	r1, #1
  40389a:	60a1      	str	r1, [r4, #8]
  40389c:	6020      	str	r0, [r4, #0]
  40389e:	7015      	strb	r5, [r2, #0]
  4038a0:	6962      	ldr	r2, [r4, #20]
  4038a2:	429a      	cmp	r2, r3
  4038a4:	d01a      	beq.n	4038dc <__swbuf_r+0x80>
  4038a6:	89a3      	ldrh	r3, [r4, #12]
  4038a8:	07db      	lsls	r3, r3, #31
  4038aa:	d501      	bpl.n	4038b0 <__swbuf_r+0x54>
  4038ac:	2d0a      	cmp	r5, #10
  4038ae:	d015      	beq.n	4038dc <__swbuf_r+0x80>
  4038b0:	4638      	mov	r0, r7
  4038b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4038b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4038ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4038be:	81a2      	strh	r2, [r4, #12]
  4038c0:	6822      	ldr	r2, [r4, #0]
  4038c2:	6661      	str	r1, [r4, #100]	; 0x64
  4038c4:	6961      	ldr	r1, [r4, #20]
  4038c6:	1ad3      	subs	r3, r2, r3
  4038c8:	428b      	cmp	r3, r1
  4038ca:	dbe2      	blt.n	403892 <__swbuf_r+0x36>
  4038cc:	4621      	mov	r1, r4
  4038ce:	4630      	mov	r0, r6
  4038d0:	f7fe fc82 	bl	4021d8 <_fflush_r>
  4038d4:	b940      	cbnz	r0, 4038e8 <__swbuf_r+0x8c>
  4038d6:	6822      	ldr	r2, [r4, #0]
  4038d8:	2301      	movs	r3, #1
  4038da:	e7db      	b.n	403894 <__swbuf_r+0x38>
  4038dc:	4621      	mov	r1, r4
  4038de:	4630      	mov	r0, r6
  4038e0:	f7fe fc7a 	bl	4021d8 <_fflush_r>
  4038e4:	2800      	cmp	r0, #0
  4038e6:	d0e3      	beq.n	4038b0 <__swbuf_r+0x54>
  4038e8:	f04f 37ff 	mov.w	r7, #4294967295
  4038ec:	e7e0      	b.n	4038b0 <__swbuf_r+0x54>
  4038ee:	4621      	mov	r1, r4
  4038f0:	4630      	mov	r0, r6
  4038f2:	f7fe fb5d 	bl	401fb0 <__swsetup_r>
  4038f6:	2800      	cmp	r0, #0
  4038f8:	d1f6      	bne.n	4038e8 <__swbuf_r+0x8c>
  4038fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4038fe:	6923      	ldr	r3, [r4, #16]
  403900:	b291      	uxth	r1, r2
  403902:	e7bd      	b.n	403880 <__swbuf_r+0x24>
  403904:	f7fe fcc0 	bl	402288 <__sinit>
  403908:	e7b0      	b.n	40386c <__swbuf_r+0x10>
  40390a:	bf00      	nop

0040390c <_wcrtomb_r>:
  40390c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40390e:	4606      	mov	r6, r0
  403910:	b085      	sub	sp, #20
  403912:	461f      	mov	r7, r3
  403914:	b189      	cbz	r1, 40393a <_wcrtomb_r+0x2e>
  403916:	4c10      	ldr	r4, [pc, #64]	; (403958 <_wcrtomb_r+0x4c>)
  403918:	4d10      	ldr	r5, [pc, #64]	; (40395c <_wcrtomb_r+0x50>)
  40391a:	6824      	ldr	r4, [r4, #0]
  40391c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40391e:	2c00      	cmp	r4, #0
  403920:	bf08      	it	eq
  403922:	462c      	moveq	r4, r5
  403924:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403928:	47a0      	blx	r4
  40392a:	1c43      	adds	r3, r0, #1
  40392c:	d103      	bne.n	403936 <_wcrtomb_r+0x2a>
  40392e:	2200      	movs	r2, #0
  403930:	238a      	movs	r3, #138	; 0x8a
  403932:	603a      	str	r2, [r7, #0]
  403934:	6033      	str	r3, [r6, #0]
  403936:	b005      	add	sp, #20
  403938:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40393a:	460c      	mov	r4, r1
  40393c:	4906      	ldr	r1, [pc, #24]	; (403958 <_wcrtomb_r+0x4c>)
  40393e:	4a07      	ldr	r2, [pc, #28]	; (40395c <_wcrtomb_r+0x50>)
  403940:	6809      	ldr	r1, [r1, #0]
  403942:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403944:	2900      	cmp	r1, #0
  403946:	bf08      	it	eq
  403948:	4611      	moveq	r1, r2
  40394a:	4622      	mov	r2, r4
  40394c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403950:	a901      	add	r1, sp, #4
  403952:	47a0      	blx	r4
  403954:	e7e9      	b.n	40392a <_wcrtomb_r+0x1e>
  403956:	bf00      	nop
  403958:	204000d0 	.word	0x204000d0
  40395c:	20400504 	.word	0x20400504

00403960 <__ascii_wctomb>:
  403960:	b121      	cbz	r1, 40396c <__ascii_wctomb+0xc>
  403962:	2aff      	cmp	r2, #255	; 0xff
  403964:	d804      	bhi.n	403970 <__ascii_wctomb+0x10>
  403966:	700a      	strb	r2, [r1, #0]
  403968:	2001      	movs	r0, #1
  40396a:	4770      	bx	lr
  40396c:	4608      	mov	r0, r1
  40396e:	4770      	bx	lr
  403970:	238a      	movs	r3, #138	; 0x8a
  403972:	6003      	str	r3, [r0, #0]
  403974:	f04f 30ff 	mov.w	r0, #4294967295
  403978:	4770      	bx	lr
  40397a:	bf00      	nop

0040397c <_write_r>:
  40397c:	b570      	push	{r4, r5, r6, lr}
  40397e:	460d      	mov	r5, r1
  403980:	4c08      	ldr	r4, [pc, #32]	; (4039a4 <_write_r+0x28>)
  403982:	4611      	mov	r1, r2
  403984:	4606      	mov	r6, r0
  403986:	461a      	mov	r2, r3
  403988:	4628      	mov	r0, r5
  40398a:	2300      	movs	r3, #0
  40398c:	6023      	str	r3, [r4, #0]
  40398e:	f7fc fc77 	bl	400280 <_write>
  403992:	1c43      	adds	r3, r0, #1
  403994:	d000      	beq.n	403998 <_write_r+0x1c>
  403996:	bd70      	pop	{r4, r5, r6, pc}
  403998:	6823      	ldr	r3, [r4, #0]
  40399a:	2b00      	cmp	r3, #0
  40399c:	d0fb      	beq.n	403996 <_write_r+0x1a>
  40399e:	6033      	str	r3, [r6, #0]
  4039a0:	bd70      	pop	{r4, r5, r6, pc}
  4039a2:	bf00      	nop
  4039a4:	20400cc4 	.word	0x20400cc4

004039a8 <__register_exitproc>:
  4039a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4039ac:	4d2c      	ldr	r5, [pc, #176]	; (403a60 <__register_exitproc+0xb8>)
  4039ae:	4606      	mov	r6, r0
  4039b0:	6828      	ldr	r0, [r5, #0]
  4039b2:	4698      	mov	r8, r3
  4039b4:	460f      	mov	r7, r1
  4039b6:	4691      	mov	r9, r2
  4039b8:	f7ff f826 	bl	402a08 <__retarget_lock_acquire_recursive>
  4039bc:	4b29      	ldr	r3, [pc, #164]	; (403a64 <__register_exitproc+0xbc>)
  4039be:	681c      	ldr	r4, [r3, #0]
  4039c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4039c4:	2b00      	cmp	r3, #0
  4039c6:	d03e      	beq.n	403a46 <__register_exitproc+0x9e>
  4039c8:	685a      	ldr	r2, [r3, #4]
  4039ca:	2a1f      	cmp	r2, #31
  4039cc:	dc1c      	bgt.n	403a08 <__register_exitproc+0x60>
  4039ce:	f102 0e01 	add.w	lr, r2, #1
  4039d2:	b176      	cbz	r6, 4039f2 <__register_exitproc+0x4a>
  4039d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4039d8:	2401      	movs	r4, #1
  4039da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4039de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4039e2:	4094      	lsls	r4, r2
  4039e4:	4320      	orrs	r0, r4
  4039e6:	2e02      	cmp	r6, #2
  4039e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4039ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4039f0:	d023      	beq.n	403a3a <__register_exitproc+0x92>
  4039f2:	3202      	adds	r2, #2
  4039f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4039f8:	6828      	ldr	r0, [r5, #0]
  4039fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4039fe:	f7ff f805 	bl	402a0c <__retarget_lock_release_recursive>
  403a02:	2000      	movs	r0, #0
  403a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a08:	4b17      	ldr	r3, [pc, #92]	; (403a68 <__register_exitproc+0xc0>)
  403a0a:	b30b      	cbz	r3, 403a50 <__register_exitproc+0xa8>
  403a0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403a10:	f7ff f876 	bl	402b00 <malloc>
  403a14:	4603      	mov	r3, r0
  403a16:	b1d8      	cbz	r0, 403a50 <__register_exitproc+0xa8>
  403a18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403a1c:	6002      	str	r2, [r0, #0]
  403a1e:	2100      	movs	r1, #0
  403a20:	6041      	str	r1, [r0, #4]
  403a22:	460a      	mov	r2, r1
  403a24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403a28:	f04f 0e01 	mov.w	lr, #1
  403a2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403a30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403a34:	2e00      	cmp	r6, #0
  403a36:	d0dc      	beq.n	4039f2 <__register_exitproc+0x4a>
  403a38:	e7cc      	b.n	4039d4 <__register_exitproc+0x2c>
  403a3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403a3e:	430c      	orrs	r4, r1
  403a40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403a44:	e7d5      	b.n	4039f2 <__register_exitproc+0x4a>
  403a46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403a4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403a4e:	e7bb      	b.n	4039c8 <__register_exitproc+0x20>
  403a50:	6828      	ldr	r0, [r5, #0]
  403a52:	f7fe ffdb 	bl	402a0c <__retarget_lock_release_recursive>
  403a56:	f04f 30ff 	mov.w	r0, #4294967295
  403a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a5e:	bf00      	nop
  403a60:	20400500 	.word	0x20400500
  403a64:	00403fa0 	.word	0x00403fa0
  403a68:	00402b01 	.word	0x00402b01

00403a6c <_close_r>:
  403a6c:	b538      	push	{r3, r4, r5, lr}
  403a6e:	4c07      	ldr	r4, [pc, #28]	; (403a8c <_close_r+0x20>)
  403a70:	2300      	movs	r3, #0
  403a72:	4605      	mov	r5, r0
  403a74:	4608      	mov	r0, r1
  403a76:	6023      	str	r3, [r4, #0]
  403a78:	f7fd f87a 	bl	400b70 <_close>
  403a7c:	1c43      	adds	r3, r0, #1
  403a7e:	d000      	beq.n	403a82 <_close_r+0x16>
  403a80:	bd38      	pop	{r3, r4, r5, pc}
  403a82:	6823      	ldr	r3, [r4, #0]
  403a84:	2b00      	cmp	r3, #0
  403a86:	d0fb      	beq.n	403a80 <_close_r+0x14>
  403a88:	602b      	str	r3, [r5, #0]
  403a8a:	bd38      	pop	{r3, r4, r5, pc}
  403a8c:	20400cc4 	.word	0x20400cc4

00403a90 <_fclose_r>:
  403a90:	b570      	push	{r4, r5, r6, lr}
  403a92:	b159      	cbz	r1, 403aac <_fclose_r+0x1c>
  403a94:	4605      	mov	r5, r0
  403a96:	460c      	mov	r4, r1
  403a98:	b110      	cbz	r0, 403aa0 <_fclose_r+0x10>
  403a9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a9c:	2b00      	cmp	r3, #0
  403a9e:	d03c      	beq.n	403b1a <_fclose_r+0x8a>
  403aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403aa2:	07d8      	lsls	r0, r3, #31
  403aa4:	d505      	bpl.n	403ab2 <_fclose_r+0x22>
  403aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403aaa:	b92b      	cbnz	r3, 403ab8 <_fclose_r+0x28>
  403aac:	2600      	movs	r6, #0
  403aae:	4630      	mov	r0, r6
  403ab0:	bd70      	pop	{r4, r5, r6, pc}
  403ab2:	89a3      	ldrh	r3, [r4, #12]
  403ab4:	0599      	lsls	r1, r3, #22
  403ab6:	d53c      	bpl.n	403b32 <_fclose_r+0xa2>
  403ab8:	4621      	mov	r1, r4
  403aba:	4628      	mov	r0, r5
  403abc:	f7fe faec 	bl	402098 <__sflush_r>
  403ac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403ac2:	4606      	mov	r6, r0
  403ac4:	b133      	cbz	r3, 403ad4 <_fclose_r+0x44>
  403ac6:	69e1      	ldr	r1, [r4, #28]
  403ac8:	4628      	mov	r0, r5
  403aca:	4798      	blx	r3
  403acc:	2800      	cmp	r0, #0
  403ace:	bfb8      	it	lt
  403ad0:	f04f 36ff 	movlt.w	r6, #4294967295
  403ad4:	89a3      	ldrh	r3, [r4, #12]
  403ad6:	061a      	lsls	r2, r3, #24
  403ad8:	d422      	bmi.n	403b20 <_fclose_r+0x90>
  403ada:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403adc:	b141      	cbz	r1, 403af0 <_fclose_r+0x60>
  403ade:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403ae2:	4299      	cmp	r1, r3
  403ae4:	d002      	beq.n	403aec <_fclose_r+0x5c>
  403ae6:	4628      	mov	r0, r5
  403ae8:	f7fe fcf4 	bl	4024d4 <_free_r>
  403aec:	2300      	movs	r3, #0
  403aee:	6323      	str	r3, [r4, #48]	; 0x30
  403af0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403af2:	b121      	cbz	r1, 403afe <_fclose_r+0x6e>
  403af4:	4628      	mov	r0, r5
  403af6:	f7fe fced 	bl	4024d4 <_free_r>
  403afa:	2300      	movs	r3, #0
  403afc:	6463      	str	r3, [r4, #68]	; 0x44
  403afe:	f7fe fbef 	bl	4022e0 <__sfp_lock_acquire>
  403b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403b04:	2200      	movs	r2, #0
  403b06:	07db      	lsls	r3, r3, #31
  403b08:	81a2      	strh	r2, [r4, #12]
  403b0a:	d50e      	bpl.n	403b2a <_fclose_r+0x9a>
  403b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b0e:	f7fe ff79 	bl	402a04 <__retarget_lock_close_recursive>
  403b12:	f7fe fbeb 	bl	4022ec <__sfp_lock_release>
  403b16:	4630      	mov	r0, r6
  403b18:	bd70      	pop	{r4, r5, r6, pc}
  403b1a:	f7fe fbb5 	bl	402288 <__sinit>
  403b1e:	e7bf      	b.n	403aa0 <_fclose_r+0x10>
  403b20:	6921      	ldr	r1, [r4, #16]
  403b22:	4628      	mov	r0, r5
  403b24:	f7fe fcd6 	bl	4024d4 <_free_r>
  403b28:	e7d7      	b.n	403ada <_fclose_r+0x4a>
  403b2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b2c:	f7fe ff6e 	bl	402a0c <__retarget_lock_release_recursive>
  403b30:	e7ec      	b.n	403b0c <_fclose_r+0x7c>
  403b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b34:	f7fe ff68 	bl	402a08 <__retarget_lock_acquire_recursive>
  403b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b3c:	2b00      	cmp	r3, #0
  403b3e:	d1bb      	bne.n	403ab8 <_fclose_r+0x28>
  403b40:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403b42:	f016 0601 	ands.w	r6, r6, #1
  403b46:	d1b1      	bne.n	403aac <_fclose_r+0x1c>
  403b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b4a:	f7fe ff5f 	bl	402a0c <__retarget_lock_release_recursive>
  403b4e:	4630      	mov	r0, r6
  403b50:	bd70      	pop	{r4, r5, r6, pc}
  403b52:	bf00      	nop

00403b54 <_fstat_r>:
  403b54:	b538      	push	{r3, r4, r5, lr}
  403b56:	460b      	mov	r3, r1
  403b58:	4c07      	ldr	r4, [pc, #28]	; (403b78 <_fstat_r+0x24>)
  403b5a:	4605      	mov	r5, r0
  403b5c:	4611      	mov	r1, r2
  403b5e:	4618      	mov	r0, r3
  403b60:	2300      	movs	r3, #0
  403b62:	6023      	str	r3, [r4, #0]
  403b64:	f7fd f807 	bl	400b76 <_fstat>
  403b68:	1c43      	adds	r3, r0, #1
  403b6a:	d000      	beq.n	403b6e <_fstat_r+0x1a>
  403b6c:	bd38      	pop	{r3, r4, r5, pc}
  403b6e:	6823      	ldr	r3, [r4, #0]
  403b70:	2b00      	cmp	r3, #0
  403b72:	d0fb      	beq.n	403b6c <_fstat_r+0x18>
  403b74:	602b      	str	r3, [r5, #0]
  403b76:	bd38      	pop	{r3, r4, r5, pc}
  403b78:	20400cc4 	.word	0x20400cc4

00403b7c <_isatty_r>:
  403b7c:	b538      	push	{r3, r4, r5, lr}
  403b7e:	4c07      	ldr	r4, [pc, #28]	; (403b9c <_isatty_r+0x20>)
  403b80:	2300      	movs	r3, #0
  403b82:	4605      	mov	r5, r0
  403b84:	4608      	mov	r0, r1
  403b86:	6023      	str	r3, [r4, #0]
  403b88:	f7fc fffa 	bl	400b80 <_isatty>
  403b8c:	1c43      	adds	r3, r0, #1
  403b8e:	d000      	beq.n	403b92 <_isatty_r+0x16>
  403b90:	bd38      	pop	{r3, r4, r5, pc}
  403b92:	6823      	ldr	r3, [r4, #0]
  403b94:	2b00      	cmp	r3, #0
  403b96:	d0fb      	beq.n	403b90 <_isatty_r+0x14>
  403b98:	602b      	str	r3, [r5, #0]
  403b9a:	bd38      	pop	{r3, r4, r5, pc}
  403b9c:	20400cc4 	.word	0x20400cc4

00403ba0 <_lseek_r>:
  403ba0:	b570      	push	{r4, r5, r6, lr}
  403ba2:	460d      	mov	r5, r1
  403ba4:	4c08      	ldr	r4, [pc, #32]	; (403bc8 <_lseek_r+0x28>)
  403ba6:	4611      	mov	r1, r2
  403ba8:	4606      	mov	r6, r0
  403baa:	461a      	mov	r2, r3
  403bac:	4628      	mov	r0, r5
  403bae:	2300      	movs	r3, #0
  403bb0:	6023      	str	r3, [r4, #0]
  403bb2:	f7fc ffe7 	bl	400b84 <_lseek>
  403bb6:	1c43      	adds	r3, r0, #1
  403bb8:	d000      	beq.n	403bbc <_lseek_r+0x1c>
  403bba:	bd70      	pop	{r4, r5, r6, pc}
  403bbc:	6823      	ldr	r3, [r4, #0]
  403bbe:	2b00      	cmp	r3, #0
  403bc0:	d0fb      	beq.n	403bba <_lseek_r+0x1a>
  403bc2:	6033      	str	r3, [r6, #0]
  403bc4:	bd70      	pop	{r4, r5, r6, pc}
  403bc6:	bf00      	nop
  403bc8:	20400cc4 	.word	0x20400cc4

00403bcc <_read_r>:
  403bcc:	b570      	push	{r4, r5, r6, lr}
  403bce:	460d      	mov	r5, r1
  403bd0:	4c08      	ldr	r4, [pc, #32]	; (403bf4 <_read_r+0x28>)
  403bd2:	4611      	mov	r1, r2
  403bd4:	4606      	mov	r6, r0
  403bd6:	461a      	mov	r2, r3
  403bd8:	4628      	mov	r0, r5
  403bda:	2300      	movs	r3, #0
  403bdc:	6023      	str	r3, [r4, #0]
  403bde:	f7fc fb31 	bl	400244 <_read>
  403be2:	1c43      	adds	r3, r0, #1
  403be4:	d000      	beq.n	403be8 <_read_r+0x1c>
  403be6:	bd70      	pop	{r4, r5, r6, pc}
  403be8:	6823      	ldr	r3, [r4, #0]
  403bea:	2b00      	cmp	r3, #0
  403bec:	d0fb      	beq.n	403be6 <_read_r+0x1a>
  403bee:	6033      	str	r3, [r6, #0]
  403bf0:	bd70      	pop	{r4, r5, r6, pc}
  403bf2:	bf00      	nop
  403bf4:	20400cc4 	.word	0x20400cc4

00403bf8 <__aeabi_uldivmod>:
  403bf8:	b953      	cbnz	r3, 403c10 <__aeabi_uldivmod+0x18>
  403bfa:	b94a      	cbnz	r2, 403c10 <__aeabi_uldivmod+0x18>
  403bfc:	2900      	cmp	r1, #0
  403bfe:	bf08      	it	eq
  403c00:	2800      	cmpeq	r0, #0
  403c02:	bf1c      	itt	ne
  403c04:	f04f 31ff 	movne.w	r1, #4294967295
  403c08:	f04f 30ff 	movne.w	r0, #4294967295
  403c0c:	f000 b97a 	b.w	403f04 <__aeabi_idiv0>
  403c10:	f1ad 0c08 	sub.w	ip, sp, #8
  403c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403c18:	f000 f806 	bl	403c28 <__udivmoddi4>
  403c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c24:	b004      	add	sp, #16
  403c26:	4770      	bx	lr

00403c28 <__udivmoddi4>:
  403c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c2c:	468c      	mov	ip, r1
  403c2e:	460d      	mov	r5, r1
  403c30:	4604      	mov	r4, r0
  403c32:	9e08      	ldr	r6, [sp, #32]
  403c34:	2b00      	cmp	r3, #0
  403c36:	d151      	bne.n	403cdc <__udivmoddi4+0xb4>
  403c38:	428a      	cmp	r2, r1
  403c3a:	4617      	mov	r7, r2
  403c3c:	d96d      	bls.n	403d1a <__udivmoddi4+0xf2>
  403c3e:	fab2 fe82 	clz	lr, r2
  403c42:	f1be 0f00 	cmp.w	lr, #0
  403c46:	d00b      	beq.n	403c60 <__udivmoddi4+0x38>
  403c48:	f1ce 0c20 	rsb	ip, lr, #32
  403c4c:	fa01 f50e 	lsl.w	r5, r1, lr
  403c50:	fa20 fc0c 	lsr.w	ip, r0, ip
  403c54:	fa02 f70e 	lsl.w	r7, r2, lr
  403c58:	ea4c 0c05 	orr.w	ip, ip, r5
  403c5c:	fa00 f40e 	lsl.w	r4, r0, lr
  403c60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403c64:	0c25      	lsrs	r5, r4, #16
  403c66:	fbbc f8fa 	udiv	r8, ip, sl
  403c6a:	fa1f f987 	uxth.w	r9, r7
  403c6e:	fb0a cc18 	mls	ip, sl, r8, ip
  403c72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403c76:	fb08 f309 	mul.w	r3, r8, r9
  403c7a:	42ab      	cmp	r3, r5
  403c7c:	d90a      	bls.n	403c94 <__udivmoddi4+0x6c>
  403c7e:	19ed      	adds	r5, r5, r7
  403c80:	f108 32ff 	add.w	r2, r8, #4294967295
  403c84:	f080 8123 	bcs.w	403ece <__udivmoddi4+0x2a6>
  403c88:	42ab      	cmp	r3, r5
  403c8a:	f240 8120 	bls.w	403ece <__udivmoddi4+0x2a6>
  403c8e:	f1a8 0802 	sub.w	r8, r8, #2
  403c92:	443d      	add	r5, r7
  403c94:	1aed      	subs	r5, r5, r3
  403c96:	b2a4      	uxth	r4, r4
  403c98:	fbb5 f0fa 	udiv	r0, r5, sl
  403c9c:	fb0a 5510 	mls	r5, sl, r0, r5
  403ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403ca4:	fb00 f909 	mul.w	r9, r0, r9
  403ca8:	45a1      	cmp	r9, r4
  403caa:	d909      	bls.n	403cc0 <__udivmoddi4+0x98>
  403cac:	19e4      	adds	r4, r4, r7
  403cae:	f100 33ff 	add.w	r3, r0, #4294967295
  403cb2:	f080 810a 	bcs.w	403eca <__udivmoddi4+0x2a2>
  403cb6:	45a1      	cmp	r9, r4
  403cb8:	f240 8107 	bls.w	403eca <__udivmoddi4+0x2a2>
  403cbc:	3802      	subs	r0, #2
  403cbe:	443c      	add	r4, r7
  403cc0:	eba4 0409 	sub.w	r4, r4, r9
  403cc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403cc8:	2100      	movs	r1, #0
  403cca:	2e00      	cmp	r6, #0
  403ccc:	d061      	beq.n	403d92 <__udivmoddi4+0x16a>
  403cce:	fa24 f40e 	lsr.w	r4, r4, lr
  403cd2:	2300      	movs	r3, #0
  403cd4:	6034      	str	r4, [r6, #0]
  403cd6:	6073      	str	r3, [r6, #4]
  403cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cdc:	428b      	cmp	r3, r1
  403cde:	d907      	bls.n	403cf0 <__udivmoddi4+0xc8>
  403ce0:	2e00      	cmp	r6, #0
  403ce2:	d054      	beq.n	403d8e <__udivmoddi4+0x166>
  403ce4:	2100      	movs	r1, #0
  403ce6:	e886 0021 	stmia.w	r6, {r0, r5}
  403cea:	4608      	mov	r0, r1
  403cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cf0:	fab3 f183 	clz	r1, r3
  403cf4:	2900      	cmp	r1, #0
  403cf6:	f040 808e 	bne.w	403e16 <__udivmoddi4+0x1ee>
  403cfa:	42ab      	cmp	r3, r5
  403cfc:	d302      	bcc.n	403d04 <__udivmoddi4+0xdc>
  403cfe:	4282      	cmp	r2, r0
  403d00:	f200 80fa 	bhi.w	403ef8 <__udivmoddi4+0x2d0>
  403d04:	1a84      	subs	r4, r0, r2
  403d06:	eb65 0503 	sbc.w	r5, r5, r3
  403d0a:	2001      	movs	r0, #1
  403d0c:	46ac      	mov	ip, r5
  403d0e:	2e00      	cmp	r6, #0
  403d10:	d03f      	beq.n	403d92 <__udivmoddi4+0x16a>
  403d12:	e886 1010 	stmia.w	r6, {r4, ip}
  403d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d1a:	b912      	cbnz	r2, 403d22 <__udivmoddi4+0xfa>
  403d1c:	2701      	movs	r7, #1
  403d1e:	fbb7 f7f2 	udiv	r7, r7, r2
  403d22:	fab7 fe87 	clz	lr, r7
  403d26:	f1be 0f00 	cmp.w	lr, #0
  403d2a:	d134      	bne.n	403d96 <__udivmoddi4+0x16e>
  403d2c:	1beb      	subs	r3, r5, r7
  403d2e:	0c3a      	lsrs	r2, r7, #16
  403d30:	fa1f fc87 	uxth.w	ip, r7
  403d34:	2101      	movs	r1, #1
  403d36:	fbb3 f8f2 	udiv	r8, r3, r2
  403d3a:	0c25      	lsrs	r5, r4, #16
  403d3c:	fb02 3318 	mls	r3, r2, r8, r3
  403d40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403d44:	fb0c f308 	mul.w	r3, ip, r8
  403d48:	42ab      	cmp	r3, r5
  403d4a:	d907      	bls.n	403d5c <__udivmoddi4+0x134>
  403d4c:	19ed      	adds	r5, r5, r7
  403d4e:	f108 30ff 	add.w	r0, r8, #4294967295
  403d52:	d202      	bcs.n	403d5a <__udivmoddi4+0x132>
  403d54:	42ab      	cmp	r3, r5
  403d56:	f200 80d1 	bhi.w	403efc <__udivmoddi4+0x2d4>
  403d5a:	4680      	mov	r8, r0
  403d5c:	1aed      	subs	r5, r5, r3
  403d5e:	b2a3      	uxth	r3, r4
  403d60:	fbb5 f0f2 	udiv	r0, r5, r2
  403d64:	fb02 5510 	mls	r5, r2, r0, r5
  403d68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403d6c:	fb0c fc00 	mul.w	ip, ip, r0
  403d70:	45a4      	cmp	ip, r4
  403d72:	d907      	bls.n	403d84 <__udivmoddi4+0x15c>
  403d74:	19e4      	adds	r4, r4, r7
  403d76:	f100 33ff 	add.w	r3, r0, #4294967295
  403d7a:	d202      	bcs.n	403d82 <__udivmoddi4+0x15a>
  403d7c:	45a4      	cmp	ip, r4
  403d7e:	f200 80b8 	bhi.w	403ef2 <__udivmoddi4+0x2ca>
  403d82:	4618      	mov	r0, r3
  403d84:	eba4 040c 	sub.w	r4, r4, ip
  403d88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403d8c:	e79d      	b.n	403cca <__udivmoddi4+0xa2>
  403d8e:	4631      	mov	r1, r6
  403d90:	4630      	mov	r0, r6
  403d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d96:	f1ce 0420 	rsb	r4, lr, #32
  403d9a:	fa05 f30e 	lsl.w	r3, r5, lr
  403d9e:	fa07 f70e 	lsl.w	r7, r7, lr
  403da2:	fa20 f804 	lsr.w	r8, r0, r4
  403da6:	0c3a      	lsrs	r2, r7, #16
  403da8:	fa25 f404 	lsr.w	r4, r5, r4
  403dac:	ea48 0803 	orr.w	r8, r8, r3
  403db0:	fbb4 f1f2 	udiv	r1, r4, r2
  403db4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403db8:	fb02 4411 	mls	r4, r2, r1, r4
  403dbc:	fa1f fc87 	uxth.w	ip, r7
  403dc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403dc4:	fb01 f30c 	mul.w	r3, r1, ip
  403dc8:	42ab      	cmp	r3, r5
  403dca:	fa00 f40e 	lsl.w	r4, r0, lr
  403dce:	d909      	bls.n	403de4 <__udivmoddi4+0x1bc>
  403dd0:	19ed      	adds	r5, r5, r7
  403dd2:	f101 30ff 	add.w	r0, r1, #4294967295
  403dd6:	f080 808a 	bcs.w	403eee <__udivmoddi4+0x2c6>
  403dda:	42ab      	cmp	r3, r5
  403ddc:	f240 8087 	bls.w	403eee <__udivmoddi4+0x2c6>
  403de0:	3902      	subs	r1, #2
  403de2:	443d      	add	r5, r7
  403de4:	1aeb      	subs	r3, r5, r3
  403de6:	fa1f f588 	uxth.w	r5, r8
  403dea:	fbb3 f0f2 	udiv	r0, r3, r2
  403dee:	fb02 3310 	mls	r3, r2, r0, r3
  403df2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403df6:	fb00 f30c 	mul.w	r3, r0, ip
  403dfa:	42ab      	cmp	r3, r5
  403dfc:	d907      	bls.n	403e0e <__udivmoddi4+0x1e6>
  403dfe:	19ed      	adds	r5, r5, r7
  403e00:	f100 38ff 	add.w	r8, r0, #4294967295
  403e04:	d26f      	bcs.n	403ee6 <__udivmoddi4+0x2be>
  403e06:	42ab      	cmp	r3, r5
  403e08:	d96d      	bls.n	403ee6 <__udivmoddi4+0x2be>
  403e0a:	3802      	subs	r0, #2
  403e0c:	443d      	add	r5, r7
  403e0e:	1aeb      	subs	r3, r5, r3
  403e10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403e14:	e78f      	b.n	403d36 <__udivmoddi4+0x10e>
  403e16:	f1c1 0720 	rsb	r7, r1, #32
  403e1a:	fa22 f807 	lsr.w	r8, r2, r7
  403e1e:	408b      	lsls	r3, r1
  403e20:	fa05 f401 	lsl.w	r4, r5, r1
  403e24:	ea48 0303 	orr.w	r3, r8, r3
  403e28:	fa20 fe07 	lsr.w	lr, r0, r7
  403e2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403e30:	40fd      	lsrs	r5, r7
  403e32:	ea4e 0e04 	orr.w	lr, lr, r4
  403e36:	fbb5 f9fc 	udiv	r9, r5, ip
  403e3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403e3e:	fb0c 5519 	mls	r5, ip, r9, r5
  403e42:	fa1f f883 	uxth.w	r8, r3
  403e46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403e4a:	fb09 f408 	mul.w	r4, r9, r8
  403e4e:	42ac      	cmp	r4, r5
  403e50:	fa02 f201 	lsl.w	r2, r2, r1
  403e54:	fa00 fa01 	lsl.w	sl, r0, r1
  403e58:	d908      	bls.n	403e6c <__udivmoddi4+0x244>
  403e5a:	18ed      	adds	r5, r5, r3
  403e5c:	f109 30ff 	add.w	r0, r9, #4294967295
  403e60:	d243      	bcs.n	403eea <__udivmoddi4+0x2c2>
  403e62:	42ac      	cmp	r4, r5
  403e64:	d941      	bls.n	403eea <__udivmoddi4+0x2c2>
  403e66:	f1a9 0902 	sub.w	r9, r9, #2
  403e6a:	441d      	add	r5, r3
  403e6c:	1b2d      	subs	r5, r5, r4
  403e6e:	fa1f fe8e 	uxth.w	lr, lr
  403e72:	fbb5 f0fc 	udiv	r0, r5, ip
  403e76:	fb0c 5510 	mls	r5, ip, r0, r5
  403e7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403e7e:	fb00 f808 	mul.w	r8, r0, r8
  403e82:	45a0      	cmp	r8, r4
  403e84:	d907      	bls.n	403e96 <__udivmoddi4+0x26e>
  403e86:	18e4      	adds	r4, r4, r3
  403e88:	f100 35ff 	add.w	r5, r0, #4294967295
  403e8c:	d229      	bcs.n	403ee2 <__udivmoddi4+0x2ba>
  403e8e:	45a0      	cmp	r8, r4
  403e90:	d927      	bls.n	403ee2 <__udivmoddi4+0x2ba>
  403e92:	3802      	subs	r0, #2
  403e94:	441c      	add	r4, r3
  403e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403e9a:	eba4 0408 	sub.w	r4, r4, r8
  403e9e:	fba0 8902 	umull	r8, r9, r0, r2
  403ea2:	454c      	cmp	r4, r9
  403ea4:	46c6      	mov	lr, r8
  403ea6:	464d      	mov	r5, r9
  403ea8:	d315      	bcc.n	403ed6 <__udivmoddi4+0x2ae>
  403eaa:	d012      	beq.n	403ed2 <__udivmoddi4+0x2aa>
  403eac:	b156      	cbz	r6, 403ec4 <__udivmoddi4+0x29c>
  403eae:	ebba 030e 	subs.w	r3, sl, lr
  403eb2:	eb64 0405 	sbc.w	r4, r4, r5
  403eb6:	fa04 f707 	lsl.w	r7, r4, r7
  403eba:	40cb      	lsrs	r3, r1
  403ebc:	431f      	orrs	r7, r3
  403ebe:	40cc      	lsrs	r4, r1
  403ec0:	6037      	str	r7, [r6, #0]
  403ec2:	6074      	str	r4, [r6, #4]
  403ec4:	2100      	movs	r1, #0
  403ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403eca:	4618      	mov	r0, r3
  403ecc:	e6f8      	b.n	403cc0 <__udivmoddi4+0x98>
  403ece:	4690      	mov	r8, r2
  403ed0:	e6e0      	b.n	403c94 <__udivmoddi4+0x6c>
  403ed2:	45c2      	cmp	sl, r8
  403ed4:	d2ea      	bcs.n	403eac <__udivmoddi4+0x284>
  403ed6:	ebb8 0e02 	subs.w	lr, r8, r2
  403eda:	eb69 0503 	sbc.w	r5, r9, r3
  403ede:	3801      	subs	r0, #1
  403ee0:	e7e4      	b.n	403eac <__udivmoddi4+0x284>
  403ee2:	4628      	mov	r0, r5
  403ee4:	e7d7      	b.n	403e96 <__udivmoddi4+0x26e>
  403ee6:	4640      	mov	r0, r8
  403ee8:	e791      	b.n	403e0e <__udivmoddi4+0x1e6>
  403eea:	4681      	mov	r9, r0
  403eec:	e7be      	b.n	403e6c <__udivmoddi4+0x244>
  403eee:	4601      	mov	r1, r0
  403ef0:	e778      	b.n	403de4 <__udivmoddi4+0x1bc>
  403ef2:	3802      	subs	r0, #2
  403ef4:	443c      	add	r4, r7
  403ef6:	e745      	b.n	403d84 <__udivmoddi4+0x15c>
  403ef8:	4608      	mov	r0, r1
  403efa:	e708      	b.n	403d0e <__udivmoddi4+0xe6>
  403efc:	f1a8 0802 	sub.w	r8, r8, #2
  403f00:	443d      	add	r5, r7
  403f02:	e72b      	b.n	403d5c <__udivmoddi4+0x134>

00403f04 <__aeabi_idiv0>:
  403f04:	4770      	bx	lr
  403f06:	bf00      	nop
  403f08:	49202d2d 	.word	0x49202d2d
  403f0c:	45204d43 	.word	0x45204d43
  403f10:	706d6178 	.word	0x706d6178
  403f14:	2d20656c 	.word	0x2d20656c
  403f18:	000a0d2d 	.word	0x000a0d2d
  403f1c:	454d4153 	.word	0x454d4153
  403f20:	582d3037 	.word	0x582d3037
  403f24:	00444c50 	.word	0x00444c50
  403f28:	25202d2d 	.word	0x25202d2d
  403f2c:	000d0a73 	.word	0x000d0a73
  403f30:	353a3131 	.word	0x353a3131
  403f34:	30313a34 	.word	0x30313a34
  403f38:	00000000 	.word	0x00000000
  403f3c:	206e754a 	.word	0x206e754a
  403f40:	32203520 	.word	0x32203520
  403f44:	00323230 	.word	0x00323230
  403f48:	43202d2d 	.word	0x43202d2d
  403f4c:	69706d6f 	.word	0x69706d6f
  403f50:	3a64656c 	.word	0x3a64656c
  403f54:	20732520 	.word	0x20732520
  403f58:	2d207325 	.word	0x2d207325
  403f5c:	000d0a2d 	.word	0x000d0a2d
  403f60:	6d654d20 	.word	0x6d654d20
  403f64:	2079726f 	.word	0x2079726f
  403f68:	69676572 	.word	0x69676572
  403f6c:	20306e6f 	.word	0x20306e6f
  403f70:	6d207369 	.word	0x6d207369
  403f74:	6669646f 	.word	0x6669646f
  403f78:	20646569 	.word	0x20646569
  403f7c:	00000d0a 	.word	0x00000d0a
  403f80:	6d654d20 	.word	0x6d654d20
  403f84:	2079726f 	.word	0x2079726f
  403f88:	69676572 	.word	0x69676572
  403f8c:	20316e6f 	.word	0x20316e6f
  403f90:	6d207369 	.word	0x6d207369
  403f94:	6669646f 	.word	0x6669646f
  403f98:	20646569 	.word	0x20646569
  403f9c:	00000d0a 	.word	0x00000d0a

00403fa0 <_global_impure_ptr>:
  403fa0:	204000d8 33323130 37363534 42413938     ..@ 0123456789AB
  403fb0:	46454443 00000000 33323130 37363534     CDEF....01234567
  403fc0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  403fd0:	0000296c                                l)..

00403fd4 <blanks.7217>:
  403fd4:	20202020 20202020 20202020 20202020                     

00403fe4 <zeroes.7218>:
  403fe4:	30303030 30303030 30303030 30303030     0000000000000000
  403ff4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404004 <_ctype_>:
  404004:	20202000 20202020 28282020 20282828     .         ((((( 
  404014:	20202020 20202020 20202020 20202020                     
  404024:	10108820 10101010 10101010 10101010      ...............
  404034:	04040410 04040404 10040404 10101010     ................
  404044:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404054:	01010101 01010101 01010101 10101010     ................
  404064:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404074:	02020202 02020202 02020202 10101010     ................
  404084:	00000020 00000000 00000000 00000000      ...............
	...

00404108 <_init>:
  404108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40410a:	bf00      	nop
  40410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40410e:	bc08      	pop	{r3}
  404110:	469e      	mov	lr, r3
  404112:	4770      	bx	lr

00404114 <__init_array_start>:
  404114:	00402079 	.word	0x00402079

00404118 <__frame_dummy_init_array_entry>:
  404118:	0040018d                                ..@.

0040411c <_fini>:
  40411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40411e:	bf00      	nop
  404120:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404122:	bc08      	pop	{r3}
  404124:	469e      	mov	lr, r3
  404126:	4770      	bx	lr

00404128 <__fini_array_start>:
  404128:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <message_sha_0>:
20400010:	6261 8063 0000 0000 0000 0000 0000 0000     abc.............
	...
2040004c:	0000 1800                                   ....

20400050 <message_sha_1_main>:
20400050:	6261 6463 6362 6564 6463 6665 6564 6766     abcdbcdecdefdefg
20400060:	6665 6867 6766 6968 6867 6a69 6968 6b6a     efghfghighijhijk
20400070:	6a69 6c6b 6b6a 6d6c 6c6b 6e6d 6d6c 6f6e     ijkljklmklmnlmno
20400080:	6e6d 706f 6f6e 7170 0080 0000 0000 0000     mnopnopq........

20400090 <message_sha_1_sec>:
	...
204000cc:	0000 c001                                   ....

204000d0 <_impure_ptr>:
204000d0:	00d8 2040 0000 0000                         ..@ ....

204000d8 <impure_data>:
204000d8:	0000 0000 03c4 2040 042c 2040 0494 2040     ......@ ,.@ ..@ 
	...
20400180:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400190:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400500 <__atexit_recursive_mutex>:
20400500:	0ca0 2040                                   ..@ 

20400504 <__global_locale>:
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400544:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400564:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400584:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005e4:	3961 0040 3071 0040 0000 0000 4004 0040     a9@.q0@......@@.
204005f4:	4000 0040 3f38 0040 3f38 0040 3f38 0040     .@@.8?@.8?@.8?@.
20400604:	3f38 0040 3f38 0040 3f38 0040 3f38 0040     8?@.8?@.8?@.8?@.
20400614:	3f38 0040 3f38 0040 ffff ffff ffff ffff     8?@.8?@.........
20400624:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040064c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20400670 <__malloc_av_>:
	...
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 
204009e8:	09e0 2040 09e0 2040 09e8 2040 09e8 2040     ..@ ..@ ..@ ..@ 
204009f8:	09f0 2040 09f0 2040 09f8 2040 09f8 2040     ..@ ..@ ..@ ..@ 
20400a08:	0a00 2040 0a00 2040 0a08 2040 0a08 2040     ..@ ..@ ..@ ..@ 
20400a18:	0a10 2040 0a10 2040 0a18 2040 0a18 2040     ..@ ..@ ..@ ..@ 
20400a28:	0a20 2040 0a20 2040 0a28 2040 0a28 2040      .@  .@ (.@ (.@ 
20400a38:	0a30 2040 0a30 2040 0a38 2040 0a38 2040     0.@ 0.@ 8.@ 8.@ 
20400a48:	0a40 2040 0a40 2040 0a48 2040 0a48 2040     @.@ @.@ H.@ H.@ 
20400a58:	0a50 2040 0a50 2040 0a58 2040 0a58 2040     P.@ P.@ X.@ X.@ 
20400a68:	0a60 2040 0a60 2040 0a68 2040 0a68 2040     `.@ `.@ h.@ h.@ 

20400a78 <__malloc_sbrk_base>:
20400a78:	ffff ffff                                   ....

20400a7c <__malloc_trim_threshold>:
20400a7c:	0000 0002                                   ....
